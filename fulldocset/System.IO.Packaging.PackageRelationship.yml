### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageRelationship
  id: PackageRelationship
  children:
  - System.IO.Packaging.PackageRelationship.Id
  - System.IO.Packaging.PackageRelationship.Package
  - System.IO.Packaging.PackageRelationship.RelationshipType
  - System.IO.Packaging.PackageRelationship.SourceUri
  - System.IO.Packaging.PackageRelationship.TargetMode
  - System.IO.Packaging.PackageRelationship.TargetUri
  langs:
  - csharp
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
  type: Class
  summary: "表示一个源之间的关联<xref href=&quot;System.IO.Packaging.Package&quot;></xref>或<xref href=&quot;System.IO.Packaging.PackagePart&quot;> </xref>，和一个目标对象可以是<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>或外部的资源。"
  remarks: "PackageRelationship 定义之间的关联*源*<xref:System.IO.Packaging.Package>或<xref:System.IO.Packaging.PackagePart>到*目标*<xref:System.IO.Packaging.PackagePart>或外部的资源。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package>  源对象被视为关系&quot;所有者&quot;。       PackageRelationship 类具有公共构造函数;相反，使用两种创建方法: | | |  |-|-|  |<xref:System.IO.Packaging.Package>.<xref:System.IO.Packaging.Package.CreateRelationship%2A>|创建的&quot;包级别&quot;关系 — 从到指定的部分或外部的资源包。 |  |<xref:System.IO.Packaging.PackagePart>.<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>|创建&quot;部分级&quot;关系 — 从一部分到另一个部件或外部的资源。 |      由标识源的包或部件<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>的关系属性。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package.CreateRelationship%2A> </xref:System.IO.Packaging.Package>  由标识目标部分或外部资源<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>的关系属性。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       创建或删除的关系不会影响以任何方式的源或目标对象。       如果删除源对象，则也将删除对象拥有的所有关系。       关系可以在文档和文档之间的导航。  关系还支持文档对象模型服务，例如链接<xref:System.Printing.PrintTicket>到特定文档元素在打印时。</xref:System.Printing.PrintTicket>       详细了解 PackageRelationship 元素请参阅部分 1.3&quot;关系&quot;中*开放式打包约定*规范下载[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public class PackageRelationship
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Id
  id: Id
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取一个字符串，标识关系。"
  remarks: "Id 属性字符串是唯一的归<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>包或部件</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>的所有关系       对的调用中指定 Id**包**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>创建关系的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  创建关系后，无法更改 Id。       Id 属性字符串是有效的 XML 标识符。 Id 类型是 xsd:ID 并且必须遵循中规定的命名约定*XML 架构第 2 部分︰ 数据类型*规范 (请参阅[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))。"
  syntax:
    content: public string Id { get; }
    return:
      type: System.String
      description: "一个字符串，标识关系。"
  overload: System.IO.Packaging.PackageRelationship.Id*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.Package
  id: Package
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取<xref href=&quot;System.IO.Packaging.Package&quot;> </xref> ，其中包含此关系。"
  remarks: "有关详细信息<xref:System.IO.Packaging.Package>元素请参阅*开放式打包约定*规范下载[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。</xref:System.IO.Packaging.Package>"
  syntax:
    content: public System.IO.Packaging.Package Package { get; }
    return:
      type: System.IO.Packaging.Package
      description: "包含此关系的包。"
  overload: System.IO.Packaging.PackageRelationship.Package*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  id: RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取关系的限定的类型名称。"
  remarks: "调用中指定的 RelationshipType**包**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>创建关系的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A>  创建关系之后，才能更改 RelationshipType。       RelationshipType URI 类似的语法中定义，并标识的关系的角色。 例如，&quot;http://schemas.microsoft.com/xps/2005/06/required-resource&quot;标识与目标属于&quot;所需的资源。&quot;之间的关系       **包级关系类型**|说明 |关系类型 |  |-----------------|-----------------------|  |核心属性 | http://schemas.microsoft.com/package/2006/relationships/metadata/core-properties |  |数字签名 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/signature |  |数字签名证书 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/certificate |  |数字签名来源 | http://schemas.microsoft.com/package/2006/relationships/digital-signature/origin |  | 缩略图 | http://schemas.microsoft.com/package/2006/relationships/metadata/thumbnail |      有关包关系的详细信息类型请参阅第 3 章和附录 I*开放式打包约定*规范下载[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public string RelationshipType { get; }
    return:
      type: System.String
      description: "关系的限定的类型名称。"
  overload: System.IO.Packaging.PackageRelationship.RelationshipType*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  id: SourceUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的包或拥有关系的一部分。"
  remarks: "如果关系归<xref:System.IO.Packaging.Package>，SourceUri 返回的 URI&quot;/&quot;。</xref:System.IO.Packaging.Package>       如果关系归<xref:System.IO.Packaging.PackagePart>、 SourceUri 返回部件的 URI</xref:System.IO.Packaging.PackagePart>"
  syntax:
    content: public Uri SourceUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的<xref href=&quot;System.IO.Packaging.Package&quot;></xref>或<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>拥有关系。"
  overload: System.IO.Packaging.PackageRelationship.SourceUri*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  id: TargetMode
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取一个值，该值指示关系的目标是否<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>到<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。"
  remarks: "调用中指定 TargetMode**包**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>创建关系的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 创建关系后 TargetMode 不能更改。       TargetMode 时<xref:System.IO.Packaging.TargetMode>、<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>必须是相对的引用。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  对于包级别的关系的相对引用<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>解析相对于拥有和包含关系的源包的包 URI。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>  (示例源包包 URI:&quot;pack://http:、 www.adatum.com、 files,datapak.package/&quot;。)对于部分级的关系，<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>处于已解决状态相对于拥有关系的源部分 (<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>解释相对于<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>)。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       TargetMode 时<xref:System.IO.Packaging.TargetMode>、<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>可以是相对的引用或完全限定的 URI。</xref:System.IO.Packaging.PackageRelationship.TargetUri%2A> </xref:System.IO.Packaging.TargetMode>  如果<xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>是相对的引用，引用将解释位置相对<xref:System.IO.Packaging.Package>，其中包含此关系。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.PackageRelationship.TargetUri%2A>       有关 TargetMode 详细信息请参阅部分 1.3.3&quot;关系标记&quot;的*开放式打包约定*规范下载[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.TargetMode TargetMode { get; }
    return:
      type: System.IO.Packaging.TargetMode
      description: "一个枚举值，该值指示是否<xref:System.IO.Packaging.PackageRelationship.TargetUri*>引用的资源<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>到<xref href=&quot;System.IO.Packaging.Package&quot;> </xref>。</xref:System.IO.Packaging.PackageRelationship.TargetUri*>"
  overload: System.IO.Packaging.PackageRelationship.TargetMode*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  id: TargetUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]关系的目标资源。"
  remarks: "调用中指定 TargetUri**包**。<xref:System.IO.Packaging.Package.CreateRelationship%2A>或**PackagePart**。<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A>创建关系的方法。</xref:System.IO.Packaging.PackagePart.CreateRelationship%2A> </xref:System.IO.Packaging.Package.CreateRelationship%2A> 创建关系之后无法更改 TargetUri。       当<xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>是<xref:System.IO.Packaging.TargetMode>，TargetUri 必须是相对的引用。</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  对于包级别的关系，TargetUri 相对引用解析相对于拥有和包含关系的源包的包 URI。  (示例源包包 URI:&quot;pack://http:、 www.adatum.com、 files,datapak.package/&quot;。)对于部分级关系，TargetUri 是解析相对于拥有关系的源部分 (TargetUri 解释相对于<xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>)。</xref:System.IO.Packaging.PackageRelationship.SourceUri%2A>       当<xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>是<xref:System.IO.Packaging.TargetMode>，TargetUri 可以是相对的引用或完全限定的 URI。</xref:System.IO.Packaging.TargetMode> </xref:System.IO.Packaging.PackageRelationship.TargetMode%2A>  如果 TargetUri 是相对的引用，引用将解释位置相对<xref:System.IO.Packaging.Package>，其中包含此关系。</xref:System.IO.Packaging.Package>       有关 TargetUri 详细信息请参阅部分 1.3.3&quot;关系标记&quot;的*开放式打包约定*规范下载[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public Uri TargetUri { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的目标资源。"
  overload: System.IO.Packaging.PackageRelationship.TargetUri*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IO.Packaging.PackageRelationship.Id
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
  fullName: System.IO.Packaging.PackageRelationship.Id
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.PackageRelationship.Package
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
  fullName: System.IO.Packaging.PackageRelationship.Package
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
- uid: System.IO.Packaging.PackageRelationship.Id*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Id
  nameWithType: PackageRelationship.Id
- uid: System.IO.Packaging.PackageRelationship.Package*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: Package
  nameWithType: PackageRelationship.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: RelationshipType
  nameWithType: PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: SourceUri
  nameWithType: PackageRelationship.SourceUri
- uid: System.IO.Packaging.PackageRelationship.TargetMode*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetMode
  nameWithType: PackageRelationship.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri*
  parent: System.IO.Packaging.PackageRelationship
  isExternal: false
  name: TargetUri
  nameWithType: PackageRelationship.TargetUri
