### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceController
  id: ServiceController
  children:
  - System.ServiceProcess.ServiceController.#ctor
  - System.ServiceProcess.ServiceController.#ctor(System.String)
  - System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  - System.ServiceProcess.ServiceController.CanPauseAndContinue
  - System.ServiceProcess.ServiceController.CanShutdown
  - System.ServiceProcess.ServiceController.CanStop
  - System.ServiceProcess.ServiceController.Close
  - System.ServiceProcess.ServiceController.Continue
  - System.ServiceProcess.ServiceController.DependentServices
  - System.ServiceProcess.ServiceController.DisplayName
  - System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  - System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  - System.ServiceProcess.ServiceController.GetDevices
  - System.ServiceProcess.ServiceController.GetDevices(System.String)
  - System.ServiceProcess.ServiceController.GetServices
  - System.ServiceProcess.ServiceController.GetServices(System.String)
  - System.ServiceProcess.ServiceController.MachineName
  - System.ServiceProcess.ServiceController.Pause
  - System.ServiceProcess.ServiceController.Refresh
  - System.ServiceProcess.ServiceController.ServiceHandle
  - System.ServiceProcess.ServiceController.ServiceName
  - System.ServiceProcess.ServiceController.ServicesDependedOn
  - System.ServiceProcess.ServiceController.ServiceType
  - System.ServiceProcess.ServiceController.Start
  - System.ServiceProcess.ServiceController.Start(System.String[])
  - System.ServiceProcess.ServiceController.StartType
  - System.ServiceProcess.ServiceController.Status
  - System.ServiceProcess.ServiceController.Stop
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  - System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  langs:
  - csharp
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController
  type: Class
  summary: "表示 Windows 服务并允许你连接到运行还是已停止的服务、 对其进行操作或获取其相关信息。"
  remarks: "ServiceController 类可用于连接到并控制现有服务的行为。 在创建 ServiceController 类的实例时，你将设置其属性，以便它与特定的 Windows 服务进行交互。 然后可以使用类来启动、 停止和以其他方式操作服务。       很可能将在管理容量 ServiceController 组件。 例如，你可以创建的 Windows 或 Web 应用程序将自定义命令发送到通过 ServiceController 实例的服务。 因为服务控制管理器 (SCM) Microsoft 管理控制台管理单元中不支持自定义命令，这会很有用。       创建的 ServiceController 实例后，你必须于该功能来标识它进行交互的服务设置两个属性︰ 计算机名称和你想要控制服务的名称。      1> [!NOTE]&1;> 默认情况下，<xref:System.ServiceProcess.ServiceController.MachineName%2A>设置为本地计算机，因此不需要更改它，除非你想要设置要指向另一台计算机的实例。</xref:System.ServiceProcess.ServiceController.MachineName%2A>       通常情况下，服务作者编写的自定义与特定命令关联的操作的代码。 例如，一个服务可以包含代码以响应<xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName>命令。</xref:System.ServiceProcess.ServiceBase.OnPause%2A?displayProperty=fullName> 在这种情况下，自定义处理<xref:System.ServiceProcess.ServiceController.Pause%2A>任务运行之前系统可以暂停服务。</xref:System.ServiceProcess.ServiceController.Pause%2A>       服务可以处理的命令集取决于其属性︰例如，你可以设置<xref:System.ServiceProcess.ServiceController.CanStop%2A>到服务的属性`false`。</xref:System.ServiceProcess.ServiceController.CanStop%2A> 此设置呈现`Stop`命令对该特定服务不可用; 它不允许您通过禁用必要按钮停止 SCM 中的服务。 如果你尝试停止在代码中的服务，系统将引发错误，并显示错误消息&quot;无法停止`servicename`。&quot;"
  example:
  - "The following example demonstrates the use of the ServiceController class to control the `SimpleService` service example.  \n  \n [!code-cs[ServiceControllerClass#1](~/add/codesnippet/csharp/t-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._6_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.ServiceProcess.Design.ServiceControllerDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ServiceProcess.ServiceProcessDescription("ServiceControllerDesc")]

      public class ServiceController : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "初始化的新实例<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>不与特定的服务相关联的类。"
  syntax:
    content: public ServiceController ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "初始化的新实例<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>与本地计算机上的现有服务相关联的类。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the ServiceController constructor to create a <xref:System.ServiceProcess.ServiceController> object that is used to control a sample service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/m-system.serviceprocess._0_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public ServiceController (string name);
    parameters:
    - id: name
      type: System.String
      description: "向系统标识该服务的名称。 这可以是服务的显示名称。"
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>是无效的。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "初始化的新实例<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>与指定的计算机上现有的服务相关联的类。"
  remarks: "有关`machineName`参数，你可以使用&quot;。&quot;来表示本地计算机。"
  syntax:
    content: public ServiceController (string name, string machineName);
    parameters:
    - id: name
      type: System.String
      description: "向系统标识该服务的名称。 这可以是服务的显示名称。"
    - id: machineName
      type: System.String
      description: "该服务所驻留的计算机。"
  overload: System.ServiceProcess.ServiceController.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>是无效的。       -或-<code>machineName</code>无效。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  id: CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取一个值，该值指示是否可以暂停和恢复服务。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanPauseAndContinue property to determine whether a service can pause and continue. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._8_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public bool CanPauseAndContinue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以暂停服务;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanShutdown
  id: CanShutdown
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取一个值，该值指示当系统关闭时是否应通知服务。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanShutdown property to determine whether a service provides a handler for a shutdown event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._6_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public bool CanShutdown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果系统正在关闭; 时，则应通知服务否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceProcess.ServiceController.CanShutdown*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.CanStop
  id: CanStop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取一个值，该值指示此服务是否能够启动后将其停止。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the CanStop property to determine whether a service provides a handler for a stop event. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#2](~/add/codesnippet/csharp/p-system.serviceprocess._1_1.cs)]\n [!code-vb[ServiceControllerClass#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public bool CanStop { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此服务能够停止和<xref:System.ServiceProcess.ServiceBase.OnStop*>方法调用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceProcess.ServiceBase.OnStop*>"
  overload: System.ServiceProcess.ServiceController.CanStop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Close
  id: Close
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "断开连接这<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>从服务实例，并释放实例分配的所有资源。"
  remarks: "关闭释放与关联的所有句柄<xref:System.ServiceProcess.ServiceController>实例。</xref:System.ServiceProcess.ServiceController>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Close*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Continue
  id: Continue
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "已暂停它后，请继续该服务。"
  remarks: "在继续调用服务时，其状态第一次变为`ContinuePending`，然后，继续方法返回时，它将更改为`Running`。       不能调用服务继续，直到服务控制器状态为`Paused`。"
  example:
  - "The following example demonstrates the use of the Continue method to continue a paused service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#5](~/add/codesnippet/csharp/m-system.serviceprocess._2_1.cs)]\n [!code-vb[ServiceControllerClass#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public void Continue ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Continue*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DependentServices
  id: DependentServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取依赖于与此关联的服务的服务集<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>实例。"
  remarks: "DependentServices 数组均表示系统将停止，如果你的应用程序调用的服务<xref:System.ServiceProcess.ServiceController.Stop%2A>此服务。</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._4_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._4_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] DependentServices { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个都是与依赖于此服务的服务关联的实例。"
  overload: System.ServiceProcess.ServiceController.DependentServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.DisplayName
  id: DisplayName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置服务的友好名称。"
  remarks: "你可以将 DisplayName 设置为一个空字符串 (&quot;&quot;)，但将属性设置为`null`引发异常。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that are dependent on the Event Log service.  \n  \n [!code-cs[ServiceController#3](~/add/codesnippet/csharp/p-system.serviceprocess._3_1.cs)]\n [!code-cpp[ServiceController#3](~/add/codesnippet/cpp/p-system.serviceprocess._3_1.cpp)]\n [!code-vb[ServiceController#3](~/add/codesnippet/visualbasic/p-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public string DisplayName { get; set; }
    return:
      type: System.String
      description: "服务可以用于标识服务的友好名称。"
  overload: System.ServiceProcess.ServiceController.DisplayName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "DisplayName 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "释放由非托管的资源<xref href=&quot;System.ServiceProcess.ServiceController&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.ServiceProcess.ServiceController>引用。</xref:System.ServiceProcess.ServiceController> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.ServiceProcess.ServiceController.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  id: ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "在服务上执行自定义命令。"
  remarks: "在调用 ExecuteCommand 时，服务的状态不会更改。 如果服务已启动，则状态仍然`Running`。 如果服务已停止，状态保持`Stopped`，依次类推。 若要处理的自定义命令，该服务必须重写<xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>方法提供的处理程序标识的命令和`command`参数。</xref:System.ServiceProcess.ServiceBase.OnCustomCommand%2A>"
  example:
  - "The following code example shows the use of the ExecuteCommand method to execute custom commands in the `SimpleService` service example.  \n  \n [!code-cs[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/csharp/m-system.serviceprocess._5_1.cs)]\n [!code-vb[ServiceContoller_ExecuteCommand#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._5_1.vb)]"
  syntax:
    content: public void ExecuteCommand (int command);
    parameters:
    - id: command
      type: System.Int32
      description: "应用程序定义的命令标志，指示要执行的自定义命令。 值必须介于 128 和 256，（含) 之间。"
  overload: System.ServiceProcess.ServiceController.ExecuteCommand*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices
  id: GetDevices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "检索本地计算机上的设备驱动程序服务。"
  remarks: "GetDevices 只返回设备驱动程序服务从本地计算机。 若要检索的非设备驱动程序服务或不是驱动程序的服务，请调用<xref:System.ServiceProcess.ServiceController.GetServices%2A>方法。</xref:System.ServiceProcess.ServiceController.GetServices%2A> 在一起，这两种方法提供对所有服务的访问的计算机上。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/m-system.serviceprocess._6_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/m-system.serviceprocess._6_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/m-system.serviceprocess._6_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "类型的数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个元素均与本地计算机上的设备驱动程序服务关联。"
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  id: GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "检索指定的计算机上的设备驱动程序服务。"
  remarks: "<xref:System.ServiceProcess.ServiceController.GetDevices%2A>从指定的计算机返回仅设备驱动程序服务。</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 若要检索的非设备驱动程序服务或不是驱动程序的服务，请调用<xref:System.ServiceProcess.ServiceController.GetServices%2A>方法。</xref:System.ServiceProcess.ServiceController.GetServices%2A> 在一起，这两种方法提供对所有服务的访问的计算机上。"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetDevices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "将计算机从其检索设备驱动程序服务。"
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "类型的数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个元素均与指定的计算机上的设备驱动程序服务关联。"
  overload: System.ServiceProcess.ServiceController.GetDevices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code>参数具有无效的语法。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices
  id: GetServices
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "检索设备驱动程序服务除外的本地计算机上的所有服务。"
  remarks: "GetServices 返回仅的非设备驱动程序服务和不是来自本地计算机的驱动程序的服务。 若要检索设备驱动程序服务，请调用<xref:System.ServiceProcess.ServiceController.GetDevices%2A>方法。</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 在一起，这两种方法提供对所有服务的访问的计算机上。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the services that are running on the local computer.  \n  \n [!code-cs[ServiceController#6](~/add/codesnippet/csharp/m-system.serviceprocess._7_1.cs)]\n [!code-cpp[ServiceController#6](~/add/codesnippet/cpp/m-system.serviceprocess._7_1.cpp)]\n [!code-vb[ServiceController#6](~/add/codesnippet/visualbasic/m-system.serviceprocess._7_1.vb)]"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices ();
    parameters: []
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "类型的数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个元素均与本地计算机上的服务关联。"
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  id: GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "检索指定的计算机，除外的设备驱动程序服务上的所有服务。"
  remarks: "<xref:System.ServiceProcess.ServiceController.GetServices%2A>返回仅的非设备驱动程序服务和不是从指定的计算机的驱动程序的服务。</xref:System.ServiceProcess.ServiceController.GetServices%2A> 若要检索设备驱动程序服务，请调用<xref:System.ServiceProcess.ServiceController.GetDevices%2A>方法。</xref:System.ServiceProcess.ServiceController.GetDevices%2A> 在一起，这两种方法提供对所有服务的访问的计算机上。"
  syntax:
    content: public static System.ServiceProcess.ServiceController[] GetServices (string machineName);
    parameters:
    - id: machineName
      type: System.String
      description: "要从中检索服务计算机。"
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "类型的数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个元素均与指定的计算机上的服务关联。"
  overload: System.ServiceProcess.ServiceController.GetServices*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> machineName </code>参数具有无效的语法。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.MachineName
  id: MachineName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置此服务所驻留的计算机的名称。"
  remarks: "计算机名称是运行此服务，而无需前面的反斜杠字符的服务器的名称 (\\\\\\\\)。"
  syntax:
    content: public string MachineName { get; set; }
    return:
      type: System.String
      description: "运行与此关联的服务的计算机的名称<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>实例。 默认值为本地计算机 (&quot;。&quot;)。"
  overload: System.ServiceProcess.ServiceController.MachineName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "MachineName 语法无效。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Pause
  id: Pause
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "挂起服务的操作。"
  remarks: "不能调用<xref:System.ServiceProcess.ServiceController.Continue%2A>服务的服务控制器状态之前`Paused`。</xref:System.ServiceProcess.ServiceController.Continue%2A>"
  example:
  - "The following example demonstrates the use of the Pause method to pause a service. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._4_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._4_1.vb)]"
  syntax:
    content: public void Pause ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Pause*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Refresh
  id: Refresh
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "通过将属性重置为其当前值刷新属性值。"
  remarks: "刷新方法使<xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>， <xref:System.ServiceProcess.ServiceController.DependentServices%2A>，和<xref:System.ServiceProcess.ServiceController.Status%2A>属性被重置为其当前值在下一步引用时。</xref:System.ServiceProcess.ServiceController.Status%2A> </xref:System.ServiceProcess.ServiceController.DependentServices%2A> </xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example demonstrates the use of the Refresh method to obtain the status of a service. The code instructs a service to pause, and then waits for the status to reflect the change. This example is part of a larger example that is provided for the <xref:System.ServiceProcess.ServiceController> class.  \n  \n [!code-cs[ServiceControllerClass#4](~/add/codesnippet/csharp/m-system.serviceprocess._3_1.cs)]\n [!code-vb[ServiceControllerClass#4](~/add/codesnippet/visualbasic/m-system.serviceprocess._3_1.vb)]"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  id: ServiceHandle
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取服务的句柄。"
  syntax:
    content: public System.Runtime.InteropServices.SafeHandle ServiceHandle { get; }
    return:
      type: System.Runtime.InteropServices.SafeHandle
      description: "A<xref:System.Runtime.InteropServices.SafeHandle>包含服务的句柄。</xref:System.Runtime.InteropServices.SafeHandle>"
  overload: System.ServiceProcess.ServiceController.ServiceHandle*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceName
  id: ServiceName
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置标识对此实例引用的服务的名称。"
  remarks: "ServiceName 标识的服务到服务控制管理器。 更改此属性会导致<xref:System.ServiceProcess.ServiceController>实例绑定到另一个服务，它不会更改哪些服务控制管理器的 Microsoft 管理控制台管理单元中显示。</xref:System.ServiceProcess.ServiceController>       在实现自定义服务时，此属性的值必须与记录中<xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的相应的<xref:System.ServiceProcess.ServiceInstaller>类</xref:System.ServiceProcess.ServiceInstaller>的属性</xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A>的服务的名称相同 在代码中，ServiceName 通常设置`main()`函数的可执行文件。       设置的属性的方法重置 ServiceName 属性时，设置此实例的<xref:System.ServiceProcess.ServiceController.DisplayName%2A>为空字符串 (&quot;&quot;)。</xref:System.ServiceProcess.ServiceController.DisplayName%2A>"
  syntax:
    content: public string ServiceName { get; set; }
    return:
      type: System.String
      description: "标识的服务的名称此<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>实例引用。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.ServiceProcess.ServiceController.ServiceName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "ServiceName 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "ServiceName 属性的语法无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  id: ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "此服务所依赖的服务集。"
  remarks: "如果未运行 ServicesDependedOn 数组中的任何服务，你将无法启动此服务。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the set of services that the Messenger service is dependent on.  \n  \n [!code-cs[ServiceController#4](~/add/codesnippet/csharp/p-system.serviceprocess._2_1.cs)]\n [!code-cpp[ServiceController#4](~/add/codesnippet/cpp/p-system.serviceprocess._2_1.cpp)]\n [!code-vb[ServiceController#4](~/add/codesnippet/visualbasic/p-system.serviceprocess._2_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceController[] ServicesDependedOn { get; }
    return:
      type: System.ServiceProcess.ServiceController[]
      description: "数组<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>其中每个都是与必须运行此服务运行的服务关联的实例。"
  overload: System.ServiceProcess.ServiceController.ServicesDependedOn*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.ServiceType
  id: ServiceType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取此对象引用的服务的类型。"
  remarks: "服务类型指示系统如何使用服务。 ServiceType 属性的值表示一组使用按位 OR 运算符组合的标志。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to display the device driver services on the local computer.  \n  \n [!code-cs[ServiceController#5](~/add/codesnippet/csharp/p-system.serviceprocess._9_1.cs)]\n [!code-cpp[ServiceController#5](~/add/codesnippet/cpp/p-system.serviceprocess._9_1.cpp)]\n [!code-vb[ServiceController#5](~/add/codesnippet/visualbasic/p-system.serviceprocess._9_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceType ServiceType { get; }
    return:
      type: System.ServiceProcess.ServiceType
      description: "之一<xref href=&quot;System.ServiceProcess.ServiceType&quot;></xref>值，用于指示网络服务类型。"
  overload: System.ServiceProcess.ServiceController.ServiceType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start
  id: Start
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "启动服务，不传递任何参数。"
  remarks: "不能调用<xref:System.ServiceProcess.ServiceController.Stop%2A>服务的服务控制器状态之前`Running`。</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/m-system.serviceprocess._8_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/m-system.serviceprocess._8_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/m-system.serviceprocess._8_1.vb)]"
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  id: Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "启动服务，传递指定的参数。"
  remarks: "不能调用<xref:System.ServiceProcess.ServiceController.Stop%2A>服务的服务控制器状态之前`Running`。</xref:System.ServiceProcess.ServiceController.Stop%2A>"
  syntax:
    content: public void Start (string[] args);
    parameters:
    - id: args
      type: System.String[]
      description: "要在启动时传递给服务的参数的数组。"
  overload: System.ServiceProcess.ServiceController.Start*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "无法启动服务。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-数组的成员是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.StartType
  id: StartType
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取一个值，该值指示如何表示的服务<xref href=&quot;System.ServiceProcess.ServiceController&quot;></xref>对象启动。"
  syntax:
    content: public System.ServiceProcess.ServiceStartMode StartType { get; }
    return:
      type: System.ServiceProcess.ServiceStartMode
      description: "一个值，指示该服务的启动方式。"
  overload: System.ServiceProcess.ServiceController.StartType*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Status
  id: Status
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取由此实例引用的服务的状态。"
  remarks: "状态指示服务的当前状态。 可能的值集包括的多个指示状态更改命令是否处于挂起状态。"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/p-system.serviceprocess._0_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/p-system.serviceprocess._0_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/p-system.serviceprocess._0_1.vb)]"
  syntax:
    content: public System.ServiceProcess.ServiceControllerStatus Status { get; }
    return:
      type: System.ServiceProcess.ServiceControllerStatus
      description: "之一<xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;></xref>值，该值指示是否服务正在运行、 已停止，或暂停，或是否启动、 停止、 暂停或继续命令处于挂起状态。"
  overload: System.ServiceProcess.ServiceController.Status*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.Stop
  id: Stop
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "停止此服务和任何依赖于此服务的服务。"
  remarks: "如果任何服务依赖于其操作此服务，它们将被停止之前已停止此服务。 <xref:System.ServiceProcess.ServiceController.DependentServices%2A>属性包含的服务依赖于此集。</xref:System.ServiceProcess.ServiceController.DependentServices%2A>       如果停止此服务依赖于服务，请对此服务在父服务停止方法内调用停止方法。 <xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>属性包含此服务所依赖的服务。</xref:System.ServiceProcess.ServiceController.ServicesDependedOn%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check the current status of the Telnet service. If the service is stopped, the example starts the service. If the service is running, the example stops the service.  \n  \n [!code-cs[ServiceController#2](~/add/codesnippet/csharp/m-system.serviceprocess._1_1.cs)]\n [!code-cpp[ServiceController#2](~/add/codesnippet/cpp/m-system.serviceprocess._1_1.cpp)]\n [!code-vb[ServiceController#2](~/add/codesnippet/visualbasic/m-system.serviceprocess._1_1.vb)]"
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.ServiceProcess.ServiceController.Stop*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "访问 API 的系统时出错。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到该服务。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "无休止的等待服务达到指定的状态。"
  remarks: "使用 WaitForStatus 挂起应用程序的处理，直到该服务已达到所需的状态。      1> [!NOTE] 1><xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>方法等待约 250 毫秒之间每个状态检查。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>无法检测到更改为观察到服务的事例`desiredStatus`，然后立即到另一个状态在此间隔期间。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  example:
  - "The following example uses the <xref:System.ServiceProcess.ServiceController> class to check whether the Alerter service is stopped. If the service is stopped, the example starts the service and waits until the service status is set to <xref:System.ServiceProcess.ServiceControllerStatus>.  \n  \n [!code-cs[ServiceController#1](~/add/codesnippet/csharp/82fc1460-0a6f-432e-81a5-_1.cs)]\n [!code-cpp[ServiceController#1](~/add/codesnippet/cpp/82fc1460-0a6f-432e-81a5-_1.cpp)]\n [!code-vb[ServiceController#1](~/add/codesnippet/visualbasic/82fc1460-0a6f-432e-81a5-_1.vb)]"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "要等待的状态。"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code>参数不是任何中定义的值<xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;></xref>枚举。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  id: WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  langs:
  - csharp
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "等待服务达到指定的状态或指定的超时过期。"
  remarks: "使用<xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>挂起应用程序的处理，直到该服务已达到所需的状态。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>      1> [!NOTE] 1><xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>方法等待约 250 毫秒之间每个状态检查。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>  <xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>无法检测到更改为观察到服务的事例`desiredStatus`，然后立即到另一个状态在此间隔期间。</xref:System.ServiceProcess.ServiceController.WaitForStatus%2A>"
  syntax:
    content: public void WaitForStatus (System.ServiceProcess.ServiceControllerStatus desiredStatus, TimeSpan timeout);
    parameters:
    - id: desiredStatus
      type: System.ServiceProcess.ServiceControllerStatus
      description: "要等待的状态。"
    - id: timeout
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>对象，它指定等待服务达到指定的状态的时间量。</xref:System.TimeSpan>"
  overload: System.ServiceProcess.ServiceController.WaitForStatus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> desiredStatus </code>参数不是任何中定义的值<xref href=&quot;System.ServiceProcess.ServiceControllerStatus&quot;></xref>枚举。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "为指定的值<code> timeout </code>参数过期。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.ServiceProcess.ServiceController.#ctor
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController()
  nameWithType: ServiceController.ServiceController()
  fullName: System.ServiceProcess.ServiceController.ServiceController()
- uid: System.ServiceProcess.ServiceController.#ctor(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String)
  nameWithType: ServiceController.ServiceController(String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceController.#ctor(System.String,System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController(String,String)
  nameWithType: ServiceController.ServiceController(String,String)
  fullName: System.ServiceProcess.ServiceController.ServiceController(String,String)
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
  fullName: System.ServiceProcess.ServiceController.CanPauseAndContinue
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceProcess.ServiceController.CanShutdown
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
  fullName: System.ServiceProcess.ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
  fullName: System.ServiceProcess.ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close()
  nameWithType: ServiceController.Close()
  fullName: System.ServiceProcess.ServiceController.Close()
- uid: System.ServiceProcess.ServiceController.Continue
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue()
  nameWithType: ServiceController.Continue()
  fullName: System.ServiceProcess.ServiceController.Continue()
- uid: System.ServiceProcess.ServiceController.DependentServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
  fullName: System.ServiceProcess.ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController[]
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController
  fullName: System.ServiceProcess.ServiceController[]
  spec.csharp:
  - uid: System.ServiceProcess.ServiceController
    name: ServiceController
    nameWithType: ServiceController
    fullName: ServiceController[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.DisplayName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
  fullName: System.ServiceProcess.ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose(System.Boolean)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServiceController.Dispose(Boolean)
  fullName: System.ServiceProcess.ServiceController.Dispose(Boolean)
- uid: System.ServiceProcess.ServiceController.ExecuteCommand(System.Int32)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand(Int32)
  nameWithType: ServiceController.ExecuteCommand(Int32)
  fullName: System.ServiceProcess.ServiceController.ExecuteCommand(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ServiceProcess.ServiceController.GetDevices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices()
  nameWithType: ServiceController.GetDevices()
  fullName: System.ServiceProcess.ServiceController.GetDevices()
- uid: System.ServiceProcess.ServiceController.GetDevices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices(String)
  nameWithType: ServiceController.GetDevices(String)
  fullName: System.ServiceProcess.ServiceController.GetDevices(String)
- uid: System.ServiceProcess.ServiceController.GetServices
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices()
  nameWithType: ServiceController.GetServices()
  fullName: System.ServiceProcess.ServiceController.GetServices()
- uid: System.ServiceProcess.ServiceController.GetServices(System.String)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices(String)
  nameWithType: ServiceController.GetServices(String)
  fullName: System.ServiceProcess.ServiceController.GetServices(String)
- uid: System.ServiceProcess.ServiceController.MachineName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
  fullName: System.ServiceProcess.ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause()
  nameWithType: ServiceController.Pause()
  fullName: System.ServiceProcess.ServiceController.Pause()
- uid: System.ServiceProcess.ServiceController.Refresh
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh()
  nameWithType: ServiceController.Refresh()
  fullName: System.ServiceProcess.ServiceController.Refresh()
- uid: System.ServiceProcess.ServiceController.ServiceHandle
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
  fullName: System.ServiceProcess.ServiceController.ServiceHandle
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.ServiceProcess.ServiceController.ServiceName
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
  fullName: System.ServiceProcess.ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
  fullName: System.ServiceProcess.ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
  fullName: System.ServiceProcess.ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceType
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceType
  nameWithType: ServiceType
  fullName: System.ServiceProcess.ServiceType
- uid: System.ServiceProcess.ServiceController.Start
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start()
  nameWithType: ServiceController.Start()
  fullName: System.ServiceProcess.ServiceController.Start()
- uid: System.ServiceProcess.ServiceController.Start(System.String[])
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start(String[])
  nameWithType: ServiceController.Start(String[])
  fullName: System.ServiceProcess.ServiceController.Start(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceProcess.ServiceController.StartType
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
  fullName: System.ServiceProcess.ServiceController.StartType
- uid: System.ServiceProcess.ServiceStartMode
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceStartMode
  nameWithType: ServiceStartMode
  fullName: System.ServiceProcess.ServiceStartMode
- uid: System.ServiceProcess.ServiceController.Status
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
  fullName: System.ServiceProcess.ServiceController.Status
- uid: System.ServiceProcess.ServiceControllerStatus
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceControllerStatus
  nameWithType: ServiceControllerStatus
  fullName: System.ServiceProcess.ServiceControllerStatus
- uid: System.ServiceProcess.ServiceController.Stop
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop()
  nameWithType: ServiceController.Stop()
  fullName: System.ServiceProcess.ServiceController.Stop()
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus)
- uid: System.ServiceProcess.ServiceController.WaitForStatus(System.ServiceProcess.ServiceControllerStatus,System.TimeSpan)
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus(ServiceControllerStatus,TimeSpan)
  nameWithType: ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
  fullName: System.ServiceProcess.ServiceController.WaitForStatus(ServiceControllerStatus,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ServiceProcess.ServiceController.#ctor*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceController
  nameWithType: ServiceController.ServiceController
- uid: System.ServiceProcess.ServiceController.CanPauseAndContinue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanPauseAndContinue
  nameWithType: ServiceController.CanPauseAndContinue
- uid: System.ServiceProcess.ServiceController.CanShutdown*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanShutdown
  nameWithType: ServiceController.CanShutdown
- uid: System.ServiceProcess.ServiceController.CanStop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: CanStop
  nameWithType: ServiceController.CanStop
- uid: System.ServiceProcess.ServiceController.Close*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Close
  nameWithType: ServiceController.Close
- uid: System.ServiceProcess.ServiceController.Continue*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Continue
  nameWithType: ServiceController.Continue
- uid: System.ServiceProcess.ServiceController.DependentServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DependentServices
  nameWithType: ServiceController.DependentServices
- uid: System.ServiceProcess.ServiceController.DisplayName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: DisplayName
  nameWithType: ServiceController.DisplayName
- uid: System.ServiceProcess.ServiceController.Dispose*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Dispose
  nameWithType: ServiceController.Dispose
- uid: System.ServiceProcess.ServiceController.ExecuteCommand*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ExecuteCommand
  nameWithType: ServiceController.ExecuteCommand
- uid: System.ServiceProcess.ServiceController.GetDevices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetDevices
  nameWithType: ServiceController.GetDevices
- uid: System.ServiceProcess.ServiceController.GetServices*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: GetServices
  nameWithType: ServiceController.GetServices
- uid: System.ServiceProcess.ServiceController.MachineName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: MachineName
  nameWithType: ServiceController.MachineName
- uid: System.ServiceProcess.ServiceController.Pause*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Pause
  nameWithType: ServiceController.Pause
- uid: System.ServiceProcess.ServiceController.Refresh*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Refresh
  nameWithType: ServiceController.Refresh
- uid: System.ServiceProcess.ServiceController.ServiceHandle*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceHandle
  nameWithType: ServiceController.ServiceHandle
- uid: System.ServiceProcess.ServiceController.ServiceName*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceName
  nameWithType: ServiceController.ServiceName
- uid: System.ServiceProcess.ServiceController.ServicesDependedOn*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServicesDependedOn
  nameWithType: ServiceController.ServicesDependedOn
- uid: System.ServiceProcess.ServiceController.ServiceType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: ServiceType
  nameWithType: ServiceController.ServiceType
- uid: System.ServiceProcess.ServiceController.Start*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Start
  nameWithType: ServiceController.Start
- uid: System.ServiceProcess.ServiceController.StartType*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: StartType
  nameWithType: ServiceController.StartType
- uid: System.ServiceProcess.ServiceController.Status*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Status
  nameWithType: ServiceController.Status
- uid: System.ServiceProcess.ServiceController.Stop*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: Stop
  nameWithType: ServiceController.Stop
- uid: System.ServiceProcess.ServiceController.WaitForStatus*
  parent: System.ServiceProcess.ServiceController
  isExternal: false
  name: WaitForStatus
  nameWithType: ServiceController.WaitForStatus
