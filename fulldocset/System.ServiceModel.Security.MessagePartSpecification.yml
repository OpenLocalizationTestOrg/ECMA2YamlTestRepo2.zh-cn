### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.MessagePartSpecification
  id: MessagePartSpecification
  children:
  - System.ServiceModel.Security.MessagePartSpecification.#ctor
  - System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean)
  - System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Xml.XmlQualifiedName[])
  - System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean,System.Xml.XmlQualifiedName[])
  - System.ServiceModel.Security.MessagePartSpecification.Clear
  - System.ServiceModel.Security.MessagePartSpecification.HeaderTypes
  - System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded
  - System.ServiceModel.Security.MessagePartSpecification.IsReadOnly
  - System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly
  - System.ServiceModel.Security.MessagePartSpecification.NoParts
  - System.ServiceModel.Security.MessagePartSpecification.Union(System.ServiceModel.Security.MessagePartSpecification)
  langs:
  - csharp
  name: MessagePartSpecification
  nameWithType: MessagePartSpecification
  fullName: System.ServiceModel.Security.MessagePartSpecification
  type: Class
  summary: "指定在消息中包含哪些部分。"
  remarks: "此规范用于指示哪些消息部分需要进行签名以及哪些部分需要加密。"
  syntax:
    content: public class MessagePartSpecification
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: MessagePartSpecification()
  nameWithType: MessagePartSpecification.MessagePartSpecification()
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "初始化一个空<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;> </xref>。"
  syntax:
    content: public MessagePartSpecification ();
    parameters: []
  overload: System.ServiceModel.Security.MessagePartSpecification.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: MessagePartSpecification(Boolean)
  nameWithType: MessagePartSpecification.MessagePartSpecification(Boolean)
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(Boolean)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "初始化新<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;></xref>和指定是否包含消息正文。"
  syntax:
    content: public MessagePartSpecification (bool isBodyIncluded);
    parameters:
    - id: isBodyIncluded
      type: System.Boolean
      description: "初始化是否规范中包含消息正文。"
  overload: System.ServiceModel.Security.MessagePartSpecification.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Xml.XmlQualifiedName[])
  id: '#ctor(System.Xml.XmlQualifiedName[])'
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: MessagePartSpecification(XmlQualifiedName[])
  nameWithType: MessagePartSpecification.MessagePartSpecification(XmlQualifiedName[])
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(XmlQualifiedName[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "初始化新<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;></xref>与非数组的消息头。"
  remarks: "使用其名称和命名空间指定每个标头。"
  syntax:
    content: public MessagePartSpecification (System.Xml.XmlQualifiedName[] headerTypes);
    parameters:
    - id: headerTypes
      type: System.Xml.XmlQualifiedName[]
      description: "要使用的标头类型数组。"
  overload: System.ServiceModel.Security.MessagePartSpecification.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean,System.Xml.XmlQualifiedName[])
  id: '#ctor(System.Boolean,System.Xml.XmlQualifiedName[])'
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: MessagePartSpecification(Boolean,XmlQualifiedName[])
  nameWithType: MessagePartSpecification.MessagePartSpecification(Boolean,XmlQualifiedName[])
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(Boolean,XmlQualifiedName[])
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "初始化新<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;></xref>与非数组的消息头。"
  remarks: "使用其名称和命名空间指定每个标头。 此外，`isBodyIncluded`参数指定是否要包含或不消息正文。"
  syntax:
    content: public MessagePartSpecification (bool isBodyIncluded, System.Xml.XmlQualifiedName[] headerTypes);
    parameters:
    - id: isBodyIncluded
      type: System.Boolean
      description: "初始化是否规范中包含消息正文。"
    - id: headerTypes
      type: System.Xml.XmlQualifiedName[]
      description: "要使用的标头类型数组。"
  overload: System.ServiceModel.Security.MessagePartSpecification.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.Clear
  id: Clear
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: Clear()
  nameWithType: MessagePartSpecification.Clear()
  fullName: System.ServiceModel.Security.MessagePartSpecification.Clear()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "清除该规范中的标头的列表。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.ServiceModel.Security.MessagePartSpecification.Clear*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;> </xref>具有只读属性。"
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes
  id: HeaderTypes
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: HeaderTypes
  nameWithType: MessagePartSpecification.HeaderTypes
  fullName: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取该规范的标头类型。"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName> HeaderTypes { get; }
    return:
      type: System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName}
      description: "&lt;Xref:System.Collections.Generic.ICollection%601&gt; ，用于保存该消息规范的标头类型。"
  overload: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded
  id: IsBodyIncluded
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: IsBodyIncluded
  nameWithType: MessagePartSpecification.IsBodyIncluded
  fullName: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取或设置一个值，该值指示是否此规范中是否包含消息正文。"
  syntax:
    content: public bool IsBodyIncluded { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此规范; 中是否包含消息正文否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;> </xref>具有只读属性。"
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly
  id: IsReadOnly
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: MessagePartSpecification.IsReadOnly
  fullName: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取一个值，该值指示规范是否为只读。"
  remarks: "你可以使用<xref:System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly%2A>若要将此属性设置为`true`。</xref:System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly%2A> <xref:System.ServiceModel.Security.MessagePartSpecification.Clear%2A>将属性设置为`false`。</xref:System.ServiceModel.Security.MessagePartSpecification.Clear%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果规范为只读，;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly
  id: MakeReadOnly
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: MessagePartSpecification.MakeReadOnly()
  fullName: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "设置为只读的规范。"
  remarks: "<xref:System.ServiceModel.Security.MessagePartSpecification.Clear%2A>规范中删除所有标头，并使集合读/写。</xref:System.ServiceModel.Security.MessagePartSpecification.Clear%2A>"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.NoParts
  id: NoParts
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: NoParts
  nameWithType: MessagePartSpecification.NoParts
  fullName: System.ServiceModel.Security.MessagePartSpecification.NoParts
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取此类的空实例。"
  remarks: "如果此属性为`null`，创建此类的新空实例。"
  syntax:
    content: public static System.ServiceModel.Security.MessagePartSpecification NoParts { get; }
    return:
      type: System.ServiceModel.Security.MessagePartSpecification
      description: "此类的空实例。"
  overload: System.ServiceModel.Security.MessagePartSpecification.NoParts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.MessagePartSpecification.Union(System.ServiceModel.Security.MessagePartSpecification)
  id: Union(System.ServiceModel.Security.MessagePartSpecification)
  parent: System.ServiceModel.Security.MessagePartSpecification
  langs:
  - csharp
  name: Union(MessagePartSpecification)
  nameWithType: MessagePartSpecification.Union(MessagePartSpecification)
  fullName: System.ServiceModel.Security.MessagePartSpecification.Union(MessagePartSpecification)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "合并两个消息部分的规范。"
  remarks: "调用该联合方法后，<xref:System.ServiceModel.Security.MessagePartSpecification>保存从这两个规范的所有标头信息和<xref:System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded%2A>属性设置为逻辑或这两个规范。</xref:System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded%2A> </xref:System.ServiceModel.Security.MessagePartSpecification>"
  syntax:
    content: public void Union (System.ServiceModel.Security.MessagePartSpecification specification);
    parameters:
    - id: specification
      type: System.ServiceModel.Security.MessagePartSpecification
      description: "<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;> </xref>合并。"
  overload: System.ServiceModel.Security.MessagePartSpecification.Union*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "这<xref href=&quot;System.ServiceModel.Security.MessagePartSpecification&quot;></xref>具有只读属性。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>specification</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MessagePartSpecification()
  nameWithType: MessagePartSpecification.MessagePartSpecification()
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification()
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean)
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MessagePartSpecification(Boolean)
  nameWithType: MessagePartSpecification.MessagePartSpecification(Boolean)
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Xml.XmlQualifiedName[])
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MessagePartSpecification(XmlQualifiedName[])
  nameWithType: MessagePartSpecification.MessagePartSpecification(XmlQualifiedName[])
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(XmlQualifiedName[])
- uid: System.Xml.XmlQualifiedName[]
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName[]
  spec.csharp:
  - uid: System.Xml.XmlQualifiedName
    name: XmlQualifiedName
    nameWithType: XmlQualifiedName
    fullName: XmlQualifiedName[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor(System.Boolean,System.Xml.XmlQualifiedName[])
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MessagePartSpecification(Boolean,XmlQualifiedName[])
  nameWithType: MessagePartSpecification.MessagePartSpecification(Boolean,XmlQualifiedName[])
  fullName: System.ServiceModel.Security.MessagePartSpecification.MessagePartSpecification(Boolean,XmlQualifiedName[])
- uid: System.ServiceModel.Security.MessagePartSpecification.Clear
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: Clear()
  nameWithType: MessagePartSpecification.Clear()
  fullName: System.ServiceModel.Security.MessagePartSpecification.Clear()
- uid: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: HeaderTypes
  nameWithType: MessagePartSpecification.HeaderTypes
  fullName: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes
- uid: System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XmlQualifiedName>
  nameWithType: ICollection<XmlQualifiedName>
  fullName: System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xml.XmlQualifiedName>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlQualifiedName
    name: XmlQualifiedName
    nameWithType: XmlQualifiedName
    fullName: XmlQualifiedName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: IsBodyIncluded
  nameWithType: MessagePartSpecification.IsBodyIncluded
  fullName: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded
- uid: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: IsReadOnly
  nameWithType: MessagePartSpecification.IsReadOnly
  fullName: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly
- uid: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MakeReadOnly()
  nameWithType: MessagePartSpecification.MakeReadOnly()
  fullName: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly()
- uid: System.ServiceModel.Security.MessagePartSpecification.NoParts
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: NoParts
  nameWithType: MessagePartSpecification.NoParts
  fullName: System.ServiceModel.Security.MessagePartSpecification.NoParts
- uid: System.ServiceModel.Security.MessagePartSpecification
  parent: System.ServiceModel.Security
  isExternal: false
  name: MessagePartSpecification
  nameWithType: MessagePartSpecification
  fullName: System.ServiceModel.Security.MessagePartSpecification
- uid: System.ServiceModel.Security.MessagePartSpecification.Union(System.ServiceModel.Security.MessagePartSpecification)
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: Union(MessagePartSpecification)
  nameWithType: MessagePartSpecification.Union(MessagePartSpecification)
  fullName: System.ServiceModel.Security.MessagePartSpecification.Union(MessagePartSpecification)
- uid: System.ServiceModel.Security.MessagePartSpecification.#ctor*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MessagePartSpecification
  nameWithType: MessagePartSpecification.MessagePartSpecification
- uid: System.ServiceModel.Security.MessagePartSpecification.Clear*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: Clear
  nameWithType: MessagePartSpecification.Clear
- uid: System.ServiceModel.Security.MessagePartSpecification.HeaderTypes*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: HeaderTypes
  nameWithType: MessagePartSpecification.HeaderTypes
- uid: System.ServiceModel.Security.MessagePartSpecification.IsBodyIncluded*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: IsBodyIncluded
  nameWithType: MessagePartSpecification.IsBodyIncluded
- uid: System.ServiceModel.Security.MessagePartSpecification.IsReadOnly*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: IsReadOnly
  nameWithType: MessagePartSpecification.IsReadOnly
- uid: System.ServiceModel.Security.MessagePartSpecification.MakeReadOnly*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: MakeReadOnly
  nameWithType: MessagePartSpecification.MakeReadOnly
- uid: System.ServiceModel.Security.MessagePartSpecification.NoParts*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: NoParts
  nameWithType: MessagePartSpecification.NoParts
- uid: System.ServiceModel.Security.MessagePartSpecification.Union*
  parent: System.ServiceModel.Security.MessagePartSpecification
  isExternal: false
  name: Union
  nameWithType: MessagePartSpecification.Union
