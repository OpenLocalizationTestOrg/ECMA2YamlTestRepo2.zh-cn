### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  id: ExceptionHandler
  children:
  - System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  - System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  - System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  - System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  - System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
  type: Class
  summary: "扩展要创建的异常处理程序内发生的未经处理的异常的 ExceptionHandler 类[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]运行时。"
  remarks: "扩展 ExceptionHandler 类，并重写<xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>方法来确定异常是否应终止应用程序。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> 然后创建自定义的 ExceptionHandler 类的新实例并将其分配给静态<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>或<xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>属性，然后创建[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端或服务。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> </xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>"
  example:
  - "The following code example shows an implementation of the ExceptionHandler abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \n  \n [!code-cs[S_UEExceptionHandler#0](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#0)]\n [!code-vb[S_UEExceptionHandler#0](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#0)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[S_UEExceptionHandler#1](~/add/codesnippet/csharp/s_ueexceptionhandler.cs/program.cs#1)]\n [!code-vb[S_UEExceptionHandler#1](~/add/codesnippet/visualbasic/s_ueexceptionhandler.cs/module1.vb#1)]"
  syntax:
    content: public abstract class ExceptionHandler
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>类。"
  syntax:
    content: protected ExceptionHandler ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  id: AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "获取实例<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>处理所有异常。"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;> </xref>返回的对象<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>的所有异常。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  id: AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "获取或设置当前<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>实现应用程序域。"
  remarks: "默认情况下，AsynchronousThreadExceptionHandler 属性是`null`，和未经处理的异常上异步[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]线程终止应用程序。  将此属性设置为<xref:System.ServiceModel.Dispatcher.ExceptionHandler>对象，用于接收并响应这些异常。</xref:System.ServiceModel.Dispatcher.ExceptionHandler>       如果未经处理的异常发生在异步[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]线程和到达此处理程序，应用程序域的状态可能已泄露。  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>不应返回`true`为这些例外。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "分配一个自定义<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>接收的对象未经处理的异常上异步发生[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]线程。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  id: HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，则返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果异常已处理，或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果应重新引发异常并且应用程序终止。"
  remarks: "HandleException 属性返回`true`如果处理异常。 如果它返回`false`或引发其他异常，原始的异常将重新引发。"
  example:
  - "The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the HandleException method.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] runtime.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public abstract bool HandleException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: "发生的异常中[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]运行时和可能终止应用程序。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已处理的异常;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  id: TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  langs:
  - csharp
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "获取或设置的当前传输<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>实现应用程序域。"
  remarks: "默认情况下，TransportExceptionHandler 属性设置为值<xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>，导致未经处理的异常中[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]被忽略的传输。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>  将此属性设置为实例<xref:System.ServiceModel.Dispatcher.ExceptionHandler>用于接收和响应这些异常。</xref:System.ServiceModel.Dispatcher.ExceptionHandler>       如果未经处理的异常中全局发生[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]传输和到达此处理程序，则可能被泄露的应用程序域的状态。 <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>可以返回`false`为这些例外，以使应用程序将被终止。</xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>"
  syntax:
    content: public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }
    return:
      type: System.ServiceModel.Dispatcher.ExceptionHandler
      description: "自定义<xref href=&quot;System.ServiceModel.Dispatcher.ExceptionHandler&quot;></xref>接收的对象未经处理的异常发生在全局[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]传输。"
  overload: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler()
  nameWithType: ExceptionHandler.ExceptionHandler()
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.ExceptionHandler()
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException(Exception)
  nameWithType: ExceptionHandler.HandleException(Exception)
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
  fullName: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: ExceptionHandler
  nameWithType: ExceptionHandler.ExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AlwaysHandle
  nameWithType: ExceptionHandler.AlwaysHandle
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: AsynchronousThreadExceptionHandler
  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: HandleException
  nameWithType: ExceptionHandler.HandleException
- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*
  parent: System.ServiceModel.Dispatcher.ExceptionHandler
  isExternal: false
  name: TransportExceptionHandler
  nameWithType: ExceptionHandler.TransportExceptionHandler
