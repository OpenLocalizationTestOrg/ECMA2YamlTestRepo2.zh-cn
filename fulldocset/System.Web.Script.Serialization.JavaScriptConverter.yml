### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptConverter
  id: JavaScriptConverter
  children:
  - System.Web.Script.Serialization.JavaScriptConverter.#ctor
  - System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  - System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  langs:
  - csharp
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter
  fullName: System.Web.Script.Serialization.JavaScriptConverter
  type: Class
  summary: "为自定义类型转换器提供一个抽象基类。"
  remarks: "JavaScriptConverter 类使你可以实现序列化和反序列化过程的托管类型的本机不支持<xref:System.Web.Script.Serialization.JavaScriptSerializer>类。</xref:System.Web.Script.Serialization.JavaScriptSerializer> 当你需要更好地控制在序列化和反序列化过程时，你还可以使用 JavaScriptConverter。       <xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>属性指示的自定义转换器为其提供转换器服务的类型。</xref:System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes%2A>       若要指示必须通过使用自定义转换器<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例，必须与实例注册该转换器。</xref:System.Web.Script.Serialization.JavaScriptSerializer> 如果你使用<xref:System.Web.Script.Serialization.JavaScriptSerializer>直接类，而应使用<xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A>方法来注册该转换器。</xref:System.Web.Script.Serialization.JavaScriptSerializer.RegisterConverters%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> 否则，如果正在调用 Web 方法从 ECMAScript (JavaScript) 和你想要使用自定义转换器，则可以注册它通过添加`converters`配置文件中的元素。 有关详细信息，请参阅[如何︰ 配置 Microsoft Ajax 中的 ASP.NET 服务](~/add/includes/ajax-current-ext-md.md)。       当<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例序列化一个类型为其已注册，自定义转换器的序列化程序调用<xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A>方法。</xref:System.Web.Script.Serialization.JavaScriptConverter.Serialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer> 同样，当<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例反序列化 JavaScript 对象表示法 (JSON) 字符串，并识别的 JSON 字符串内的类型具有与其关联的序列化程序调用的自定义转换器<xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A>方法。</xref:System.Web.Script.Serialization.JavaScriptConverter.Deserialize%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to create a custom converter for the <xref:System.Web.UI.WebControls.ListItemCollection> class.  \n  \n [!code-cs[System.Web.Script.Serialization#2](~/add/codesnippet/csharp/t-system.web.script.seri_2_1.cs)]\n [!code-vb[System.Web.Script.Serialization#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_2_1.vb)]"
  syntax:
    content: public abstract class JavaScriptConverter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Web.Script.Serialization.JavaScriptConverter&quot;></xref>类。"
  syntax:
    content: protected JavaScriptConverter ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "当在派生类中重写，则将提供的字典转换为指定类型的对象。"
  syntax:
    content: public abstract object Deserialize (System.Collections.Generic.IDictionary<string,object> dictionary, Type type, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "&lt;Xref:System.Collections.Generic.IDictionary%602&gt;属性存储的数据作为名称/值对的实例。"
    - id: type
      type: System.Type
      description: "生成的对象的类型。"
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "<xref href=&quot;System.Web.Script.Serialization.JavaScriptSerializer&quot;> </xref>实例。"
    return:
      type: System.Object
      description: "反序列化的对象。"
  overload: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  id: Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "在派生类中重写，会生成名称/值对的字典。"
  remarks: "当序列化的类型为其注册的自定义转换器，<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例时，将调用序列化方法。</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  syntax:
    content: public abstract System.Collections.Generic.IDictionary<string,object> Serialize (object obj, System.Web.Script.Serialization.JavaScriptSerializer serializer);
    parameters:
    - id: obj
      type: System.Object
      description: "要序列化的对象。"
    - id: serializer
      type: System.Web.Script.Serialization.JavaScriptSerializer
      description: "负责序列化对象。"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "包含表示对象的数据的键/值对的对象。"
  overload: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  id: SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  langs:
  - csharp
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "当在派生类中重写，获取支持的类型的集合。"
  remarks: "SupportedTypes 属性列出支持的转换器的类型。 在运行时，<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例使用此属性来确定用于其相应的自定义转换器的托管类型的映射。</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  example:
  - "The following example shows how to override the SupportedTypes property in a derived class. In this example, the converter supports only the <xref:System.Web.UI.WebControls.ListItemCollection> type. This code example is part of a larger example provided for the <xref:System.Web.Script.Serialization.JavaScriptConverter> class.  \n  \n [!code-cs[System.Web.Script.Serialization#3](~/add/codesnippet/csharp/p-system.web.script.seri_1.cs)]\n [!code-vb[System.Web.Script.Serialization#3](~/add/codesnippet/visualbasic/p-system.web.script.seri_1.vb)]"
  syntax:
    content: public abstract System.Collections.Generic.IEnumerable<Type> SupportedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "实现的对象&lt;xref:System.Collections.Generic.IEnumerable%601&gt; ，表示所支持的转换器类型。"
  overload: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter()
  nameWithType: JavaScriptConverter.JavaScriptConverter()
  fullName: System.Web.Script.Serialization.JavaScriptConverter.JavaScriptConverter()
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(System.Collections.Generic.IDictionary{System.String,System.Object},System.Type,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Deserialize(IDictionary<String,Object>,Type,JavaScriptSerializer)
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Object>
  nameWithType: IDictionary<String,Object>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Script.Serialization.JavaScriptSerializer
  parent: System.Web.Script.Serialization
  isExternal: false
  name: JavaScriptSerializer
  nameWithType: JavaScriptSerializer
  fullName: System.Web.Script.Serialization.JavaScriptSerializer
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize(System.Object,System.Web.Script.Serialization.JavaScriptSerializer)
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize(Object,JavaScriptSerializer)
  nameWithType: JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
  fullName: System.Web.Script.Serialization.JavaScriptConverter.Serialize(Object,JavaScriptSerializer)
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
  fullName: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.Script.Serialization.JavaScriptConverter.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: JavaScriptConverter
  nameWithType: JavaScriptConverter.JavaScriptConverter
- uid: System.Web.Script.Serialization.JavaScriptConverter.Deserialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Deserialize
  nameWithType: JavaScriptConverter.Deserialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.Serialize*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: Serialize
  nameWithType: JavaScriptConverter.Serialize
- uid: System.Web.Script.Serialization.JavaScriptConverter.SupportedTypes*
  parent: System.Web.Script.Serialization.JavaScriptConverter
  isExternal: false
  name: SupportedTypes
  nameWithType: JavaScriptConverter.SupportedTypes
