### YamlMime:ManagedReference
items:
- uid: System.Xaml.Schema.XamlTypeInvoker
  id: XamlTypeInvoker
  children:
  - System.Xaml.Schema.XamlTypeInvoker.#ctor
  - System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)
  - System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)
  - System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)
  - System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])
  - System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)
  - System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod
  - System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)
  - System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler
  - System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler
  - System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker
  langs:
  - csharp
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
  type: Class
  summary: "提供一个扩展点，它可以构造通过反射和构造函数以外的技术将 XAML 类型的实例。"
  remarks: "XamlTypeInvoker 的目的是启用可扩展的 XAML 类型系统、 架构和一个有效的运行时不依赖于完全 CLR 功能，例如 CLR 特性，通过反射信息<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。</xref:System.Reflection.MemberInfo> </xref:System.Type> XAML 的架构类，例如<xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType>的备用构造函数的 XamlTypeInvoker 子类使用作为输入参数 你可以子类<xref:System.Xaml.XamlType>并将通过 XamlTypeInvoker 传递到基构造函数。</xref:System.Xaml.XamlType> 以及定义构造函数 XamlTypeInvoker，你还必须提供替代至少的一些`Lookup` <xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType>方法       XamlTypeInvoker 具有默认的实现。 默认实现到 XAML 架构类型的默认实现中遵循类似的模型<xref:System.Xaml.XamlType>和<xref:System.Xaml.XamlMember>: CLR 类型系统用于实例化、 值和查找操作，包括使用 CLR 特性<xref:System.Type>和<xref:System.Reflection.MemberInfo>，依次类推。</xref:System.Reflection.MemberInfo> </xref:System.Type> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>       XamlTypeInvoker 提供基本实例化 (<xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>) 的方法和方法的相关类型<xref:System.Xaml.XamlType>其中表示集合、 字典或数组 (<xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A>;<xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A>).</xref:System.Xaml.Schema.XamlTypeInvoker.GetItems%2A></xref:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod%2A></xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A></xref:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary%2A></xref:System.Xaml.Schema.XamlTypeInvoker.AddToCollection%2A></xref:System.Xaml.XamlType></xref:System.Xaml.Schema.XamlTypeInvoker.CreateInstance%2A>"
  syntax:
    content: public class XamlTypeInvoker
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.#ctor
  id: '#ctor'
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: XamlTypeInvoker()
  nameWithType: XamlTypeInvoker.XamlTypeInvoker()
  fullName: System.Xaml.Schema.XamlTypeInvoker.XamlTypeInvoker()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>类。"
  remarks: "默认实现为空。       内部调用此构造函数来为<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A>提供值 有关<xref:System.Xaml.Schema.XamlTypeInvoker>子类化，请应或者使用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>构造的签名或提供重写调用<xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29>作为基础。</xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> </xref:System.Xaml.Schema.XamlTypeInvoker.%23ctor%28System.Xaml.XamlType%29> </xref:System.Xaml.Schema.XamlTypeInvoker> 提供<xref:System.Xaml.XamlType>实现的默认模式 where<xref:System.Xaml.Schema.XamlTypeInvoker>不可变。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType>"
  syntax:
    content: protected XamlTypeInvoker ();
    parameters: []
  overload: System.Xaml.Schema.XamlTypeInvoker.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)
  id: '#ctor(System.Xaml.XamlType)'
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: XamlTypeInvoker(XamlType)
  nameWithType: XamlTypeInvoker.XamlTypeInvoker(XamlType)
  fullName: System.Xaml.Schema.XamlTypeInvoker.XamlTypeInvoker(XamlType)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>类，基于所提供<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "此构造函数调用，内部根据<xref:System.Xaml.XamlType>其中<xref:System.Xaml.Schema.XamlTypeInvoker>用于构造。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType> `type`提供下面是与所有其他方法调用以<xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: public XamlTypeInvoker (System.Xaml.XamlType type);
    parameters:
    - id: type
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>值与此相关的特定 XAML 类型<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  overload: System.Xaml.Schema.XamlTypeInvoker.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)
  id: AddToCollection(System.Object,System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: AddToCollection(Object,Object)
  nameWithType: XamlTypeInvoker.AddToCollection(Object,Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.AddToCollection(Object,Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "将所提供的项添加到与此相关的类型的实例<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  remarks: "仅应在调用此方法<xref:System.Xaml.XamlType>表示的集合。</xref:System.Xaml.XamlType>"
  syntax:
    content: public virtual void AddToCollection (object instance, object item);
    parameters:
    - id: instance
      type: System.Object
      description: "由指定的类型的实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>用于构造此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
    - id: item
      type: System.Object
      description: "要添加的项。"
  overload: System.Xaml.Schema.XamlTypeInvoker.AddToCollection*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>基于为未知<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。       **-**上调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>相关的类型不是一个集合。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xaml.XamlSchemaException
    commentId: T:System.Xaml.XamlSchemaException
    description: '&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A?displayProperty=fullName&gt;此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。'
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)
  id: AddToDictionary(System.Object,System.Object,System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: AddToDictionary(Object,Object,Object)
  nameWithType: XamlTypeInvoker.AddToDictionary(Object,Object,Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(Object,Object,Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "将提供的密钥和项值添加到与此相关的类型的实例<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  remarks: "仅应在调用此方法<xref:System.Xaml.XamlType>表示的字典。</xref:System.Xaml.XamlType>"
  syntax:
    content: public virtual void AddToDictionary (object instance, object key, object item);
    parameters:
    - id: instance
      type: System.Object
      description: "由指定的类型的实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>用于构造此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
    - id: key
      type: System.Object
      description: "要添加的项的字典键。"
    - id: item
      type: System.Object
      description: "要添加的项值。"
  overload: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>基于为未知<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。       **-**上调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>相关的类型不是一个字典。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xaml.XamlSchemaException
    commentId: T:System.Xaml.XamlSchemaException
    description: '&lt;xref:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod%2A?displayProperty=fullName&gt;此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。'
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])
  id: CreateInstance(System.Object[])
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: CreateInstance(Object[])
  nameWithType: XamlTypeInvoker.CreateInstance(Object[])
  fullName: System.Xaml.Schema.XamlTypeInvoker.CreateInstance(Object[])
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "创建对象实例基于构造启动<xref href=&quot;System.Xaml.XamlType&quot;></xref>此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  syntax:
    content: public virtual object CreateInstance (object[] arguments);
    parameters:
    - id: arguments
      type: System.Object[]
      description: "提供的对象的数组<xref uid=&quot;langword_csharp_x:ConstructorArgs&quot; name=&quot;x:ConstructorArgs&quot; href=&quot;&quot;></xref>实例。 可能是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>的类型的不需要或不使用<xref uid=&quot;langword_csharp_x:ConstructorArgs&quot; name=&quot;x:ConstructorArgs&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "创建的实例基于构造启动<xref href=&quot;System.Xaml.XamlType&quot;></xref>此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  overload: System.Xaml.Schema.XamlTypeInvoker.CreateInstance*
  exceptions:
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "无法解析一个构造函数。"
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)
  id: GetAddMethod(System.Xaml.XamlType)
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: GetAddMethod(XamlType)
  nameWithType: XamlTypeInvoker.GetAddMethod(XamlType)
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "返回相关<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>这是与集合或字典。"
  remarks: "此方法应返回`null`用例其中<xref:System.Xaml.XamlType>此<xref:System.Xaml.Schema.XamlTypeInvoker>不是可写的集合或字典。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType> 具体而言，应返回`null`用例其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName>返回`None`。</xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName>      1> [!IMPORTANT]&1;> 此方法如果你没有访问完全受信任的 XAML 类型系统，有可能对报表 false<xref:System.Reflection.MethodInfo>向调用方的信息。</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public virtual System.Reflection.MethodInfo GetAddMethod (System.Xaml.XamlType contentType);
    parameters:
    - id: contentType
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;></xref>使用的项类型<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>方法。"
    return:
      type: System.Reflection.MethodInfo
      description: "CLR<xref:System.Reflection.MethodInfo>信息<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>方法，则为 null。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>contentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod
  id: GetEnumeratorMethod
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: GetEnumeratorMethod()
  nameWithType: XamlTypeInvoker.GetEnumeratorMethod()
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "返回表示可以枚举项方法的对象。"
  remarks: "应返回`null`用例其中<xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName>返回`None`。</xref:System.Xaml.XamlType.LookupCollectionKind%2A?displayProperty=fullName>      1> [!IMPORTANT]&1;> 此方法如果你没有访问完全受信任的 XAML 类型系统，有可能对报表 false<xref:System.Reflection.MethodInfo>向调用方的信息。</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public virtual System.Reflection.MethodInfo GetEnumeratorMethod ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>枚举器方法，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)
  id: GetItems(System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: GetItems(Object)
  nameWithType: XamlTypeInvoker.GetItems(Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetItems(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "返回<xref:System.Collections.IEnumerator>表示项集的对象。</xref:System.Collections.IEnumerator>"
  syntax:
    content: public virtual System.Collections.IEnumerator GetItems (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "由指定的类型的实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>用于构造此<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> object, or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Xaml.Schema.XamlTypeInvoker.GetItems*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>基于为未知<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。       **-**上调用此方法<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>相关的类型不是集合或字典的位置。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler
  id: SetMarkupExtensionHandler
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: SetMarkupExtensionHandler
  nameWithType: XamlTypeInvoker.SetMarkupExtensionHandler
  fullName: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "获取处理程序时要使用<xref href=&quot;System.Xaml.XamlObjectWriter&quot;></xref>调入实现<xref:System.Windows.Markup.MarkupExtension>.</xref:System.Windows.Markup.MarkupExtension>"
  remarks: "事件处理程序基于<xref:System.EventHandler%601>限制而<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据。</xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> </xref:System.EventHandler%601>       返回的值时，将调用<xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>行为<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>基于。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupSetMarkupExtensionHandler%2A>       返回值是`null`作为<xref:System.Xaml.Schema.XamlTypeInvoker>基于<xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType>为未知</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: public EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> SetMarkupExtensionHandler { get; }
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
      description: "处理这种情况下处理程序实现。"
  overload: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler
  id: SetTypeConverterHandler
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: SetTypeConverterHandler
  nameWithType: XamlTypeInvoker.SetTypeConverterHandler
  fullName: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "获取处理程序时要使用<xref href=&quot;System.Xaml.XamlObjectWriter&quot;></xref>调入 CLR 实现<xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>。"
  remarks: "事件处理程序基于<xref:System.EventHandler%601>限制而<xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs>事件数据。</xref:System.Windows.Markup.XamlSetMarkupExtensionEventArgs> </xref:System.EventHandler%601>       返回的值时，将调用<xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>行为<xref:System.Xaml.XamlType>，<xref:System.Xaml.Schema.XamlTypeInvoker>基于。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupSetTypeConverterHandler%2A>       返回值是`null`作为<xref:System.Xaml.Schema.XamlTypeInvoker>基于<xref:System.Xaml.XamlType>.</xref:System.Xaml.XamlType>为未知</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: public EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> SetTypeConverterHandler { get; }
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
      description: "处理这种情况下处理程序实现。"
  overload: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker
  id: UnknownInvoker
  parent: System.Xaml.Schema.XamlTypeInvoker
  langs:
  - csharp
  name: UnknownInvoker
  nameWithType: XamlTypeInvoker.UnknownInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml.Schema
  summary: "提供一个静态值，表示未完全实现的未知<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  remarks: "提供此值<xref:System.Xaml.Schema.XamlTypeInvoker>System.Xaml 参数定义 API 将通常会导致调用的代码引发异常。</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: public static System.Xaml.Schema.XamlTypeInvoker UnknownInvoker { get; }
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "一个静态值，表示未完全实现的未知<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>。"
  overload: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Xaml.XamlSchemaException
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaException
  nameWithType: XamlSchemaException
  fullName: System.Xaml.XamlSchemaException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Xaml.Schema.XamlTypeInvoker.#ctor
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: XamlTypeInvoker()
  nameWithType: XamlTypeInvoker.XamlTypeInvoker()
  fullName: System.Xaml.Schema.XamlTypeInvoker.XamlTypeInvoker()
- uid: System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: XamlTypeInvoker(XamlType)
  nameWithType: XamlTypeInvoker.XamlTypeInvoker(XamlType)
  fullName: System.Xaml.Schema.XamlTypeInvoker.XamlTypeInvoker(XamlType)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: AddToCollection(Object,Object)
  nameWithType: XamlTypeInvoker.AddToCollection(Object,Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.AddToCollection(Object,Object)
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: AddToDictionary(Object,Object,Object)
  nameWithType: XamlTypeInvoker.AddToDictionary(Object,Object,Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(Object,Object,Object)
- uid: System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: CreateInstance(Object[])
  nameWithType: XamlTypeInvoker.CreateInstance(Object[])
  fullName: System.Xaml.Schema.XamlTypeInvoker.CreateInstance(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetAddMethod(XamlType)
  nameWithType: XamlTypeInvoker.GetAddMethod(XamlType)
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(XamlType)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetEnumeratorMethod()
  nameWithType: XamlTypeInvoker.GetEnumeratorMethod()
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod()
- uid: System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetItems(Object)
  nameWithType: XamlTypeInvoker.GetItems(Object)
  fullName: System.Xaml.Schema.XamlTypeInvoker.GetItems(Object)
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: SetMarkupExtensionHandler
  nameWithType: XamlTypeInvoker.SetMarkupExtensionHandler
  fullName: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler
- uid: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetMarkupExtensionEventArgs>
  nameWithType: EventHandler<XamlSetMarkupExtensionEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetMarkupExtensionEventArgs
    name: XamlSetMarkupExtensionEventArgs
    nameWithType: XamlSetMarkupExtensionEventArgs
    fullName: XamlSetMarkupExtensionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: SetTypeConverterHandler
  nameWithType: XamlTypeInvoker.SetTypeConverterHandler
  fullName: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler
- uid: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetTypeConverterEventArgs>
  nameWithType: EventHandler<XamlSetTypeConverterEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetTypeConverterEventArgs
    name: XamlSetTypeConverterEventArgs
    nameWithType: XamlSetTypeConverterEventArgs
    fullName: XamlSetTypeConverterEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: UnknownInvoker
  nameWithType: XamlTypeInvoker.UnknownInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker
- uid: System.Xaml.Schema.XamlTypeInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
- uid: System.Xaml.Schema.XamlTypeInvoker.#ctor*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker.XamlTypeInvoker
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToCollection*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: AddToCollection
  nameWithType: XamlTypeInvoker.AddToCollection
- uid: System.Xaml.Schema.XamlTypeInvoker.AddToDictionary*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: AddToDictionary
  nameWithType: XamlTypeInvoker.AddToDictionary
- uid: System.Xaml.Schema.XamlTypeInvoker.CreateInstance*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: CreateInstance
  nameWithType: XamlTypeInvoker.CreateInstance
- uid: System.Xaml.Schema.XamlTypeInvoker.GetAddMethod*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetAddMethod
  nameWithType: XamlTypeInvoker.GetAddMethod
- uid: System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetEnumeratorMethod
  nameWithType: XamlTypeInvoker.GetEnumeratorMethod
- uid: System.Xaml.Schema.XamlTypeInvoker.GetItems*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: GetItems
  nameWithType: XamlTypeInvoker.GetItems
- uid: System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: SetMarkupExtensionHandler
  nameWithType: XamlTypeInvoker.SetMarkupExtensionHandler
- uid: System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: SetTypeConverterHandler
  nameWithType: XamlTypeInvoker.SetTypeConverterHandler
- uid: System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker*
  parent: System.Xaml.Schema.XamlTypeInvoker
  isExternal: false
  name: UnknownInvoker
  nameWithType: XamlTypeInvoker.UnknownInvoker
