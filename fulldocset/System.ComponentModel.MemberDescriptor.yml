### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.MemberDescriptor
  id: MemberDescriptor
  children:
  - System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.MemberDescriptor.#ctor(System.String)
  - System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.Equals(System.Object)
  - System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetHashCode
  - System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  langs:
  - csharp
  name: MemberDescriptor
  nameWithType: MemberDescriptor
  fullName: System.ComponentModel.MemberDescriptor
  type: Class
  summary: "表示类成员，例如属性或事件。 这是一个抽象基类。"
  remarks: "MemberDescriptor 是为基类<xref:System.ComponentModel.EventDescriptor>和<xref:System.ComponentModel.PropertyDescriptor>类。</xref:System.ComponentModel.PropertyDescriptor> </xref:System.ComponentModel.EventDescriptor> <xref:System.ComponentModel.EventDescriptor>类提供的事件，说明和<xref:System.ComponentModel.PropertyDescriptor>类提供了属性的说明。</xref:System.ComponentModel.PropertyDescriptor> </xref:System.ComponentModel.EventDescriptor>       此类定义属性和方法，以访问其存储的特性。 <xref:System.ComponentModel.MemberDescriptor.Attributes%2A>属性获取的特性的集合。</xref:System.ComponentModel.MemberDescriptor.Attributes%2A> <xref:System.ComponentModel.MemberDescriptor.Category%2A>， <xref:System.ComponentModel.MemberDescriptor.IsBrowsable%2A>， <xref:System.ComponentModel.MemberDescriptor.Description%2A>，和<xref:System.ComponentModel.MemberDescriptor.DesignTimeOnly%2A>属性检索这些特定特性的值。</xref:System.ComponentModel.MemberDescriptor.DesignTimeOnly%2A> </xref:System.ComponentModel.MemberDescriptor.Description%2A> </xref:System.ComponentModel.MemberDescriptor.IsBrowsable%2A> </xref:System.ComponentModel.MemberDescriptor.Category%2A> <xref:System.ComponentModel.MemberDescriptor.Name%2A>和<xref:System.ComponentModel.MemberDescriptor.DisplayName%2A>属性提供成员的名称。</xref:System.ComponentModel.MemberDescriptor.DisplayName%2A> </xref:System.ComponentModel.MemberDescriptor.Name%2A>       此外定义了 MemberDescriptor<xref:System.ComponentModel.MemberDescriptor.Equals%2A>方法来比较到另一个此 MemberDescriptor。</xref:System.ComponentModel.MemberDescriptor.Equals%2A>      1> [!NOTE]&1;> 通常情况下，继承自<xref:System.ComponentModel.EventDescriptor>和<xref:System.ComponentModel.PropertyDescriptor>类，而不是从类</xref:System.ComponentModel.PropertyDescriptor></xref:System.ComponentModel.EventDescriptor>"
  example:
  - Since most of the usage of this class will fall on the inherited classes <xref:System.ComponentModel.EventDescriptor> and <xref:System.ComponentModel.PropertyDescriptor>, refer to the examples in these classes.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MemberDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: MemberDescriptor(MemberDescriptor)
  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>使用指定的类<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>。"
  syntax:
    content: protected MemberDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>包含名称的成员，其属性。"
  overload: System.ComponentModel.MemberDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: MemberDescriptor(String)
  nameWithType: MemberDescriptor.MemberDescriptor(String)
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>具有指定名称的成员的类。"
  syntax:
    content: protected MemberDescriptor (string name);
    parameters:
    - id: name
      type: System.String
      description: "成员的名称。"
  overload: System.ComponentModel.MemberDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "名称为空字符串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: MemberDescriptor(MemberDescriptor,Attribute[])
  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>中指定的名称与类<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>和在两个旧属性<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>和<xref:System.Attribute>数组。</xref:System.Attribute>"
  remarks: "此构造函数将追加<xref:System.Attribute>到旧<xref:System.ComponentModel.MemberDescriptor>.</xref:System.ComponentModel.MemberDescriptor>中的特性的数组</xref:System.Attribute>中的属性"
  syntax:
    content: protected MemberDescriptor (System.ComponentModel.MemberDescriptor oldMemberDescriptor, Attribute[] newAttributes);
    parameters:
    - id: oldMemberDescriptor
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>具有的成员，其属性的名称。"
    - id: newAttributes
      type: System.Attribute[]
      description: "数组<xref:System.Attribute>具有你想要添加到成员属性的对象。</xref:System.Attribute>"
  overload: System.ComponentModel.MemberDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: MemberDescriptor(String,Attribute[])
  nameWithType: MemberDescriptor.MemberDescriptor(String,Attribute[])
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>类具有指定名称的成员和属性的数组。"
  syntax:
    content: protected MemberDescriptor (string name, Attribute[] attributes);
    parameters:
    - id: name
      type: System.String
      description: "成员的名称。"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>包含成员属性。</xref:System.Attribute>"
  overload: System.ComponentModel.MemberDescriptor.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "名称为空字符串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.AttributeArray
  id: AttributeArray
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: AttributeArray
  nameWithType: MemberDescriptor.AttributeArray
  fullName: System.ComponentModel.MemberDescriptor.AttributeArray
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取或设置包含特性的数组。"
  remarks: "访问此成员允许派生的类进行修改的属性中使用一组默认<xref:System.ComponentModel.MemberDescriptor.CreateAttributeCollection%2A>方法。</xref:System.ComponentModel.MemberDescriptor.CreateAttributeCollection%2A>"
  syntax:
    content: protected virtual Attribute[] AttributeArray { get; set; }
    return:
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>它包含此成员的特性。</xref:System.Attribute>"
  overload: System.ComponentModel.MemberDescriptor.AttributeArray*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.Attributes
  id: Attributes
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: Attributes
  nameWithType: MemberDescriptor.Attributes
  fullName: System.ComponentModel.MemberDescriptor.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取此成员的特性的集合。"
  remarks: "如果没有任何<xref:System.ComponentModel.AttributeCollection>此成员对于此属性调用<xref:System.ComponentModel.MemberDescriptor.CreateAttributeCollection%2A>方法来创建一个新<xref:System.ComponentModel.AttributeCollection>使用的数组<xref:System.Attribute>对象传递给构造函数。</xref:System.Attribute> </xref:System.ComponentModel.AttributeCollection> </xref:System.ComponentModel.MemberDescriptor.CreateAttributeCollection%2A> </xref:System.ComponentModel.AttributeCollection>"
  syntax:
    content: public virtual System.ComponentModel.AttributeCollection Attributes { get; }
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref> <xref:System.ComponentModel.MemberDescriptor.AttributeArray*>.</xref:System.ComponentModel.MemberDescriptor.AttributeArray*>中没有属性是否为此成员或为空集合提供属性"
  overload: System.ComponentModel.MemberDescriptor.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.Category
  id: Category
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: Category
  nameWithType: MemberDescriptor.Category
  fullName: System.ComponentModel.MemberDescriptor.Category
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取该成员所属的类别的名称中指定<xref href=&quot;System.ComponentModel.CategoryAttribute&quot;> </xref>。"
  remarks: "可视化设计器可以使用此属性的值显示分类中的成员。"
  syntax:
    content: public virtual string Category { get; }
    return:
      type: System.String
      description: "该成员所属的类别的名称。 如果没有任何<xref href=&quot;System.ComponentModel.CategoryAttribute&quot;> </xref>，类别名称设置为默认类别<xref uid=&quot;langword_csharp_Misc&quot; name=&quot;Misc&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.MemberDescriptor.Category*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  id: CreateAttributeCollection
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: CreateAttributeCollection()
  nameWithType: MemberDescriptor.CreateAttributeCollection()
  fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建使用传递给构造函数的特性的数组的属性的集合。"
  remarks: "此方法调用从<xref:System.ComponentModel.MemberDescriptor.Attributes%2A>属性时没有<xref:System.ComponentModel.AttributeCollection>有关此成员。</xref:System.ComponentModel.AttributeCollection> </xref:System.ComponentModel.MemberDescriptor.Attributes%2A> 如果没有属性<xref:System.ComponentModel.MemberDescriptor.AttributeArray%2A>，这将返回一个空<xref:System.ComponentModel.AttributeCollection>.</xref:System.ComponentModel.AttributeCollection> </xref:System.ComponentModel.MemberDescriptor.AttributeArray%2A>"
  syntax:
    content: protected virtual System.ComponentModel.AttributeCollection CreateAttributeCollection ();
    parameters: []
    return:
      type: System.ComponentModel.AttributeCollection
      description: "一个新<xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref>包含<xref:System.ComponentModel.MemberDescriptor.AttributeArray*>属性。</xref:System.ComponentModel.MemberDescriptor.AttributeArray*>"
  overload: System.ComponentModel.MemberDescriptor.CreateAttributeCollection*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.Description
  id: Description
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: Description
  nameWithType: MemberDescriptor.Description
  fullName: System.ComponentModel.MemberDescriptor.Description
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取在指定将成员的说明<xref href=&quot;System.ComponentModel.DescriptionAttribute&quot;> </xref>。"
  remarks: "可视化设计器可以使用此说明显示有关此成员的信息。"
  syntax:
    content: public virtual string Description { get; }
    return:
      type: System.String
      description: "成员的说明。 如果没有任何<xref href=&quot;System.ComponentModel.DescriptionAttribute&quot;> </xref>，属性值设置为默认情况下，为一个空字符串 (&quot;&quot;)。"
  overload: System.ComponentModel.MemberDescriptor.Description*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly
  id: DesignTimeOnly
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: DesignTimeOnly
  nameWithType: MemberDescriptor.DesignTimeOnly
  fullName: System.ComponentModel.MemberDescriptor.DesignTimeOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取是否应仅在指定在设计时设置此成员<xref href=&quot;System.ComponentModel.DesignOnlyAttribute&quot;> </xref>。"
  remarks: "如果没有任何<xref:System.ComponentModel.DesignOnlyAttribute>，则返回值是默认设置，即`false`。</xref:System.ComponentModel.DesignOnlyAttribute>"
  syntax:
    content: public virtual bool DesignTimeOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此成员应仅在设计时; 设置<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果成员可以在运行时设置。"
  overload: System.ComponentModel.MemberDescriptor.DesignTimeOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.DisplayName
  id: DisplayName
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: DisplayName
  nameWithType: MemberDescriptor.DisplayName
  fullName: System.ComponentModel.MemberDescriptor.DisplayName
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取可在一个窗口，如属性窗口中显示的名称。"
  syntax:
    content: public virtual string DisplayName { get; }
    return:
      type: System.String
      description: "要显示的成员的名称。"
  overload: System.ComponentModel.MemberDescriptor.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: MemberDescriptor.Equals(Object)
  fullName: System.ComponentModel.MemberDescriptor.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将此实例与给定的对象，以确定它们是否等效。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与当前实例进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果等效;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.MemberDescriptor.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)
  id: FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: FillAttributes(IList)
  nameWithType: MemberDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.MemberDescriptor.FillAttributes(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，将添加到指定列表中的父类的属性的继承的类的特性。"
  remarks: "重复的属性，保留添加到列表中的最后一个。       <xref:System.Collections.IList>具有属性创建一次。</xref:System.Collections.IList> 如果在列表中有重复的属性，保存仅第一个实例;从列表中删除所有后续的重复属性。"
  syntax:
    content: protected virtual void FillAttributes (System.Collections.IList attributeList);
    parameters:
    - id: attributeList
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>它列出父类中的属性</xref:System.Collections.IList> 最初，这是空的。"
  overload: System.ComponentModel.MemberDescriptor.FillAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  id: FindMethod(System.Type,System.String,System.Type[],System.Type)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: FindMethod(Type,String,Type[],Type)
  nameWithType: MemberDescriptor.FindMethod(Type,String,Type[],Type)
  fullName: System.ComponentModel.MemberDescriptor.FindMethod(Type,String,Type[],Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "查找给定的方法通过反射，仅搜索公共方法。"
  syntax:
    content: protected static System.Reflection.MethodInfo FindMethod (Type componentClass, string name, Type[] args, Type returnType);
    parameters:
    - id: componentClass
      type: System.Type
      description: "包含的方法的组件。"
    - id: name
      type: System.String
      description: "要查找的方法名称。"
    - id: args
      type: System.Type[]
      description: "方法，用于选择重载方法的参数的数组。"
    - id: returnType
      type: System.Type
      description: "要为该方法返回的类型。"
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>表示的方法，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到该方法。</xref:System.Reflection.MethodInfo>"
  overload: System.ComponentModel.MemberDescriptor.FindMethod*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  id: FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: FindMethod(Type,String,Type[],Type,Boolean)
  nameWithType: MemberDescriptor.FindMethod(Type,String,Type[],Type,Boolean)
  fullName: System.ComponentModel.MemberDescriptor.FindMethod(Type,String,Type[],Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "查找给定的方法通过反射，用于仅搜索公共方法的选项。"
  syntax:
    content: protected static System.Reflection.MethodInfo FindMethod (Type componentClass, string name, Type[] args, Type returnType, bool publicOnly);
    parameters:
    - id: componentClass
      type: System.Type
      description: "包含的方法的组件。"
    - id: name
      type: System.String
      description: "要查找的方法名称。"
    - id: args
      type: System.Type[]
      description: "方法，用于选择重载方法的参数的数组。"
    - id: returnType
      type: System.Type
      description: "要为该方法返回的类型。"
    - id: publicOnly
      type: System.Boolean
      description: "是否将搜索限制在公共方法。"
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>表示的方法，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到该方法。</xref:System.Reflection.MethodInfo>"
  overload: System.ComponentModel.MemberDescriptor.FindMethod*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: MemberDescriptor.GetHashCode()
  fullName: System.ComponentModel.MemberDescriptor.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回此实例的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>。"
  overload: System.ComponentModel.MemberDescriptor.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)
  id: GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: GetInvocationTarget(Type,Object)
  nameWithType: MemberDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "检索在成员的调用时应使用的对象。"
  remarks: "通常情况下，返回值将是相同`instance`参数。 如果另一个对象已被此实例相关联，或该实例是自定义类型描述符，GetInvocationTarget 方法可能返回不同的值。"
  syntax:
    content: protected virtual object GetInvocationTarget (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>调用目标。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "可能的调用目标。"
    return:
      type: System.Object
      description: "要在成员调用过程中使用的对象。"
  overload: System.ComponentModel.MemberDescriptor.GetInvocationTarget*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>instance</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  id: GetInvokee(System.Type,System.Object)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: GetInvokee(Type,Object)
  nameWithType: MemberDescriptor.GetInvokee(Type,Object)
  fullName: System.ComponentModel.MemberDescriptor.GetInvokee(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取对其调用方法的部分。"
  syntax:
    content: protected static object GetInvokee (Type componentClass, object component);
    parameters:
    - id: componentClass
      type: System.Type
      description: "A<xref:System.Type>这表示个分量的类型<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>绑定到。</xref:System.Type> 例如，如果此<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>描述一个属性，此参数应为属性声明的类。"
    - id: component
      type: System.Object
      description: "要调用的对象实例。"
    return:
      type: System.Object
      description: "若要调用组件的实例。 当该属性附加到可视化设计器中，此方法将返回可视化设计器中。"
  overload: System.ComponentModel.MemberDescriptor.GetInvokee*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentClass</code>or <code>component</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  id: GetSite(System.Object)
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: GetSite(Object)
  nameWithType: MemberDescriptor.GetSite(Object)
  fullName: System.ComponentModel.MemberDescriptor.GetSite(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取给定的组件的组件站点。"
  syntax:
    content: protected static System.ComponentModel.ISite GetSite (object component);
    parameters:
    - id: component
      type: System.Object
      description: "你想要查找站点组件。"
    return:
      type: System.ComponentModel.ISite
      description: "组件、 站点或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果网站不存在。"
  overload: System.ComponentModel.MemberDescriptor.GetSite*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.IsBrowsable
  id: IsBrowsable
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: IsBrowsable
  nameWithType: MemberDescriptor.IsBrowsable
  fullName: System.ComponentModel.MemberDescriptor.IsBrowsable
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示成员是否可浏览，规定<xref href=&quot;System.ComponentModel.BrowsableAttribute&quot;> </xref>。"
  remarks: "可视化设计器中通常显示在属性窗口中的可浏览的成员。"
  syntax:
    content: public virtual bool IsBrowsable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该成员是可浏览;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果没有任何<xref href=&quot;System.ComponentModel.BrowsableAttribute&quot;> </xref>，属性值设置为默认设置，即<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.MemberDescriptor.IsBrowsable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.Name
  id: Name
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: Name
  nameWithType: MemberDescriptor.Name
  fullName: System.ComponentModel.MemberDescriptor.Name
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取成员的名称。"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "成员的名称。"
  overload: System.ComponentModel.MemberDescriptor.Name*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.MemberDescriptor.NameHashCode
  id: NameHashCode
  parent: System.ComponentModel.MemberDescriptor
  langs:
  - csharp
  name: NameHashCode
  nameWithType: MemberDescriptor.NameHashCode
  fullName: System.ComponentModel.MemberDescriptor.NameHashCode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取该成员， <xref:System.String.GetHashCode*>.</xref:System.String.GetHashCode*>中指定的名称的哈希代码"
  syntax:
    content: protected virtual int NameHashCode { get; }
    return:
      type: System.Int32
      description: "成员的名称哈希代码。"
  overload: System.ComponentModel.MemberDescriptor.NameHashCode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: MemberDescriptor(MemberDescriptor)
  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(MemberDescriptor)
- uid: System.ComponentModel.MemberDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: MemberDescriptor
  nameWithType: MemberDescriptor
  fullName: System.ComponentModel.MemberDescriptor
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: MemberDescriptor(String)
  nameWithType: MemberDescriptor.MemberDescriptor(String)
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: MemberDescriptor(MemberDescriptor,Attribute[])
  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: MemberDescriptor(String,Attribute[])
  nameWithType: MemberDescriptor.MemberDescriptor(String,Attribute[])
  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(String,Attribute[])
- uid: System.ComponentModel.MemberDescriptor.AttributeArray
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: AttributeArray
  nameWithType: MemberDescriptor.AttributeArray
  fullName: System.ComponentModel.MemberDescriptor.AttributeArray
- uid: System.ComponentModel.MemberDescriptor.Attributes
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Attributes
  nameWithType: MemberDescriptor.Attributes
  fullName: System.ComponentModel.MemberDescriptor.Attributes
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.MemberDescriptor.Category
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Category
  nameWithType: MemberDescriptor.Category
  fullName: System.ComponentModel.MemberDescriptor.Category
- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: CreateAttributeCollection()
  nameWithType: MemberDescriptor.CreateAttributeCollection()
  fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection()
- uid: System.ComponentModel.MemberDescriptor.Description
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Description
  nameWithType: MemberDescriptor.Description
  fullName: System.ComponentModel.MemberDescriptor.Description
- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: DesignTimeOnly
  nameWithType: MemberDescriptor.DesignTimeOnly
  fullName: System.ComponentModel.MemberDescriptor.DesignTimeOnly
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.MemberDescriptor.DisplayName
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: DisplayName
  nameWithType: MemberDescriptor.DisplayName
  fullName: System.ComponentModel.MemberDescriptor.DisplayName
- uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Equals(Object)
  nameWithType: MemberDescriptor.Equals(Object)
  fullName: System.ComponentModel.MemberDescriptor.Equals(Object)
- uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: FillAttributes(IList)
  nameWithType: MemberDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.MemberDescriptor.FillAttributes(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: FindMethod(Type,String,Type[],Type)
  nameWithType: MemberDescriptor.FindMethod(Type,String,Type[],Type)
  fullName: System.ComponentModel.MemberDescriptor.FindMethod(Type,String,Type[],Type)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: FindMethod(Type,String,Type[],Type,Boolean)
  nameWithType: MemberDescriptor.FindMethod(Type,String,Type[],Type,Boolean)
  fullName: System.ComponentModel.MemberDescriptor.FindMethod(Type,String,Type[],Type,Boolean)
- uid: System.ComponentModel.MemberDescriptor.GetHashCode
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberDescriptor.GetHashCode()
  fullName: System.ComponentModel.MemberDescriptor.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetInvocationTarget(Type,Object)
  nameWithType: MemberDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget(Type,Object)
- uid: System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetInvokee(Type,Object)
  nameWithType: MemberDescriptor.GetInvokee(Type,Object)
  fullName: System.ComponentModel.MemberDescriptor.GetInvokee(Type,Object)
- uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetSite(Object)
  nameWithType: MemberDescriptor.GetSite(Object)
  fullName: System.ComponentModel.MemberDescriptor.GetSite(Object)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.ComponentModel.MemberDescriptor.IsBrowsable
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: IsBrowsable
  nameWithType: MemberDescriptor.IsBrowsable
  fullName: System.ComponentModel.MemberDescriptor.IsBrowsable
- uid: System.ComponentModel.MemberDescriptor.Name
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Name
  nameWithType: MemberDescriptor.Name
  fullName: System.ComponentModel.MemberDescriptor.Name
- uid: System.ComponentModel.MemberDescriptor.NameHashCode
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: NameHashCode
  nameWithType: MemberDescriptor.NameHashCode
  fullName: System.ComponentModel.MemberDescriptor.NameHashCode
- uid: System.ComponentModel.MemberDescriptor.#ctor*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: MemberDescriptor
  nameWithType: MemberDescriptor.MemberDescriptor
- uid: System.ComponentModel.MemberDescriptor.AttributeArray*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: AttributeArray
  nameWithType: MemberDescriptor.AttributeArray
- uid: System.ComponentModel.MemberDescriptor.Attributes*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Attributes
  nameWithType: MemberDescriptor.Attributes
- uid: System.ComponentModel.MemberDescriptor.Category*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Category
  nameWithType: MemberDescriptor.Category
- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: CreateAttributeCollection
  nameWithType: MemberDescriptor.CreateAttributeCollection
- uid: System.ComponentModel.MemberDescriptor.Description*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Description
  nameWithType: MemberDescriptor.Description
- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: DesignTimeOnly
  nameWithType: MemberDescriptor.DesignTimeOnly
- uid: System.ComponentModel.MemberDescriptor.DisplayName*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: DisplayName
  nameWithType: MemberDescriptor.DisplayName
- uid: System.ComponentModel.MemberDescriptor.Equals*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Equals
  nameWithType: MemberDescriptor.Equals
- uid: System.ComponentModel.MemberDescriptor.FillAttributes*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: FillAttributes
  nameWithType: MemberDescriptor.FillAttributes
- uid: System.ComponentModel.MemberDescriptor.FindMethod*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: FindMethod
  nameWithType: MemberDescriptor.FindMethod
- uid: System.ComponentModel.MemberDescriptor.GetHashCode*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetHashCode
  nameWithType: MemberDescriptor.GetHashCode
- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetInvocationTarget
  nameWithType: MemberDescriptor.GetInvocationTarget
- uid: System.ComponentModel.MemberDescriptor.GetInvokee*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetInvokee
  nameWithType: MemberDescriptor.GetInvokee
- uid: System.ComponentModel.MemberDescriptor.GetSite*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: GetSite
  nameWithType: MemberDescriptor.GetSite
- uid: System.ComponentModel.MemberDescriptor.IsBrowsable*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: IsBrowsable
  nameWithType: MemberDescriptor.IsBrowsable
- uid: System.ComponentModel.MemberDescriptor.Name*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: Name
  nameWithType: MemberDescriptor.Name
- uid: System.ComponentModel.MemberDescriptor.NameHashCode*
  parent: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: NameHashCode
  nameWithType: MemberDescriptor.NameHashCode
