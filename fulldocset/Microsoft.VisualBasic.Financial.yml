### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Financial
  id: Financial
  children:
  - Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  - Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  - Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  - Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  - Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  - Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  langs:
  - csharp
  name: Financial
  nameWithType: Financial
  fullName: Microsoft.VisualBasic.Financial
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Financial&quot; name=&quot;Financial&quot; href=&quot;&quot;> </xref>模块包含用于执行财务操作的过程。"
  remarks: "此模块支持执行如折旧、 现在和将来的值、 利率、 返回时，和付款的比率的财务计算的 Visual Basic 运行时库成员。"
  example:
  - "This example uses the `Rate` function to calculate the interest rate of a loan, given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \n  \n [!code-vb[VbVbalrMath#2](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._25_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Financial
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  id: DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: DDB(Double,Double,Double,Double,Double)
  nameWithType: Financial.DDB(Double,Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.DDB(Double,Double,Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定特定时间段内使用双倍余额递减平衡方法或某些其他方法来指定的资产折旧。"
  remarks: "双倍余额递减平衡方法来计算折旧以加速的速率。 折旧是第一个时间段内最高和后续周期中会降低。       `Life`和`Period`自变量必须以相同的单位表示。 例如，如果`Life`在月中，给定`Period`还必须为其提供在月中。 所有参数必须都是正数。       `DDB`函数使用以下公式计算的一段给定时间折旧︰ 折旧 / 段 = ((Cost – Salvage) * 因素) / 生命"
  example:
  - "This example uses the `DDB` function to return the depreciation of an asset for a specified period given the initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), the total life of the asset in years (`LifeTime`), and the period in years for which the depreciation is calculated (`Depr`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/0a9b2d8a-2f04-4c59-80da-_1.vb)]"
  syntax:
    content: public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);
    parameters:
    - id: Cost
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的初始的成本。"
    - id: Salvage
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定在其使用年限末尾资产值。"
    - id: Life
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定的资产的使用年限的长度。"
    - id: Period
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定计算资产折旧的时期。"
    - id: Factor
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定从该处余额递减的速率。 如果省略，则假定 2 （双倍余额递减法）。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定特定时间段内使用双倍余额递减平衡方法或某些其他方法来指定的资产折旧。"
  overload: Microsoft.VisualBasic.Financial.DDB*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Factor</code>&lt;= 0, <code>Salvage</code> &lt; 0, <code>Period</code> &lt;= 0, or <code>Period</code> &gt;<code>Life.</code>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: FV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.FV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.FV(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定未来年金值基于定期固定付款和固定的利率。"
  remarks: "年金是一系列段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。       （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "This example uses the `FV` function to return the future value of an investment given the percentage rate that accrues per period (`APR / 12`), the total number of payments (`TotPmts`), the payment (`Payment`), the current value of the investment (`PVal`), and a number that indicates whether the payment is made at the beginning or end of the payment period (`PayType`). Note that because `Payment` represents cash paid out, it is a negative number.  \n  \n [!code-vb[VbVbalrMath#22](~/add/codesnippet/visualbasic/0c46fa91-bd2b-4dd0-a9f3-_1.vb)]"
  syntax:
    content: public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款了的 4 x 12 （即 48） 付款周期。"
    - id: Pmt
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定进行每个段内的付款。 付款通常包含主体和利息，都不会更改年金的生命周期。"
    - id: PV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定一系列将来付款存在的值 （即总额）。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是<xref uid=&quot;langword_csharp_DueDate.EndOfPeriod&quot; name=&quot;DueDate.EndOfPeriod&quot; href=&quot;&quot;></xref>如果付款的付款周期，末尾的到期时间或<xref uid=&quot;langword_csharp_DueDate.BegOfPeriod&quot; name=&quot;DueDate.BegOfPeriod&quot; href=&quot;&quot;></xref>如果在该期间开始付款的到期时间。 如果省略， <xref uid=&quot;langword_csharp_DueDate.EndOfPeriod&quot; name=&quot;DueDate.EndOfPeriod&quot; href=&quot;&quot;> </xref>假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定未来年金值基于定期固定付款和固定的利率。"
  overload: Microsoft.VisualBasic.Financial.FV*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: IPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款和固定的利率指定年金的给定期间利率付款。"
  remarks: "年金是一系列段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。       （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "This example uses the `IPmt` function to calculate how much of a payment is interest when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the interest portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#26](~/add/codesnippet/visualbasic/2fa7f248-74e0-4498-aee1-_1.vb)]"
  syntax:
    content: public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: Per
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定到 1 范围内的付款周期`NPer`。"
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款了的 4 x 12 （即 48） 付款周期。"
    - id: PV
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定存在值，或当前，值的一系列的未来付款或回执。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定将来的值或你希望之后所做的最后一次付款的现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要保存你的孩子教育版大于 18 岁的 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款和固定的利率指定年金的给定期间利率付款。"
  overload: Microsoft.VisualBasic.Financial.IPmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Per</code>&lt;= 0 or <code>Per</code> &gt;<code>NPer</code>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  id: IRR(System.Double[]@,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: IRR(Double[],Double)
  nameWithType: Financial.IRR(Double[],Double)
  fullName: Microsoft.VisualBasic.Financial.IRR(Double[],Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定一系列定期现金流量 （付款和收款） 的内部收益率。"
  remarks: "返回的内部收益率是收到组成付款和收款定期进行投资的兴趣速率。       `IRR`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。 每个段内现金流量不必固定的、 按原样年金。       `IRR`通过迭代计算。 从的值开始`Guess`，`IRR`进行计算，直到结果是精确到 0.00001%范围内的周期。 如果`IRR`找不到 20 后的结果尝试，它将失败。"
  example:
  - "In this example, the `IRR` function returns the internal rate of return for a series of five cash flows contained in the array `Values()`. The first array element is a negative cash flow representing business start-up costs. The remaining four cash flows represent positive cash flows for the subsequent four years. `Guess` is the estimated internal rate of return.  \n  \n [!code-vb[VbVbalrMath#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._228_1.vb)]"
  syntax:
    content: public static double IRR (ref double[] ValueArray, double Guess = 0.1);
    parameters:
    - id: ValueArray
      type: System.Double[]
      description: "必需。 数组<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定现金流量值。 该数组必须包含至少一个负值 （支出） 和一个正值 （接收）。"
    - id: Guess
      type: System.Double
      description: "可选。 将返回对象，它指定估算的值<xref uid=&quot;langword_csharp_IRR&quot; name=&quot;IRR&quot; href=&quot;&quot;> </xref>。 如果省略，`Guess`为 0.1 （10%)。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定一系列定期现金流量 （付款和收款） 的内部收益率。"
  overload: Microsoft.VisualBasic.Financial.IRR*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数组自变量值均无效或<code> Guess </code> &lt;=-1。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  id: MIRR(System.Double[]@,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: MIRR(Double[],Double,Double)
  nameWithType: Financial.MIRR(Double[],Double,Double)
  fullName: Microsoft.VisualBasic.Financial.MIRR(Double[],Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定一系列定期现金流量 （付款和收款） 的已修改内部收益率。"
  remarks: "已修改的内部收益率时付款和收款利率时不同的速率的内部收益率。 `MIRR`函数将考虑在内的投资成本 (`FinanceRate`) 和中得到的现金利率的利率 (`ReinvestRate`)。       `FinanceRate`和`ReinvestRatearguments`是表示为十进制值的百分比。 例如，12%表示为 0.12。       `MIRR`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。"
  example:
  - "This example uses the `MIRR` function to return the modified internal rate of return for a series of cash flows contained in the array `Values()`. `LoanAPR` represents the financing interest, and `InvAPR` represents the interest rate received on reinvestment.  \n  \n [!code-vb[VbVbalrMath#29](~/add/codesnippet/visualbasic/ba568dc0-432d-4a7b-b1d0-_1.vb)]"
  syntax:
    content: public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);
    parameters:
    - id: ValueArray
      type: System.Double[]
      description: "必需。 数组<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定现金流量值。 该数组必须包含至少一个负值 （支出） 和一个正值 （接收）。"
    - id: FinanceRate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定利率付费作为金融的成本。"
    - id: ReinvestRate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定从现金利息所得收益的利率。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定一系列定期现金流量 （付款和收款） 的已修改内部收益率。"
  overload: Microsoft.VisualBasic.Financial.MIRR*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Rank of <code>ValueArray</code> does not equal 1, <code>FinanceRate</code> = -1, or <code>ReinvestRate</code> = -1"
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "出现被零除。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: NPer(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.NPer(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.NPer(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定的付款和固定的利率指定年金的期间数。"
  remarks: "年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "This example uses the `NPer` function to return the number of periods during which payments must be made to pay off a loan whose value is contained in `PVal`. Also provided are the interest percentage rate per period (`APR / 12`), the payment (`Payment`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#19](~/add/codesnippet/visualbasic/57cf6dfc-5811-4703-a937-_1.vb)]"
  syntax:
    content: public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: Pmt
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定进行每个段内的付款。 付款通常包含主体和利息，都不会更改年金的生命周期。"
    - id: PV
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定存在值，或当前，值的一系列的未来付款或回执。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定将来的值或你希望之后所做的最后一次付款的现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要保存你的孩子教育版大于 18 岁的 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定的付款和固定的利率指定年金的期间数。"
  overload: Microsoft.VisualBasic.Financial.NPer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Rate</code>= 0 and <code>Pmt</code> = 0"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  id: NPV(System.Double,System.Double[]@)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: NPV(Double,Double[])
  nameWithType: Financial.NPV(Double,Double[])
  fullName: Microsoft.VisualBasic.Financial.NPV(Double,Double[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定投资的净现值基于一系列定期现金流量 （付款和收款） 和贴现率而定。"
  remarks: "投资的净现值是未来的一系列付款和收款的当前值。       `NPV`函数使用在该数组中的值的顺序来解释付款和收款的顺序。 请确保以正确的顺序输入付款和回执值。       `NPV`投资日期之前的第一个现金流量值的一个周期开始和结束的最后一个的现金流值数组中。       Net 存在的值计算基于未来的现金流。 如果在第一个期间开始处出现第一个的现金流，第一个的值必须添加到返回的值`NPV`和中的现金流值不能包含`ValueArray`。       `NPV`函数是类似于`PV`函数 （现值） 但`PV`函数允许现金流开始在结束或句点开头。 与该变量不同`NPV`现金流量值`PV`现金流必须固定在整个投资。"
  example:
  - "This example uses the `NPV` function to return the net present value for a series of cash flows contained in the array `values()`. The return value, stored in `FixedRetRate`, represents the fixed internal rate of return.  \n  \n [!code-vb[VbVbalrMath#1](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._103_1.vb)]"
  syntax:
    content: public static double NPV (double Rate, ref double[] ValueArray);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定的期间长度贴现率，表示为十进制。"
    - id: ValueArray
      type: System.Double[]
      description: "必需。 数组<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定现金流量值。 该数组必须包含至少一个负值 （支出） 和一个正值 （接收）。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定投资的净现值基于一系列定期现金流量 （付款和收款） 和贴现率而定。"
  overload: Microsoft.VisualBasic.Financial.NPV*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ValueArray</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, rank of <code>ValueArray</code> &lt;&gt; 1, or <code>Rate</code> = -1"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: Pmt(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.Pmt(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.Pmt(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款和固定的利率指定年金的付款。"
  remarks: "年金是一系列在一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。       （如存款） 付费的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "This example uses the `Pmt` function to return the monthly payment for a loan during a fixed period. Given are the interest percentage rate per period (`APR / 12`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period `(PayType).`  \n  \n [!code-vb[VbVbalrMath#7](~/add/codesnippet/visualbasic/7dc3a2f6-c47c-4a51-b799-_1.vb)]"
  syntax:
    content: public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定按年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款了的 4 × 12 （即 48） 付款周期。"
    - id: PV
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定存在值 （或总计） 在将来支付的付款一系列值得现在。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定将来的值或你希望之后所做的最后一次付款的现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要在你的孩子教育版 18 岁期间保存 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款和固定的利率指定年金的付款。"
  overload: Microsoft.VisualBasic.Financial.Pmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NPer</code> = 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: PPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定的付款和固定的利率指定年金的给定时间段内本金付款。"
  remarks: "年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。       （如存款） 付费的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "This example uses the `PPmt` function to calculate how much of a payment for a specific period is principal when all the payments are of equal value. Given are the interest percentage rate per period (`APR / 12`), the payment period for which the principal portion is desired (`Period`), the total number of payments (`TotPmts`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), and a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`).  \n  \n [!code-vb[VbVbalrMath#24](~/add/codesnippet/visualbasic/43623fd2-2acb-4eab-9abc-_1.vb)]"
  syntax:
    content: public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: Per
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定到 1 范围内的付款周期`NPer`。"
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定按年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款了的 4 x 12 （即 48） 付款周期。"
    - id: PV
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定的未来付款或收入一系列的当前值。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定将来的值或你希望之后所做的最后一次付款的现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要保存你的孩子教育版大于 18 岁的 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定的付款和固定的利率指定年金的给定时间段内本金付款。"
  overload: Microsoft.VisualBasic.Financial.PPmt*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Per</code>&lt;=0 or <code>Per</code> &gt; <code>NPer</code>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  id: PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: PV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PV(Double,Double,Double,Double,DueDate)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款将来付费和固定的利率指定年金的现值。"
  remarks: "年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       `Rate`和`NPer`必须使用以相同的单位表示的付款周期计算自变量。 例如，如果`Rate`使用月计算`NPer`还必须按月进行计算。       （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。"
  example:
  - "In this example, the `PV` function returns the present value of an $1,000,000 annuity that will provide $50,000 a year for the next 20 years. Provided are the expected annual percentage rate (`APR`), the total number of payments (`TotPmts`), the amount of each payment (`YrIncome`), the total future value of the investment (`FVal`), and a number that indicates whether each payment is made at the beginning or end of the payment period (`PayType`). Note that `YrIncome` is a negative number because it represents cash paid out from the annuity each year.  \n  \n [!code-vb[VbVbalrMath#25](~/add/codesnippet/visualbasic/0175a2c1-5f6c-4f6b-9587-_1.vb)]"
  syntax:
    content: public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);
    parameters:
    - id: Rate
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定每个周期的利率。 例如，如果你获得的汽车贷款年增长率百分比 (APR) 的 10%，并使每月付款，每个周期的速率为 0.1/12，即 0.0083。"
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定按年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款具有 4 x 12 （即 48） 期偿付。"
    - id: Pmt
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定进行每个段内的付款。 付款通常包含主体和利息年金的生命周期内不会更改。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定你希望之后进行最后一次付款终值或现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要保存你的孩子教育版大于 18 岁的 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>基于定期固定付款将来付费和固定的利率指定年金的现值。"
  overload: Microsoft.VisualBasic.Financial.PV*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  id: Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: Rate(Double,Double,Double,Double,DueDate,Double)
  nameWithType: Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  fullName: Microsoft.VisualBasic.Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定年金周期的利率。"
  remarks: "年金是一系列段一段时间内所做的固定数量现金付款。 年金可以 （例如住房抵押） 贷款或 （如每月节省计划） 投资。       （如存款） 中支付的现金表示为负数; 对于所有参数，表示正数表示 （如被除数检查） 收到的现金。       `Rate`通过迭代计算。 从的值开始`Guess`，`Rate`进行计算，直到结果是精确到 0.00001%范围内的周期。 如果`Rate`找不到 20 后的结果尝试，它将失败。 如果该值为 10%和`Rate`失败，请尝试不同的值`Guess`。"
  example:
  - "This example uses the `Rate` function to calculate the interest rate of a loan given the total number of payments (`TotPmts`), the amount of the loan payment (`Payment`), the present value or principal of the loan (`PVal`), the future value of the loan (`FVal`), a number that indicates whether the payment is due at the beginning or end of the payment period (`PayType`), and an approximation of the expected interest rate (`Guess`).  \n  \n [!code-vb[VbVbalrMath#2](~/add/codesnippet/visualbasic/ea19cd36-8223-44a7-9131-_1.vb)]"
  syntax:
    content: public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);
    parameters:
    - id: NPer
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定按年金的付款周期总数。 例如，如果你在四年的汽车贷款上进行每月付款，你的贷款了的 4 * 12 （即 48） 付款周期。"
    - id: Pmt
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定进行每个段内的付款。 付款通常包含主体和利息，都不会更改年金的生命周期。"
    - id: PV
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定当前值，或当前，未来付款或收入一系列的值。 例如，当您贷款钱购买一辆汽车，贷款量是到您每月付款 lender 的现值。"
    - id: FV
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定你希望之后进行最后一次付款终值或现金余额。 例如，一笔贷款将来的值是 $0，因为最终付款之后，所以其值。 但是，如果你想要保存你的孩子教育版大于 18 岁的 50000，则 50000 是将来的值。 如果省略，则假定为 0。"
    - id: Due
      type: Microsoft.VisualBasic.DueDate
      description: "可选。 类型的对象<xref href=&quot;Microsoft.VisualBasic.DueDate&quot;> </xref> ，指定何时付款。 此参数必须是`DueDate.EndOfPeriod`如果付款的付款周期，末尾的到期时间或`DueDate.BegOfPeriod`如果在该期间开始付款的到期时间。 如果省略，`DueDate.EndOfPeriod`假定。"
    - id: Guess
      type: System.Double
      description: "可选。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定你估计的值返回<xref uid=&quot;langword_csharp_Rate&quot; name=&quot;Rate&quot; href=&quot;&quot;> </xref>。 如果省略，`Guess`为 0.1 （10%)。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定年金周期的利率。"
  overload: Microsoft.VisualBasic.Financial.Rate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NPer</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  id: SLN(System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: SLN(Double,Double,Double)
  nameWithType: Financial.SLN(Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SLN(Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产直线折旧一段时间内的。"
  remarks: "必须为相同的单位表示折旧期间`Life`自变量。 所有参数必须都是正数。"
  example:
  - "This example uses the `SLN` function to return the straight-line depreciation of an asset for a single period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._10_1.vb)]"
  syntax:
    content: public static double SLN (double Cost, double Salvage, double Life);
    parameters:
    - id: Cost
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的初始的成本。"
    - id: Salvage
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定在其使用年限末尾资产值。"
    - id: Life
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的使用年限的长度。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产直线折旧一段时间内的。"
  overload: Microsoft.VisualBasic.Financial.SLN*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Life</code> = 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  id: SYD(System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  langs:
  - csharp
  name: SYD(Double,Double,Double,Double)
  nameWithType: Financial.SYD(Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SYD(Double,Double,Double,Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的指定时间段内的总和的年限总额折旧。"
  remarks: "`Life`和`Period`自变量必须以相同的单位表示。 例如，如果`Life`在月中，给定`Period`还必须为其提供在月中。 所有参数必须都是正数。"
  example:
  - "This example uses the `SYD` function to return the depreciation of an asset for a specified period given the asset's initial cost (`InitCost`), the salvage value at the end of the asset's useful life (`SalvageVal`), and the total life of the asset in years (`LifeTime`).  \n  \n [!code-vb[VbVbalrMath#3](~/add/codesnippet/visualbasic/9fc7d5a0-c6cb-4861-b899-_1.vb)]"
  syntax:
    content: public static double SYD (double Cost, double Salvage, double Life, double Period);
    parameters:
    - id: Cost
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的初始成本。"
    - id: Salvage
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定在其使用年限末尾资产的值。"
    - id: Life
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的使用年限的长度。"
    - id: Period
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定计算资产折旧的时间。"
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>指定资产的指定时间段内的总和的年限总额折旧。"
  overload: Microsoft.VisualBasic.Financial.SYD*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Salvage</code>&lt; 0, <code>Period</code> &gt; <code>Life</code>, or <code>Period</code> &lt;=0."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.DivideByZeroException
  isExternal: true
  name: System.DivideByZeroException
- uid: Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: DDB(Double,Double,Double,Double,Double)
  nameWithType: Financial.DDB(Double,Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.DDB(Double,Double,Double,Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: FV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.FV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.FV(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.DueDate
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DueDate
  nameWithType: DueDate
  fullName: Microsoft.VisualBasic.DueDate
- uid: Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.IPmt(Double,Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IRR(Double[],Double)
  nameWithType: Financial.IRR(Double[],Double)
  fullName: Microsoft.VisualBasic.Financial.IRR(Double[],Double)
- uid: System.Double[]
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double[]
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: MIRR(Double[],Double,Double)
  nameWithType: Financial.MIRR(Double[],Double,Double)
  fullName: Microsoft.VisualBasic.Financial.MIRR(Double[],Double,Double)
- uid: Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPer(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.NPer(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.NPer(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPV(Double,Double[])
  nameWithType: Financial.NPV(Double,Double[])
  fullName: Microsoft.VisualBasic.Financial.NPV(Double,Double[])
- uid: Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Pmt(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.Pmt(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.Pmt(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PPmt(Double,Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PPmt(Double,Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PV(Double,Double,Double,Double,DueDate)
  nameWithType: Financial.PV(Double,Double,Double,Double,DueDate)
  fullName: Microsoft.VisualBasic.Financial.PV(Double,Double,Double,Double,DueDate)
- uid: Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Rate(Double,Double,Double,Double,DueDate,Double)
  nameWithType: Financial.Rate(Double,Double,Double,Double,DueDate,Double)
  fullName: Microsoft.VisualBasic.Financial.Rate(Double,Double,Double,Double,DueDate,Double)
- uid: Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SLN(Double,Double,Double)
  nameWithType: Financial.SLN(Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SLN(Double,Double,Double)
- uid: Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SYD(Double,Double,Double,Double)
  nameWithType: Financial.SYD(Double,Double,Double,Double)
  fullName: Microsoft.VisualBasic.Financial.SYD(Double,Double,Double,Double)
- uid: Microsoft.VisualBasic.Financial.DDB*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: DDB
  nameWithType: Financial.DDB
- uid: Microsoft.VisualBasic.Financial.FV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: FV
  nameWithType: Financial.FV
- uid: Microsoft.VisualBasic.Financial.IPmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IPmt
  nameWithType: Financial.IPmt
- uid: Microsoft.VisualBasic.Financial.IRR*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: IRR
  nameWithType: Financial.IRR
- uid: Microsoft.VisualBasic.Financial.MIRR*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: MIRR
  nameWithType: Financial.MIRR
- uid: Microsoft.VisualBasic.Financial.NPer*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPer
  nameWithType: Financial.NPer
- uid: Microsoft.VisualBasic.Financial.NPV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: NPV
  nameWithType: Financial.NPV
- uid: Microsoft.VisualBasic.Financial.Pmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Pmt
  nameWithType: Financial.Pmt
- uid: Microsoft.VisualBasic.Financial.PPmt*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PPmt
  nameWithType: Financial.PPmt
- uid: Microsoft.VisualBasic.Financial.PV*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: PV
  nameWithType: Financial.PV
- uid: Microsoft.VisualBasic.Financial.Rate*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: Rate
  nameWithType: Financial.Rate
- uid: Microsoft.VisualBasic.Financial.SLN*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SLN
  nameWithType: Financial.SLN
- uid: Microsoft.VisualBasic.Financial.SYD*
  parent: Microsoft.VisualBasic.Financial
  isExternal: false
  name: SYD
  nameWithType: Financial.SYD
