### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlException
  id: SqlException
  children:
  - System.Data.SqlClient.SqlException.Class
  - System.Data.SqlClient.SqlException.ClientConnectionId
  - System.Data.SqlClient.SqlException.Errors
  - System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Data.SqlClient.SqlException.LineNumber
  - System.Data.SqlClient.SqlException.Number
  - System.Data.SqlClient.SqlException.Procedure
  - System.Data.SqlClient.SqlException.Server
  - System.Data.SqlClient.SqlException.Source
  - System.Data.SqlClient.SqlException.State
  - System.Data.SqlClient.SqlException.ToString
  langs:
  - csharp
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
  type: Class
  summary: "当 SQL Server 返回警告或错误时引发的异常。 此类不能被继承。"
  remarks: "此类被创建 SQL Server.NET Framework 数据提供程序遇到错误时从服务器生成。 （客户端错误引发作为标准公共语言运行时异常。）SqlException 始终包含至少一个实例<xref:System.Data.SqlClient.SqlError>。</xref:System.Data.SqlClient.SqlError>       严重性级别为 10 或以下的消息是信息性消息，并指示问题引起的用户输入的信息中的错误。 严重级别为 11 到 16 都由用户，并可以由用户纠正。 严重级别为 17 到 25 的消息指示存在软件或硬件错误。 当级别为 17 时、 18 或 19 的错误时，您可以继续工作，尽管你可能不能够执行特定语句。       <xref:System.Data.SqlClient.SqlConnection>保持打开状态时的严重性级别为 19 或以下。</xref:System.Data.SqlClient.SqlConnection> 等于或大于 20 的严重性级别时，服务器通常会关闭<xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> 但是，用户可以重新打开连接并继续。 在这两种情况下，SqlException 生成执行该命令的方法。       SQL Server 发送的警告和信息性消息有关的信息，请参阅 SQL Server 联机丛书的故障排除部分。 SqlException 类将映射到 SQL Server 严重性。       下面是处理异常的一般信息。 你的代码应捕获异常防止应用程序中发生故障，并允许向用户显示一条相关的错误消息。  可以使用数据库事务来确保数据一致性，无论客户端应用程序 （包括崩溃） 中会发生什么情况。 System.Transaction.TransactionScope 或 BeginTransaction 方法 （在 System.Data.OleDb.OleDbConnection、 System.Data.ODBC.ODBCConnection 和 System.Data.SqlClient.SqlConnection） 等功能确保一致的数据，而不考虑由提供程序引发的异常。 事务可以失败，因此捕获失败和重试该事务。       请注意，从.NET Framework 4.5 开始，SqlException 可以返回内部<xref:System.ComponentModel.Win32Exception>.</xref:System.ComponentModel.Win32Exception>       异常类的.Net Framework 数据提供程序报告提供程序特定的错误。 例如 System.Data.Odbc 具有 OdbcException、 System.Data.OleDb 具有 OleDbException，并且 System.Data.SqlClient SqlException。 错误详细信息的最佳级别，捕获这些异常并使用这些异常类的成员获取错误的详细信息。       除了特定于提供程序错误，.NET Framework 数据提供程序类型可以引发 System.Threading.ThreadAbortException System.OutOfMemoryException 等的.NET Framework 异常。 可能无法从这些异常中的恢复。       错误输入可能会导致引发异常，如 System.ArgumentException 或 System.IndexOutOfRangeException 的.NET Framework 数据提供程序类型。  在错误时调用的方法可以提高 System.InvalidOperationException。       因此，一般情况下，编写异常处理程序捕获任何提供程序特定的异常，以及公共语言运行时中的异常。  这些可以进行分层，如下所示︰```   Try {      // code here   }   catch (SqlException odbcEx) {      // Handle more specific SqlException exception here.   }   catch (Exception ex) {      // Handle generic ones here.   }      ```或者︰```   Try {      // code here   }   catch (Exception ex) {      if (ex is SqlException) {         // Handle more specific SqlException exception here.      }      Else {         // Handle generic ones here.      }   }      ```还有可能为.NET Framework 数据提供程序的方法调用在有线程池线程上失败，在堆栈上没有用户代码。 在此情况下，以及使用异步方法调用时，你必须注册<xref:System.AppDomain.UnhandledException>事件来处理这些异常并避免应用程序崩溃。</xref:System.AppDomain.UnhandledException>"
  example:
  - "The following example generates a SqlException and then displays the exception.  \n  \n [!code-cs[Classic WebData SqlException Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlException Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: 'public sealed class SqlException : System.Data.Common.DbException'
  inheritance:
  - System.Exception
  - System.SystemException
  - System.Runtime.InteropServices.ExternalException
  - System.Data.Common.DbException
  implements: []
  inheritedMembers:
  - System.Runtime.InteropServices.ExternalException.ErrorCode
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Class
  id: Class
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取适用于 SQL Server 从.NET Framework 数据提供程序返回的错误的严重性级别。"
  remarks: "严重性级别为 10 或以下的消息是信息性消息，并指示问题引起的用户输入的信息中的错误。 严重级别为 11 到 16 都由用户，并可以由用户纠正。 严重级别为 17 到 25 的消息指示存在软件或硬件错误。 当级别为 17 时、 18 或 19 的错误时，您可以继续工作，尽管你可能不能够执行特定语句。       <xref:System.Data.SqlClient.SqlConnection>保持打开状态时的严重性级别为 19 或以下。</xref:System.Data.SqlClient.SqlConnection> 等于或大于 20 的严重性级别时，服务器通常会关闭<xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection> 但是，用户可以重新打开连接并继续。 在这两种情况下，<xref:System.Data.SqlClient.SqlException>生成执行该命令的方法。</xref:System.Data.SqlClient.SqlException>       SQL Server 发送的警告和信息性消息有关的信息，请参阅 SQL Server 文档的故障排除部分。       这是包装器<xref:System.Data.SqlClient.SqlError.Class%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Class%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._21_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._21_1.vb)]"
  syntax:
    content: public byte Class { get; }
    return:
      type: System.Byte
      description: "从 1 到 25 的值，该值指示错误的严重性级别。"
  overload: System.Data.SqlClient.SqlException.Class*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "表示客户端连接 id。 有关详细信息，请参阅[数据在 ADO.NET 中进行跟踪](~/add/includes/ajax-current-ext-md.md)。"
  remarks: "代码示例，请参阅<xref:System.Data.SqlClient.SqlException.ToString%2A>。</xref:System.Data.SqlClient.SqlException.ToString%2A>"
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "返回客户端连接 id。"
  overload: System.Data.SqlClient.SqlException.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Errors
  id: Errors
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取一个或多个集合<xref href=&quot;System.Data.SqlClient.SqlError&quot;></xref>对象可提供有关用于 SQL Server 的.NET Framework 数据提供程序生成的异常的详细的信息。"
  remarks: "<xref:System.Data.SqlClient.SqlErrorCollection>类始终包含至少一个实例的<xref:System.Data.SqlClient.SqlError>类。</xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlErrorCollection>       这是<xref:System.Data.SqlClient.SqlErrorCollection>.</xref:System.Data.SqlClient.SqlErrorCollection>的包装 有关 SQL Server 引擎错误的详细信息，请参阅 SQL Server 联机丛书。"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-vb[Classic WebData SqlError Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._59_1.vb)]\n [!code-cs[Classic WebData SqlError Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._59_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlErrorCollection Errors { get; }
    return:
      type: System.Data.SqlClient.SqlErrorCollection
      description: "收集的实例<xref href=&quot;System.Data.SqlClient.SqlError&quot;></xref>类。"
  overload: System.Data.SqlClient.SqlException.Errors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "集<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>使用有关异常的信息。"
  remarks: '`GetObjectData`设置`SerializationInfo`用针对于序列化的所有异常对象数据。 在反序列化期间重建异常从`SerializationInfo`通过流传输。'
  syntax:
    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: si
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>它保存关于所引发异常的序列化的对象数据。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "<xref:System.Runtime.Serialization.StreamingContext>它包含有关源或目标的上下文信息。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Data.SqlClient.SqlException.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> si </code>参数为空引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.LineNumber
  id: LineNumber
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取的 TRANSACT-SQL 批命令或生成错误的存储的过程中的行号。"
  remarks: "行号在 1; 的启动如果返回 0，则行号不适用。       这是包装器<xref:System.Data.SqlClient.SqlError.LineNumber%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.LineNumber%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public int LineNumber { get; }
    return:
      type: System.Int32
      description: "中的 TRANSACT-SQL 批命令或存储的过程生成错误的行号。"
  overload: System.Data.SqlClient.SqlException.LineNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Number
  id: Number
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取一个标识错误类型的数字。"
  remarks: "这是包装器<xref:System.Data.SqlClient.SqlError.Number%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Number%2A> 有关 SQL Server 引擎错误的详细信息，请参阅 SQL Server 联机丛书。"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._13_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._13_1.vb)]"
  syntax:
    content: public int Number { get; }
    return:
      type: System.Int32
      description: "标识错误类型的数字。"
  overload: System.Data.SqlClient.SqlException.Number*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Procedure
  id: Procedure
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取生成错误的远程过程调用 (RPC) 的存储的过程的名称。"
  remarks: "这是包装器<xref:System.Data.SqlClient.SqlError.Procedure%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Procedure%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._9_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: public string Procedure { get; }
    return:
      type: System.String
      description: "存储的过程或 RPC 的名称。"
  overload: System.Data.SqlClient.SqlException.Procedure*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Server
  id: Server
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取正在运行的生成错误的 SQL Server 实例的计算机的名称。"
  remarks: "这是包装器<xref:System.Data.SqlClient.SqlError.Server%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Server%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._25_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._25_1.vb)]"
  syntax:
    content: public string Server { get; }
    return:
      type: System.String
      description: "运行的 SQL Server 实例的计算机的名称。"
  overload: System.Data.SqlClient.SqlException.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.Source
  id: Source
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取生成错误的提供程序的名称。"
  remarks: "这是包装器<xref:System.Data.SqlClient.SqlError.Source%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.Source%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._20_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._20_1.vb)]"
  syntax:
    content: public override string Source { get; }
    return:
      type: System.String
      description: "生成错误的提供程序的名称。"
  overload: System.Data.SqlClient.SqlException.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.State
  id: State
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "从 SQL Server 中表示错误、 警告或&quot;没有找到任何数据&quot;消息中获取一个数字错误代码。 有关如何对这些值进行解码的详细信息，请参阅 SQL Server 联机丛书。"
  remarks: "这是包装器<xref:System.Data.SqlClient.SqlError.State%2A>属性的第一个<xref:System.Data.SqlClient.SqlError>中<xref:System.Data.SqlClient.SqlException.Errors%2A>属性。</xref:System.Data.SqlClient.SqlException.Errors%2A> </xref:System.Data.SqlClient.SqlError> </xref:System.Data.SqlClient.SqlError.State%2A>"
  example:
  - "The following example displays each <xref:System.Data.SqlClient.SqlError> within the <xref:System.Data.SqlClient.SqlErrorCollection> collection.  \n  \n [!code-cs[Classic WebData SqlException.State Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._61_1.cs)]\n [!code-vb[Classic WebData SqlException.State Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._61_1.vb)]"
  syntax:
    content: public byte State { get; }
    return:
      type: System.Byte
      description: "该数值表示错误代码。"
  overload: System.Data.SqlClient.SqlException.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlException.ToString
  id: ToString
  parent: System.Data.SqlClient.SqlException
  langs:
  - csharp
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返回一个字符串，表示当前<xref href=&quot;System.Data.SqlClient.SqlException&quot;></xref>对象，并包括客户端连接 ID (有关详细信息，请参阅<xref:System.Data.SqlClient.SqlException.ClientConnectionId*>)。</xref:System.Data.SqlClient.SqlException.ClientConnectionId*>"
  remarks: ''
  example:
  - "The following C# example shows how a connection attempt to a valid server but non-existent database causes a <xref:System.Data.SqlClient.SqlException>, which includes the client connection ID:  \n  \n```  \nusing System.Data.SqlClient;  \nusing System;  \n  \npublic class A {  \n   public static void Main() {  \n      SqlConnection connection = new SqlConnection();  \n      connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\";  \n      try {  \n         connection.Open();  \n      }  \n      catch (SqlException p) {  \n         Console.WriteLine(\"{0}\", p.ClientConnectionId);  \n         Console.WriteLine(\"{0}\", p.ToString());  \n      }  \n      connection.Close();  \n   }  \n}  \n```  \n  \n The following Visual Basic sample is functionally equivalent to the previous (C#) sample:  \n  \n```  \nImports System.Data.SqlClient  \nImports System  \n  \nModule Module1  \n  \n    Sub Main()  \n        Dim connection As New SqlConnection()  \n        connection.ConnectionString = \"Data Source=a_valid_server;Initial Catalog=Northwinda;Integrated Security=true\"  \n        Try  \n            connection.Open()  \n        Catch p As SqlException  \n            Console.WriteLine(\"{0}\", p.ClientConnectionId)  \n            Console.WriteLine(\"{0}\", p.ToString())  \n        End Try  \n        connection.Close()  \n    End Sub  \n  \nEnd Module  \n```"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，表示当前<xref href=&quot;System.Data.SqlClient.SqlException&quot;></xref>对象。<xref:System.String>.</xref:System.String>"
  overload: System.Data.SqlClient.SqlException.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbException
  isExternal: false
  name: System.Data.Common.DbException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.SqlClient.SqlException.Class
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
  fullName: System.Data.SqlClient.SqlException.Class
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.SqlClient.SqlException.ClientConnectionId
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
  fullName: System.Data.SqlClient.SqlException.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlException.Errors
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
  fullName: System.Data.SqlClient.SqlException.Errors
- uid: System.Data.SqlClient.SqlErrorCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlErrorCollection
  nameWithType: SqlErrorCollection
  fullName: System.Data.SqlClient.SqlErrorCollection
- uid: System.Data.SqlClient.SqlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: SqlException.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Data.SqlClient.SqlException.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.SqlClient.SqlException.LineNumber
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
  fullName: System.Data.SqlClient.SqlException.LineNumber
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlException.Number
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
  fullName: System.Data.SqlClient.SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
  fullName: System.Data.SqlClient.SqlException.Procedure
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlException.Server
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
  fullName: System.Data.SqlClient.SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
  fullName: System.Data.SqlClient.SqlException.Source
- uid: System.Data.SqlClient.SqlException.State
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
  fullName: System.Data.SqlClient.SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString()
  nameWithType: SqlException.ToString()
  fullName: System.Data.SqlClient.SqlException.ToString()
- uid: System.Data.SqlClient.SqlException.Class*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Class
  nameWithType: SqlException.Class
- uid: System.Data.SqlClient.SqlException.ClientConnectionId*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlException.ClientConnectionId
- uid: System.Data.SqlClient.SqlException.Errors*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Errors
  nameWithType: SqlException.Errors
- uid: System.Data.SqlClient.SqlException.GetObjectData*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: GetObjectData
  nameWithType: SqlException.GetObjectData
- uid: System.Data.SqlClient.SqlException.LineNumber*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: LineNumber
  nameWithType: SqlException.LineNumber
- uid: System.Data.SqlClient.SqlException.Number*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Number
  nameWithType: SqlException.Number
- uid: System.Data.SqlClient.SqlException.Procedure*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Procedure
  nameWithType: SqlException.Procedure
- uid: System.Data.SqlClient.SqlException.Server*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Server
  nameWithType: SqlException.Server
- uid: System.Data.SqlClient.SqlException.Source*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: Source
  nameWithType: SqlException.Source
- uid: System.Data.SqlClient.SqlException.State*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: State
  nameWithType: SqlException.State
- uid: System.Data.SqlClient.SqlException.ToString*
  parent: System.Data.SqlClient.SqlException
  isExternal: false
  name: ToString
  nameWithType: SqlException.ToString
