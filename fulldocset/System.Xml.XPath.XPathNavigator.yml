### YamlMime:ManagedReference
items:
- uid: System.Xml.XPath.XPathNavigator
  id: XPathNavigator
  children:
  - System.Xml.XPath.XPathNavigator.#ctor
  - System.Xml.XPath.XPathNavigator.AppendChild
  - System.Xml.XPath.XPathNavigator.AppendChild(System.String)
  - System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)
  - System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)
  - System.Xml.XPath.XPathNavigator.BaseURI
  - System.Xml.XPath.XPathNavigator.CanEdit
  - System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.XPath.XPathNavigator.Clone
  - System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.Compile(System.String)
  - System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)
  - System.Xml.XPath.XPathNavigator.CreateAttributes
  - System.Xml.XPath.XPathNavigator.CreateNavigator
  - System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.DeleteSelf
  - System.Xml.XPath.XPathNavigator.Evaluate(System.String)
  - System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)
  - System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)
  - System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.GetNamespace(System.String)
  - System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  - System.Xml.XPath.XPathNavigator.HasAttributes
  - System.Xml.XPath.XPathNavigator.HasChildren
  - System.Xml.XPath.XPathNavigator.InnerXml
  - System.Xml.XPath.XPathNavigator.InsertAfter
  - System.Xml.XPath.XPathNavigator.InsertAfter(System.String)
  - System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)
  - System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.InsertBefore
  - System.Xml.XPath.XPathNavigator.InsertBefore(System.String)
  - System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)
  - System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)
  - System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)
  - System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.IsEmptyElement
  - System.Xml.XPath.XPathNavigator.IsNode
  - System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.LocalName
  - System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)
  - System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)
  - System.Xml.XPath.XPathNavigator.Matches(System.String)
  - System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)
  - System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)
  - System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.MoveToFirst
  - System.Xml.XPath.XPathNavigator.MoveToFirstAttribute
  - System.Xml.XPath.XPathNavigator.MoveToFirstChild
  - System.Xml.XPath.XPathNavigator.MoveToFirstNamespace
  - System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
  - System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)
  - System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.MoveToId(System.String)
  - System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)
  - System.Xml.XPath.XPathNavigator.MoveToNext
  - System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)
  - System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.MoveToNextAttribute
  - System.Xml.XPath.XPathNavigator.MoveToNextNamespace
  - System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
  - System.Xml.XPath.XPathNavigator.MoveToParent
  - System.Xml.XPath.XPathNavigator.MoveToPrevious
  - System.Xml.XPath.XPathNavigator.MoveToRoot
  - System.Xml.XPath.XPathNavigator.Name
  - System.Xml.XPath.XPathNavigator.NamespaceURI
  - System.Xml.XPath.XPathNavigator.NameTable
  - System.Xml.XPath.XPathNavigator.NavigatorComparer
  - System.Xml.XPath.XPathNavigator.NodeType
  - System.Xml.XPath.XPathNavigator.OuterXml
  - System.Xml.XPath.XPathNavigator.Prefix
  - System.Xml.XPath.XPathNavigator.PrependChild
  - System.Xml.XPath.XPathNavigator.PrependChild(System.String)
  - System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)
  - System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)
  - System.Xml.XPath.XPathNavigator.ReadSubtree
  - System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)
  - System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)
  - System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)
  - System.Xml.XPath.XPathNavigator.SchemaInfo
  - System.Xml.XPath.XPathNavigator.Select(System.String)
  - System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)
  - System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)
  - System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)
  - System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)
  - System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)
  - System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)
  - System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)
  - System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)
  - System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)
  - System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)
  - System.Xml.XPath.XPathNavigator.SetValue(System.String)
  - System.Xml.XPath.XPathNavigator.System#ICloneable#Clone
  - System.Xml.XPath.XPathNavigator.ToString
  - System.Xml.XPath.XPathNavigator.TypedValue
  - System.Xml.XPath.XPathNavigator.UnderlyingObject
  - System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XPathNavigator.ValueAsBoolean
  - System.Xml.XPath.XPathNavigator.ValueAsDateTime
  - System.Xml.XPath.XPathNavigator.ValueAsDouble
  - System.Xml.XPath.XPathNavigator.ValueAsInt
  - System.Xml.XPath.XPathNavigator.ValueAsLong
  - System.Xml.XPath.XPathNavigator.ValueType
  - System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)
  - System.Xml.XPath.XPathNavigator.XmlLang
  - System.Xml.XPath.XPathNavigator.XmlType
  langs:
  - csharp
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
  type: Class
  summary: "用于定位和编辑 XML 数据提供游标模型。"
  remarks: "中的 XPathNavigator 类<xref:System.Xml.XPath?displayProperty=fullName>命名空间是一个抽象类，它定义用于导航和编辑为 XQuery 1.0 和 XPath 2.0 数据模型的实例的 XML 信息项的游标模型。</xref:System.Xml.XPath?displayProperty=fullName>       从实现的类创建 XPathNavigator 对象<xref:System.Xml.XPath.IXPathNavigable>如<xref:System.Xml.XPath.XPathDocument>和<xref:System.Xml.XmlDocument>类。</xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XPath.IXPathNavigable> 创建 XPathNavigator 对象<xref:System.Xml.XPath.XPathDocument>对象为只读时由创建 XPathNavigator 对象<xref:System.Xml.XmlDocument>对象可以进行编辑。</xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathDocument> 使用<xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>XPathNavigator 类的属性</xref:System.Xml.XPath.XPathNavigator.CanEdit%2A>确定 XPathNavigator 对象的只读或可编辑状态       有关处理使用 XPath 数据模型的 XML 数据的详细信息，请参阅[使用 XPath 数据模型处理 XML 数据](~/add/includes/ajax-current-ext-md.md)主题。      1> [!IMPORTANT]&1;> 由于使用 XPathNavigator 类，如而引发的异常<xref:System.Xml.XPath.XPathException>类中，可能包含不应在不受信任的方案中公开的敏感信息。</xref:System.Xml.XPath.XPathException> 应正确处理异常，以便在不受信任的情况下不公开此敏感信息。"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")]

      public abstract class XPathNavigator : System.Xml.XPath.XPathItem, ICloneable, System.Xml.IXmlNamespaceResolver, System.Xml.XPath.IXPathNavigable
  inheritance:
  - System.Object
  - System.Xml.XPath.XPathItem
  implements:
  - System.ICloneable
  - System.Xml.IXmlNamespaceResolver
  - System.Xml.XPath.IXPathNavigable
  inheritedMembers:
  - System.Xml.XPath.XPathItem.Value
  - System.Xml.XPath.XPathItem.ValueAs(System.Type)
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.#ctor
  id: '#ctor'
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: XPathNavigator()
  nameWithType: XPathNavigator.XPathNavigator()
  fullName: System.Xml.XPath.XPathNavigator.XPathNavigator()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "初始化的新实例<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>类。"
  remarks: "派生的类构造函数来初始化此类型中的状态将调用此构造函数。"
  syntax:
    content: protected XPathNavigator ();
    parameters: []
  overload: System.Xml.XPath.XPathNavigator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.AppendChild
  id: AppendChild
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: AppendChild()
  nameWithType: XPathNavigator.AppendChild()
  fullName: System.Xml.XPath.XPathNavigator.AppendChild()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlWriter>用于当前节点的节点的子列表的末尾创建一个或多个新的子节点的对象。</xref:System.Xml.XmlWriter>"
  remarks: "追加子节点的操作会将新节点添加到当前节点的子节点列表的末尾。 例如，如果的元素有三个子节点，则第一个追加的节点将成为第四个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 AppendChild 方法时要考虑的重要说明。      -新的子节点不会插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>      -AppendChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在根节点或元素节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置       你可以将多个节点写入编写器。 所有节点将都追加到当前节点的子节点列表的末尾。"
  example:
  - "In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the AppendChild method.  \n  \n [!code-cs[XPathNavigatorMethods#1](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_11_1.cs)]\n [!code-vb[XPathNavigatorMethods#1](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_11_1.vb)]\n [!code-cpp[XPathNavigatorMethods#1](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_11_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter AppendChild ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>对象用于创建新的子节点的子列表的末尾的当前节点的节点。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.AppendChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不是根节点或元素节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.String)
  id: AppendChild(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: AppendChild(String)
  nameWithType: XPathNavigator.AppendChild(String)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建一个新的子节点的子列表的末尾使用指定的 XML 数据字符串在当前节点的节点。"
  remarks: "追加的子节点的操作会将新节点添加到的当前节点的子节点列表的末尾。 例如，如果的元素有三个子节点，则追加的节点将成为第四个子节点。 如果不存在任何子节点，然后创建新的子节点。       若要创建一个新元素节点，请在 XML 字符串参数中包括所有的 XML 语法。 一个新的字符串`book`节点是`AppendChild(&quot;<book/>&quot;)`。 将文本&quot;book&quot;追加到当前节点的文本节点的字符串是`AppendChild(&quot;book&quot;)`。 如果 XML 字符串包含多个节点，将添加所有节点。       以下是使用 AppendChild 方法时要考虑的重要说明。      -AppendChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在根节点或元素节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#2](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_29_1.cs)]\n [!code-vb[XPathNavigatorMethods#2](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_29_1.vb)]\n [!code-cpp[XPathNavigatorMethods#2](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_29_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void AppendChild (string newChild);
    parameters:
    - id: newChild
      type: System.String
      description: "新的子节点的 XML 数据字符串。"
  overload: System.Xml.XPath.XPathNavigator.AppendChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "XML 数据字符串参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不是根节点或元素节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 数据字符串参数不是格式正确的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)
  id: AppendChild(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: AppendChild(XmlReader)
  nameWithType: XPathNavigator.AppendChild(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用的 XML 内容在当前节点的节点的子列表的末尾创建一个新的子节点<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "追加的子节点的操作会将新节点添加到的当前节点的子节点列表的末尾。 例如，如果的元素有三个子节点，则追加的节点将成为第四个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 AppendChild 方法时要考虑的重要说明。      -如果<xref:System.Xml.XmlReader>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XmlReader>      -AppendChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在根节点或元素节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is appended using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#3](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_25_1.cs)]\n [!code-vb[XPathNavigatorMethods#3](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_25_1.vb)]\n [!code-cpp[XPathNavigatorMethods#3](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_25_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void AppendChild (System.Xml.XmlReader newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>新的子节点的 XML 数据上定位的对象。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.AppendChild*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.XmlReader>对象处于错误状态或已关闭。</xref:System.Xml.XmlReader>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不是根节点或元素节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref:System.Xml.XmlReader>对象参数不是格式正确。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)
  id: AppendChild(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: AppendChild(XPathNavigator)
  nameWithType: XPathNavigator.AppendChild(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用中的节点在当前节点的节点的子列表的末尾创建一个新的子节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定。"
  remarks: "追加的子节点的操作会将新节点添加到的当前节点的子节点列表的末尾。 例如，如果的元素有三个子节点，则追加的节点将成为第四个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 AppendChild 方法时要考虑的重要说明。      -如果<xref:System.Xml.XPath.XPathNavigator>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在根节点或元素节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is appended using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#4](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_13_1.cs)]\n [!code-vb[XPathNavigatorMethods#4](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_13_1.vb)]\n [!code-cpp[XPathNavigatorMethods#4](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_13_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void AppendChild (System.Xml.XPath.XPathNavigator newChild);
    parameters:
    - id: newChild
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要添加为新的子节点的节点上的对象。"
  overload: System.Xml.XPath.XPathNavigator.AppendChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不是根节点或元素节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)
  id: AppendChildElement(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: AppendChildElement(String,String,String,String)
  nameWithType: XPathNavigator.AppendChildElement(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.AppendChildElement(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建一个新的子元素节点的子列表的末尾使用命名空间前缀、 本地名称和命名空间 URI 指定的值在当前节点的节点。"
  remarks: "追加的子节点的操作会将新节点添加到的当前节点的子节点列表的末尾。 例如，如果三个子节点有一个元素节点，则追加的节点将成为第四个子节点。 如果不存在任何子节点，然后创建新的子节点。       可以通过获取 Namespace 前缀和 URI 值<xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A>方法或<xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A>方法。</xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> </xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> 例如，以下语法使用范围内命名空间的追加的子元素`xmlns:bk=http://www.contoso.com/books`:```   navigator.AppendChildElement(navigator.Prefix, &quot;pages&quot;, LookupNamespaceURI(navigator.Prefix), String.Empty)   ```这将创建新的子`<bk:pages/>`元素。       以下是使用 AppendChildElement 方法时要考虑的重要说明。      -如果指定的命名空间前缀是`null`或<xref:System.String.Empty?displayProperty=fullName>，然后从当前命名空间范围内获取的命名空间 URI 的新元素的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，则会自动生成的命名空间前缀。      -AppendChildElement 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在根节点或元素节点。</xref:System.Xml.XPath.XPathNavigator>      -AppendChildElement 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is appended to the list of child elements of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#5](~/add/codesnippet/csharp/4b2e9d51-d3ec-4315-b1b0-_1.cs)]\n [!code-vb[XPathNavigatorMethods#5](~/add/codesnippet/visualbasic/4b2e9d51-d3ec-4315-b1b0-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#5](~/add/codesnippet/cpp/4b2e9d51-d3ec-4315-b1b0-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void AppendChildElement (string prefix, string localName, string namespaceURI, string value);
    parameters:
    - id: prefix
      type: System.String
      description: "新的子元素节点 （如果有） 的命名空间前缀。"
    - id: localName
      type: System.String
      description: "新的子元素节点 （如果有） 的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的新的子元素节点 （如果有）。 <xref:System.String>和<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是等效的。</xref:System.String>"
    - id: value
      type: System.String
      description: "新的子元素节点的值。 如果<xref:System.String>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>传递一个空元素创建的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.AppendChildElement*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不是根节点或元素节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.BaseURI
  id: BaseURI
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: BaseURI
  nameWithType: XPathNavigator.BaseURI
  fullName: System.Xml.XPath.XPathNavigator.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取当前节点的基 URI。"
  remarks: "联网的 XML 文档的数据，聚合使用各种 W3C 标准包含机制，块组成，因此包含来自不同位置的节点。 DTD 实体是一个示例演示此聚合的数据，但不限于 Dtd。 BaseURI 属性告知这些节点源自。       例如，如果从 http://server/mydata.xml 加载 XML 数据，BaseURI 属性将返回 http://server/mydata.xml。      1> [!NOTE]&1;> 节点使用创建<xref:System.Xml.XPath.XPathNavigator>类具有与 XML 文档相同 BaseURI<xref:System.Xml.XPath.XPathNavigator>从已创建。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>"
  syntax:
    content: public abstract string BaseURI { get; }
    return:
      type: System.String
      description: "从其加载节点的位置或&lt;xref:System.String?displayProperty=fullName&gt;如果没有值。"
  overload: System.Xml.XPath.XPathNavigator.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.CanEdit
  id: CanEdit
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: CanEdit
  nameWithType: XPathNavigator.CanEdit
  fullName: System.Xml.XPath.XPathNavigator.CanEdit
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>可以编辑基础 XML 数据。"
  remarks: "CanEdit 属性具有不同的值基于三个不同的实现上实现<xref:System.Xml.XPath.IXPathNavigable>.NET Framework 中的接口。</xref:System.Xml.XPath.IXPathNavigable> CanEdit 值<xref:System.Xml.XPath.XPathNavigator>下表中列出了由每个实现创建的对象。</xref:System.Xml.XPath.XPathNavigator>      |<xref:System.Xml.XPath.IXPathNavigable>实现 |CanEdit 值 |  |--------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------|  |<xref:System.Xml.XPath.XPathDocument>|`false`|  |<xref:System.Xml.XmlDocument>|`true`|</xref:System.Xml.XmlDocument></xref:System.Xml.XPath.XPathDocument></xref:System.Xml.XPath.IXPathNavigable>"
  example:
  - "The following example uses the CanEdit property to display the CanEdit values of the <xref:System.Xml.XPath.XPathDocument> and <xref:System.Xml.XmlDocument> classes.  \n  \n [!code-vb[XPathNavigatorProperties#1](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_8_1.vb)]\n [!code-cpp[XPathNavigatorProperties#1](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_8_1.cpp)]\n [!code-cs[XPathNavigatorProperties#1](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_8_1.cs)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool CanEdit { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>可以编辑基础 XML 数据; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.CanEdit*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: CheckValidity(XmlSchemaSet,ValidationEventHandler)
  nameWithType: XPathNavigator.CheckValidity(XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.XPath.XPathNavigator.CheckValidity(XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "验证中的 XML 数据<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>符合提供的 XML 架构定义语言 (XSD) 架构。"
  remarks: "-CheckValidity 方法验证 XML 数据包含在<xref:System.Xml.XPath.XPathNavigator>全局类型或声明中或多个架构中<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>提供符合</xref:System.Xml.XPath.XPathNavigator>      -CheckValidity 方法不执行信息集增加。 这意味着，架构的默认值不会应用中，文本值不会转换为原子值，而不与信息项关联的任何新的类型信息。      架构`xsi:schemaLocation`或`xsi:noNamespaceSchemaLocation`的 XML 数据中的提示将被忽略。      -如果<xref:System.Xml.XPath.XPathNavigator>定位在文档节点上，则验证过程包括唯一性和引用约束的检查 (`xs:ID`， `xs:IDREF`， `xs:key`， `xs:keyref`，和`xs:unique`)。</xref:System.Xml.XPath.XPathNavigator> 否则，将忽略这些检查。      -如果<xref:System.Xml.Schema.XmlSchemaSet>参数原样传递`null`和<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上，通过公开的类型信息<xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>属性的<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A>属性用于检查节点的有效性。</xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A> </xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.Schema.XmlSchemaSet> 如果<xref:System.Xml.Schema.XmlSchemaSet>参数原样传递`null`和<xref:System.Xml.XPath.XPathNavigator>位于根节点中，<xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>使用的文档元素 （即，子元素的根节点） 属性。</xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.Schema.XmlSchemaSet> 在这两种情况下如果<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A>元素的属性<xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>属性是`null`和<xref:System.Xml.Schema.XmlSchemaSet>参数原样传递`null`、 <xref:System.InvalidOperationException>，由于没有类型信息用于执行验证而引发。</xref:System.InvalidOperationException> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A>"
  syntax:
    content: public virtual bool CheckValidity (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>包含用于验证中包含的 XML 数据的架构<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>接收有关架构验证警告和错误的信息。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未发生任何架构验证错误;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.CheckValidity*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "出现了架构验证错误，并且不<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>指定要处理验证错误。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在节点上，不是元素、 属性或根节点或不存在类型信息来执行验证。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "CheckValidity 方法调用时使用<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>参数时<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>已不定位在 XML 数据的根节点上。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Clone
  id: Clone
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Clone()
  nameWithType: XPathNavigator.Clone()
  fullName: System.Xml.XPath.XPathNavigator.Clone()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，创建一个新<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>定位在同一节点上作为这<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "Clone 方法是结合<xref:System.Xml.XPath.XPathNodeIterator>.</xref:System.Xml.XPath.XPathNodeIterator>特别有用 一个<xref:System.Xml.XPath.XPathNodeIterator>可用于循环访问所选的节点集，并包含<xref:System.Xml.XPath.XPathNodeIterator.Current%2A>它返回<xref:System.Xml.XPath.XPathNavigator>位于<xref:System.Xml.XPath.XPathNodeIterator>.</xref:System.Xml.XPath.XPathNodeIterator>的上下文节点上</xref:System.Xml.XPath.XPathNavigator>的属性</xref:System.Xml.XPath.XPathNodeIterator.Current%2A></xref:System.Xml.XPath.XPathNodeIterator> 但是，<xref:System.Xml.XPath.XPathNavigator>返回<xref:System.Xml.XPath.XPathNodeIterator.Current%2A>属性不能用于将移开节点集。</xref:System.Xml.XPath.XPathNodeIterator.Current%2A> </xref:System.Xml.XPath.XPathNavigator> 相反，您应该克隆返回<xref:System.Xml.XPath.XPathNavigator>并使用克隆导航器执行任何附加移动。</xref:System.Xml.XPath.XPathNavigator>       克隆<xref:System.Xml.XPath.XPathNavigator>与原始<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的后续更改的情况下不会影响</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "The following example gets all book titles authored by Herman Melville.  \n  \n [!code-cs[XPathNavigatorMethods#6](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_27_1.cs)]\n [!code-vb[XPathNavigatorMethods#6](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_27_1.vb)]\n [!code-cpp[XPathNavigatorMethods#6](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_27_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract System.Xml.XPath.XPathNavigator Clone ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "一个新<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>定位在同一节点上作为这<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)
  id: ComparePosition(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ComparePosition(XPathNavigator)
  nameWithType: XPathNavigator.ComparePosition(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ComparePosition(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "比较当前的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>的位置与<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定。"
  remarks: "下表描述了<xref:System.Xml.XmlNodeOrder>枚举。</xref:System.Xml.XmlNodeOrder>      |XmlNodeOrder |说明 |  |------------------|-----------------|  |<xref:System.Xml.XmlNodeOrder>|此<xref:System.Xml.XPath.XPathNavigator>当前节点是提供<xref:System.Xml.XPath.XPathNavigator>在当前节点的前面。 |  |<xref:System.Xml.XmlNodeOrder>|此<xref:System.Xml.XPath.XPathNavigator>当前节点是提供<xref:System.Xml.XPath.XPathNavigator>在当前节点之后。 |  |<xref:System.Xml.XmlNodeOrder>|两个<xref:System.Xml.XPath.XPathNavigator>对象定位在同一个节点上。 |  |<xref:System.Xml.XmlNodeOrder>|节点位置无法按文档顺序中，确定相对于彼此或`null`指定为<xref:System.Xml.XPath.XPathNavigator>参数。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlNodeOrder> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlNodeOrder> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlNodeOrder> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XmlNodeOrder> 这可以发生的两个节点位于不同的树中。 |      ComparePosition 方法的行为是依赖于<xref:System.Xml.XPath.XPathNodeType><xref:System.Xml.XPath.XPathNavigator>当前所处。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNodeType> 如果将 XML 文档中的节点进行比较，以下规则适用:-<xref:System.Xml.XPath.XPathNodeType>节点︰ 从源文档按文档顺序返回这些节点。</xref:System.Xml.XPath.XPathNodeType>      -<xref:System.Xml.XPath.XPathNodeType>节点︰ 这些节点可能按文档顺序返回，始终前<xref:System.Xml.XPath.XPathNodeType>节点的父元素。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>      -<xref:System.Xml.XPath.XPathNodeType>节点︰ 可能按文档顺序返回这些节点。</xref:System.Xml.XPath.XPathNodeType> 它们总是后<xref:System.Xml.XPath.XPathNodeType>节点和任何子节点的父节点之前。</xref:System.Xml.XPath.XPathNodeType>      1> [!NOTE] 1> 有关 XPath 数据模型的详细信息和有关每种节点类型的详细信息，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议第 5 节。       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态      1> [!NOTE]&1;> 使用<xref:System.Xml.XPath.XPathNavigator.IsSamePosition%2A>方法，而不是 ComparePosition 方法尽可能。</xref:System.Xml.XPath.XPathNavigator.IsSamePosition%2A>"
  syntax:
    content: public virtual System.Xml.XmlNodeOrder ComparePosition (System.Xml.XPath.XPathNavigator nav);
    parameters:
    - id: nav
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>要进行比较。"
    return:
      type: System.Xml.XmlNodeOrder
      description: "<xref href=&quot;System.Xml.XmlNodeOrder&quot;> </xref>值，该值表示两个的相对位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象。"
  overload: System.Xml.XPath.XPathNavigator.ComparePosition*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Compile(System.String)
  id: Compile(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Compile(String)
  nameWithType: XPathNavigator.Compile(String)
  fullName: System.Xml.XPath.XPathNavigator.Compile(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "编译表示 XPath 表达式的字符串并返回<xref href=&quot;System.Xml.XPath.XPathExpression&quot;></xref>对象。"
  remarks: "XPath 表达式计算生成的下列返回类型:-节点集︰ 无重复的布尔值节点的无序的集合︰`true`或`false`-数字︰ 浮点数的字符串︰ UCS 字符序列返回节点集的表达式可在<xref:System.Xml.XPath.XPathNavigator.Select%2A>和<xref:System.Xml.XPath.XPathNavigator.Evaluate%2A>方法。</xref:System.Xml.XPath.XPathNavigator.Evaluate%2A> </xref:System.Xml.XPath.XPathNavigator.Select%2A> 返回布尔值、 数字或字符串的表达式可在<xref:System.Xml.XPath.XPathNavigator.Evaluate%2A>方法。</xref:System.Xml.XPath.XPathNavigator.Evaluate%2A> 有关有效表达式的规则<xref:System.Xml.XPath.XPathNavigator.Matches%2A>方法是特定于该方法。</xref:System.Xml.XPath.XPathNavigator.Matches%2A>"
  syntax:
    content: public virtual System.Xml.XPath.XPathExpression Compile (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "表示 XPath 表达式的字符串。"
    return:
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>表示 XPath 表达式的对象。"
  overload: System.Xml.XPath.XPathNavigator.Compile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> xpath </code>参数包含不是有效的 XPath 表达式。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: CreateAttribute(String,String,String,String)
  nameWithType: XPathNavigator.CreateAttribute(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.CreateAttribute(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用命名空间前缀、 本地名称和命名空间 URI 指定的值的当前元素节点上创建一个属性节点。"
  remarks: "Namespace 前缀和 URI 值可以通过获取<xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A>或<xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A>方法。</xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> </xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> 例如，以下语法创建属性使用范围内命名空间`xmlns:bk=&quot;http://www.contoso.com/books&quot;`:```   editor.CreateAttribute(navigator.Prefix, &quot;attributeName&quot;, LookupNamespace(navigator.Prefix), &quot;text&quot;)   ```这将创建新属性`<bk:element attributeName=&quot;text&quot;/>`上的当前元素。       以下是使用 CreateAttribute 方法时要考虑的重要说明。      -如果指定的命名空间前缀是<xref:System.String.Empty?displayProperty=fullName>或`null`，从当前命名空间范围内获取命名空间 URI 的新属性的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，将自动生成的命名空间前缀。 例如，若要创建新的属性上的默认命名空间中的某个元素`contosoBooks.xml`文件，(`xmlns=&quot;http://www.contoso.com/books&quot;`)，你指定`null`或<xref:System.String.Empty?displayProperty=fullName>命名空间前缀和命名空间 URI 参数。</xref:System.String.Empty?displayProperty=fullName> 指定`http://www.contoso.com/books`为命名空间 URI 参数将导致 CreateAttribute 方法为自动生成新属性的命名空间前缀。      -如果创建的新属性是与该元素上的命名空间声明冲突由于选择的命名空间前缀由在同一范围内，另一个命名空间声明或前缀选择元素相同，但被绑定到不同的命名空间 URI，将引发异常的命名空间节点。      -CreateAttribute 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `discount` attribute is created on the `price` child element of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#7](~/add/codesnippet/csharp/59adcad2-a883-49a8-bace-_1.cs)]\n [!code-vb[XPathNavigatorMethods#7](~/add/codesnippet/visualbasic/59adcad2-a883-49a8-bace-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#7](~/add/codesnippet/cpp/59adcad2-a883-49a8-bace-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void CreateAttribute (string prefix, string localName, string namespaceURI, string value);
    parameters:
    - id: prefix
      type: System.String
      description: "新的属性节点 （如果有） 命名空间前缀。"
    - id: localName
      type: System.String
      description: "新的属性节点不能的本地名称&lt;xref:System.String?displayProperty=fullName&gt;或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 为新的属性节点 （如果有）。"
    - id: value
      type: System.String
      description: "新的属性节点的值。 如果&lt;xref:System.String?displayProperty=fullName&gt;或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>传递一个空创建属性节点。"
  overload: System.Xml.XPath.XPathNavigator.CreateAttribute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不定位在元素节点上。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.CreateAttributes
  id: CreateAttributes
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: CreateAttributes()
  nameWithType: XPathNavigator.CreateAttributes()
  fullName: System.Xml.XPath.XPathNavigator.CreateAttributes()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlWriter>对象用于在当前元素上创建新属性。</xref:System.Xml.XmlWriter>"
  remarks: "以下是使用 CreateAttributes 方法时要考虑的重要说明。      -如果<xref:System.Xml.XPath.XPathNavigator>定位在元素上，通过创建新属性<xref:System.Xml.XPath.XPathNavigator>方法将被置于当前元素的属性列表的末尾。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>      -新的特性不会插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>      -如果指定的命名空间前缀是<xref:System.String.Empty?displayProperty=fullName>或`null`，从当前命名空间范围内获取命名空间 URI 的新属性的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，将自动生成的命名空间前缀。 例如，若要创建新的属性上的默认命名空间中的某个元素`contosoBooks.xml`文件，(`xmlns=&quot;http://www.contoso.com/books&quot;`)，你指定`null`或<xref:System.String.Empty?displayProperty=fullName>命名空间前缀和命名空间 URI 参数。</xref:System.String.Empty?displayProperty=fullName> 指定`http://www.contoso.com/books`的命名空间 URI 作为参数将导致<xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A>方法为自动生成新属性的命名空间前缀。</xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A>      -如果创建的新属性是与该元素上的命名空间声明冲突由于选择的命名空间前缀由在同一范围内，另一个命名空间声明或前缀选择元素相同，但被绑定到不同的命名空间 URI，将引发异常的命名空间节点。      -<xref:System.Xml.XmlWriter>返回对象仅可用于创建属性。</xref:System.Xml.XmlWriter> 调用其他<xref:System.Xml.XmlWriter>不创建属性的对象方法将引发异常。</xref:System.Xml.XmlWriter>      -CreateAttributes 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, new `discount` and `currency` attributes are created on the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the CreateAttributes method.  \n  \n [!code-cs[XPathNavigatorMethods#8](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_1_1.cs)]\n [!code-vb[XPathNavigatorMethods#8](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_1_1.vb)]\n [!code-cpp[XPathNavigatorMethods#8](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_1_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter CreateAttributes ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>对象用于在当前元素上创建新属性。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.CreateAttributes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不定位在元素节点上。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.CreateNavigator
  id: CreateNavigator
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: CreateNavigator()
  nameWithType: XPathNavigator.CreateNavigator()
  fullName: System.Xml.XPath.XPathNavigator.CreateNavigator()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回一份<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "此方法相当于<xref:System.Xml.XPath.XPathNavigator.Clone%2A>方法。</xref:System.Xml.XPath.XPathNavigator.Clone%2A>"
  syntax:
    content: public virtual System.Xml.XPath.XPathNavigator CreateNavigator ();
    parameters: []
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "An <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref> copy of this <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>."
  overload: System.Xml.XPath.XPathNavigator.CreateNavigator*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)
  id: DeleteRange(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: DeleteRange(XPathNavigator)
  nameWithType: XPathNavigator.DeleteRange(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.DeleteRange(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "删除从当前节点到指定的节点的同级节点范围。"
  remarks: "DeleteRange 方法删除从当前节点的同级节点的一系列<xref:System.Xml.XPath.XPathNavigator>位于上 （含） 到指定的节点<xref:System.Xml.XPath.XPathNavigator>（含） 的参数。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>然后定位在其父节点上。</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "In the following example, the first and second `book` elements of the `contosoBooks.xml` file are deleted using the DeleteRange method.  \n  \n [!code-cs[XPathNavigatorMethods#52](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_9_1.cs)]\n [!code-vb[XPathNavigatorMethods#52](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_9_1.vb)]\n [!code-cpp[XPathNavigatorMethods#52](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_9_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void DeleteRange (System.Xml.XPath.XPathNavigator lastSiblingToDelete);
    parameters:
    - id: lastSiblingToDelete
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要删除的范围内的最后一个同级节点上。"
  overload: System.Xml.XPath.XPathNavigator.DeleteRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的要删除的最后一个节点不是当前节点的有效同级节点。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.DeleteSelf
  id: DeleteSelf
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: DeleteSelf()
  nameWithType: XPathNavigator.DeleteSelf()
  fullName: System.Xml.XPath.XPathNavigator.DeleteSelf()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "删除当前节点及其子节点。"
  remarks: "-<xref:System.Xml.XPath.XPathNavigator>位于所删除的节点的父节点上成功删除。</xref:System.Xml.XPath.XPathNavigator>      -如果已删除的节点是一个文本节点，这是简单类型化元素的内容，在元素丢失其类型信息。 这意味着，当定位在元素上<xref:System.Xml.XPath.XPathNavigator.XmlType%2A>，<xref:System.Xml.XPath.XPathNavigator.ValueType%2A>和<xref:System.Xml.XPath.XPathNavigator.TypedValue%2A>属性具有值`null`，<xref:System.String>和<xref:System.String.Empty>分别。</xref:System.String.Empty> </xref:System.String> </xref:System.Xml.XPath.XPathNavigator.TypedValue%2A> </xref:System.Xml.XPath.XPathNavigator.ValueType%2A> </xref:System.Xml.XPath.XPathNavigator.XmlType%2A>      -已删除的节点是否仍可以访问<xref:System.Xml.XPath.XPathNavigator>定位在删除之前在它们的对象。</xref:System.Xml.XPath.XPathNavigator> 但是，尝试将移开的已删除的子树的方法失败。 例如，<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>和<xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>方法始终失败时<xref:System.Xml.XPath.XPathNavigator>置于最已删除的顶级节点。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> 这是因为已删除的节点不再连接到 XML 文档。 同样<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>方法始终失败如果<xref:System.Xml.XPath.XPathNavigator>位于最底部的删除节点。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>"
  example:
  - "In the following example the `price` element of the first `book` element of the `contosoBooks.xml` file is deleted using the DeleteSelf method. The position of the <xref:System.Xml.XPath.XPathNavigator> object after the `price` element is deleted is on the parent `book` element.  \n  \n [!code-cs[XPathNavigatorMethods#9](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_31_1.cs)]\n [!code-vb[XPathNavigatorMethods#9](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_31_1.vb)]\n [!code-cpp[XPathNavigatorMethods#9](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_31_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void DeleteSelf ();
    parameters: []
  overload: System.Xml.XPath.XPathNavigator.DeleteSelf*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>位于无法删除例如根节点或命名空间节点的节点上。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.String)
  id: Evaluate(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Evaluate(String)
  nameWithType: XPathNavigator.Evaluate(String)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "计算指定的 XPath 表达式并返回类型化的结果。"
  remarks: "下面的 C# 代码将转换`Price/text()`节点数乘以 10，并返回生成的值。      ```   nav.Evaluate(&quot;Price/text()*10&quot;);   ```      > [!NOTE]1> XPath position() 和 last （） 函数，除非在定位步骤中，谓词作为使用要求引用节点集以便进行计算。 在这种情况下，必须使用的重载采用<xref:System.Xml.XPath.XPathNodeIterator>作为自变量; 否则，position() 和 last （） 返回 0。</xref:System.Xml.XPath.XPathNodeIterator>       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example evaluates an XPath expression and returns a <xref:System.Double>.  \n  \n [!code-cs[XPathNavigatorMethods#10](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_34_1.cs)]\n [!code-vb[XPathNavigatorMethods#10](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_34_1.vb)]\n [!code-cpp[XPathNavigatorMethods#10](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_34_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual object Evaluate (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "表示可以计算的 XPath 表达式的字符串。"
    return:
      type: System.Object
      description: "表达式 （布尔值、 数字、 字符串或节点集） 的结果。 此方法映射到<xref:System.Boolean>， <xref:System.Double>， <xref:System.String>，或<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;></xref>对象分别。</xref:System.String> </xref:System.Double> </xref:System.Boolean>"
  overload: System.Xml.XPath.XPathNavigator.Evaluate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式的返回类型是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)
  id: Evaluate(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Evaluate(XPathExpression)
  nameWithType: XPathNavigator.Evaluate(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(XPathExpression)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "计算结果<xref href=&quot;System.Xml.XPath.XPathExpression&quot;></xref>并返回类型化的结果。"
  remarks: "下面的 C# 代码将转换后返回大量`Price/text()`为数字，值乘以 10 的节点。      ```   XPathExpression expr = nav.Compile(&quot;Price/text()*10&quot;);   nav.Evaluate(expr);   ```      > [!NOTE]1> XPath position() 和 last （） 函数，除非在定位步骤中，谓词作为使用要求引用节点集以便进行计算。 在这种情况下，必须使用的重载采用<xref:System.Xml.XPath.XPathNodeIterator>作为自变量; 否则，position() 和 last （） 返回 0。</xref:System.Xml.XPath.XPathNodeIterator>       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example evaluates an <xref:System.Xml.XPath.XPathExpression> and returns a <xref:System.Double>.  \n  \n [!code-cs[XPathNavigatorMethods#11](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_37_1.cs)]\n [!code-vb[XPathNavigatorMethods#11](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_37_1.vb)]\n [!code-cpp[XPathNavigatorMethods#11](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_37_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual object Evaluate (System.Xml.XPath.XPathExpression expr);
    parameters:
    - id: expr
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>可计算。"
    return:
      type: System.Object
      description: "表达式 （布尔值、 数字、 字符串或节点集） 的结果。 此方法映射到<xref:System.Boolean>， <xref:System.Double>， <xref:System.String>，或<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;></xref>对象分别。</xref:System.String> </xref:System.Double> </xref:System.Boolean>"
  overload: System.Xml.XPath.XPathNavigator.Evaluate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式的返回类型是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)
  id: Evaluate(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Evaluate(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.Evaluate(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "计算指定的 XPath 表达式并返回类型化结果，以使用<xref:System.Xml.IXmlNamespaceResolver>对象指定用来解析 XPath 表达式中的命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
  remarks: "下面的 C# 代码将转换后返回大量`Price/text()`为数字，值乘以 10 的节点。      ```   XPathExpression expr = nav.Compile(&quot;Price/text()*10&quot;);   nav.Evaluate(expr);   ```      > [!NOTE]1> XPath position() 和 last （） 函数，除非在定位步骤中，谓词作为使用要求引用节点集以便进行计算。 在这种情况下，必须使用的重载采用<xref:System.Xml.XPath.XPathNodeIterator>作为自变量; 否则，position() 和 last （） 返回 0。</xref:System.Xml.XPath.XPathNodeIterator>       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example evaluates an XPath expression and returns a <xref:System.Double> using the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath expression.  \n  \n [!code-cs[XPathNavigatorMethods#12](~/add/codesnippet/csharp/bb1f44fa-0086-4843-b4f9-_1.cs)]\n [!code-vb[XPathNavigatorMethods#12](~/add/codesnippet/visualbasic/bb1f44fa-0086-4843-b4f9-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#12](~/add/codesnippet/cpp/bb1f44fa-0086-4843-b4f9-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual object Evaluate (string xpath, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: xpath
      type: System.String
      description: "表示可以计算的 XPath 表达式的字符串。"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>对象用于解析 XPath 表达式中的命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Object
      description: "表达式 （布尔值、 数字、 字符串或节点集） 的结果。 此方法映射到<xref:System.Boolean>， <xref:System.Double>， <xref:System.String>，或<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;></xref>对象分别。</xref:System.String> </xref:System.Double> </xref:System.Boolean>"
  overload: System.Xml.XPath.XPathNavigator.Evaluate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式的返回类型是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)
  id: Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Evaluate(XPathExpression,XPathNodeIterator)
  nameWithType: XPathNavigator.Evaluate(XPathExpression,XPathNodeIterator)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(XPathExpression,XPathNodeIterator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用提供的上下文来评估<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>，并返回类型化的结果。"
  remarks: "使用计算该表达式<xref:System.Xml.XPath.XPathNodeIterator.Current%2A>节点<xref:System.Xml.XPath.XPathNodeIterator>作为上下文节点。</xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNodeIterator.Current%2A> 如果`context`是`null`，在其上的节点<xref:System.Xml.XPath.XPathNavigator>当前所处用作上下文节点。</xref:System.Xml.XPath.XPathNavigator>       Position() 和 last （） 函数中，除非在定位步骤中，谓词作为使用始终返回 0 以下情况下:-`context`自变量是`null`。      - <xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A> <xref:System.Xml.XPath.XPathNodeIterator>。</xref:System.Xml.XPath.XPathNodeIterator>尚未调用</xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A>       因为当前节点上的工作的 position() 和 last （） 函数，不应使用<xref:System.Xml.XPath.XPathNodeIterator.Current%2A>属性将从所选的节点集移开。</xref:System.Xml.XPath.XPathNodeIterator.Current%2A> 这可能使无效的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example evaluates an <xref:System.Xml.XPath.XPathExpression> and returns a <xref:System.Double> using the <xref:System.Xml.XPath.XPathNodeIterator.Current%2A> node of the <xref:System.Xml.XPath.XPathNodeIterator> as the context node.  \n  \n [!code-cs[XPathNavigatorMethods#13](~/add/codesnippet/csharp/5558037b-c92b-456f-bb8e-_1.cs)]\n [!code-vb[XPathNavigatorMethods#13](~/add/codesnippet/visualbasic/5558037b-c92b-456f-bb8e-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#13](~/add/codesnippet/cpp/5558037b-c92b-456f-bb8e-_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual object Evaluate (System.Xml.XPath.XPathExpression expr, System.Xml.XPath.XPathNodeIterator context);
    parameters:
    - id: expr
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>可计算。"
    - id: context
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref> ，指向所选节点集求值是在上执行。"
    return:
      type: System.Object
      description: "表达式 （布尔值、 数字、 字符串或节点集） 的结果。 此方法映射到<xref:System.Boolean>， <xref:System.Double>， <xref:System.String>，或<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;></xref>对象分别。</xref:System.String> </xref:System.Double> </xref:System.Boolean>"
  overload: System.Xml.XPath.XPathNavigator.Evaluate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式的返回类型是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: GetAttribute(String,String)
  nameWithType: XPathNavigator.GetAttribute(String,String)
  fullName: System.Xml.XPath.XPathNavigator.GetAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取具有指定的本地名称和命名空间 URI 的属性的值。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>调用 GetAttribute 方法之前必须在元素节点上定位。</xref:System.Xml.XPath.XPathNavigator>       此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  syntax:
    content: public virtual string GetAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "属性的本地名称。 `localName`是区分大小写。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的属性。"
    return:
      type: System.String
      description: "<xref:System.String>，其中包含指定的属性; 的值&lt;xref:System.String?displayProperty=fullName&gt;如果未找到一个匹配的特性，或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不定位在元素节点上。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.GetNamespace(System.String)
  id: GetNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: GetNamespace(String)
  nameWithType: XPathNavigator.GetNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.GetNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回对应于指定的本地名称的命名空间节点的值。"
  remarks: "命名空间`xml`和`xmlns`始终返回一个值。 如果<xref:System.String.Empty?displayProperty=fullName>指定为`name`参数，GetNamespace 方法将返回默认值`xmlns`命名空间。</xref:System.String.Empty?displayProperty=fullName>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。       此方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的状态"
  syntax:
    content: public virtual string GetNamespace (string name);
    parameters:
    - id: name
      type: System.String
      description: "命名空间节点的本地名称。"
    return:
      type: System.String
      description: "<xref:System.String>包含值的命名空间节点;&lt;xref:System.String?displayProperty=fullName&gt;如果找不到匹配的命名空间节点，或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不定位在元素节点上。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.GetNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  id: GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: GetNamespacesInScope(XmlNamespaceScope)
  nameWithType: XPathNavigator.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.GetNamespacesInScope(XmlNamespaceScope)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回当前节点的范围内命名空间。"
  remarks: "返回的命名空间依赖于<xref:System.Xml.XmlNamespaceScope>指定值。</xref:System.Xml.XmlNamespaceScope>      |XmlNamespaceScope 值 |返回的命名空间 |  |-----------------------------|-------------------------|  |<xref:System.Xml.XmlNamespaceScope>|在当前节点的作用域中定义的所有命名空间。</xref:System.Xml.XmlNamespaceScope> 这包括`xmlns:xml`总是隐式声明的命名空间。 命名空间的顺序返回未定义。 |  |<xref:System.Xml.XmlNamespaceScope>|在当前节点中，作用域中定义的所有命名空间不包括`xmlns:xml`总是隐式声明的命名空间。</xref:System.Xml.XmlNamespaceScope> 命名空间的顺序返回未定义。 |  |<xref:System.Xml.XmlNamespaceScope>|在当前节点本地定义的所有命名空间。 |</xref:System.Xml.XmlNamespaceScope>"
  syntax:
    content: public virtual System.Collections.Generic.IDictionary<string,string> GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);
    parameters:
    - id: scope
      type: System.Xml.XmlNamespaceScope
      description: "<xref:System.Xml.XmlNamespaceScope>值，该值指定要返回的命名空间。</xref:System.Xml.XmlNamespaceScope>"
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "&lt;Xref:System.Collections.Generic.IDictionary%602&gt;的前缀键控的命名空间名称的集合。"
  overload: System.Xml.XPath.XPathNavigator.GetNamespacesInScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.HasAttributes
  id: HasAttributes
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: HasAttributes
  nameWithType: XPathNavigator.HasAttributes
  fullName: System.Xml.XPath.XPathNavigator.HasAttributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取一个值，该值指示当前节点是否有任何属性。"
  syntax:
    content: public virtual bool HasAttributes { get; }
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前节点具有属性，则返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果当前节点不具有任何属性，或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不定位在元素节点上。"
  overload: System.Xml.XPath.XPathNavigator.HasAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.HasChildren
  id: HasChildren
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: HasChildren
  nameWithType: XPathNavigator.HasChildren
  fullName: System.Xml.XPath.XPathNavigator.HasChildren
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取一个值，该值指示当前节点是否具有任何子节点。"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>位于不能有子节点，HasChildren 属性始终返回的节点上`false`。</xref:System.Xml.XPath.XPathNavigator>       下表列出的子节点<xref:System.Xml.XPath.XPathNodeType>允许每个节点<xref:System.Xml.XPath.XPathNodeType>节点。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>      |XPathNodeType 节点 |子 XPathNodeType 节点 |  |------------------------|-------------------------------|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType> nodes.</xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType> **注意︰** <xref:System.Xml.XmlNodeType>相当于<xref:System.Xml.XPath.XPathNodeType>使用<xref:System.Xml.XmlDocument>时类，并且能与作为元素相同的子级。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> nodes.|  |所有其他<xref:System.Xml.XPath.XPathNodeType>节点 |不能有子节点。 |</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XmlNodeType>  "
  syntax:
    content: public virtual bool HasChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前节点具有任何子节点;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.HasChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InnerXml
  id: InnerXml
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InnerXml
  nameWithType: XPathNavigator.InnerXml
  fullName: System.Xml.XPath.XPathNavigator.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取或设置表示当前节点的子节点的标记。"
  remarks: >-
    > [!NOTE]

    >  The InnerXml and <xref:System.Xml.XPath.XPathNavigator.OuterXml%2A> properties are not very efficient. If performance is a priority, it is more efficient to use the node navigation methods of the <xref:System.Xml.XPath.XPathNavigator> to get values of child nodes.
  example:
  - "The following example uses the InnerXml property to display the contents of the first `book` element in the `contosoBooks.xml` file and its child nodes in the <xref:System.Xml.XPath.XPathNavigator>.  \n  \n [!code-vb[XPathNavigatorProperties#2](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_0_1.vb)]\n [!code-cpp[XPathNavigatorProperties#2](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_0_1.cpp)]\n [!code-cs[XPathNavigatorProperties#2](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_0_1.cs)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual string InnerXml { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>，包含当前节点的子节点标记。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.InnerXml*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "无法设置 InnerXml 属性。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertAfter
  id: InsertAfter
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertAfter()
  nameWithType: XPathNavigator.InsertAfter()
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlWriter>对象用于在当前所选节点之后创建一个新的同级节点。</xref:System.Xml.XmlWriter>"
  remarks: "以下是使用 InsertAfter 方法时要考虑的重要说明。      -新的同级节点不会插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>      -InsertAfter 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertAfter 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned by the InsertAfter method.  \n  \n [!code-cs[XPathNavigatorMethods#14](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_36_1.cs)]\n [!code-vb[XPathNavigatorMethods#14](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_36_1.vb)]\n [!code-cpp[XPathNavigatorMethods#14](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_36_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter InsertAfter ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>对象用于在当前所选节点之后创建一个新的同级节点。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.InsertAfter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许在当前节点之后插入一个新同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.String)
  id: InsertAfter(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertAfter(String)
  nameWithType: XPathNavigator.InsertAfter(String)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用指定的 XML 字符串在当前所选节点之后创建一个新的同级节点。"
  remarks: "若要创建一个新元素节点，请在 XML 字符串参数中包括所有的 XML 语法。 一个新的字符串`book`节点是`InsertAfter(&quot;<book/>&quot;)`。 插入文本&quot;book&quot;在当前节点的文本节点后的字符串为`InsertAfter(&quot;book&quot;)`。 如果 XML 字符串包含多个节点，将添加所有节点。       以下是使用 InsertAfter 方法时要考虑的重要说明。      -InsertAfter 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertAfter 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#15](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_7_1.cs)]\n [!code-vb[XPathNavigatorMethods#15](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_7_1.vb)]\n [!code-cpp[XPathNavigatorMethods#15](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_7_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertAfter (string newSibling);
    parameters:
    - id: newSibling
      type: System.String
      description: "新的同级节点的 XML 数据字符串。"
  overload: System.Xml.XPath.XPathNavigator.InsertAfter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "XML 字符串参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许在当前节点之后插入一个新同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 字符串参数不是格式正确的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)
  id: InsertAfter(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertAfter(XmlReader)
  nameWithType: XPathNavigator.InsertAfter(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用的 XML 内容在当前所选节点之后创建一个新的同级节点<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "以下是使用 InsertAfter 方法时要考虑的重要说明。      -如果<xref:System.Xml.XmlReader>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XmlReader>      -InsertAfter 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertAfter 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#16](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_42_1.cs)]\n [!code-vb[XPathNavigatorMethods#16](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_42_1.vb)]\n [!code-cpp[XPathNavigatorMethods#16](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_42_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertAfter (System.Xml.XmlReader newSibling);
    parameters:
    - id: newSibling
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>新的同级节点的 XML 数据上定位的对象。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.InsertAfter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.XmlReader>对象处于错误状态或已关闭。</xref:System.Xml.XmlReader>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许在当前节点之后插入一个新同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref:System.Xml.XmlReader>对象参数不是格式正确。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)
  id: InsertAfter(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertAfter(XPathNavigator)
  nameWithType: XPathNavigator.InsertAfter(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用中的节点在当前所选节点之后创建一个新的同级节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定对象。"
  remarks: "以下是使用 InsertAfter 方法时要考虑的重要说明。      -如果<xref:System.Xml.XmlReader>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XmlReader>      -InsertAfter 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertAfter 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#17](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_4_1.cs)]\n [!code-vb[XPathNavigatorMethods#17](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_4_1.vb)]\n [!code-cpp[XPathNavigatorMethods#17](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_4_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertAfter (System.Xml.XPath.XPathNavigator newSibling);
    parameters:
    - id: newSibling
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要添加为新的同级节点的节点上的对象。"
  overload: System.Xml.XPath.XPathNavigator.InsertAfter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许在当前节点之后插入一个新同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertBefore
  id: InsertBefore
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertBefore()
  nameWithType: XPathNavigator.InsertBefore()
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlWriter>用于创建新的同级节点当前所选节点前的对象。</xref:System.Xml.XmlWriter>"
  remarks: "以下是使用 InsertBefore 方法时要考虑的重要说明。      -新的同级节点不会插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>      -InsertBefore 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertBefore 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned by the InsertBefore method.  \n  \n [!code-cs[XPathNavigatorMethods#18](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_38_1.cs)]\n [!code-vb[XPathNavigatorMethods#18](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_38_1.vb)]\n [!code-cpp[XPathNavigatorMethods#18](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_38_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter InsertBefore ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>用于创建新的同级节点当前所选节点前的对象。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.InsertBefore*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许当前节点的前面插入新的同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.String)
  id: InsertBefore(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertBefore(String)
  nameWithType: XPathNavigator.InsertBefore(String)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建一个新的同级节点，使用指定的 XML 字符串在当前所选节点之前。"
  remarks: "若要创建一个新元素节点，请在 XML 字符串参数中包括所有的 XML 语法。 一个新的字符串`book`节点是`InsertBefore(&quot;<book/>&quot;)`。 插入文本&quot;book&quot;在当前节点的文本节点之前的字符串为`InsertBefore(&quot;book&quot;)`。 如果 XML 字符串包含多个节点，将添加所有节点。       以下是使用 InsertBefore 方法时要考虑的重要说明。      -InsertBefore 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertBefore 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#19](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_8_1.cs)]\n [!code-vb[XPathNavigatorMethods#19](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_8_1.vb)]\n [!code-cpp[XPathNavigatorMethods#19](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_8_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertBefore (string newSibling);
    parameters:
    - id: newSibling
      type: System.String
      description: "新的同级节点的 XML 数据字符串。"
  overload: System.Xml.XPath.XPathNavigator.InsertBefore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "XML 字符串参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许当前节点的前面插入新的同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 字符串参数不是格式正确的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)
  id: InsertBefore(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertBefore(XmlReader)
  nameWithType: XPathNavigator.InsertBefore(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建新的同级节点使用的 XML 内容在当前所选节点之前<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "以下是使用 InsertBefore 方法时要考虑的重要说明。      -如果<xref:System.Xml.XmlReader>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XmlReader>      -InsertBefore 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertBefore 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#20](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_2_1.cs)]\n [!code-vb[XPathNavigatorMethods#20](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_2_1.vb)]\n [!code-cpp[XPathNavigatorMethods#20](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_2_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertBefore (System.Xml.XmlReader newSibling);
    parameters:
    - id: newSibling
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>新的同级节点的 XML 数据上定位的对象。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.InsertBefore*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.XmlReader>对象处于错误状态或已关闭。</xref:System.Xml.XmlReader>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许当前节点的前面插入新的同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref:System.Xml.XmlReader>对象参数不是格式正确。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)
  id: InsertBefore(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertBefore(XPathNavigator)
  nameWithType: XPathNavigator.InsertBefore(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建新的同级节点使用中的节点在当前所选节点之前<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定。"
  remarks: "以下是使用 InsertBefore 方法时要考虑的重要说明。      -如果<xref:System.Xml.XPath.XPathNavigator>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XPath.XPathNavigator>      -InsertBefore 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertBefore 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new sibling element is inserted using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#21](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_5_1.cs)]\n [!code-vb[XPathNavigatorMethods#21](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_5_1.vb)]\n [!code-cpp[XPathNavigatorMethods#21](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_5_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertBefore (System.Xml.XPath.XPathNavigator newSibling);
    parameters:
    - id: newSibling
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要添加为新的同级节点的节点上的对象。"
  overload: System.Xml.XPath.XPathNavigator.InsertBefore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许当前节点的前面插入新的同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)
  id: InsertElementAfter(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertElementAfter(String,String,String,String)
  nameWithType: XPathNavigator.InsertElementAfter(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.InsertElementAfter(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用命名空间前缀、 本地名称和命名空间 URI，指定的值在当前节点之后创建一个新的同级元素。"
  remarks: "Namespace 前缀和 URI 值可以通过获取<xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A>或<xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A>方法。</xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> </xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> 例如，以下语法将插入一个同级元素使用的范围内命名空间`xmlns:bk=&quot;http://www.contoso.com/books&quot;`:```   navigator.InsertElementAfter(navigator.Prefix, &quot;pages&quot;, LookupNamespaceURI(navigator.Prefix), String.Empty)   ```这将创建新的同级`<bk:pages/>`元素。       以下是使用 InsertElementAfter 方法时要考虑的重要说明。      -如果指定的命名空间前缀是`null`或<xref:System.String.Empty?displayProperty=fullName>，然后从当前命名空间范围内获取的命名空间 URI 的新元素的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，则会自动生成的命名空间前缀。      -InsertElementAfter 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertElementAfter 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted after the `price` child element of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#22](~/add/codesnippet/csharp/a264880b-8998-4101-acb3-_1.cs)]\n [!code-vb[XPathNavigatorMethods#22](~/add/codesnippet/visualbasic/a264880b-8998-4101-acb3-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#22](~/add/codesnippet/cpp/a264880b-8998-4101-acb3-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertElementAfter (string prefix, string localName, string namespaceURI, string value);
    parameters:
    - id: prefix
      type: System.String
      description: "新的子元素 （如果有） 的命名空间前缀。"
    - id: localName
      type: System.String
      description: "新的子元素 （如果有） 的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的新的子元素 （如果有）。 <xref:System.String>和<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是等效的。</xref:System.String>"
    - id: value
      type: System.String
      description: "新的子元素的值。 如果<xref:System.String>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>传递一个空元素创建的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.InsertElementAfter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许在当前节点之后插入一个新同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)
  id: InsertElementBefore(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: InsertElementBefore(String,String,String,String)
  nameWithType: XPathNavigator.InsertElementBefore(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.InsertElementBefore(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建一个新的同级元素，使用命名空间前缀、 本地名称和命名空间 URI，指定的值在当前节点之前。"
  remarks: "Namespace 前缀和 URI 值可以通过获取<xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A>或<xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A>方法。</xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> </xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> 例如，以下语法将插入一个同级元素使用的范围内命名空间`xmlns:bk=&quot;http://www.contoso.com/books&quot;`:```   navigator.InsertElementBefore(navigator.Prefix, &quot;pages&quot;, LookupNamespaceURI(navigator.Prefix), String.Empty)   ```这将创建新的同级`<bk:pages/>`元素。       以下是使用 InsertElementBefore 方法时要考虑的重要说明。      -如果指定的命名空间前缀是`null`或<xref:System.String.Empty?displayProperty=fullName>，然后从当前命名空间范围内获取的命名空间 URI 的新元素的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，则会自动生成的命名空间前缀。      -InsertElementBefore 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -InsertElementBefore 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example a new `pages` element is inserted before the `price` child element of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#23](~/add/codesnippet/csharp/8d231bd2-ec77-4095-aaef-_1.cs)]\n [!code-vb[XPathNavigatorMethods#23](~/add/codesnippet/visualbasic/8d231bd2-ec77-4095-aaef-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#23](~/add/codesnippet/cpp/8d231bd2-ec77-4095-aaef-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void InsertElementBefore (string prefix, string localName, string namespaceURI, string value);
    parameters:
    - id: prefix
      type: System.String
      description: "新的子元素 （如果有） 的命名空间前缀。"
    - id: localName
      type: System.String
      description: "新的子元素 （如果有） 的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的新的子元素 （如果有）。 <xref:System.String>和<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是等效的。</xref:System.String>"
    - id: value
      type: System.String
      description: "新的子元素的值。 如果<xref:System.String>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>传递一个空元素创建的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.InsertElementBefore*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不允许当前节点的前面插入新的同级节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)
  id: IsDescendant(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: IsDescendant(XPathNavigator)
  nameWithType: XPathNavigator.IsDescendant(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.IsDescendant(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "确定是否指定<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>是当前的子代<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>为当前<xref:System.Xml.XPath.XPathNavigator>如果它位于当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的子代节点上</xref:System.Xml.XPath.XPathNavigator>的后代</xref:System.Xml.XPath.XPathNavigator> 采用，例如，下面的 XML 字符串︰`<item><name>widget</name></item>`如果当前<xref:System.Xml.XPath.XPathNavigator>位于`item`节点，和<xref:System.Xml.XPath.XPathNavigator>指定位于`name`节点，IsDescendant 返回`true`。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>       此方法始终返回`false`以下情况下:-<xref:System.Xml.XPath.XPathNavigator>指定的共享相同的实现，但在其他文档的点实例比当前导航器。</xref:System.Xml.XPath.XPathNavigator>      -<xref:System.Xml.XPath.XPathNavigator>指定具有比当前导航器的不同实现。</xref:System.Xml.XPath.XPathNavigator>"
  syntax:
    content: public virtual bool IsDescendant (System.Xml.XPath.XPathNavigator nav);
    parameters:
    - id: nav
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>要与此<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>是当前的子代<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.IsDescendant*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.IsEmptyElement
  id: IsEmptyElement
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: IsEmptyElement
  nameWithType: XPathNavigator.IsEmptyElement
  fullName: System.Xml.XPath.XPathNavigator.IsEmptyElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取一个值，该值指示当前节点是否一个没有结束元素标记的空元素。"
  remarks: "此属性使您能够确定以下不同元素之间的差异。      |元素 |由于执行值 |  |-------------|--------------------------|  |`<item num=&quot;123&quot;/>`|`true`|  |`<item num=&quot;123&quot;>test</item>`|`false`|  |`<item num=&quot;123&quot;></item>`|`false`|"
  syntax:
    content: public abstract bool IsEmptyElement { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前节点为空元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.IsEmptyElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.IsNode
  id: IsNode
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: IsNode
  nameWithType: XPathNavigator.IsNode
  fullName: System.Xml.XPath.XPathNavigator.IsNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取一个值，该值指示当前节点是否表示一个 XPath 节点。"
  syntax:
    content: public override sealed bool IsNode { get; }
    return:
      type: System.Boolean
      description: "始终返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.IsNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)
  id: IsSamePosition(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: IsSamePosition(XPathNavigator)
  nameWithType: XPathNavigator.IsSamePosition(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.IsSamePosition(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，确定是否当前<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>于指定的相同位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "IsSamePosition 方法假设<xref:System.Xml.XPath.XPathNavigator>指定共享相同的实现并且与当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>相同的文档实例指向</xref:System.Xml.XPath.XPathNavigator>       此方法始终返回`false`以下情况下:-<xref:System.Xml.XPath.XPathNavigator>指定共享相同的实现，但比当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的另一个文档实例中的点</xref:System.Xml.XPath.XPathNavigator>      <xref:System.Xml.XPath.XPathNavigator>具有不同于当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>实现</xref:System.Xml.XPath.XPathNavigator>-"
  syntax:
    content: public abstract bool IsSamePosition (System.Xml.XPath.XPathNavigator other);
    parameters:
    - id: other
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>要与此<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象具有相同的位置; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.IsSamePosition*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.LocalName
  id: LocalName
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: LocalName
  nameWithType: XPathNavigator.LocalName
  fullName: System.Xml.XPath.XPathNavigator.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取<xref:System.Xml.XPath.XPathNavigator.Name*>的当前节点不带任何命名空间前缀。</xref:System.Xml.XPath.XPathNavigator.Name*>"
  remarks: "取决于返回的本地名称<xref:System.Xml.XPath.XPathNodeType>当前节点。</xref:System.Xml.XPath.XPathNodeType> 例如，为的本地名称`<bk:book>`元素是`book`。       下表列出了基于 LocalName 属性返回的值<xref:System.Xml.XPath.XPathNodeType>当前节点。</xref:System.Xml.XPath.XPathNodeType>      |XPathNodeType |属性值 |  |-------------------|--------------------|  |<xref:System.Xml.XPath.XPathNodeType>|元素的本地名称。 |  |<xref:System.Xml.XPath.XPathNodeType>|该属性的本地名称。 |  |<xref:System.Xml.XPath.XPathNodeType>|命名空间 URI 与关联的前缀。 |  |<xref:System.Xml.XPath.XPathNodeType>|处理指令的目标。 |  |所有其他<xref:System.Xml.XPath.XPathNodeType>节点 |<xref:System.String.Empty?displayProperty=fullName>。 |</xref:System.String.Empty?displayProperty=fullName> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>"
  example:
  - "The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_6_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_6_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_6_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract string LocalName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>，其中包含当前节点的本地名称或&lt;xref:System.String?displayProperty=fullName&gt;如果当前节点没有名称 （例如，文本或注释节点）。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: LookupNamespace(String)
  nameWithType: XPathNavigator.LookupNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.LookupNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取指定前缀的命名空间 URI。"
  remarks: "如果<xref:System.String?displayProperty=fullName>指定为`prefix`参数，返回了 URI 的当前分配的默认命名空间。</xref:System.String?displayProperty=fullName> 如果没有默认命名空间 URI 显式分配，和<xref:System.String.Empty?displayProperty=fullName>指定为`prefix`参数，空白的前缀都不任何命名空间中的元素与关联和<xref:System.String?displayProperty=fullName>返回。</xref:System.String?displayProperty=fullName> </xref:System.String.Empty?displayProperty=fullName>      1> [!NOTE]&1;> 命名空间 URI 映射到的前缀可以更改 XML 文档中的从一个节点到另一个节点。 因此，LookupNamespace 方法的值可能不一致从一个节点到下一步。"
  example:
  - For an example of the LookupNamespace method, see the <xref:System.Xml.XPath.XPathNavigator.InsertElementAfter%2A> or <xref:System.Xml.XPath.XPathNavigator.InsertElementBefore%2A> methods.
  syntax:
    content: public virtual string LookupNamespace (string prefix);
    parameters:
    - id: prefix
      type: System.String
      description: "要解析其命名空间 URI 的前缀。 若要匹配默认命名空间，传递&lt;xref:System.String?displayProperty=fullName&gt;。"
    return:
      type: System.String
      description: "<xref:System.String>，其中包含 URI 分配给命名空间的命名空间前缀指定;<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>如果没有命名空间 URI 分配给指定的前缀。</xref:System.String> <xref:System.String>返回原子化的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.LookupNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)
  id: LookupPrefix(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: LookupPrefix(String)
  nameWithType: XPathNavigator.LookupPrefix(String)
  fullName: System.Xml.XPath.XPathNavigator.LookupPrefix(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取为指定的命名空间 URI 声明的前缀。"
  remarks: "LookupPrefix 方法返回与匹配的命名空间 URI 指定的第一个前缀。 多个引用相同的命名空间的前缀以任何特定的方式，因此特定前缀可能不会返回多个分配时每次，URI 才不进行排序。      1> [!NOTE]&1;> Namespace URI 的前缀映射可以更改 XML 文档中的从一个节点到另一个节点。 因此，LookupPrefix 方法的值可能不一致从一个节点到下一步。"
  syntax:
    content: public virtual string LookupPrefix (string namespaceURI);
    parameters:
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 为前缀解析。"
    return:
      type: System.String
      description: "A<xref:System.String>包含命名空间前缀分配给命名空间 URI; 否则为&lt;xref:System.String?displayProperty=fullName&gt;如果没有前缀分配给指定 URI 的命名空间。</xref:System.String> <xref:System.String>返回原子化的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.LookupPrefix*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Matches(System.String)
  id: Matches(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Matches(String)
  nameWithType: XPathNavigator.Matches(String)
  fullName: System.Xml.XPath.XPathNavigator.Matches(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "确定当前节点是否与指定的 XPath 表达式匹配。"
  remarks: "此方法对产生任何影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的状态"
  example:
  - For an example of the <xref:System.Xml.XPath.XPathNavigator.Matches%2A> method, see the <xref:System.Xml.XPath.XPathNavigator.Matches%2A?displayProperty=fullName> method.
  syntax:
    content: public virtual bool Matches (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "XPath 表达式。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前节点匹配指定的 XPath 表达式;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.Matches*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "无法计算 XPath 表达式。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)
  id: Matches(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Matches(XPathExpression)
  nameWithType: XPathNavigator.Matches(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Matches(XPathExpression)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "确定当前节点是否匹配所指定<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>。"
  remarks: "此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态 此方法等同于<xref:System.Xml.XPath.XPathNavigator.Matches%2A?displayProperty=fullName>方法，只不过<xref:System.Xml.XPath.XPathExpression>指定包含已编译的 XPath 表达式的对象，而不是 XPath 表达式<xref:System.String>.</xref:System.String> </xref:System.Xml.XPath.XPathExpression> </xref:System.Xml.XPath.XPathNavigator.Matches%2A?displayProperty=fullName>"
  example:
  - "The following example displays the titles of all novels.  \n  \n [!code-cs[XPathNavigatorMethods#24](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_20_1.cs)]\n [!code-vb[XPathNavigatorMethods#24](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_20_1.vb)]\n [!code-cpp[XPathNavigatorMethods#24](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_20_1.cpp)]  \n  \n The example uses the file, `books.xml`, as input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool Matches (System.Xml.XPath.XPathExpression expr);
    parameters:
    - id: expr
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>对象，其中包含已编译的 XPath 表达式。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前节点匹配<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.Matches*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "无法计算 XPath 表达式。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)
  id: MoveTo(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveTo(XPathNavigator)
  nameWithType: XPathNavigator.MoveTo(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveTo(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到与指定的同一位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。"
  remarks: "此方法始终返回`true`如果<xref:System.Xml.XPath.XPathNavigator>指定的<xref:System.Xml.XPath.XPathNavigator>共享相同的实现和指向与当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>相同的文档实例</xref:System.Xml.XPath.XPathNavigator></xref:System.Xml.XPath.XPathNavigator>       此方法始终返回`false`如果<xref:System.Xml.XPath.XPathNavigator>指定<xref:System.Xml.XPath.XPathNavigator>，其不同于当前<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的实现</xref:System.Xml.XPath.XPathNavigator></xref:System.Xml.XPath.XPathNavigator>"
  syntax:
    content: public abstract bool MoveTo (System.Xml.XPath.XPathNavigator other);
    parameters:
    - id: other
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>位于你想要将移动到的节点上。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到指定的相同位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)
  id: MoveToAttribute(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToAttribute(String,String)
  nameWithType: XPathNavigator.MoveToAttribute(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToAttribute(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到具有匹配的本地名称和命名空间 URI 的属性。"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在元素上，则此方法返回`false`。</xref:System.Xml.XPath.XPathNavigator>       成功调用了 MoveToAttribute， <xref:System.Xml.XPath.XPathNavigator.LocalName%2A>，<xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A>和<xref:System.Xml.XPath.XPathNavigator.Prefix%2A>属性反映属性的值。</xref:System.Xml.XPath.XPathNavigator.Prefix%2A> </xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A> </xref:System.Xml.XPath.XPathNavigator.LocalName%2A> 当<xref:System.Xml.XPath.XPathNavigator>定位在属性上，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改导航器位置。 相反，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A>可以移到下一步的属性节点。</xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A>       后定位在属性上，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>移动到所有者元素。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>"
  syntax:
    content: public virtual bool MoveToAttribute (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "属性的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的属性;<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>空命名空间。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功移动到的属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)
  id: MoveToChild(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToChild(XPathNodeType)
  nameWithType: XPathNavigator.MoveToChild(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToChild(XPathNodeType)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到的子节点<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>指定。"
  remarks: "MoveToChild 方法的返回值依赖于<xref:System.Xml.XPath.XPathNodeType>的当前节点中，与<xref:System.Xml.XPath.XPathNodeType>要将移动到的子节点。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>       下表显示了不同<xref:System.Xml.XPath.XPathNodeType>节点，并且它们可以移动到的子节点。</xref:System.Xml.XPath.XPathNodeType>      |当前节点的 XPathNodeType |子节点的 XPathNodeType |  |----------------------------------|--------------------------------|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |所有其他<xref:System.Xml.XPath.XPathNodeType>值 |None.|</xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType>"
  syntax:
    content: public virtual bool MoveToChild (System.Xml.XPath.XPathNodeType type);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>要将移动到的子节点。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到的子节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToChild*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)
  id: MoveToChild(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToChild(String,String)
  nameWithType: XPathNavigator.MoveToChild(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToChild(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到的本地名称和命名空间 URI 指定的子节点。"
  remarks: ''
  example:
  - For an example of the MoveToChild method, see the <xref:System.Xml.XPath.XPathNavigator.AppendChild%2A> method.
  syntax:
    content: public virtual bool MoveToChild (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "要将移动到的子节点本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间的子节点的 URI 将移到。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到的子节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToChild*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFirst
  id: MoveToFirst
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFirst()
  nameWithType: XPathNavigator.MoveToFirst()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirst()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>至当前节点的第一个同级节点。"
  syntax:
    content: public virtual bool MoveToFirst ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到当前节点; 的第一个同级节点<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果没有任何第一个同级，或者如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前位于属性节点上。 如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>已位于上的第一个同级<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>将返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>将不会移动其位置。       如果 MoveToFirst 返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>原因是没有第一个同级，或者如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前所处的位置，属性<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFirst*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute
  id: MoveToFirstAttribute
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFirstAttribute()
  nameWithType: XPathNavigator.MoveToFirstAttribute()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到当前节点的第一个属性。"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在元素上，则此方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>不会更改。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>       成功调用了 MoveToFirstAttribute， <xref:System.Xml.XPath.XPathNavigator.LocalName%2A>，<xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A>和<xref:System.Xml.XPath.XPathNavigator.Prefix%2A>属性反映属性的值。</xref:System.Xml.XPath.XPathNavigator.Prefix%2A> </xref:System.Xml.XPath.XPathNavigator.NamespaceURI%2A> </xref:System.Xml.XPath.XPathNavigator.LocalName%2A> 当<xref:System.Xml.XPath.XPathNavigator>定位在属性上，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置 相反，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A>可以移到下一步的属性节点。</xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A>       后<xref:System.Xml.XPath.XPathNavigator>位于在特性上，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>移动到所有者元素。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "The following example uses the MoveToFirstAttribute and <xref:System.Xml.XPath.XPathNavigator.MoveToNextAttribute%2A> methods to display all the attributes for each book in the `books.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#49](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_18_1.cs)]\n [!code-vb[XPathNavigatorMethods#49](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_18_1.vb)]\n [!code-cpp[XPathNavigatorMethods#49](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_18_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract bool MoveToFirstAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到当前节点的第一个属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstChild
  id: MoveToFirstChild
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFirstChild()
  nameWithType: XPathNavigator.MoveToFirstChild()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstChild()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>至当前节点的第一个子节点。"
  remarks: "<xref:System.Xml.XPath.XPathNodeType>和<xref:System.Xml.XPath.XPathNodeType>是只有两个<xref:System.Xml.XPath.XPathNodeType>可以有子级的值。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType> 此属性始终返回`false`对于所有其他<xref:System.Xml.XPath.XPathNodeType>节点类型。</xref:System.Xml.XPath.XPathNodeType>"
  example:
  - For an example of the MoveToFirstChild method, see the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method.
  syntax:
    content: public abstract bool MoveToFirstChild ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到当前节点的第一个子节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace
  id: MoveToFirstNamespace
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFirstNamespace()
  nameWithType: XPathNavigator.MoveToFirstNamespace()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>至当前节点的第一个命名空间节点。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>类按反向文档顺序返回命名空间节点。</xref:System.Xml.XPath.XPathNavigator> 因此，MoveToFirstNamespace 实质上移到最后一个命名空间节点在当前范围内。       后<xref:System.Xml.XPath.XPathNavigator>已移动到命名空间节点，<xref:System.Xml.XPath.XPathNavigator.Name%2A>属性反映命名空间的名称。</xref:System.Xml.XPath.XPathNavigator.Name%2A> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>位于命名空间节点，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置 相反，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>可以移到下一步的命名空间节点。</xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>       后<xref:System.Xml.XPath.XPathNavigator>定位在命名空间节点上，调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>将移到元素节点。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。"
  syntax:
    content: public bool MoveToFirstNamespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到第一个命名空间节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
  id: MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFirstNamespace(XPathNamespaceScope)
  nameWithType: XPathNavigator.MoveToFirstNamespace(XPathNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(XPathNamespaceScope)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到匹配的第一个命名空间节点<xref href=&quot;System.Xml.XPath.XPathNamespaceScope&quot;></xref>指定。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>类按反向文档顺序返回命名空间节点。</xref:System.Xml.XPath.XPathNavigator> 因此，MoveToFirstNamespace 实质上移到最后一个命名空间节点在当前范围内。       例如，使用以下 XML 片段，如果<xref:System.Xml.XPath.XPathNavigator>位于`data`节点，按以下方式 MoveToFirstNamespace 的行为。</xref:System.Xml.XPath.XPathNavigator>      -`MoveToFirstNamespace(XPathNamespaceScope.All)`将移至以下命名空间节点之一︰ `xmlns:c=&quot;C&quot;`， `xmlns:a=&quot;A2&quot;`， `xmlns=&quot;&quot;`， `xmlns:b=&quot;B&quot;`，或`xmlns:xml=&quot;http://www.w3.org/XML/1998/namespace&quot;`。      -`MoveToFirstNamespace(XPathNamespaceScope.ExcludeXml)`将移至以下命名空间节点之一︰ `xmlns:c=&quot;C&quot;`， `xmlns:a=&quot;A2&quot;`， `xmlns=&quot;&quot;`，或`xmlns:b=&quot;B&quot;`。      -`MoveToFirstNamespace(XPathNamespaceScope.Local)`将移到`xmlns:c=&quot;C&quot;`节点。      ```   <root xmlns=&quot;urn:default&quot; xmlns:a=&quot;A1&quot; xmlns:b=&quot;B&quot;>       <item xmlns=&quot;&quot; xmlns:a=&quot;A2&quot;>           <data xmlns:c=&quot;C&quot; />       </item>   </root>   ```如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在元素上，则此方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>不会更改。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> 后<xref:System.Xml.XPath.XPathNavigator>已移动到命名空间节点，<xref:System.Xml.XPath.XPathNavigator.Name%2A>属性反映命名空间的名称。</xref:System.Xml.XPath.XPathNavigator.Name%2A> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>位于命名空间节点，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置 相反，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>可以移到下一步的命名空间节点。</xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>       后<xref:System.Xml.XPath.XPathNavigator>定位在命名空间节点上，调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>将移到元素节点。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。"
  syntax:
    content: public abstract bool MoveToFirstNamespace (System.Xml.XPath.XPathNamespaceScope namespaceScope);
    parameters:
    - id: namespaceScope
      type: System.Xml.XPath.XPathNamespaceScope
      description: "<xref href=&quot;System.Xml.XPath.XPathNamespaceScope&quot;> </xref>值，描述在命名空间范围。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到第一个命名空间节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)
  id: MoveToFollowing(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFollowing(XPathNodeType)
  nameWithType: XPathNavigator.MoveToFollowing(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(XPathNodeType)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>的下一个元素到<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>按文档顺序指定。"
  remarks: "-MoveToFollowing 方法不移动到属性或命名空间节点。 如果<xref:System.Xml.XPath.XPathNodeType>参数值是<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>，MoveToFollowing 方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>      -如果<xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>方法返回`false`的位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>"
  example:
  - "In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `bookstore` element.  \n  \n [!code-cs[XPathNavigatorMethods#25](~/add/codesnippet/csharp/f98a9cba-50b6-4275-968f-_1.cs)]\n [!code-vb[XPathNavigatorMethods#25](~/add/codesnippet/visualbasic/f98a9cba-50b6-4275-968f-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#25](~/add/codesnippet/cpp/f98a9cba-50b6-4275-968f-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool MoveToFollowing (System.Xml.XPath.XPathNodeType type);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>的元素。 The <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref> cannot be <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref> or <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>移动成功; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFollowing*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)
  id: MoveToFollowing(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFollowing(String,String)
  nameWithType: XPathNavigator.MoveToFollowing(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>的本地名称和命名空间 URI 按文档顺序指定的元素。"
  remarks: "如果 MoveToFollowing 方法返回`false`的位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the first `price` element.  \n  \n [!code-cs[XPathNavigatorMethods#26](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_40_1.cs)]\n [!code-vb[XPathNavigatorMethods#26](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_40_1.vb)]\n [!code-cpp[XPathNavigatorMethods#26](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_40_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool MoveToFollowing (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "元素的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的元素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>移动成功; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFollowing*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)
  id: MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFollowing(XPathNodeType,XPathNavigator)
  nameWithType: XPathNavigator.MoveToFollowing(XPathNodeType,XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(XPathNodeType,XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>的下一个元素到<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>指定到按文档顺序指定的边界。"
  remarks: "-MoveToFollowing 方法不移动到属性或命名空间节点。 如果<xref:System.Xml.XPath.XPathNodeType>参数值是<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>，MoveToFollowing 方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>      -如果<xref:System.Xml.XPath.XPathNavigator>作为参数传递的边界未定位在当前的位置后<xref:System.Xml.XPath.XPathNavigator>它将被忽略。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>      -如果<xref:System.Xml.XPath.XPathNavigator>作为参数传递的边界是`null`具有指定的下一步以下节点<xref:System.Xml.XPath.XPathNodeType>位于按文档顺序。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNavigator>      -<xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>方法无法用于将移动到属性或命名空间节点。</xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> 如果<xref:System.Xml.XPath.XPathNavigator>作为一个参数是否位于某个属性或命名空间节点传递的边界，则相当于<xref:System.Xml.XPath.XPathNavigator>边界参数具有定位在其父元素的第一个子节点上。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> 这样可确保属性或命名空间节点的父元素的<xref:System.Xml.XPath.XPathNavigator>边界参数位于在可以通过此方法匹配。</xref:System.Xml.XPath.XPathNavigator>      -如果<xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>方法返回`false`的位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>"
  example:
  - "In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `price` element. A clone of the <xref:System.Xml.XPath.XPathNavigator> object is made using the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method. The cloned <xref:System.Xml.XPath.XPathNavigator>, positioned on the `price` element, will be used as a boundary. Changes in the position of the cloned <xref:System.Xml.XPath.XPathNavigator> do not affect the original <xref:System.Xml.XPath.XPathNavigator>. The original <xref:System.Xml.XPath.XPathNavigator> is moved back to the root of the `contosoBooks.xml` file using the <xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A> method. The title and first and last name of the author are retrieved using the MoveToFollowing method and an <xref:System.Xml.XPath.XPathNodeType> of <xref:System.Xml.XPath.XPathNodeType>. The MoveToFollowing method will return true until the `price` element boundary is reached.  \n  \n [!code-cs[XPathNavigatorMethods#27](~/add/codesnippet/csharp/d7939994-0d32-4505-9753-_1.cs)]\n [!code-vb[XPathNavigatorMethods#27](~/add/codesnippet/visualbasic/d7939994-0d32-4505-9753-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#27](~/add/codesnippet/cpp/d7939994-0d32-4505-9753-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool MoveToFollowing (System.Xml.XPath.XPathNodeType type, System.Xml.XPath.XPathNavigator end);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>的元素。 The <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref> cannot be <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref> or <xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>."
    - id: end
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位的元素边界上的对象的当前<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不会移动之后时搜索的以下元素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>移动成功; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFollowing*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)
  id: MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToFollowing(String,String,XPathNavigator)
  nameWithType: XPathNavigator.MoveToFollowing(String,String,XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(String,String,XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>的本地名称和命名空间 URI，到按文档顺序指定的边界的元素。"
  remarks: "-如果<xref:System.Xml.XPath.XPathNavigator>作为参数传递的边界未定位在当前的位置后<xref:System.Xml.XPath.XPathNavigator>它将被忽略。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>      -如果<xref:System.Xml.XPath.XPathNavigator>边界参数是`null`，按文档顺序查找具有的本地名称和命名空间 URI 的以下元素。</xref:System.Xml.XPath.XPathNavigator>      -<xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A>方法无法用于将移动到属性或命名空间节点。</xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> 如果<xref:System.Xml.XPath.XPathNavigator>作为一个参数是否位于某个属性或命名空间节点传递的边界，则相当于<xref:System.Xml.XPath.XPathNavigator>边界参数具有定位在其父元素的第一个子节点上。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> 这样可确保属性或命名空间节点的父元素的<xref:System.Xml.XPath.XPathNavigator>边界参数位于在可以通过此方法匹配。</xref:System.Xml.XPath.XPathNavigator>      -如果 MoveToFollowing 方法返回`false`的位置<xref:System.Xml.XPath.XPathNavigator>保持不变。</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "In the following example, the <xref:System.Xml.XPath.XPathNavigator> is moved from the root of the `contosoBooks.xml` file to the following `book` element. A clone of the <xref:System.Xml.XPath.XPathNavigator> object is made using the <xref:System.Xml.XPath.XPathNavigator.Clone%2A> method and is moved from the `book` element to the following `first-name` element. The cloned <xref:System.Xml.XPath.XPathNavigator>, positioned on the `first-name` element, will be used as a boundary. Changes in the position of the cloned <xref:System.Xml.XPath.XPathNavigator> do not affect the original <xref:System.Xml.XPath.XPathNavigator>. The original <xref:System.Xml.XPath.XPathNavigator> then attempts to move to the following `price` element using the MoveToFollowing method with the boundary passed as a parameter. This move fails because the following `price` element is beyond the boundary. The original <xref:System.Xml.XPath.XPathNavigator> then attempts to move to the following `title` element which is before the boundary using the same method and succeeds.  \n  \n [!code-cs[XPathNavigatorMethods#28](~/add/codesnippet/csharp/4f1b54c7-aeb2-4ebd-b9cd-_1.cs)]\n [!code-vb[XPathNavigatorMethods#28](~/add/codesnippet/visualbasic/4f1b54c7-aeb2-4ebd-b9cd-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#28](~/add/codesnippet/cpp/4f1b54c7-aeb2-4ebd-b9cd-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual bool MoveToFollowing (string localName, string namespaceURI, System.Xml.XPath.XPathNavigator end);
    parameters:
    - id: localName
      type: System.String
      description: "元素的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的元素。"
    - id: end
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位的元素边界上的对象的当前<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不会移动之后时搜索的以下元素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>移动成功; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.MoveToFollowing*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToId(System.String)
  id: MoveToId(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToId(String)
  nameWithType: XPathNavigator.MoveToId(String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToId(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，将移动到具有类型的属性的节点`ID`其值与匹配的指定<xref:System.String>。</xref:System.String>"
  remarks: "此方法可以用于标识节点由唯一`ID`提供源文档中显式声明类型的属性`ID`使用 DTD。       例如，假设下面的 XML 数据， `<data><x a=&quot;a1&quot;/></data>`，使用包含以下 DTD 加载︰ `<!ATTLIST x a ID #REQUIRED>`。       如果<xref:System.Xml.XPath.XPathNavigator>所调用的 XML 数据中某个位置处`MoveToId(&quot;a1&quot;)`位置<xref:System.Xml.XPath.XPathNavigator>元素节点上`x`。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>"
  syntax:
    content: public abstract bool MoveToId (string id);
    parameters:
    - id: id
      type: System.String
      description: "A<xref:System.String>表示`ID`您想要移动的节点的值。</xref:System.String>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功移动; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，则导航器的位置不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToId*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)
  id: MoveToNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNamespace(String)
  nameWithType: XPathNavigator.MoveToNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNamespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到具有指定的命名空间前缀的命名空间节点。"
  remarks: "后<xref:System.Xml.XPath.XPathNavigator>已移动到命名空间节点，<xref:System.Xml.XPath.XPathNavigator.Name%2A>属性反映命名空间的名称。</xref:System.Xml.XPath.XPathNavigator.Name%2A> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>位于命名空间节点，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置 相反，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>可以移到下一步的命名空间节点。</xref:System.Xml.XPath.XPathNavigator.MoveToNextNamespace%2A>       后<xref:System.Xml.XPath.XPathNavigator>位于在命名空间节点上，可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>将移到元素节点。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。"
  syntax:
    content: public virtual bool MoveToNamespace (string name);
    parameters:
    - id: name
      type: System.String
      description: "命名空间节点的命名空间前缀。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到指定的命名空间;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果找不到匹配的命名空间节点，或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>不定位在元素节点上。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNext
  id: MoveToNext
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNext()
  nameWithType: XPathNavigator.MoveToNext()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>至当前节点的下一个同级节点。"
  remarks: ''
  example:
  - "The following example iterates over the node tree recursively, and displays information about element and text nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_17_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_17_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_17_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract bool MoveToNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一个同级节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果没有更多同级节点或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前位于属性节点上。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNext*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)
  id: MoveToNext(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNext(XPathNodeType)
  nameWithType: XPathNavigator.MoveToNext(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext(XPathNodeType)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到匹配的当前节点的下一个同级节点<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>指定。"
  remarks: "MoveToNext 方法的返回值依赖于<xref:System.Xml.XPath.XPathNodeType>当前节点的和<xref:System.Xml.XPath.XPathNodeType>将移到的下一个同级节点。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>       下表显示了不同<xref:System.Xml.XPath.XPathNodeType>节点和它们可以移动到的同级节点。</xref:System.Xml.XPath.XPathNodeType>      |当前节点的 XPathNodeType |同级节点 XPathNodeType |  |----------------------------------|----------------------------------|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, <xref:System.Xml.XPath.XPathNodeType>, or <xref:System.Xml.XPath.XPathNodeType>.|  |所有其他<xref:System.Xml.XPath.XPathNodeType>值 |None.|</xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType>"
  syntax:
    content: public virtual bool MoveToNext (System.Xml.XPath.XPathNodeType type);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>将移到的同级节点。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一个同级节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果没有更多同级节点或如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前位于属性节点上。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNext*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)
  id: MoveToNext(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNext(String,String)
  nameWithType: XPathNavigator.MoveToNext(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>具有本地名称和命名空间 URI 的下一个同级节点。"
  syntax:
    content: public virtual bool MoveToNext (string localName, string namespaceURI);
    parameters:
    - id: localName
      type: System.String
      description: "要移动到下一个同级节点本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间将移到下一个同级节点的 URI。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一个同级节点;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果没有更多同级节点，或者如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前位于属性节点上。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNext*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNextAttribute
  id: MoveToNextAttribute
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNextAttribute()
  nameWithType: XPathNavigator.MoveToNextAttribute()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextAttribute()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到下一个属性。"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在属性，则此方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>不会更改。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>定位在属性上，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>方法不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置       后<xref:System.Xml.XPath.XPathNavigator>位于在特性上，你可以调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>移动到所有者元素。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "The following example uses the <xref:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute%2A> and MoveToNextAttribute methods to display all the attributes for each book in the `books.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#49](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_23_1.cs)]\n [!code-vb[XPathNavigatorMethods#49](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_23_1.vb)]\n [!code-cpp[XPathNavigatorMethods#49](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_23_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract bool MoveToNextAttribute ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一个属性;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果没有更多属性。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNextAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNextNamespace
  id: MoveToNextNamespace
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNextNamespace()
  nameWithType: XPathNavigator.MoveToNextNamespace()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextNamespace()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到下一步的命名空间节点。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>类按反向文档顺序返回命名空间节点。</xref:System.Xml.XPath.XPathNavigator> 因此，MoveToNextNamespace 实质上移到当前范围内的上一个命名空间节点。       如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在命名空间节点上，此方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>不会更改。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>位于命名空间节点，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置       后<xref:System.Xml.XPath.XPathNavigator>定位在命名空间节点上，调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>将移到元素节点。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。"
  syntax:
    content: public bool MoveToNextNamespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一步的命名空间节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNextNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
  id: MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToNextNamespace(XPathNamespaceScope)
  nameWithType: XPathNavigator.MoveToNextNamespace(XPathNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextNamespace(XPathNamespaceScope)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到下一步的命名空间节点匹配<xref href=&quot;System.Xml.XPath.XPathNamespaceScope&quot;></xref>指定。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>类按反向文档顺序返回命名空间节点。</xref:System.Xml.XPath.XPathNavigator>       如果<xref:System.Xml.XPath.XPathNavigator>当前未定位在命名空间节点上，此方法返回`false`和位置<xref:System.Xml.XPath.XPathNavigator>不会更改。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>       当<xref:System.Xml.XPath.XPathNavigator>位于命名空间节点，方法<xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A>， <xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A>，和<xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A>不适用。</xref:System.Xml.XPath.XPathNavigator.MoveToFirst%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToPrevious%2A> </xref:System.Xml.XPath.XPathNavigator.MoveToNext%2A> </xref:System.Xml.XPath.XPathNavigator> 这些方法始终返回`false`，不会更改<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置       后<xref:System.Xml.XPath.XPathNavigator>定位在命名空间节点上，调用<xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A>将移到元素节点。</xref:System.Xml.XPath.XPathNavigator.MoveToParent%2A> </xref:System.Xml.XPath.XPathNavigator>       命名空间节点的定义，请参阅位于 http://www.w3.org/TR/xpath#data-model W3C XML 路径语言 (XPath) 建议的 5.4 节。"
  syntax:
    content: public abstract bool MoveToNextNamespace (System.Xml.XPath.XPathNamespaceScope namespaceScope);
    parameters:
    - id: namespaceScope
      type: System.Xml.XPath.XPathNamespaceScope
      description: "<xref href=&quot;System.Xml.XPath.XPathNamespaceScope&quot;> </xref>值，描述在命名空间范围。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到下一步的命名空间节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToNextNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToParent
  id: MoveToParent
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToParent()
  nameWithType: XPathNavigator.MoveToParent()
  fullName: System.Xml.XPath.XPathNavigator.MoveToParent()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>至当前节点的父节点。"
  remarks: "MoveToParent 方法的返回值依赖于<xref:System.Xml.XPath.XPathNodeType>的当前节点中，与<xref:System.Xml.XPath.XPathNodeType>的要移动到父节点。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>       下表显示了不同<xref:System.Xml.XPath.XPathNodeType>节点，并且它们可以移动到父节点。</xref:System.Xml.XPath.XPathNodeType>      |XPathNodeType |父节点 |  |-------------------|-----------------|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>节点没有父级。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>节点。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType> or <xref:System.Xml.XPath.XPathNodeType> node.|</xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType>"
  example:
  - For an example of the MoveToParent method, see the <xref:System.Xml.XPath.XPathNavigator.CreateAttribute%2A> method.
  syntax:
    content: public abstract bool MoveToParent ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到当前节点的父节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToParent*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToPrevious
  id: MoveToPrevious
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToPrevious()
  nameWithType: XPathNavigator.MoveToPrevious()
  fullName: System.Xml.XPath.XPathNavigator.MoveToPrevious()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写时移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到当前节点的上一个同级节点。"
  syntax:
    content: public abstract bool MoveToPrevious ();
    parameters: []
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>成功地移动到上一个同级节点; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果没有上一个同级节点或<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>当前位于属性节点上。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>的位置<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>保持不变。"
  overload: System.Xml.XPath.XPathNavigator.MoveToPrevious*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.MoveToRoot
  id: MoveToRoot
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: MoveToRoot()
  nameWithType: XPathNavigator.MoveToRoot()
  fullName: System.Xml.XPath.XPathNavigator.MoveToRoot()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "将移动<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>到当前节点所属的根节点。"
  remarks: "所有节点均都属于一个且仅有一个文档。 因此，此方法始终是成功的。"
  example:
  - For an example of the MoveToRoot method, see the <xref:System.Xml.XPath.XPathNavigator.MoveToFollowing%2A> method.
  syntax:
    content: public virtual void MoveToRoot ();
    parameters: []
  overload: System.Xml.XPath.XPathNavigator.MoveToRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Name
  id: Name
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Name
  nameWithType: XPathNavigator.Name
  fullName: System.Xml.XPath.XPathNavigator.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取当前节点的限定的名称。"
  remarks: "返回的名称取决于<xref:System.Xml.XPath.XPathNodeType>当前节点。</xref:System.Xml.XPath.XPathNodeType> 例如，名称`<bk:book>`元素是`bk:book`。       下表列出了 Name 属性，基于返回的值<xref:System.Xml.XPath.XPathNodeType>当前节点。</xref:System.Xml.XPath.XPathNodeType>      |XPathNodeType |属性值 |  |-------------------|--------------------|  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType>的限定的名称</xref:System.Xml.XPath.XPathNodeType> 在下面的示例中， `<bk:book>`，元素节点的名称是`bk:book`。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType>的限定的名称</xref:System.Xml.XPath.XPathNodeType> 在下面的示例中， `<book bk:genre=&quot;novel&quot;>`，<xref:System.Xml.XPath.XPathNodeType>节点的名称是`bk:genre`。 |  |<xref:System.Xml.XPath.XPathNodeType>|命名空间 URI 与关联的前缀。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> 在以下命名空间声明中， `xmlns:bk=&quot;urn:samples&quot;`，名称属性返回`bk`。 |  |<xref:System.Xml.XPath.XPathNodeType>|目标的<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> 在下面的示例中， `<?xml-stylesheet type=&quot;text/xsl&quot; href= &quot;books.xsl&quot;?>`，名称属性返回`xml-stylesheet`。 |  |所有其他<xref:System.Xml.XPath.XPathNodeType>节点 |<xref:System.String.Empty?displayProperty=fullName>。 |</xref:System.String.Empty?displayProperty=fullName> </xref:System.Xml.XPath.XPathNodeType>"
  example:
  - "The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_12_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_12_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_12_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: "A <xref:System.String>，其中包含当前节点的限定的名称或&lt;xref:System.String?displayProperty=fullName&gt;如果当前节点没有名称 （例如，文本或注释节点）。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XPathNavigator.NamespaceURI
  fullName: System.Xml.XPath.XPathNavigator.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取当前节点的 URI 的命名空间。"
  remarks: "URI 返回的命名空间依赖于<xref:System.Xml.XPath.XPathNodeType>当前节点。</xref:System.Xml.XPath.XPathNodeType>       NamespaceURI 属性返回`urn:samples`节点`<bk:book xmlns:bk=&quot;urn:samples&quot;>`。       仅<xref:System.Xml.XPath.XPathNodeType>和<xref:System.Xml.XPath.XPathNodeType><xref:System.Xml.XPath.XPathNodeType>节点可以具有命名空间 URI。</xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>"
  example:
  - "The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_5_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_5_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_5_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract string NamespaceURI { get; }
    return:
      type: System.String
      description: "A<xref:System.String>包含命名空间 URI 的当前节点，或&lt;xref:System.String?displayProperty=fullName&gt;如果当前节点没有命名空间 URI。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.NamespaceURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.NameTable
  id: NameTable
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: NameTable
  nameWithType: XPathNavigator.NameTable
  fullName: System.Xml.XPath.XPathNavigator.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取<xref:System.Xml.XmlNameTable>的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>。</xref:System.Xml.XmlNameTable>"
  remarks: "<xref:System.Xml.XmlNameTable>存储原子化的任何本地名称、 命名空间 URI 和使用受支持<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>前缀的字符串</xref:System.Xml.XmlNameTable> 这意味着，当相同<xref:System.Xml.XPath.XPathNavigator.Name%2A>多次 （例如&quot;book&quot;)，返回同一<xref:System.String>对象返回以该团队<xref:System.Xml.XPath.XPathNavigator.Name%2A>。</xref:System.Xml.XPath.XPathNavigator.Name%2A> </xref:System.String> </xref:System.Xml.XPath.XPathNavigator.Name%2A> 这使得可以用来编写高效的代码，未对象比较对这些字符串，而不是昂贵的字符串比较。"
  syntax:
    content: public abstract System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "<xref:System.Xml.XmlNameTable>对象使您能够获取的原子化的版本<xref:System.String>XML 文档中。</xref:System.String> </xref:System.Xml.XmlNameTable>"
  overload: System.Xml.XPath.XPathNavigator.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.NavigatorComparer
  id: NavigatorComparer
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: NavigatorComparer
  nameWithType: XPathNavigator.NavigatorComparer
  fullName: System.Xml.XPath.XPathNavigator.NavigatorComparer
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取<xref:System.Collections.IEqualityComparer>用于的相等比较<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象。</xref:System.Collections.IEqualityComparer>"
  remarks: "NavigatorComparer 属性允许<xref:System.Xml.XPath.XPathNavigator>对象进行比较基于位置而不是对对象引用。</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator.ComparePosition%2A>和<xref:System.Object.Equals%2A>实现此类的方法基于的位置<xref:System.Xml.XPath.XPathNavigator>对象作为参数传递。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Object.Equals%2A> </xref:System.Xml.XPath.XPathNavigator.ComparePosition%2A> <xref:System.Object.GetHashCode%2A>方法实现此类使用其本地名称和命名空间 URI 等节点的属性来创建节点的哈希代码。</xref:System.Object.GetHashCode%2A>"
  example:
  - "The following example illustrates the use of the NavigatorComparer property.  \n  \n [!code-vb[XPathNavigatorProperties#3](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_11_1.vb)]\n [!code-cpp[XPathNavigatorProperties#3](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_11_1.cpp)]\n [!code-cs[XPathNavigatorProperties#3](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_11_1.cs)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public static System.Collections.IEqualityComparer NavigatorComparer { get; }
    return:
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>用于的相等比较<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象。</xref:System.Collections.IEqualityComparer>"
  overload: System.Xml.XPath.XPathNavigator.NavigatorComparer*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.NodeType
  id: NodeType
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: NodeType
  nameWithType: XPathNavigator.NodeType
  fullName: System.Xml.XPath.XPathNavigator.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>当前节点。"
  remarks: ''
  example:
  - "The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_4_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_4_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_4_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract System.Xml.XPath.XPathNodeType NodeType { get; }
    return:
      type: System.Xml.XPath.XPathNodeType
      description: "之一<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;></xref>表示当前节点的值。"
  overload: System.Xml.XPath.XPathNavigator.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.OuterXml
  id: OuterXml
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: OuterXml
  nameWithType: XPathNavigator.OuterXml
  fullName: System.Xml.XPath.XPathNavigator.OuterXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取或设置表示开始标记及结束标记的当前节点及其子节点的标记。"
  remarks: >-
    > [!NOTE]

    >  The <xref:System.Xml.XPath.XPathNavigator.InnerXml%2A> and OuterXml properties are not very efficient. If performance is a priority, it is more efficient to use the node navigation methods of the <xref:System.Xml.XPath.XPathNavigator> to get values of child nodes.
  example:
  - "The following example uses the OuterXml property to display the contents of the first `book` element in the `contosoBooks.xml` file, its child nodes, and its opening and closing tags in the <xref:System.Xml.XPath.XPathNavigator>.  \n  \n [!code-vb[XPathNavigatorProperties#4](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_2_1.vb)]\n [!code-cpp[XPathNavigatorProperties#4](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_2_1.cpp)]\n [!code-cs[XPathNavigatorProperties#4](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_2_1.cs)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual string OuterXml { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>，包含表示开始标记及结束标记的当前节点及其子节点标记。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.OuterXml*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Prefix
  id: Prefix
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Prefix
  nameWithType: XPathNavigator.Prefix
  fullName: System.Xml.XPath.XPathNavigator.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当在派生类中重写，获取与当前节点关联的命名空间前缀。"
  remarks: "前缀属性获取与当前节点关联的命名空间前缀。 例如，前缀属性返回`bk`为`<bk:book>`元素。 如果前缀不存在，或<xref:System.Xml.XPath.XPathNodeType>当前节点是不<xref:System.Xml.XPath.XPathNodeType>或<xref:System.Xml.XPath.XPathNodeType>，则前缀属性返回<xref:System.String.Empty?displayProperty=fullName>.</xref:System.String.Empty?displayProperty=fullName> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType>"
  example:
  - "The following example iterates over the node tree recursively, and displays information about <xref:System.Xml.XPath.XPathNodeType> and <xref:System.Xml.XPath.XPathNodeType> nodes.  \n  \n [!code-cs[XPathNavigatorMethods#29](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_9_1.cs)]\n [!code-vb[XPathNavigatorMethods#29](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_9_1.vb)]\n [!code-cpp[XPathNavigatorMethods#29](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_9_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public abstract string Prefix { get; }
    return:
      type: System.String
      description: "A <xref:System.String>，其中包含与当前节点关联的命名空间前缀。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.Prefix*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.PrependChild
  id: PrependChild
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: PrependChild()
  nameWithType: XPathNavigator.PrependChild()
  fullName: System.Xml.XPath.XPathNavigator.PrependChild()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlWriter>用于当前节点的节点的子列表的开始处创建新的子节点的对象。</xref:System.Xml.XmlWriter>"
  remarks: "预先计算的子节点的操作会将新节点添加到当前节点的子节点列表的开头。 例如，如果的元素有三个子节点，则预置的节点将成为第一个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 PrependChild 方法时要考虑的重要说明。      -新的子节点不会插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>      -PrependChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上。</xref:System.Xml.XPath.XPathNavigator>      -PrependChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlWriter> object returned from the PrependChild method.  \n  \n [!code-cs[XPathNavigatorMethods#30](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_6_1.cs)]\n [!code-vb[XPathNavigatorMethods#30](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_6_1.vb)]\n [!code-cpp[XPathNavigatorMethods#30](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_6_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter PrependChild ();
    parameters: []
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>用于当前节点的节点的子列表的开始处创建新的子节点的对象。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.PrependChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不允许在前面追加新的子节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.String)
  id: PrependChild(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: PrependChild(String)
  nameWithType: XPathNavigator.PrependChild(String)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用指定的 XML 字符串在当前节点的节点的子列表的开始处创建新的子节点。"
  remarks: "预先计算的子节点的操作会将新节点添加到当前节点的子节点列表的开头。 例如，如果的元素有三个子节点，则预置的节点将成为第一个子节点。 如果不存在任何子节点，然后创建新的子节点。       若要创建一个新元素节点，请在 XML 字符串参数中包括所有的 XML 语法。 一个新的字符串`book`节点是`PrependChild(&quot;<book/>&quot;)`。 将文本&quot;book&quot;追加到当前节点的文本节点的字符串是`PrependChild(&quot;book&quot;)`。 如果 XML 字符串包含多个节点，将添加所有节点。       以下是使用 PrependChild 方法时要考虑的重要说明。      -PrependChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上。</xref:System.Xml.XPath.XPathNavigator>      -PrependChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#31](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_32_1.cs)]\n [!code-vb[XPathNavigatorMethods#31](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_32_1.vb)]\n [!code-cpp[XPathNavigatorMethods#31](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_32_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void PrependChild (string newChild);
    parameters:
    - id: newChild
      type: System.String
      description: "新的子节点的 XML 数据字符串。"
  overload: System.Xml.XPath.XPathNavigator.PrependChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "XML 字符串参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不允许在前面追加新的子节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 字符串参数不是格式正确的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)
  id: PrependChild(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: PrependChild(XmlReader)
  nameWithType: XPathNavigator.PrependChild(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用的 XML 内容在当前节点的节点的子列表的开始处创建新的子节点<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "预先计算的子节点的操作会将新节点添加到当前节点的子节点列表的开头。 例如，如果的元素有三个子节点，则预置的节点将成为第一个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 PrependChild 方法时要考虑的重要说明。      -如果<xref:System.Xml.XmlReader>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XmlReader>      -PrependChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上。</xref:System.Xml.XPath.XPathNavigator>      -PrependChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the <xref:System.Xml.XmlReader> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is prepended using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#32](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_19_1.cs)]\n [!code-vb[XPathNavigatorMethods#32](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_19_1.vb)]\n [!code-cpp[XPathNavigatorMethods#32](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_19_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void PrependChild (System.Xml.XmlReader newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>新的子节点的 XML 数据上定位的对象。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.PrependChild*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.XmlReader>对象处于错误状态或已关闭。</xref:System.Xml.XmlReader>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不允许在前面追加新的子节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref:System.Xml.XmlReader>对象参数不是格式正确。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)
  id: PrependChild(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: PrependChild(XPathNavigator)
  nameWithType: XPathNavigator.PrependChild(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用中的节点在当前节点的节点的子列表的开始处创建新的子节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定对象。"
  remarks: "预先计算的子节点的操作会将新节点添加到当前节点的子节点列表的开头。 例如，如果的元素有三个子节点，则预置的节点将成为第一个子节点。 如果不存在任何子节点，然后创建新的子节点。       以下是使用 PrependChild 方法时要考虑的重要说明。      -如果<xref:System.Xml.XPath.XPathNavigator>对象是否定位在 XML 节点的序列，将添加序列中的所有节点。</xref:System.Xml.XPath.XPathNavigator>      -PrependChild 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上。</xref:System.Xml.XPath.XPathNavigator>      -PrependChild 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file using the node contained in the <xref:System.Xml.XPath.XPathNavigator> object specified. The `http://www.contoso.com/books` namespace is specified so that the new child element is prepended using the same namespace as the XML document.  \n  \n [!code-cs[XPathNavigatorMethods#33](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_10_1.cs)]\n [!code-vb[XPathNavigatorMethods#33](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_10_1.vb)]\n [!code-cpp[XPathNavigatorMethods#33](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_10_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void PrependChild (System.Xml.XPath.XPathNavigator newChild);
    parameters:
    - id: newChild
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要添加为新的子节点的节点上的对象。"
  overload: System.Xml.XPath.XPathNavigator.PrependChild*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不允许在前面追加新的子节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)
  id: PrependChildElement(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: PrependChildElement(String,String,String,String)
  nameWithType: XPathNavigator.PrependChildElement(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.PrependChildElement(String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用命名空间前缀、 本地名称和命名空间 URI 指定的值在当前节点的节点的子列表的开始处创建新的子元素。"
  remarks: "预先计算的子节点的操作会将新节点添加到当前节点的子节点列表的开头。 例如，如果的元素有三个子节点，则预置的节点将成为第一个子节点。 如果不存在任何子节点，然后创建新的子节点。       可以通过获取 Namespace 前缀和 URI 值<xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A>或<xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A>方法。</xref:System.Xml.XPath.XPathNavigator.LookupNamespace%2A> </xref:System.Xml.XPath.XPathNavigator.LookupPrefix%2A> 例如，以下语法将子元素使用的范围内命名空间添加前`xmlns:bk=&quot;http://www.contoso.com/books&quot;`:```   navigator.PrependChildElement(navigator.Prefix, &quot;pages&quot;, LookupNamespaceURI(navigator.Prefix), String.Empty)   ```这将创建新的子`<bk:pages/>`元素。       以下是使用 PrependChildElement 方法时要考虑的重要说明。      -如果指定的命名空间前缀是`null`或<xref:System.String.Empty?displayProperty=fullName>，然后从当前命名空间范围内获取的命名空间 URI 的新元素的前缀。</xref:System.String.Empty?displayProperty=fullName> 如果没有分配给指定的命名空间 URI 在当前范围内命名空间前缀，则会自动生成的命名空间前缀。      -PrependChildElement 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素节点上。</xref:System.Xml.XPath.XPathNavigator>      -PrependChildElement 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "In the following example, a new `pages` child element is prepended to the beginning of the list of child elements of the first `book` element in the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#34](~/add/codesnippet/csharp/4c6c6f27-ac50-41dd-9f8b-_1.cs)]\n [!code-vb[XPathNavigatorMethods#34](~/add/codesnippet/visualbasic/4c6c6f27-ac50-41dd-9f8b-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#34](~/add/codesnippet/cpp/4c6c6f27-ac50-41dd-9f8b-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void PrependChildElement (string prefix, string localName, string namespaceURI, string value);
    parameters:
    - id: prefix
      type: System.String
      description: "新的子元素 （如果有） 的命名空间前缀。"
    - id: localName
      type: System.String
      description: "新的子元素 （如果有） 的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的新的子元素 （如果有）。 <xref:System.String>和<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是等效的。</xref:System.String>"
    - id: value
      type: System.String
      description: "新的子元素的值。 如果<xref:System.String>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>传递一个空元素创建的。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.PrependChildElement*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>位于不允许在前面追加新的子节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ReadSubtree
  id: ReadSubtree
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XPathNavigator.ReadSubtree()
  fullName: System.Xml.XPath.XPathNavigator.ReadSubtree()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "返回<xref:System.Xml.XmlReader>对象，其中包含当前节点及其子节点。</xref:System.Xml.XmlReader>"
  remarks: "当<xref:System.Xml.XmlReader>与当前节点及其子节点，<xref:System.Xml.XmlReader>对象的<xref:System.Xml.XmlReader.ReadState%2A>属性设置为<xref:System.Xml.ReadState>。</xref:System.Xml.ReadState></xref:System.Xml.XmlReader.ReadState%2A></xref:System.Xml.XmlReader>创建对象</xref:System.Xml.XmlReader> 当<xref:System.Xml.XmlReader>对象的<xref:System.Xml.XmlReader.Read%2A>第一次，<xref:System.Xml.XmlReader>移至当前节点的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator></xref:System.Xml.XmlReader>调用方法</xref:System.Xml.XmlReader.Read%2A></xref:System.Xml.XmlReader> 新<xref:System.Xml.XmlReader>对象继续读取，直到到达 XML 树的结尾。</xref:System.Xml.XmlReader> 此时，<xref:System.Xml.XmlReader.Read%2A>方法返回`false`和<xref:System.Xml.XmlReader>对象的<xref:System.Xml.XmlReader.ReadState%2A>属性设置为<xref:System.Xml.ReadState>。</xref:System.Xml.ReadState> </xref:System.Xml.XmlReader.ReadState%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Read%2A>      1> [!NOTE]&1;> 更改的<xref:System.Xml.XmlReader>对象不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置</xref:System.Xml.XmlReader>的位置       当前节点的范围内命名空间的 Namespace 声明不会插入到 XML 流提供给<xref:System.Xml.XmlReader>对象。</xref:System.Xml.XmlReader>      1> [!NOTE]&1;> 此行为不同于<xref:System.Xml.XPath.XPathNavigator.WriteSubtree%2A>方法。</xref:System.Xml.XPath.XPathNavigator.WriteSubtree%2A>       此方法创建<xref:System.Xml.XmlReader>与特定的读取器设置，以及使用此方法的模块的对象具有不能控制这些设置。</xref:System.Xml.XmlReader> 例如，此方法返回的读取器禁止处理数据类型定义 (Dtd)。 如果读取器将尝试读取使用 DTD 的文件，则会引发错误， <xref:System.Xml.XmlException>.</xref:System.Xml.XmlException> 异常消息将`Unexpected DTD declaration`。       你可以通过实现自定义<xref:System.Xml.XmlResolver>，返回对<xref:System.Xml.XmlReader>所需的<xref:System.Xml.XmlReaderSettings>。</xref:System.Xml.XmlReaderSettings></xref:System.Xml.XmlReader></xref:System.Xml.XmlResolver>更改此行为"
  example:
  - "The following example illustrates using the ReadSubtree method on the first `book` element of the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#35](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_33_1.cs)]\n [!code-vb[XPathNavigatorMethods#35](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_33_1.vb)]\n [!code-cpp[XPathNavigatorMethods#35](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_33_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>对象，其中包含当前节点及其子节点。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.ReadSubtree*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>未定位在元素节点或根节点。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)
  id: ReplaceRange(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ReplaceRange(XPathNavigator)
  nameWithType: XPathNavigator.ReplaceRange(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceRange(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "替换一定范围的从当前节点到指定的节点的同级节点。"
  remarks: "ReplaceRange 方法替换一定范围的从当前节点的同级节点<xref:System.Xml.XPath.XPathNavigator>位于上 （含） 到指定的节点<xref:System.Xml.XPath.XPathNavigator>（含） 的参数。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator>      1> [!NOTE]&1;> 替换范围未插入直到<xref:System.Xml.XmlWriter.Close%2A>方法<xref:System.Xml.XmlWriter>对象称为。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Close%2A>"
  example:
  - "In the following example, the first and second `book` elements of the `contosoBooks.xml` file are replaced with a new empty `book` element using the ReplaceRange method.  \n  \n [!code-cs[XPathNavigatorMethods#53](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_22_1.cs)]\n [!code-vb[XPathNavigatorMethods#53](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_22_1.vb)]\n [!code-cpp[XPathNavigatorMethods#53](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_22_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XmlWriter ReplaceRange (System.Xml.XPath.XPathNavigator lastSiblingToReplace);
    parameters:
    - id: lastSiblingToReplace
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在要替换的范围内的最后一个同级节点上。"
    return:
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>对象用于指定替换范围。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.ReplaceRange*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref> specified is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "若要替换的最后一个节点指定不是当前节点的有效同级节点。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)
  id: ReplaceSelf(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ReplaceSelf(String)
  nameWithType: XPathNavigator.ReplaceSelf(String)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当前节点替换为指定的字符串的内容。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>新节点上完成 ReplaceSelf 方法定位并返回`true`。</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>时不定位在新的节点上完成 ReplaceSelf 方法后的 XML 输入是<xref:System.String.Empty>在这种情况下<xref:System.Xml.XPath.XPathNavigator>器是定位在下一个同级节点或父节点如果没有到被替换的节点没有下一个同级节点且 ReplaceSelf 返回`false`。</xref:System.Xml.XPath.XPathNavigator> </xref:System.String.Empty> </xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -如果 XML 数据字符串不是不是引发异常，此方法的结果等效于调用的格式良好<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>当前节点上。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>      -如果的 XML 字符串包含多个节点，将添加所有节点和<xref:System.Xml.XPath.XPathNavigator>定位在的节点序列中的第一个节点上。</xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法不是等效于<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>方法。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>"
  example:
  - "In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  \n  \n [!code-cs[XPathNavigatorMethods#36](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_21_1.cs)]\n [!code-vb[XPathNavigatorMethods#36](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_21_1.vb)]\n [!code-cpp[XPathNavigatorMethods#36](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_21_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void ReplaceSelf (string newNode);
    parameters:
    - id: newNode
      type: System.String
      description: "新节点的 XML 数据字符串。"
  overload: System.Xml.XPath.XPathNavigator.ReplaceSelf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "XML 字符串参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>未定位在元素、 文本、 处理指令或注释节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 字符串参数不是格式正确的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)
  id: ReplaceSelf(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ReplaceSelf(XmlReader)
  nameWithType: XPathNavigator.ReplaceSelf(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当前节点的内容替换的<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>新节点上完成 ReplaceSelf 方法定位并返回`true`。</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>时不定位在新的节点上完成 ReplaceSelf 方法后的 XML 输入是<xref:System.String.Empty>在这种情况下<xref:System.Xml.XPath.XPathNavigator>器是定位在下一个同级节点或父节点如果没有到被替换的节点没有下一个同级节点且 ReplaceSelf 返回`false`。</xref:System.Xml.XPath.XPathNavigator> </xref:System.String.Empty> </xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -如果 XML 数据字符串不是不是引发异常，此方法的结果等效于调用的格式良好<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>当前节点上。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>      -如果的 XML 字符串包含多个节点，将添加所有节点和<xref:System.Xml.XPath.XPathNavigator>定位在的节点序列中的第一个节点上。</xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法不是等效于<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>方法。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>"
  example:
  - "In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  \n  \n [!code-cs[XPathNavigatorMethods#37](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_16_1.cs)]\n [!code-vb[XPathNavigatorMethods#37](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_16_1.vb)]\n [!code-cpp[XPathNavigatorMethods#37](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_16_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void ReplaceSelf (System.Xml.XmlReader newNode);
    parameters:
    - id: newNode
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>新节点的 XML 数据上定位的对象。</xref:System.Xml.XmlReader>"
  overload: System.Xml.XPath.XPathNavigator.ReplaceSelf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.XmlReader>对象处于错误状态或已关闭。</xref:System.Xml.XmlReader>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>未定位在元素、 文本、 处理指令或注释节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref:System.Xml.XmlReader>对象参数不是格式正确。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)
  id: ReplaceSelf(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ReplaceSelf(XPathNavigator)
  nameWithType: XPathNavigator.ReplaceSelf(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(XPathNavigator)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "当前节点的内容替换的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>指定对象。"
  remarks: "<xref:System.Xml.XPath.XPathNavigator>新节点上完成 ReplaceSelf 方法定位并返回`true`。</xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>时不定位在新的节点上完成 ReplaceSelf 方法后的 XML 输入是<xref:System.String.Empty>在这种情况下<xref:System.Xml.XPath.XPathNavigator>器是定位在下一个同级节点或父节点如果没有到被替换的节点没有下一个同级节点且 ReplaceSelf 返回`false`。</xref:System.Xml.XPath.XPathNavigator> </xref:System.String.Empty> </xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法是仅当<xref:System.Xml.XPath.XPathNavigator>位于元素、 文本、 处理指令或注释节点上。</xref:System.Xml.XPath.XPathNavigator>      -如果 XML 数据字符串不是不是引发异常，此方法的结果等效于调用的格式良好<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>当前节点上。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>      -如果的 XML 字符串包含多个节点，将添加所有节点和<xref:System.Xml.XPath.XPathNavigator>定位在的节点序列中的第一个节点上。</xref:System.Xml.XPath.XPathNavigator>      -ReplaceSelf 方法不是等效于<xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>方法。</xref:System.Xml.XPath.XPathNavigator.DeleteSelf%2A>"
  example:
  - "In the following example the `price` element in the `contosoBooks.xml` file is replaced by a new `pages` element.  \n  \n [!code-cs[XPathNavigatorMethods#38](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_15_1.cs)]\n [!code-vb[XPathNavigatorMethods#38](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_15_1.vb)]\n [!code-cpp[XPathNavigatorMethods#38](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_15_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void ReplaceSelf (System.Xml.XPath.XPathNavigator newNode);
    parameters:
    - id: newNode
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>定位在新的节点上的对象。"
  overload: System.Xml.XPath.XPathNavigator.ReplaceSelf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>未定位在元素、 文本、 处理指令或注释节点。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 内容<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象参数不是格式良好。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XPathNavigator.SchemaInfo
  fullName: System.Xml.XPath.XPathNavigator.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取已分配给当前节点作为架构验证结果的架构信息。"
  remarks: "可以对设置架构信息<xref:System.Xml.XPath.XPathNodeType>， <xref:System.Xml.XPath.XPathNodeType>，或在<xref:System.Xml.XPath.XPathNodeType>与非节点`null`<xref:System.Xml.XPath.XPathNavigator.ValueType%2A>.</xref:System.Xml.XPath.XPathNavigator.ValueType%2A> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> 如果当前节点不在上面的节点类型，或如果<xref:System.Xml.XPath.XPathNavigator>实例不会报告架构信息 SchemaInfo 属性返回`null`。</xref:System.Xml.XPath.XPathNavigator>"
  syntax:
    content: public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref>对象，其中包含当前节点的架构信息。"
  overload: System.Xml.XPath.XPathNavigator.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Select(System.String)
  id: Select(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Select(String)
  nameWithType: XPathNavigator.Select(String)
  fullName: System.Xml.XPath.XPathNavigator.Select(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择节点集，使用指定的 XPath 表达式。"
  remarks: "所选内容的上下文是的位置<xref:System.Xml.XPath.XPathNavigator>当调用此方法。</xref:System.Xml.XPath.XPathNavigator> 调用此方法后<xref:System.Xml.XPath.XPathNodeIterator>返回表示选定节点的集合。</xref:System.Xml.XPath.XPathNodeIterator> 使用<xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A>方法<xref:System.Xml.XPath.XPathNodeIterator>要循环访问所选的节点集。</xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A>       下面的 C# 代码循环访问所选节点集。      ```   XPathNodeIterator iterator = nav.Select(&quot;/bookstore/book&quot;);   while (iterator.MoveNext())   {       Console.WriteLine(Iterator.Current.Name);   }   ```以下是使用 Select 方法时要考虑的重要说明。      -您仍可以使用任何<xref:System.Xml.XPath.XPathNavigator>对象的导航方法，以移动<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>导航方法都是独立于所选节点在<xref:System.Xml.XPath.XPathNodeIterator>。</xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNavigator>      -将来到选择的方法的调用返回一个新<xref:System.Xml.XPath.XPathNodeIterator>指向所选的节点集相匹配的新选择调用的对象。</xref:System.Xml.XPath.XPathNodeIterator> 这两个<xref:System.Xml.XPath.XPathNodeIterator>对象是完全相互独立。</xref:System.Xml.XPath.XPathNodeIterator>      -如果 XPath 表达式需要命名空间解析，则使用<xref:System.Xml.XPath.XPathNavigator.Select%2A>超负荷运转，此方法采用<xref:System.Xml.XPath.XPathExpression>作为其自变量。</xref:System.Xml.XPath.XPathExpression> </xref:System.Xml.XPath.XPathNavigator.Select%2A>      -此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example uses the Select method to select a node set.  \n  \n [!code-cs[XPathNavigatorMethods#39](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_0_1.cs)]\n [!code-vb[XPathNavigatorMethods#39](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_0_1.vb)]\n [!code-cpp[XPathNavigatorMethods#39](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_0_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator Select (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "A<xref:System.String>表示的 XPath 表达式。</xref:System.String>"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>指向所选的节点集。"
  overload: System.Xml.XPath.XPathNavigator.Select*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式包含错误或其返回类型不是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)
  id: Select(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Select(XPathExpression)
  nameWithType: XPathNavigator.Select(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Select(XPathExpression)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择节点集使用指定<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>。"
  remarks: "所选内容的上下文是的位置<xref:System.Xml.XPath.XPathNavigator>当调用此方法。</xref:System.Xml.XPath.XPathNavigator> 调用此方法之后,<xref:System.Xml.XPath.XPathNodeIterator>返回表示选定节点的集合。</xref:System.Xml.XPath.XPathNodeIterator> 使用<xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A>上<xref:System.Xml.XPath.XPathNodeIterator>要循环访问所选的节点集。</xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNodeIterator.MoveNext%2A>       下面的 C# 代码循环访问所选节点集。      ```   XPathNodeIterator ni = nav.Select(expr);   while (ni.MoveNext())   {       Console.WriteLine(ni.Current.Name);   }   ```以下是使用时要考虑的重要说明<xref:System.Xml.XPath.XPathNavigator.Select%2A>方法。</xref:System.Xml.XPath.XPathNavigator.Select%2A>      -您仍可以使用任何<xref:System.Xml.XPath.XPathNavigator>对象的导航方法，以移动<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator> <xref:System.Xml.XPath.XPathNavigator>导航方法都是独立于所选节点在<xref:System.Xml.XPath.XPathNodeIterator>。</xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNavigator>      的调用将来<xref:System.Xml.XPath.XPathNavigator.Select%2A>方法返回一个新<xref:System.Xml.XPath.XPathNodeIterator>指向所选的节点集相匹配的新对象<xref:System.Xml.XPath.XPathNavigator.Select%2A>调用。</xref:System.Xml.XPath.XPathNavigator.Select%2A> </xref:System.Xml.XPath.XPathNodeIterator> </xref:System.Xml.XPath.XPathNavigator.Select%2A> 这两个<xref:System.Xml.XPath.XPathNodeIterator>对象是完全相互独立。</xref:System.Xml.XPath.XPathNodeIterator>      -如果<xref:System.Xml.XPath.XPathExpression>需要命名空间解析，前缀和命名空间 URI 对必须添加到<xref:System.Xml.XmlNamespaceManager>，和<xref:System.Xml.XPath.XPathExpression.SetContext%2A>必须调用方法以指定<xref:System.Xml.XmlNamespaceManager>要用于命名空间解析。</xref:System.Xml.XmlNamespaceManager> </xref:System.Xml.XPath.XPathExpression.SetContext%2A> </xref:System.Xml.XmlNamespaceManager> </xref:System.Xml.XPath.XPathExpression>       例如，假定文档包含以下 XML 节点。      ```   <bookstore xmlns:bk=&quot;urn:samples&quot;>       <book bk:ISBN=&quot;1-325-0980&quot;>           <title>Pride And Prejudice</title>       </book>   </bookstore>   ```下面的 C# 代码在这种情况下，选择`bk:ISBN`节点。      ```   XPathExpression expr = nav.Compile(&quot;book/@bk:ISBN&quot;);   XmlNamespaceManager mngr = new XmlNamespaceManager(new NameTable());   mngr.AddNamespace(&quot;bk&quot;,&quot;urn:samples&quot;);   expr.SetContext(mngr);   XPathNodeIterator ni = nav.Select(expr);   ```      > [!NOTE]1> 如果<xref:System.Xml.XPath.XPathExpression>不包括前缀，则假定命名空间 URI 是空的命名空间。</xref:System.Xml.XPath.XPathExpression> 如果 XML 包含默认命名空间，你仍必须使用<xref:System.Xml.XPath.XPathExpression.SetContext%2A>方法并提供<xref:System.Xml.XmlNamespaceManager>，其中包含的前缀和命名空间 URI 以处理默认命名空间。</xref:System.Xml.XmlNamespaceManager> </xref:System.Xml.XPath.XPathExpression.SetContext%2A>       例如，假设有以下 XML。      ```   <bookstore xmlns=&quot;http://www.lucernepublishing.com&quot;>       <book>           <title>Pride And Prejudice</title>       </book>   </bookstore>   ```下面的 C# 代码在这种情况下，选择所有书节点︰```   XmlNamespaceManager nsmgr = new XmlNamespaceManager(nav.NameTable);   nsmgr.AddNamespace(&quot;ab&quot;, &quot;http://www.lucernepublishing.com&quot;);   XPathExpression expr;   expr = nav.Compile(&quot;//ab:book&quot;);   expr.SetContext(nsmgr);   XPathNodeIterator ni = nav.Select(expr);   ```此方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example uses the Select method to select a node set.  \n  \n [!code-cs[XPathNavigatorMethods#40](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_12_1.cs)]\n [!code-vb[XPathNavigatorMethods#40](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_12_1.vb)]\n [!code-cpp[XPathNavigatorMethods#40](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_12_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator Select (System.Xml.XPath.XPathExpression expr);
    parameters:
    - id: expr
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>对象，其中包含已编译的 XPath 查询。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>指向所选的节点集。"
  overload: System.Xml.XPath.XPathNavigator.Select*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式包含错误或其返回类型不是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)
  id: Select(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: Select(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.Select(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.Select(String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择节点集使用指定的 XPath 表达式与<xref:System.Xml.IXmlNamespaceResolver>对象指定用来解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
  remarks: ''
  example:
  - "The following example illustrates selecting a node set using the Select method with the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath expression.  \n  \n [!code-cs[XPathNavigatorMethods#41](~/add/codesnippet/csharp/8f97f71d-30c6-43d1-888b-_1.cs)]\n [!code-vb[XPathNavigatorMethods#41](~/add/codesnippet/visualbasic/8f97f71d-30c6-43d1-888b-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#41](~/add/codesnippet/cpp/8f97f71d-30c6-43d1-888b-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator Select (string xpath, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: xpath
      type: System.String
      description: "A<xref:System.String>表示的 XPath 表达式。</xref:System.String>"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>对象用于解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>指向所选的节点集。"
  overload: System.Xml.XPath.XPathNavigator.Select*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "XPath 表达式包含错误或其返回类型不是节点集。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 表达式不是有效的。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)
  id: SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectAncestors(XPathNodeType,Boolean)
  nameWithType: XPathNavigator.SelectAncestors(XPathNodeType,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectAncestors(XPathNodeType,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择当前节点的所有具有匹配上级节点<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>。"
  remarks: "SelectAncestors 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - For an example of selecting ancestor nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A?displayProperty=fullName>.
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors (System.Xml.XPath.XPathNodeType type, bool matchSelf);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>祖先节点。"
    - id: matchSelf
      type: System.Boolean
      description: "若要在所选内容，包含上下文节点<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。 返回的节点的按反向文档顺序。"
  overload: System.Xml.XPath.XPathNavigator.SelectAncestors*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)
  id: SelectAncestors(System.String,System.String,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectAncestors(String,String,Boolean)
  nameWithType: XPathNavigator.SelectAncestors(String,String,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectAncestors(String,String,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择当前节点的所有具有指定的本地名称和命名空间 URI 祖先节点。"
  remarks: "如果<xref:System.String.Empty?displayProperty=fullName>指定为`name`参数、 属于指定的命名空间 URI 选择的所有祖先节点。</xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.String.Empty?displayProperty=fullName>指定为`namespaceURI`参数、 具有指定本地名称的节点没有命名空间属于被选中的所有祖先。</xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.String.Empty?displayProperty=fullName>被指定为选择的本地名称和命名空间 URI，属于没有命名空间的所有祖先节点。</xref:System.String.Empty?displayProperty=fullName>       SelectAncestors 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - "The following example illustrates selecting ancestor, child, and descendant nodes.  \n  \n [!code-cs[XPathNavigatorMethods#42](~/add/codesnippet/csharp/8b0fe185-94cf-4e37-9595-_1.cs)]\n [!code-vb[XPathNavigatorMethods#42](~/add/codesnippet/visualbasic/8b0fe185-94cf-4e37-9595-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#42](~/add/codesnippet/cpp/8b0fe185-94cf-4e37-9595-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectAncestors (string name, string namespaceURI, bool matchSelf);
    parameters:
    - id: name
      type: System.String
      description: "祖先节点的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的祖先节点。"
    - id: matchSelf
      type: System.Boolean
      description: "若要在所选内容，包含上下文节点<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。 返回的节点的按反向文档顺序。"
  overload: System.Xml.XPath.XPathNavigator.SelectAncestors*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>不能作为参数传递。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)
  id: SelectChildren(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectChildren(XPathNodeType)
  nameWithType: XPathNavigator.SelectChildren(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.SelectChildren(XPathNodeType)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择当前节点的所有有相匹配的子节点<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>。"
  remarks: "SelectChildren 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectChildren (System.Xml.XPath.XPathNodeType type);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>的子节点。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。"
  overload: System.Xml.XPath.XPathNavigator.SelectChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)
  id: SelectChildren(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectChildren(String,String)
  nameWithType: XPathNavigator.SelectChildren(String,String)
  fullName: System.Xml.XPath.XPathNavigator.SelectChildren(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择所有子节点的当前节点具有的本地名称和命名空间 URI。"
  remarks: "如果<xref:System.String.Empty?displayProperty=fullName>指定为`name`参数、 属于指定的命名空间 URI 选择的所有子节点。</xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.String.Empty?displayProperty=fullName>指定为`namespaceURI`参数，所有子属于没有命名空间具有指定本地名称的节点被选中。</xref:System.String.Empty?displayProperty=fullName> 如果这两个本地名称和命名空间 URI 参数<xref:System.String.Empty?displayProperty=fullName>，属于没有命名空间的所有子节点被都选中。</xref:System.String.Empty?displayProperty=fullName>       SelectChildren 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectChildren (string name, string namespaceURI);
    parameters:
    - id: name
      type: System.String
      description: "子节点的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间的子节点的 URI。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。"
  overload: System.Xml.XPath.XPathNavigator.SelectChildren*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>不能作为参数传递。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)
  id: SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectDescendants(XPathNodeType,Boolean)
  nameWithType: XPathNavigator.SelectDescendants(XPathNodeType,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectDescendants(XPathNodeType,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择当前节点的具有匹配的所有子代节点<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>。"
  remarks: "SelectDescendants 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - For an example of selecting ancestor, child and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants (System.Xml.XPath.XPathNodeType type, bool matchSelf);
    parameters:
    - id: type
      type: System.Xml.XPath.XPathNodeType
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeType&quot;> </xref>子代节点。"
    - id: matchSelf
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要在所选内容; 上包含上下文节点否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。"
  overload: System.Xml.XPath.XPathNavigator.SelectDescendants*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)
  id: SelectDescendants(System.String,System.String,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectDescendants(String,String,Boolean)
  nameWithType: XPathNavigator.SelectDescendants(String,String,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectDescendants(String,String,Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择当前节点的本地名称和命名空间 URI 的所有子代节点。"
  remarks: "如果<xref:System.String.Empty?displayProperty=fullName>指定为`name`参数、 属于指定的命名空间 URI 选择的所有子代节点。</xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.String.Empty?displayProperty=fullName>指定为`namespaceURI`选择参数，所有子代节点具有指定本地名称对不在命名空间属于。</xref:System.String.Empty?displayProperty=fullName> 如果这两个本地名称和命名空间 URI 参数<xref:System.String.Empty?displayProperty=fullName>，属于没有命名空间的所有子代节点被选中。</xref:System.String.Empty?displayProperty=fullName>       子代等; 是儿童或子级的子级不会因此所选的节点永远不会将包含属性或命名空间节点。       SelectDescendants 方法不起作用的<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>状态"
  example:
  - For an example of selecting ancestor, child, and descendant nodes, see <xref:System.Xml.XPath.XPathNavigator.SelectAncestors%2A>.
  syntax:
    content: public virtual System.Xml.XPath.XPathNodeIterator SelectDescendants (string name, string namespaceURI, bool matchSelf);
    parameters:
    - id: name
      type: System.String
      description: "子代节点的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间 URI 的子代节点。"
    - id: matchSelf
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要在所选内容; 上包含上下文节点否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Xml.XPath.XPathNodeIterator
      description: "<xref href=&quot;System.Xml.XPath.XPathNodeIterator&quot;> </xref>包含所选的节点。"
  overload: System.Xml.XPath.XPathNavigator.SelectDescendants*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>不能作为参数传递。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)
  id: SelectSingleNode(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectSingleNode(String)
  nameWithType: XPathNavigator.SelectSingleNode(String)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择单个节点中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定的 XPath 查询。"
  remarks: "SelectSingleNode 方法选择匹配中的 XPath 查询的第一个节点<xref:System.Xml.XPath.XPathNavigator>对象。</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> based on the XPath query specified.  \n  \n [!code-cs[XPathNavigatorMethods#43](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_30_1.cs)]\n [!code-vb[XPathNavigatorMethods#43](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_30_1.vb)]\n [!code-cpp[XPathNavigatorMethods#43](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_30_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (string xpath);
    parameters:
    - id: xpath
      type: System.String
      description: "A<xref:System.String>表示的 XPath 表达式。</xref:System.String>"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象，其中包含第一个匹配节点的 xpath 查询指定; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有查询结果。"
  overload: System.Xml.XPath.XPathNavigator.SelectSingleNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在 XPath 查询中遇到错误或 XPath 表达式的返回类型不是一个节点。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 查询无效。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)
  id: SelectSingleNode(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectSingleNode(XPathExpression)
  nameWithType: XPathNavigator.SelectSingleNode(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(XPathExpression)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择单个节点中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>使用指定<xref href=&quot;System.Xml.XPath.XPathExpression&quot;></xref>对象。"
  remarks: "SelectSingleNode 方法选择与<xref:System.Xml.XPath.XPathExpression>中<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>对象</xref:System.Xml.XPath.XPathExpression>中包含的已编译的 XPath 查询匹配的第一个节点"
  example:
  - "The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> based on the XPath query contained in the <xref:System.Xml.XPath.XPathExpression>.  \n  \n [!code-cs[XPathNavigatorMethods#44](~/add/codesnippet/csharp/f80aab2d-d66b-4a6d-b36e-_1.cs)]\n [!code-vb[XPathNavigatorMethods#44](~/add/codesnippet/visualbasic/f80aab2d-d66b-4a6d-b36e-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#44](~/add/codesnippet/cpp/f80aab2d-d66b-4a6d-b36e-_1.cpp)]  \n  \n The example takes the `books.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>   \n<bookstore>  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (System.Xml.XPath.XPathExpression expression);
    parameters:
    - id: expression
      type: System.Xml.XPath.XPathExpression
      description: "<xref href=&quot;System.Xml.XPath.XPathExpression&quot;> </xref>对象，其中包含已编译的 XPath 查询。"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象，其中包含第一个匹配节点的 xpath 查询指定; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有查询结果。"
  overload: System.Xml.XPath.XPathNavigator.SelectSingleNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在 XPath 查询中遇到错误或 XPath 表达式的返回类型不是一个节点。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 查询无效。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)
  id: SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SelectSingleNode(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.SelectSingleNode(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(String,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "选择单个节点中的<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象使用指定的 XPath 查询<xref:System.Xml.IXmlNamespaceResolver>对象指定用来解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
  remarks: "SelectSingleNode 方法选择与指定的 XPath 查询匹配的第一个节点。 SelectSingleNode 方法使用<xref:System.Xml.IXmlNamespaceResolver>对象以解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>      1> [!NOTE]&1;> 中 XPath，必须为所有命名空间前缀在查询中。 如果 XML 文档使用默认命名空间，还必须添加到命名空间前缀<xref:System.Xml.IXmlNamespaceResolver>对象。</xref:System.Xml.IXmlNamespaceResolver>"
  example:
  - "The following example selects a single node from the <xref:System.Xml.XPath.XPathNavigator> object based on the XPath query specified and uses the <xref:System.Xml.XmlNamespaceManager> object specified to resolve namespace prefixes in the XPath query.  \n  \n [!code-cs[XPathNavigatorMethods#45](~/add/codesnippet/csharp/b42e187a-8c51-41fe-acd8-_1.cs)]\n [!code-vb[XPathNavigatorMethods#45](~/add/codesnippet/visualbasic/b42e187a-8c51-41fe-acd8-_1.vb)]\n [!code-cpp[XPathNavigatorMethods#45](~/add/codesnippet/cpp/b42e187a-8c51-41fe-acd8-_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual System.Xml.XPath.XPathNavigator SelectSingleNode (string xpath, System.Xml.IXmlNamespaceResolver resolver);
    parameters:
    - id: xpath
      type: System.String
      description: "A<xref:System.String>表示的 XPath 表达式。</xref:System.String>"
    - id: resolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>对象用于解析 XPath 查询中的命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Xml.XPath.XPathNavigator
      description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>对象，其中包含第一个匹配节点的 xpath 查询指定; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有查询结果。"
  overload: System.Xml.XPath.XPathNavigator.SelectSingleNode*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在 XPath 查询中遇到错误或 XPath 表达式的返回类型不是一个节点。"
  - type: System.Xml.XPath.XPathException
    commentId: T:System.Xml.XPath.XPathException
    description: "XPath 查询无效。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)
  id: SetTypedValue(System.Object)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SetTypedValue(Object)
  nameWithType: XPathNavigator.SetTypedValue(Object)
  fullName: System.Xml.XPath.XPathNavigator.SetTypedValue(Object)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "设置当前节点的类型化的值。"
  remarks: "当<xref:System.Xml.XmlDocument>对象被创建为架构验证结果<xref:System.Xml.XmlReader>对象，针对 XML 文档的 XML 架构定义语言 (XSD) 架构验证到 SetTypedValue 方法指定的值。</xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> 如果指定的值是 XML 文档中，该架构而言无效<xref:System.Xml.Schema.XmlSchemaException>引发。</xref:System.Xml.Schema.XmlSchemaException>       SetTypedValue 方法是仅当<xref:System.Xml.XPath.XPathNavigator>定位在元素或属性节点。</xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "In the following example, the SetTypedValue method is used to update all `price` elements in the `contosoBooks.xml` file using the <xref:System.Xml.XmlNamespaceManager> object to resolve namespace prefixes in the XPath expression.  \n  \n [!code-cs[XPathNavigatorMethods#46](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_28_1.cs)]\n [!code-vb[XPathNavigatorMethods#46](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_28_1.vb)]\n [!code-cpp[XPathNavigatorMethods#46](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_28_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void SetTypedValue (object typedValue);
    parameters:
    - id: typedValue
      type: System.Object
      description: "新类型化节点的值。"
  overload: System.Xml.XPath.XPathNavigator.SetTypedValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持指定的对象类型。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "指定的值不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不定位在元素或属性节点上。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.SetValue(System.String)
  id: SetValue(System.String)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: SetValue(String)
  nameWithType: XPathNavigator.SetValue(String)
  fullName: System.Xml.XPath.XPathNavigator.SetValue(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "设置当前节点的值。"
  remarks: "-   如果<xref:System.Xml.XPath.XPathNavigator>定位在元素节点具有复杂内容 （子元素），调用 SetValue 方法替换的子元素具有一个包含新的字符串值的文本节点。</xref:System.Xml.XPath.XPathNavigator>      根节点或命名空间节点，无法更新-SetValue 方法。"
  example:
  - "In the following example, the SetValue method is used to update all `price` elements in the `contosoBooks.xml` file using the <xref:System.Xml.XmlNamespaceManager> object to resolve namespace prefixes in the XPath expression.  \n  \n [!code-cs[XPathNavigatorMethods#47](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_35_1.cs)]\n [!code-vb[XPathNavigatorMethods#47](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_35_1.vb)]\n [!code-cpp[XPathNavigatorMethods#47](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_35_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void SetValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "新节点的值。"
  overload: System.Xml.XPath.XPathNavigator.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "值参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>位于根节点、 命名空间节点或指定值无效。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;> </xref>不支持编辑。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: XPathNavigator.System.ICloneable.Clone()
  fullName: System.Xml.XPath.XPathNavigator.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "创建的新副本<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Xml.XPath.XPathNavigator>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Xml.XPath.XPathNavigator>       有关此成员的说明，请参阅<xref:System.Xml.XPath.XPathNavigator.Clone%2A?displayProperty=fullName>。</xref:System.Xml.XPath.XPathNavigator.Clone%2A?displayProperty=fullName>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "新副本<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>对象。"
  overload: System.Xml.XPath.XPathNavigator.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ToString
  id: ToString
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ToString()
  nameWithType: XPathNavigator.ToString()
  fullName: System.Xml.XPath.XPathNavigator.ToString()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的文本值。"
  remarks: "ToString 方法返回的内容依赖于<xref:System.Xml.XPath.XPathNodeType>的节点。</xref:System.Xml.XPath.XPathNodeType>      |XPathNodeType |属性值 |  |-------------------|--------------------|  |<xref:System.Xml.XPath.XPathNodeType>|根节点的<xref:System.Xml.XmlNode.InnerText%2A>。 |  |<xref:System.Xml.XPath.XPathNodeType>|元素的<xref:System.Xml.XmlNode.InnerText%2A>。 |  |<xref:System.Xml.XPath.XPathNodeType>|属性的值。 |  |<xref:System.Xml.XPath.XPathNodeType>|文本节点的内容。 |  |<xref:System.Xml.XPath.XPathNodeType>|不包括目标的整个内容。 |  |<xref:System.Xml.XPath.XPathNodeType>|注释的内容。 |  |<xref:System.Xml.XPath.XPathNodeType>|标记之间的空格。 |  |<xref:System.Xml.XPath.XPathNodeType>|在混合内容模型或内的空白中标记之间的空格`xml:space=&quot;preserve&quot;`作用域。 |</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XmlNode.InnerText%2A> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XmlNode.InnerText%2A> </xref:System.Xml.XPath.XPathNodeType>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;> </xref> ，其中包含当前节点的文本值。"
  overload: System.Xml.XPath.XPathNavigator.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.TypedValue
  id: TypedValue
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: TypedValue
  nameWithType: XPathNavigator.TypedValue
  fullName: System.Xml.XPath.XPathNavigator.TypedValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "作为最合适的.NET Framework 类型的装箱对象获取当前节点。"
  remarks: "对于特性和带原子的简单类型或简单文本内容的元素，TypedValue 属性返回装箱<xref:System.Object>的最合适的.NET framework <xref:System.Type>.</xref:System.Type> </xref:System.Object> 如果该元素或属性的内容是列表类型，该 TypedValue 属性返回的最合适的.NET framework <xref:System.Type>.</xref:System.Type>对象的数组       下表描述返回的每个<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType> TypedValue      |XPathNodeType |返回的 TypedValue |  |-------------------|-------------------------|  |<xref:System.Xml.XPath.XPathNodeType>|返回<xref:System.String>对象，其中包含所有<xref:System.Xml.XPath.XPathNodeType>节点后代中的文档中，连接在一起并由空格分隔。</xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> 如果文档没有任何<xref:System.Xml.XPath.XPathNodeType>节点子级，则返回<xref:System.String.Empty?displayProperty=fullName>。 |  |<xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.String.Empty?displayProperty=fullName></xref:System.Xml.XPath.XPathNodeType><br /><br /> （类型化或简单内容） |返回<xref:System.Object>表示<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType>的类型化的值</xref:System.Object><br /><br /> 如果<xref:System.Xml.XPath.XPathNodeType>定义用作 XML 架构列表数据类型，则节点值公开为对象的数组。</xref:System.Xml.XPath.XPathNodeType> 数组中的每个<xref:System.Object>包含元素的子元素的类型化的值。 |  |<xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.Object><br /><br /> （非类型化、 混合，或复杂内容） |返回<xref:System.String>对象，其中包含所有<xref:System.Xml.XPath.XPathNodeType>节点的后代<xref:System.Xml.XPath.XPathNodeType>（包括的类型化的值的字符串表示形式），连接在一起并由空格分隔。</xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> 如果<xref:System.Xml.XPath.XPathNodeType>不具有任何<xref:System.Xml.XPath.XPathNodeType>节点子级，则返回<xref:System.String.Empty?displayProperty=fullName>。 |  |<xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType></xref:System.String.Empty?displayProperty=fullName></xref:System.Xml.XPath.XPathNodeType></xref:System.Xml.XPath.XPathNodeType><br /><br /> （类型化或简单内容） |返回<xref:System.Object>表示<xref:System.Xml.XPath.XPathNodeType>.</xref:System.Xml.XPath.XPathNodeType>的类型化的值</xref:System.Object> <xref:System.Object>装箱为.NET Framework<xref:System.Type>值。</xref:System.Type> </xref:System.Object><br /><br /> 如果<xref:System.Xml.XPath.XPathNodeType>定义用作 XML 架构列表数据类型，节点值公开为对象的数组。</xref:System.Xml.XPath.XPathNodeType> 数组中的每个<xref:System.Object>包含<xref:System.Xml.XPath.XPathNodeType>子的类型化的值。 |  |<xref:System.Xml.XPath.XPathNodeType>|一个包含文本的<xref:System.String>对象。 |  |<xref:System.Xml.XPath.XPathNodeType>|一个包含注释，不包括周围的内容的<xref:System.String>对象`<!--`和`-->`。 |  |<xref:System.Xml.XPath.XPathNodeType>|<xref:System.String>对象包含处理指令的内容、 不包括目标和周围`<?`和`?>`。 |  |<xref:System.Xml.XPath.XPathNodeType>|一个包含命名空间名称的<xref:System.String>对象。 |  |<xref:System.Xml.XPath.XPathNodeType>|一个包含节点的文本的<xref:System.String>对象。 |  |<xref:System.Xml.XPath.XPathNodeType>|A<xref:System.String>对象，其中包含的节点的文本。 |</xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.String> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Xml.XPath.XPathNodeType> </xref:System.Object>"
  syntax:
    content: public override object TypedValue { get; }
    return:
      type: System.Object
      description: "作为最合适的.NET Framework 类型的装箱对象当前节点。"
  overload: System.Xml.XPath.XPathNavigator.TypedValue*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.UnderlyingObject
  id: UnderlyingObject
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: UnderlyingObject
  nameWithType: XPathNavigator.UnderlyingObject
  fullName: System.Xml.XPath.XPathNavigator.UnderlyingObject
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "使用<xref href=&quot;System.Xml.XPath.XPathNavigator&quot;></xref>实现后者提供了&quot;虚拟化&quot;XML 查看在存储区，以提供对基础对象的访问。"
  remarks: "可以通过使用 UnderlyingObject 属性<xref:System.Xml.XPath.XPathNavigator>实现后者提供了&quot;虚拟化&quot;XML 查看在存储区，以提供对基础对象的访问。</xref:System.Xml.XPath.XPathNavigator> 例如，如果<xref:System.Xml.XPath.XPathNavigator>对象用于通过公共语言运行时 (CLR) 对象图中提供一个虚拟 XML 视图，你可能想要执行 XPath 查询使用<xref:System.Xml.XPath.XPathNavigator.Select%2A>方法，然后访问所选的节点的 CLR 对象。</xref:System.Xml.XPath.XPathNavigator.Select%2A> </xref:System.Xml.XPath.XPathNavigator> UnderlyingObject 属性将公开这些基础对象。       在许多情况下，此值将为`null`，UnderlyingObject 属性返回的对象始终为特定的实现。       UnderlyingObject 属性应保留对象标识，仅应该用于返回到各自的重叠项存在一一对应的关系的对象。 用户应在同一个节点使用相同的连续访问上始终获得相同的对象<xref:System.Xml.XPath.XPathNavigator>对象或一个克隆。</xref:System.Xml.XPath.XPathNavigator>      1> [!NOTE]&1;> 的<xref:System.Xml.XPath.XPathNavigator>对象创建的<xref:System.Xml.XmlDocument>对象返回的相应<xref:System.Xml.XmlNode>。</xref:System.Xml.XmlNode> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator> UnderlyingObject 属性"
  syntax:
    content: public virtual object UnderlyingObject { get; }
    return:
      type: System.Object
      description: "默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.UnderlyingObject*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAs(Type,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.ValueAs(Type,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.ValueAs(Type,IXmlNamespaceResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为<xref:System.Type>指定，使用<xref:System.Xml.IXmlNamespaceResolver>对象指定用来解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver> </xref:System.Type>"
  remarks: "<xref:System.Xml.XPath.XPathItem.ValueAs%2A>方法尝试将当前节点的值转换为.NET Framework 类型，指定根据 XPath 2.0 规则将当前节点的类型强制转换。</xref:System.Xml.XPath.XPathItem.ValueAs%2A>       <xref:System.Xml.IXmlNamespaceResolver>对象用于解析与类型转换有关的命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver> 例如，转换时`xs:QName`到`xs:string`。"
  syntax:
    content: public override object ValueAs (Type returnType, System.Xml.IXmlNamespaceResolver nsResolver);
    parameters:
    - id: returnType
      type: System.Type
      description: "<xref:System.Type>返回当前节点的值另存为</xref:System.Type>"
    - id: nsResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>对象用于解析命名空间前缀。</xref:System.Xml.IXmlNamespaceResolver>"
    return:
      type: System.Object
      description: "形式的当前节点的值<xref:System.Type>请求。</xref:System.Type>"
  overload: System.Xml.XPath.XPathNavigator.ValueAs*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的值不是目标类型的正确格式。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换无效。"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAsBoolean
  id: ValueAsBoolean
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAsBoolean
  nameWithType: XPathNavigator.ValueAsBoolean
  fullName: System.Xml.XPath.XPathNavigator.ValueAsBoolean
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为一种<xref:System.Boolean>。</xref:System.Boolean>"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>具有架构或类型信息 (例如，从<xref:System.Xml.XmlDocument>对象使用 XML 架构验证初始化<xref:System.Xml.XmlReader>)，如果当前节点指 XML 架构和`xs:boolean`类型，则 ValueAsBoolean 属性返回当前节点的值作为取消装箱<xref:System.Boolean>对象。</xref:System.Boolean> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator>       但是，如果<xref:System.Xml.XPath.XPathNavigator>不具有任何架构或类型的信息，属性尝试将当前节点为字符串值转换 ValueAsBoolean<xref:System.Boolean>值，根据 XPath 2.0 强制转换规则`xs:boolean`。</xref:System.Boolean> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - "In the following example, the value of each element in the `valueas.xml` file is returned using the ValueAsBoolean, <xref:System.Xml.XPath.XPathNavigator.ValueAsDateTime%2A>, <xref:System.Xml.XPath.XPathNavigator.ValueAsDouble%2A>, <xref:System.Xml.XPath.XPathNavigator.ValueAsInt%2A>, and <xref:System.Xml.XPath.XPathNavigator.ValueAsLong%2A> properties.  \n  \n [!code-vb[XPathNavigatorProperties#5](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_10_1.vb)]\n [!code-cpp[XPathNavigatorProperties#5](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_10_1.cpp)]\n [!code-cs[XPathNavigatorProperties#5](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_10_1.cs)]  \n  \n The example takes the `valueas.xml` file as an input.  \n  \n```  \n<root>  \n    <booleanElement>true</booleanElement>  \n    <dateTimeElement>2004-04-20T12:00:00</dateTimeElement>  \n    <decimalElement>10.00</decimalElement>  \n    <numberElement>100000000</numberElement>  \n</root>  \n```"
  syntax:
    content: public override bool ValueAsBoolean { get; }
    return:
      type: System.Boolean
      description: "作为一种<xref:System.Boolean>。</xref:System.Boolean>的当前节点的值"
  overload: System.Xml.XPath.XPathNavigator.ValueAsBoolean*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的字符串值不能转换为一种<xref:System.Boolean>。</xref:System.Boolean>"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换为<xref:System.Boolean>无效。</xref:System.Boolean>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAsDateTime
  id: ValueAsDateTime
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAsDateTime
  nameWithType: XPathNavigator.ValueAsDateTime
  fullName: System.Xml.XPath.XPathNavigator.ValueAsDateTime
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为一种<xref:System.DateTime>。</xref:System.DateTime>"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>具有架构或类型信息 (例如，从<xref:System.Xml.XmlDocument>对象使用 XML 架构验证初始化<xref:System.Xml.XmlReader>)，如果当前节点指 XML 架构和`xs:datetime`类型，则 ValueAsDateTime 属性返回当前节点的值作为取消装箱<xref:System.DateTime>对象。</xref:System.DateTime> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator>       但是，如果<xref:System.Xml.XPath.XPathNavigator>不具有任何架构或类型的信息，属性尝试将当前节点为字符串值转换 ValueAsDateTime<xref:System.DateTime>值，根据 XPath 2.0 强制转换规则`xs:datetime`。</xref:System.DateTime> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - For an example of the ValueAsDateTime property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.
  syntax:
    content: public override DateTime ValueAsDateTime { get; }
    return:
      type: System.DateTime
      description: "作为一种<xref:System.DateTime>。</xref:System.DateTime>的当前节点的值"
  overload: System.Xml.XPath.XPathNavigator.ValueAsDateTime*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的字符串值不能转换为一种<xref:System.DateTime>。</xref:System.DateTime>"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换为<xref:System.DateTime>无效。</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAsDouble
  id: ValueAsDouble
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAsDouble
  nameWithType: XPathNavigator.ValueAsDouble
  fullName: System.Xml.XPath.XPathNavigator.ValueAsDouble
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为一种<xref:System.Double>。</xref:System.Double>"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>具有架构或类型信息 (例如，从<xref:System.Xml.XmlDocument>对象使用 XML 架构验证初始化<xref:System.Xml.XmlReader>)，如果当前节点指 XML 架构和`xs:double`类型，则 ValueAsDouble 属性返回当前节点的值作为取消装箱<xref:System.Double>对象。</xref:System.Double> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator>       但是，如果<xref:System.Xml.XPath.XPathNavigator>不具有任何架构或类型的信息，属性尝试将当前节点为字符串值转换 ValueAsDouble<xref:System.Double>值，根据 XPath 2.0 强制转换规则`xsd:double`。</xref:System.Double> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - For an example of the ValueAsDouble property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.
  syntax:
    content: public override double ValueAsDouble { get; }
    return:
      type: System.Double
      description: "作为一种<xref:System.Double>。</xref:System.Double>的当前节点的值"
  overload: System.Xml.XPath.XPathNavigator.ValueAsDouble*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的字符串值不能转换为一种<xref:System.Double>。</xref:System.Double>"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换为<xref:System.Double>无效。</xref:System.Double>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAsInt
  id: ValueAsInt
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAsInt
  nameWithType: XPathNavigator.ValueAsInt
  fullName: System.Xml.XPath.XPathNavigator.ValueAsInt
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为<xref:System.Int32>.</xref:System.Int32>"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>具有架构或类型信息 (例如，从<xref:System.Xml.XmlDocument>对象使用 XML 架构验证初始化<xref:System.Xml.XmlReader>)，如果当前节点指 XML 架构和`xs:integer`类型，则 ValueAsInt 属性返回当前节点的值作为取消装箱<xref:System.Int32>对象。</xref:System.Int32> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator>       但是，如果<xref:System.Xml.XPath.XPathNavigator>不具有任何架构或类型的信息，属性尝试将当前节点为字符串值转换 ValueAsInt<xref:System.Int32>值，根据 XPath 2.0 强制转换规则`xs:integer`。</xref:System.Int32> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - For an example of the ValueAsInt property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.
  syntax:
    content: public override int ValueAsInt { get; }
    return:
      type: System.Int32
      description: "当前节点的值为<xref:System.Int32>。</xref:System.Int32>"
  overload: System.Xml.XPath.XPathNavigator.ValueAsInt*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的字符串值不能转换为一种<xref:System.Int32>。</xref:System.Int32>"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换为<xref:System.Int32>无效。</xref:System.Int32>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueAsLong
  id: ValueAsLong
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueAsLong
  nameWithType: XPathNavigator.ValueAsLong
  fullName: System.Xml.XPath.XPathNavigator.ValueAsLong
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取当前节点的值作为<xref:System.Int64>.</xref:System.Int64>"
  remarks: "如果<xref:System.Xml.XPath.XPathNavigator>具有架构或类型信息 (例如，从<xref:System.Xml.XmlDocument>对象使用 XML 架构验证初始化<xref:System.Xml.XmlReader>)，如果当前节点指 XML 架构和`xs:integer`类型，则 ValueAsLong 属性返回当前节点的值作为取消装箱<xref:System.Int64>对象。</xref:System.Int64> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.XPathNavigator>       但是，如果<xref:System.Xml.XPath.XPathNavigator>不具有任何架构或类型的信息，属性尝试将当前节点为字符串值转换 ValueAsLong<xref:System.Int64>值，根据 XPath 2.0 强制转换规则`xs:integer`。</xref:System.Int64> </xref:System.Xml.XPath.XPathNavigator>"
  example:
  - For an example of the ValueAsLong property, see the <xref:System.Xml.XPath.XPathNavigator.ValueAsBoolean%2A> property.
  syntax:
    content: public override long ValueAsLong { get; }
    return:
      type: System.Int64
      description: "当前节点的值为<xref:System.Int64>。</xref:System.Int64>"
  overload: System.Xml.XPath.XPathNavigator.ValueAsLong*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "当前节点的字符串值不能转换为一种<xref:System.Int64>。</xref:System.Int64>"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "尝试强制转换为<xref:System.Int64>无效。</xref:System.Int64>"
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.ValueType
  id: ValueType
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: ValueType
  nameWithType: XPathNavigator.ValueType
  fullName: System.Xml.XPath.XPathNavigator.ValueType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取.NET Framework<xref:System.Type>当前节点。</xref:System.Type>"
  remarks: "<xref:System.Xml.XPath.XPathItem.ValueType%2A>属性获取.NET Framework<xref:System.Type>的当前节点的类型化值。</xref:System.Type> </xref:System.Xml.XPath.XPathItem.ValueType%2A>       例如，类型的元素`xs:int`都<xref:System.Xml.XPath.XPathItem.ValueType%2A>的<xref:System.Int32>默认情况下。</xref:System.Int32> </xref:System.Xml.XPath.XPathItem.ValueType%2A> 但是，<xref:System.Xml.XPath.XPathItem.ValueType%2A>可能是任何一种可以映射到有效类型`xs:int`如<xref:System.Int16>或<xref:System.Double>.</xref:System.Double> </xref:System.Int16> </xref:System.Xml.XPath.XPathItem.ValueType%2A>       如果节点没有类型，这相当于节点的类型批注`xdt:untypedAtomic`。 在这种情况下，ValueType 属性返回节点的字符串。 有关详细信息，请参阅[System.Xml 类中的类型支持](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "In the following example, the `contosoBooks.xml` XML file and `contosoBooks.xsd` XML Schema definition language (XSD) schema are used to create an <xref:System.Xml.XPath.XPathNavigator> object. The typed value of the `price` element is displayed using the ValueType property and then returned as a string using the <xref:System.Xml.XPath.XPathNavigator.ValueAs%2A> method.  \n  \n [!code-vb[XPathNavigatorProperties#6](~/add/codesnippet/visualbasic/p-system.xml.xpath.xpath_1_1.vb)]\n [!code-cpp[XPathNavigatorProperties#6](~/add/codesnippet/cpp/p-system.xml.xpath.xpath_1_1.cpp)]\n [!code-cs[XPathNavigatorProperties#6](~/add/codesnippet/csharp/p-system.xml.xpath.xpath_1_1.cs)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n<xs:schema attributeFormDefault=\"unqualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://www.contoso.com/books\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">  \n    <xs:element name=\"bookstore\">  \n        <xs:complexType>  \n            <xs:sequence>  \n                <xs:element maxOccurs=\"unbounded\" name=\"book\">  \n                    <xs:complexType>  \n                        <xs:sequence>  \n                            <xs:element name=\"title\" type=\"xs:string\" />  \n                            <xs:element name=\"author\">  \n                                <xs:complexType>  \n                                    <xs:sequence>  \n                                        <xs:element minOccurs=\"0\" name=\"name\" type=\"xs:string\" />  \n                                        <xs:element minOccurs=\"0\" name=\"first-name\" type=\"xs:string\" />  \n                                        <xs:element minOccurs=\"0\" name=\"last-name\" type=\"xs:string\" />  \n                                    </xs:sequence>  \n                                </xs:complexType>  \n                            </xs:element>  \n                            <xs:element name=\"price\" type=\"xs:decimal\" />  \n                        </xs:sequence>  \n                        <xs:attribute name=\"genre\" type=\"xs:string\" use=\"required\" />  \n                        <xs:attribute name=\"publicationdate\" type=\"xs:date\" use=\"required\" />  \n                        <xs:attribute name=\"ISBN\" type=\"xs:string\" use=\"required\" />  \n                    </xs:complexType>  \n                </xs:element>  \n            </xs:sequence>  \n        </xs:complexType>  \n    </xs:element>  \n</xs:schema>  \n  \n```"
  syntax:
    content: public override Type ValueType { get; }
    return:
      type: System.Type
      description: ".NET Framework<xref:System.Type>当前节点。</xref:System.Type> 默认值为<xref:System.String>。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.ValueType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)
  id: WriteSubtree(System.Xml.XmlWriter)
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: WriteSubtree(XmlWriter)
  nameWithType: XPathNavigator.WriteSubtree(XmlWriter)
  fullName: System.Xml.XPath.XPathNavigator.WriteSubtree(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "流式处理当前节点及其子节点到<xref:System.Xml.XmlWriter>指定对象。</xref:System.Xml.XmlWriter>"
  remarks: "当前节点的范围内命名空间的 Namespace 声明插入到流式传输到的 XML<xref:System.Xml.XmlWriter>指定对象。</xref:System.Xml.XmlWriter>       例如，如果调用 WriteSubtree 方法的第一天`book`元素`books.xml`文件，`http://www.contoso.com/books`在 XML 文档的顶部所做的命名空间声明将出现在流式传输到的 XML 中<xref:System.Xml.XmlWriter>指定下面的示例中所示的对象。</xref:System.Xml.XmlWriter>      ```   <?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?>   <book genre=&quot;autobiography&quot; publicationdate=&quot;1981&quot; ISBN=&quot;1-861003-11-0&quot; xmlns=&quot;http://www.contoso.com/books&quot;>       <title>The Autobiography of Benjamin Franklin</title>       <author>           <first-name>Benjamin</first-name>           <last-name>Franklin</last-name>       </author>       <price>8.99</price>   </book>   ```      > [!NOTE]1> WriteSubtree 方法不会影响<xref:System.Xml.XPath.XPathNavigator>.</xref:System.Xml.XPath.XPathNavigator>的位置"
  example:
  - "The following example illustrates using the WriteSubtree method on the first `book` element of the `contosoBooks.xml` file.  \n  \n [!code-cs[XPathNavigatorMethods#48](~/add/codesnippet/csharp/m-system.xml.xpath.xpath_14_1.cs)]\n [!code-vb[XPathNavigatorMethods#48](~/add/codesnippet/visualbasic/m-system.xml.xpath.xpath_14_1.vb)]\n [!code-cpp[XPathNavigatorMethods#48](~/add/codesnippet/cpp/m-system.xml.xpath.xpath_14_1.cpp)]  \n  \n The example takes the `contosoBooks.xml` file as an input.  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"utf-8\" ?>  \n<bookstore xmlns=\"http://www.contoso.com/books\">  \n    <book genre=\"autobiography\" publicationdate=\"1981-03-22\" ISBN=\"1-861003-11-0\">  \n        <title>The Autobiography of Benjamin Franklin</title>  \n        <author>  \n            <first-name>Benjamin</first-name>  \n            <last-name>Franklin</last-name>  \n        </author>  \n        <price>8.99</price>  \n    </book>  \n    <book genre=\"novel\" publicationdate=\"1967-11-17\" ISBN=\"0-201-63361-2\">  \n        <title>The Confidence Man</title>  \n        <author>  \n            <first-name>Herman</first-name>  \n            <last-name>Melville</last-name>  \n        </author>  \n        <price>11.99</price>  \n    </book>  \n    <book genre=\"philosophy\" publicationdate=\"1991-02-15\" ISBN=\"1-861001-57-6\">  \n        <title>The Gorgias</title>  \n        <author>  \n            <name>Plato</name>  \n        </author>  \n        <price>9.99</price>  \n    </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public virtual void WriteSubtree (System.Xml.XmlWriter writer);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>写入到流的对象。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.XPath.XPathNavigator.WriteSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.XmlLang
  id: XmlLang
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: XmlLang
  nameWithType: XPathNavigator.XmlLang
  fullName: System.Xml.XPath.XPathNavigator.XmlLang
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取`xml:lang`对当前节点的作用域。"
  remarks: "在示例中，XML 时<xref:System.Xml.XPath.XPathNavigator>位于`name`元素，XmlLang 属性返回的作用域`en-us`指示节点是否在范围内`xml:lang=&quot;en-us&quot;`属性。</xref:System.Xml.XPath.XPathNavigator>      ```   <root xml:lang=&quot;en-us&quot;>       <name>Name</name>   </root>   ```"
  syntax:
    content: public virtual string XmlLang { get; }
    return:
      type: System.String
      description: "A<xref:System.String>包含值的`xml:lang`作用域，或&lt;xref:System.String?displayProperty=fullName&gt;如果当前节点没有`xml:lang`确定要返回的值的范围。</xref:System.String>"
  overload: System.Xml.XPath.XPathNavigator.XmlLang*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XPath.XPathNavigator.XmlType
  id: XmlType
  parent: System.Xml.XPath.XPathNavigator
  langs:
  - csharp
  name: XmlType
  nameWithType: XPathNavigator.XmlType
  fullName: System.Xml.XPath.XPathNavigator.XmlType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.XPath
  summary: "获取<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>对当前节点的信息。"
  remarks: "以下是使用 xml 类型属性时要考虑的重要说明。      Xml 类型属性是`null`，除非该<xref:System.Xml.Schema.IXmlSchemaInfo.Validity%2A><xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>属性<xref:System.Xml.XPath.XPathNavigator>设置为<xref:System.Xml.Schema.XmlSchemaValidity?displayProperty=fullName>。</xref:System.Xml.Schema.XmlSchemaValidity?displayProperty=fullName></xref:System.Xml.XPath.XPathNavigator></xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>属性</xref:System.Xml.Schema.IXmlSchemaInfo.Validity%2A>      -如果此节点是有效的 xml 类型属性等同于<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A>属性<xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>属性<xref:System.Xml.XPath.XPathNavigator>，除非此节点是联合的成员。</xref:System.Xml.XPath.XPathNavigator> </xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaType%2A>      -如果此节点是一个联合成员，xml 类型属性等同于<xref:System.Xml.Schema.IXmlSchemaInfo.MemberType%2A><xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>此<xref:System.Xml.XPath.XPathNavigator>。</xref:System.Xml.XPath.XPathNavigator>属性</xref:System.Xml.XPath.XPathNavigator.SchemaInfo%2A>的属性</xref:System.Xml.Schema.IXmlSchemaInfo.MemberType%2A>"
  syntax:
    content: public override System.Xml.Schema.XmlSchemaType XmlType { get; }
    return:
      type: System.Xml.Schema.XmlSchemaType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;> </xref>对象; 默认为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XPath.XPathNavigator.XmlType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XPath.XPathItem
  isExternal: false
  name: System.Xml.XPath.XPathItem
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.XPath.XPathException
  parent: System.Xml.XPath
  isExternal: false
  name: XPathException
  nameWithType: XPathException
  fullName: System.Xml.XPath.XPathException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Xml.XPath.XPathNavigator.#ctor
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XPathNavigator()
  nameWithType: XPathNavigator.XPathNavigator()
  fullName: System.Xml.XPath.XPathNavigator.XPathNavigator()
- uid: System.Xml.XPath.XPathNavigator.AppendChild
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChild()
  nameWithType: XPathNavigator.AppendChild()
  fullName: System.Xml.XPath.XPathNavigator.AppendChild()
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChild(String)
  nameWithType: XPathNavigator.AppendChild(String)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChild(XmlReader)
  nameWithType: XPathNavigator.AppendChild(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChild(XPathNavigator)
  nameWithType: XPathNavigator.AppendChild(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.AppendChild(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator
  fullName: System.Xml.XPath.XPathNavigator
- uid: System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChildElement(String,String,String,String)
  nameWithType: XPathNavigator.AppendChildElement(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.AppendChildElement(String,String,String,String)
- uid: System.Xml.XPath.XPathNavigator.BaseURI
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: BaseURI
  nameWithType: XPathNavigator.BaseURI
  fullName: System.Xml.XPath.XPathNavigator.BaseURI
- uid: System.Xml.XPath.XPathNavigator.CanEdit
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CanEdit
  nameWithType: XPathNavigator.CanEdit
  fullName: System.Xml.XPath.XPathNavigator.CanEdit
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CheckValidity(XmlSchemaSet,ValidationEventHandler)
  nameWithType: XPathNavigator.CheckValidity(XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.XPath.XPathNavigator.CheckValidity(XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.XPath.XPathNavigator.Clone
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Clone()
  nameWithType: XPathNavigator.Clone()
  fullName: System.Xml.XPath.XPathNavigator.Clone()
- uid: System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ComparePosition(XPathNavigator)
  nameWithType: XPathNavigator.ComparePosition(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ComparePosition(XPathNavigator)
- uid: System.Xml.XmlNodeOrder
  parent: System.Xml
  isExternal: false
  name: XmlNodeOrder
  nameWithType: XmlNodeOrder
  fullName: System.Xml.XmlNodeOrder
- uid: System.Xml.XPath.XPathNavigator.Compile(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Compile(String)
  nameWithType: XPathNavigator.Compile(String)
  fullName: System.Xml.XPath.XPathNavigator.Compile(String)
- uid: System.Xml.XPath.XPathExpression
  parent: System.Xml.XPath
  isExternal: false
  name: XPathExpression
  nameWithType: XPathExpression
  fullName: System.Xml.XPath.XPathExpression
- uid: System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateAttribute(String,String,String,String)
  nameWithType: XPathNavigator.CreateAttribute(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.CreateAttribute(String,String,String,String)
- uid: System.Xml.XPath.XPathNavigator.CreateAttributes
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateAttributes()
  nameWithType: XPathNavigator.CreateAttributes()
  fullName: System.Xml.XPath.XPathNavigator.CreateAttributes()
- uid: System.Xml.XPath.XPathNavigator.CreateNavigator
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateNavigator()
  nameWithType: XPathNavigator.CreateNavigator()
  fullName: System.Xml.XPath.XPathNavigator.CreateNavigator()
- uid: System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: DeleteRange(XPathNavigator)
  nameWithType: XPathNavigator.DeleteRange(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.DeleteRange(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.DeleteSelf
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: DeleteSelf()
  nameWithType: XPathNavigator.DeleteSelf()
  fullName: System.Xml.XPath.XPathNavigator.DeleteSelf()
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Evaluate(String)
  nameWithType: XPathNavigator.Evaluate(String)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Evaluate(XPathExpression)
  nameWithType: XPathNavigator.Evaluate(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(XPathExpression)
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Evaluate(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.Evaluate(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(String,IXmlNamespaceResolver)
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: true
  name: IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Evaluate(XPathExpression,XPathNodeIterator)
  nameWithType: XPathNavigator.Evaluate(XPathExpression,XPathNodeIterator)
  fullName: System.Xml.XPath.XPathNavigator.Evaluate(XPathExpression,XPathNodeIterator)
- uid: System.Xml.XPath.XPathNodeIterator
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNodeIterator
  nameWithType: XPathNodeIterator
  fullName: System.Xml.XPath.XPathNodeIterator
- uid: System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetAttribute(String,String)
  nameWithType: XPathNavigator.GetAttribute(String,String)
  fullName: System.Xml.XPath.XPathNavigator.GetAttribute(String,String)
- uid: System.Xml.XPath.XPathNavigator.GetNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetNamespace(String)
  nameWithType: XPathNavigator.GetNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.GetNamespace(String)
- uid: System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetNamespacesInScope(XmlNamespaceScope)
  nameWithType: XPathNavigator.GetNamespacesInScope(XmlNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.GetNamespacesInScope(XmlNamespaceScope)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlNamespaceScope
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceScope
  nameWithType: XmlNamespaceScope
  fullName: System.Xml.XmlNamespaceScope
- uid: System.Xml.XPath.XPathNavigator.HasAttributes
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: HasAttributes
  nameWithType: XPathNavigator.HasAttributes
  fullName: System.Xml.XPath.XPathNavigator.HasAttributes
- uid: System.Xml.XPath.XPathNavigator.HasChildren
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: HasChildren
  nameWithType: XPathNavigator.HasChildren
  fullName: System.Xml.XPath.XPathNavigator.HasChildren
- uid: System.Xml.XPath.XPathNavigator.InnerXml
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InnerXml
  nameWithType: XPathNavigator.InnerXml
  fullName: System.Xml.XPath.XPathNavigator.InnerXml
- uid: System.Xml.XPath.XPathNavigator.InsertAfter
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertAfter()
  nameWithType: XPathNavigator.InsertAfter()
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter()
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertAfter(String)
  nameWithType: XPathNavigator.InsertAfter(String)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(String)
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertAfter(XmlReader)
  nameWithType: XPathNavigator.InsertAfter(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(XmlReader)
- uid: System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertAfter(XPathNavigator)
  nameWithType: XPathNavigator.InsertAfter(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.InsertAfter(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.InsertBefore
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertBefore()
  nameWithType: XPathNavigator.InsertBefore()
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore()
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertBefore(String)
  nameWithType: XPathNavigator.InsertBefore(String)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(String)
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertBefore(XmlReader)
  nameWithType: XPathNavigator.InsertBefore(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(XmlReader)
- uid: System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertBefore(XPathNavigator)
  nameWithType: XPathNavigator.InsertBefore(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.InsertBefore(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertElementAfter(String,String,String,String)
  nameWithType: XPathNavigator.InsertElementAfter(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.InsertElementAfter(String,String,String,String)
- uid: System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertElementBefore(String,String,String,String)
  nameWithType: XPathNavigator.InsertElementBefore(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.InsertElementBefore(String,String,String,String)
- uid: System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsDescendant(XPathNavigator)
  nameWithType: XPathNavigator.IsDescendant(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.IsDescendant(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.IsEmptyElement
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsEmptyElement
  nameWithType: XPathNavigator.IsEmptyElement
  fullName: System.Xml.XPath.XPathNavigator.IsEmptyElement
- uid: System.Xml.XPath.XPathNavigator.IsNode
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsNode
  nameWithType: XPathNavigator.IsNode
  fullName: System.Xml.XPath.XPathNavigator.IsNode
- uid: System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsSamePosition(XPathNavigator)
  nameWithType: XPathNavigator.IsSamePosition(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.IsSamePosition(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.LocalName
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LocalName
  nameWithType: XPathNavigator.LocalName
  fullName: System.Xml.XPath.XPathNavigator.LocalName
- uid: System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LookupNamespace(String)
  nameWithType: XPathNavigator.LookupNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.LookupNamespace(String)
- uid: System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LookupPrefix(String)
  nameWithType: XPathNavigator.LookupPrefix(String)
  fullName: System.Xml.XPath.XPathNavigator.LookupPrefix(String)
- uid: System.Xml.XPath.XPathNavigator.Matches(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Matches(String)
  nameWithType: XPathNavigator.Matches(String)
  fullName: System.Xml.XPath.XPathNavigator.Matches(String)
- uid: System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Matches(XPathExpression)
  nameWithType: XPathNavigator.Matches(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Matches(XPathExpression)
- uid: System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveTo(XPathNavigator)
  nameWithType: XPathNavigator.MoveTo(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveTo(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToAttribute(String,String)
  nameWithType: XPathNavigator.MoveToAttribute(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToAttribute(String,String)
- uid: System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToChild(XPathNodeType)
  nameWithType: XPathNavigator.MoveToChild(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToChild(XPathNodeType)
- uid: System.Xml.XPath.XPathNodeType
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNodeType
  nameWithType: XPathNodeType
  fullName: System.Xml.XPath.XPathNodeType
- uid: System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToChild(String,String)
  nameWithType: XPathNavigator.MoveToChild(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToChild(String,String)
- uid: System.Xml.XPath.XPathNavigator.MoveToFirst
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirst()
  nameWithType: XPathNavigator.MoveToFirst()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirst()
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstAttribute()
  nameWithType: XPathNavigator.MoveToFirstAttribute()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute()
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstChild
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstChild()
  nameWithType: XPathNavigator.MoveToFirstChild()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstChild()
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstNamespace()
  nameWithType: XPathNavigator.MoveToFirstNamespace()
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace()
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstNamespace(XPathNamespaceScope)
  nameWithType: XPathNavigator.MoveToFirstNamespace(XPathNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(XPathNamespaceScope)
- uid: System.Xml.XPath.XPathNamespaceScope
  parent: System.Xml.XPath
  isExternal: false
  name: XPathNamespaceScope
  nameWithType: XPathNamespaceScope
  fullName: System.Xml.XPath.XPathNamespaceScope
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFollowing(XPathNodeType)
  nameWithType: XPathNavigator.MoveToFollowing(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(XPathNodeType)
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFollowing(String,String)
  nameWithType: XPathNavigator.MoveToFollowing(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(String,String)
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFollowing(XPathNodeType,XPathNavigator)
  nameWithType: XPathNavigator.MoveToFollowing(XPathNodeType,XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(XPathNodeType,XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFollowing(String,String,XPathNavigator)
  nameWithType: XPathNavigator.MoveToFollowing(String,String,XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.MoveToFollowing(String,String,XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.MoveToId(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToId(String)
  nameWithType: XPathNavigator.MoveToId(String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToId(String)
- uid: System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNamespace(String)
  nameWithType: XPathNavigator.MoveToNamespace(String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNamespace(String)
- uid: System.Xml.XPath.XPathNavigator.MoveToNext
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNext()
  nameWithType: XPathNavigator.MoveToNext()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext()
- uid: System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNext(XPathNodeType)
  nameWithType: XPathNavigator.MoveToNext(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext(XPathNodeType)
- uid: System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNext(String,String)
  nameWithType: XPathNavigator.MoveToNext(String,String)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNext(String,String)
- uid: System.Xml.XPath.XPathNavigator.MoveToNextAttribute
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNextAttribute()
  nameWithType: XPathNavigator.MoveToNextAttribute()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextAttribute()
- uid: System.Xml.XPath.XPathNavigator.MoveToNextNamespace
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNextNamespace()
  nameWithType: XPathNavigator.MoveToNextNamespace()
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextNamespace()
- uid: System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNextNamespace(XPathNamespaceScope)
  nameWithType: XPathNavigator.MoveToNextNamespace(XPathNamespaceScope)
  fullName: System.Xml.XPath.XPathNavigator.MoveToNextNamespace(XPathNamespaceScope)
- uid: System.Xml.XPath.XPathNavigator.MoveToParent
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToParent()
  nameWithType: XPathNavigator.MoveToParent()
  fullName: System.Xml.XPath.XPathNavigator.MoveToParent()
- uid: System.Xml.XPath.XPathNavigator.MoveToPrevious
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToPrevious()
  nameWithType: XPathNavigator.MoveToPrevious()
  fullName: System.Xml.XPath.XPathNavigator.MoveToPrevious()
- uid: System.Xml.XPath.XPathNavigator.MoveToRoot
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToRoot()
  nameWithType: XPathNavigator.MoveToRoot()
  fullName: System.Xml.XPath.XPathNavigator.MoveToRoot()
- uid: System.Xml.XPath.XPathNavigator.Name
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Name
  nameWithType: XPathNavigator.Name
  fullName: System.Xml.XPath.XPathNavigator.Name
- uid: System.Xml.XPath.XPathNavigator.NamespaceURI
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NamespaceURI
  nameWithType: XPathNavigator.NamespaceURI
  fullName: System.Xml.XPath.XPathNavigator.NamespaceURI
- uid: System.Xml.XPath.XPathNavigator.NameTable
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NameTable
  nameWithType: XPathNavigator.NameTable
  fullName: System.Xml.XPath.XPathNavigator.NameTable
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XPath.XPathNavigator.NavigatorComparer
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NavigatorComparer
  nameWithType: XPathNavigator.NavigatorComparer
  fullName: System.Xml.XPath.XPathNavigator.NavigatorComparer
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Xml.XPath.XPathNavigator.NodeType
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NodeType
  nameWithType: XPathNavigator.NodeType
  fullName: System.Xml.XPath.XPathNavigator.NodeType
- uid: System.Xml.XPath.XPathNavigator.OuterXml
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: OuterXml
  nameWithType: XPathNavigator.OuterXml
  fullName: System.Xml.XPath.XPathNavigator.OuterXml
- uid: System.Xml.XPath.XPathNavigator.Prefix
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Prefix
  nameWithType: XPathNavigator.Prefix
  fullName: System.Xml.XPath.XPathNavigator.Prefix
- uid: System.Xml.XPath.XPathNavigator.PrependChild
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChild()
  nameWithType: XPathNavigator.PrependChild()
  fullName: System.Xml.XPath.XPathNavigator.PrependChild()
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChild(String)
  nameWithType: XPathNavigator.PrependChild(String)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(String)
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChild(XmlReader)
  nameWithType: XPathNavigator.PrependChild(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(XmlReader)
- uid: System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChild(XPathNavigator)
  nameWithType: XPathNavigator.PrependChild(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.PrependChild(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChildElement(String,String,String,String)
  nameWithType: XPathNavigator.PrependChildElement(String,String,String,String)
  fullName: System.Xml.XPath.XPathNavigator.PrependChildElement(String,String,String,String)
- uid: System.Xml.XPath.XPathNavigator.ReadSubtree
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReadSubtree()
  nameWithType: XPathNavigator.ReadSubtree()
  fullName: System.Xml.XPath.XPathNavigator.ReadSubtree()
- uid: System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceRange(XPathNavigator)
  nameWithType: XPathNavigator.ReplaceRange(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceRange(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceSelf(String)
  nameWithType: XPathNavigator.ReplaceSelf(String)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(String)
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceSelf(XmlReader)
  nameWithType: XPathNavigator.ReplaceSelf(XmlReader)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(XmlReader)
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceSelf(XPathNavigator)
  nameWithType: XPathNavigator.ReplaceSelf(XPathNavigator)
  fullName: System.Xml.XPath.XPathNavigator.ReplaceSelf(XPathNavigator)
- uid: System.Xml.XPath.XPathNavigator.SchemaInfo
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SchemaInfo
  nameWithType: XPathNavigator.SchemaInfo
  fullName: System.Xml.XPath.XPathNavigator.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XPath.XPathNavigator.Select(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Select(String)
  nameWithType: XPathNavigator.Select(String)
  fullName: System.Xml.XPath.XPathNavigator.Select(String)
- uid: System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Select(XPathExpression)
  nameWithType: XPathNavigator.Select(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.Select(XPathExpression)
- uid: System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Select(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.Select(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.Select(String,IXmlNamespaceResolver)
- uid: System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectAncestors(XPathNodeType,Boolean)
  nameWithType: XPathNavigator.SelectAncestors(XPathNodeType,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectAncestors(XPathNodeType,Boolean)
- uid: System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectAncestors(String,String,Boolean)
  nameWithType: XPathNavigator.SelectAncestors(String,String,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectAncestors(String,String,Boolean)
- uid: System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectChildren(XPathNodeType)
  nameWithType: XPathNavigator.SelectChildren(XPathNodeType)
  fullName: System.Xml.XPath.XPathNavigator.SelectChildren(XPathNodeType)
- uid: System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectChildren(String,String)
  nameWithType: XPathNavigator.SelectChildren(String,String)
  fullName: System.Xml.XPath.XPathNavigator.SelectChildren(String,String)
- uid: System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectDescendants(XPathNodeType,Boolean)
  nameWithType: XPathNavigator.SelectDescendants(XPathNodeType,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectDescendants(XPathNodeType,Boolean)
- uid: System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectDescendants(String,String,Boolean)
  nameWithType: XPathNavigator.SelectDescendants(String,String,Boolean)
  fullName: System.Xml.XPath.XPathNavigator.SelectDescendants(String,String,Boolean)
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectSingleNode(String)
  nameWithType: XPathNavigator.SelectSingleNode(String)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(String)
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectSingleNode(XPathExpression)
  nameWithType: XPathNavigator.SelectSingleNode(XPathExpression)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(XPathExpression)
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectSingleNode(String,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.SelectSingleNode(String,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.SelectSingleNode(String,IXmlNamespaceResolver)
- uid: System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SetTypedValue(Object)
  nameWithType: XPathNavigator.SetTypedValue(Object)
  fullName: System.Xml.XPath.XPathNavigator.SetTypedValue(Object)
- uid: System.Xml.XPath.XPathNavigator.SetValue(System.String)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SetValue(String)
  nameWithType: XPathNavigator.SetValue(String)
  fullName: System.Xml.XPath.XPathNavigator.SetValue(String)
- uid: System.Xml.XPath.XPathNavigator.System#ICloneable#Clone
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: XPathNavigator.System.ICloneable.Clone()
  fullName: System.Xml.XPath.XPathNavigator.System.ICloneable.Clone()
- uid: System.Xml.XPath.XPathNavigator.ToString
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ToString()
  nameWithType: XPathNavigator.ToString()
  fullName: System.Xml.XPath.XPathNavigator.ToString()
- uid: System.Xml.XPath.XPathNavigator.TypedValue
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: TypedValue
  nameWithType: XPathNavigator.TypedValue
  fullName: System.Xml.XPath.XPathNavigator.TypedValue
- uid: System.Xml.XPath.XPathNavigator.UnderlyingObject
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: UnderlyingObject
  nameWithType: XPathNavigator.UnderlyingObject
  fullName: System.Xml.XPath.XPathNavigator.UnderlyingObject
- uid: System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAs(Type,IXmlNamespaceResolver)
  nameWithType: XPathNavigator.ValueAs(Type,IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathNavigator.ValueAs(Type,IXmlNamespaceResolver)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XPath.XPathNavigator.ValueAsBoolean
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsBoolean
  nameWithType: XPathNavigator.ValueAsBoolean
  fullName: System.Xml.XPath.XPathNavigator.ValueAsBoolean
- uid: System.Xml.XPath.XPathNavigator.ValueAsDateTime
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsDateTime
  nameWithType: XPathNavigator.ValueAsDateTime
  fullName: System.Xml.XPath.XPathNavigator.ValueAsDateTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Xml.XPath.XPathNavigator.ValueAsDouble
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsDouble
  nameWithType: XPathNavigator.ValueAsDouble
  fullName: System.Xml.XPath.XPathNavigator.ValueAsDouble
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Xml.XPath.XPathNavigator.ValueAsInt
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsInt
  nameWithType: XPathNavigator.ValueAsInt
  fullName: System.Xml.XPath.XPathNavigator.ValueAsInt
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.XPath.XPathNavigator.ValueAsLong
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsLong
  nameWithType: XPathNavigator.ValueAsLong
  fullName: System.Xml.XPath.XPathNavigator.ValueAsLong
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Xml.XPath.XPathNavigator.ValueType
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueType
  nameWithType: XPathNavigator.ValueType
  fullName: System.Xml.XPath.XPathNavigator.ValueType
- uid: System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: WriteSubtree(XmlWriter)
  nameWithType: XPathNavigator.WriteSubtree(XmlWriter)
  fullName: System.Xml.XPath.XPathNavigator.WriteSubtree(XmlWriter)
- uid: System.Xml.XPath.XPathNavigator.XmlLang
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XmlLang
  nameWithType: XPathNavigator.XmlLang
  fullName: System.Xml.XPath.XPathNavigator.XmlLang
- uid: System.Xml.XPath.XPathNavigator.XmlType
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XmlType
  nameWithType: XPathNavigator.XmlType
  fullName: System.Xml.XPath.XPathNavigator.XmlType
- uid: System.Xml.Schema.XmlSchemaType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaType
  nameWithType: XmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType
- uid: System.Xml.XPath.XPathNavigator.#ctor*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XPathNavigator
  nameWithType: XPathNavigator.XPathNavigator
- uid: System.Xml.XPath.XPathNavigator.AppendChild*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChild
  nameWithType: XPathNavigator.AppendChild
- uid: System.Xml.XPath.XPathNavigator.AppendChildElement*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: AppendChildElement
  nameWithType: XPathNavigator.AppendChildElement
- uid: System.Xml.XPath.XPathNavigator.BaseURI*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: BaseURI
  nameWithType: XPathNavigator.BaseURI
- uid: System.Xml.XPath.XPathNavigator.CanEdit*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CanEdit
  nameWithType: XPathNavigator.CanEdit
- uid: System.Xml.XPath.XPathNavigator.CheckValidity*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CheckValidity
  nameWithType: XPathNavigator.CheckValidity
- uid: System.Xml.XPath.XPathNavigator.Clone*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Clone
  nameWithType: XPathNavigator.Clone
- uid: System.Xml.XPath.XPathNavigator.ComparePosition*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ComparePosition
  nameWithType: XPathNavigator.ComparePosition
- uid: System.Xml.XPath.XPathNavigator.Compile*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Compile
  nameWithType: XPathNavigator.Compile
- uid: System.Xml.XPath.XPathNavigator.CreateAttribute*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateAttribute
  nameWithType: XPathNavigator.CreateAttribute
- uid: System.Xml.XPath.XPathNavigator.CreateAttributes*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateAttributes
  nameWithType: XPathNavigator.CreateAttributes
- uid: System.Xml.XPath.XPathNavigator.CreateNavigator*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: CreateNavigator
  nameWithType: XPathNavigator.CreateNavigator
- uid: System.Xml.XPath.XPathNavigator.DeleteRange*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: DeleteRange
  nameWithType: XPathNavigator.DeleteRange
- uid: System.Xml.XPath.XPathNavigator.DeleteSelf*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: DeleteSelf
  nameWithType: XPathNavigator.DeleteSelf
- uid: System.Xml.XPath.XPathNavigator.Evaluate*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Evaluate
  nameWithType: XPathNavigator.Evaluate
- uid: System.Xml.XPath.XPathNavigator.GetAttribute*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetAttribute
  nameWithType: XPathNavigator.GetAttribute
- uid: System.Xml.XPath.XPathNavigator.GetNamespace*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetNamespace
  nameWithType: XPathNavigator.GetNamespace
- uid: System.Xml.XPath.XPathNavigator.GetNamespacesInScope*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: GetNamespacesInScope
  nameWithType: XPathNavigator.GetNamespacesInScope
- uid: System.Xml.XPath.XPathNavigator.HasAttributes*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: HasAttributes
  nameWithType: XPathNavigator.HasAttributes
- uid: System.Xml.XPath.XPathNavigator.HasChildren*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: HasChildren
  nameWithType: XPathNavigator.HasChildren
- uid: System.Xml.XPath.XPathNavigator.InnerXml*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InnerXml
  nameWithType: XPathNavigator.InnerXml
- uid: System.Xml.XPath.XPathNavigator.InsertAfter*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertAfter
  nameWithType: XPathNavigator.InsertAfter
- uid: System.Xml.XPath.XPathNavigator.InsertBefore*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertBefore
  nameWithType: XPathNavigator.InsertBefore
- uid: System.Xml.XPath.XPathNavigator.InsertElementAfter*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertElementAfter
  nameWithType: XPathNavigator.InsertElementAfter
- uid: System.Xml.XPath.XPathNavigator.InsertElementBefore*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: InsertElementBefore
  nameWithType: XPathNavigator.InsertElementBefore
- uid: System.Xml.XPath.XPathNavigator.IsDescendant*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsDescendant
  nameWithType: XPathNavigator.IsDescendant
- uid: System.Xml.XPath.XPathNavigator.IsEmptyElement*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsEmptyElement
  nameWithType: XPathNavigator.IsEmptyElement
- uid: System.Xml.XPath.XPathNavigator.IsNode*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsNode
  nameWithType: XPathNavigator.IsNode
- uid: System.Xml.XPath.XPathNavigator.IsSamePosition*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: IsSamePosition
  nameWithType: XPathNavigator.IsSamePosition
- uid: System.Xml.XPath.XPathNavigator.LocalName*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LocalName
  nameWithType: XPathNavigator.LocalName
- uid: System.Xml.XPath.XPathNavigator.LookupNamespace*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LookupNamespace
  nameWithType: XPathNavigator.LookupNamespace
- uid: System.Xml.XPath.XPathNavigator.LookupPrefix*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: LookupPrefix
  nameWithType: XPathNavigator.LookupPrefix
- uid: System.Xml.XPath.XPathNavigator.Matches*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Matches
  nameWithType: XPathNavigator.Matches
- uid: System.Xml.XPath.XPathNavigator.MoveTo*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveTo
  nameWithType: XPathNavigator.MoveTo
- uid: System.Xml.XPath.XPathNavigator.MoveToAttribute*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToAttribute
  nameWithType: XPathNavigator.MoveToAttribute
- uid: System.Xml.XPath.XPathNavigator.MoveToChild*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToChild
  nameWithType: XPathNavigator.MoveToChild
- uid: System.Xml.XPath.XPathNavigator.MoveToFirst*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirst
  nameWithType: XPathNavigator.MoveToFirst
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstAttribute*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstAttribute
  nameWithType: XPathNavigator.MoveToFirstAttribute
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstChild*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstChild
  nameWithType: XPathNavigator.MoveToFirstChild
- uid: System.Xml.XPath.XPathNavigator.MoveToFirstNamespace*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFirstNamespace
  nameWithType: XPathNavigator.MoveToFirstNamespace
- uid: System.Xml.XPath.XPathNavigator.MoveToFollowing*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToFollowing
  nameWithType: XPathNavigator.MoveToFollowing
- uid: System.Xml.XPath.XPathNavigator.MoveToId*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToId
  nameWithType: XPathNavigator.MoveToId
- uid: System.Xml.XPath.XPathNavigator.MoveToNamespace*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNamespace
  nameWithType: XPathNavigator.MoveToNamespace
- uid: System.Xml.XPath.XPathNavigator.MoveToNext*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNext
  nameWithType: XPathNavigator.MoveToNext
- uid: System.Xml.XPath.XPathNavigator.MoveToNextAttribute*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNextAttribute
  nameWithType: XPathNavigator.MoveToNextAttribute
- uid: System.Xml.XPath.XPathNavigator.MoveToNextNamespace*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToNextNamespace
  nameWithType: XPathNavigator.MoveToNextNamespace
- uid: System.Xml.XPath.XPathNavigator.MoveToParent*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToParent
  nameWithType: XPathNavigator.MoveToParent
- uid: System.Xml.XPath.XPathNavigator.MoveToPrevious*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToPrevious
  nameWithType: XPathNavigator.MoveToPrevious
- uid: System.Xml.XPath.XPathNavigator.MoveToRoot*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: MoveToRoot
  nameWithType: XPathNavigator.MoveToRoot
- uid: System.Xml.XPath.XPathNavigator.Name*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Name
  nameWithType: XPathNavigator.Name
- uid: System.Xml.XPath.XPathNavigator.NamespaceURI*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NamespaceURI
  nameWithType: XPathNavigator.NamespaceURI
- uid: System.Xml.XPath.XPathNavigator.NameTable*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NameTable
  nameWithType: XPathNavigator.NameTable
- uid: System.Xml.XPath.XPathNavigator.NavigatorComparer*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NavigatorComparer
  nameWithType: XPathNavigator.NavigatorComparer
- uid: System.Xml.XPath.XPathNavigator.NodeType*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: NodeType
  nameWithType: XPathNavigator.NodeType
- uid: System.Xml.XPath.XPathNavigator.OuterXml*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: OuterXml
  nameWithType: XPathNavigator.OuterXml
- uid: System.Xml.XPath.XPathNavigator.Prefix*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Prefix
  nameWithType: XPathNavigator.Prefix
- uid: System.Xml.XPath.XPathNavigator.PrependChild*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChild
  nameWithType: XPathNavigator.PrependChild
- uid: System.Xml.XPath.XPathNavigator.PrependChildElement*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: PrependChildElement
  nameWithType: XPathNavigator.PrependChildElement
- uid: System.Xml.XPath.XPathNavigator.ReadSubtree*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReadSubtree
  nameWithType: XPathNavigator.ReadSubtree
- uid: System.Xml.XPath.XPathNavigator.ReplaceRange*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceRange
  nameWithType: XPathNavigator.ReplaceRange
- uid: System.Xml.XPath.XPathNavigator.ReplaceSelf*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ReplaceSelf
  nameWithType: XPathNavigator.ReplaceSelf
- uid: System.Xml.XPath.XPathNavigator.SchemaInfo*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SchemaInfo
  nameWithType: XPathNavigator.SchemaInfo
- uid: System.Xml.XPath.XPathNavigator.Select*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: Select
  nameWithType: XPathNavigator.Select
- uid: System.Xml.XPath.XPathNavigator.SelectAncestors*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectAncestors
  nameWithType: XPathNavigator.SelectAncestors
- uid: System.Xml.XPath.XPathNavigator.SelectChildren*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectChildren
  nameWithType: XPathNavigator.SelectChildren
- uid: System.Xml.XPath.XPathNavigator.SelectDescendants*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectDescendants
  nameWithType: XPathNavigator.SelectDescendants
- uid: System.Xml.XPath.XPathNavigator.SelectSingleNode*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SelectSingleNode
  nameWithType: XPathNavigator.SelectSingleNode
- uid: System.Xml.XPath.XPathNavigator.SetTypedValue*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SetTypedValue
  nameWithType: XPathNavigator.SetTypedValue
- uid: System.Xml.XPath.XPathNavigator.SetValue*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: SetValue
  nameWithType: XPathNavigator.SetValue
- uid: System.Xml.XPath.XPathNavigator.System#ICloneable#Clone*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: XPathNavigator.System.ICloneable.Clone
- uid: System.Xml.XPath.XPathNavigator.ToString*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ToString
  nameWithType: XPathNavigator.ToString
- uid: System.Xml.XPath.XPathNavigator.TypedValue*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: TypedValue
  nameWithType: XPathNavigator.TypedValue
- uid: System.Xml.XPath.XPathNavigator.UnderlyingObject*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: UnderlyingObject
  nameWithType: XPathNavigator.UnderlyingObject
- uid: System.Xml.XPath.XPathNavigator.ValueAs*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAs
  nameWithType: XPathNavigator.ValueAs
- uid: System.Xml.XPath.XPathNavigator.ValueAsBoolean*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsBoolean
  nameWithType: XPathNavigator.ValueAsBoolean
- uid: System.Xml.XPath.XPathNavigator.ValueAsDateTime*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsDateTime
  nameWithType: XPathNavigator.ValueAsDateTime
- uid: System.Xml.XPath.XPathNavigator.ValueAsDouble*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsDouble
  nameWithType: XPathNavigator.ValueAsDouble
- uid: System.Xml.XPath.XPathNavigator.ValueAsInt*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsInt
  nameWithType: XPathNavigator.ValueAsInt
- uid: System.Xml.XPath.XPathNavigator.ValueAsLong*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueAsLong
  nameWithType: XPathNavigator.ValueAsLong
- uid: System.Xml.XPath.XPathNavigator.ValueType*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: ValueType
  nameWithType: XPathNavigator.ValueType
- uid: System.Xml.XPath.XPathNavigator.WriteSubtree*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: WriteSubtree
  nameWithType: XPathNavigator.WriteSubtree
- uid: System.Xml.XPath.XPathNavigator.XmlLang*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XmlLang
  nameWithType: XPathNavigator.XmlLang
- uid: System.Xml.XPath.XPathNavigator.XmlType*
  parent: System.Xml.XPath.XPathNavigator
  isExternal: false
  name: XmlType
  nameWithType: XPathNavigator.XmlType
