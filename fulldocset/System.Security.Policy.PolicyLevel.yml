### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.PolicyLevel
  id: PolicyLevel
  children:
  - System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)
  - System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  - System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)
  - System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)
  - System.Security.Policy.PolicyLevel.CreateAppDomainLevel
  - System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)
  - System.Security.Policy.PolicyLevel.FullTrustAssemblies
  - System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)
  - System.Security.Policy.PolicyLevel.Label
  - System.Security.Policy.PolicyLevel.NamedPermissionSets
  - System.Security.Policy.PolicyLevel.Recover
  - System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)
  - System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  - System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)
  - System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)
  - System.Security.Policy.PolicyLevel.Reset
  - System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)
  - System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  - System.Security.Policy.PolicyLevel.RootCodeGroup
  - System.Security.Policy.PolicyLevel.StoreLocation
  - System.Security.Policy.PolicyLevel.ToXml
  - System.Security.Policy.PolicyLevel.Type
  langs:
  - csharp
  name: PolicyLevel
  nameWithType: PolicyLevel
  fullName: System.Security.Policy.PolicyLevel
  type: Class
  summary: "表示公共语言运行时的安全策略级别。 此类不能被继承。"
  remarks: "> [!IMPORTANT]1> 第一页为[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，公共语言运行时 (CLR) 不再提供安全策略的计算机。 我们建议你使用[Windows 软件限制策略 (SRP)](http://go.microsoft.com/fwlink/?LinkId=178101)或[AppLocker](http://go.microsoft.com/fwlink/?LinkId=178102)作为 CLR 安全策略的替换。 本主题中的信息适用于.NET Framework 版本 3.5 及更早版本;它不适用于[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]及更高版本。 有关此更改以及其他更改的详细信息，请参阅[安全更改](~/add/includes/ajax-current-ext-md.md)。       安全策略的最高级别是企业范围。 连续较低级别的层次结构表示更多的策略限制，但永远不会授予比允许的更高级别的权限。 实现以下策略级别︰ 1。  Enterprise︰ 在企业中的所有托管代码的安全策略。      2.  计算机︰ 在计算机上运行的所有托管代码的安全策略。      3.  由用户运行的所有托管代码的用户︰ 安全策略。      4.  应用程序域︰ 应用程序中的所有托管代码的安全策略。       策略级别均包含一组的组织到取得 root 权限的单个树的代码组 (请参阅<xref:System.Security.Policy.CodeGroup>)、 一组指定要对代码组所属的代码可授予权限的代码组引用的命名的权限集和完全信任程序集的列表。</xref:System.Security.Policy.CodeGroup>       使用<xref:System.Security.SecurityManager.PolicyHierarchy%2A?displayProperty=fullName>要枚举的策略级别。</xref:System.Security.SecurityManager.PolicyHierarchy%2A?displayProperty=fullName>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class PolicyLevel
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)
  id: AddFullTrustAssembly(System.Security.Policy.StrongName)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: AddFullTrustAssembly(StrongName)
  nameWithType: PolicyLevel.AddFullTrustAssembly(StrongName)
  fullName: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(StrongName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "将添加<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对应于指定<xref href=&quot;System.Security.Policy.StrongName&quot;></xref>到列表<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集不应进行评估的组的成员。"
  remarks: "在版本 2.0 或更高版本的.NET framework 中不支持 AddFullTrustAssembly 方法，因为这些版本中不使用完全信任程序集的列表。"
  syntax:
    content: public void AddFullTrustAssembly (System.Security.Policy.StrongName sn);
    parameters:
    - id: sn
      type: System.Security.Policy.StrongName
      description: "<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>用于创建<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>将添加到列表的<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集不应进行评估的组的成员。"
  overload: System.Security.Policy.PolicyLevel.AddFullTrustAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>sn</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>指定的<code> sn </code>参数已获得完全信任。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  id: AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: AddFullTrustAssembly(StrongNameMembershipCondition)
  nameWithType: PolicyLevel.AddFullTrustAssembly(StrongNameMembershipCondition)
  fullName: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(StrongNameMembershipCondition)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "将指定的<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>到列表<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集不应进行评估的组的成员。"
  remarks: "在版本 2.0 或更高版本的.NET framework 中不支持 AddFullTrustAssembly 方法，因为这些版本中不使用完全信任程序集的列表。"
  syntax:
    content: public void AddFullTrustAssembly (System.Security.Policy.StrongNameMembershipCondition snMC);
    parameters:
    - id: snMC
      type: System.Security.Policy.StrongNameMembershipCondition
      description: "<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;> </xref>将添加到列表的<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集不应进行评估的组的成员。"
  overload: System.Security.Policy.PolicyLevel.AddFullTrustAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>snMC</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;> </xref>指定的<code> snMC </code>参数已获得完全信任。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)
  id: AddNamedPermissionSet(System.Security.NamedPermissionSet)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: AddNamedPermissionSet(NamedPermissionSet)
  nameWithType: PolicyLevel.AddNamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.Policy.PolicyLevel.AddNamedPermissionSet(NamedPermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "将添加<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>到当前的策略级别。"
  remarks: "策略级别的范围内命名的权限集。"
  syntax:
    content: public void AddNamedPermissionSet (System.Security.NamedPermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.NamedPermissionSet
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>将添加到当前的策略级别。"
  overload: System.Security.Policy.PolicyLevel.AddNamedPermissionSet*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>permSet</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> permSet </code>参数具有相同的名称与现有<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>中<xref href=&quot;System.Security.Policy.PolicyLevel&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)
  id: ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: ChangeNamedPermissionSet(String,PermissionSet)
  nameWithType: PolicyLevel.ChangeNamedPermissionSet(String,PermissionSet)
  fullName: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(String,PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "替换<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>中具有指定当前的策略级别<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  syntax:
    content: public System.Security.NamedPermissionSet ChangeNamedPermissionSet (string name, System.Security.PermissionSet pSet);
    parameters:
    - id: name
      type: System.String
      description: "名称<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>替换。"
    - id: pSet
      type: System.Security.PermissionSet
      description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref> ，用于替换<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>指定的`name`参数。"
    return:
      type: System.Security.NamedPermissionSet
      description: "一份<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> ，已替换。"
  overload: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>pSet</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>参数等于保留的权限集的名称。       -或- <xref href=&quot;System.Security.PermissionSet&quot;> </xref>指定的<code> pSet </code>找不到参数。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.CreateAppDomainLevel
  id: CreateAppDomainLevel
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: CreateAppDomainLevel()
  nameWithType: PolicyLevel.CreateAppDomainLevel()
  fullName: System.Security.Policy.PolicyLevel.CreateAppDomainLevel()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "在应用程序域策略级别创建用于新的策略级别。"
  remarks: "此方法创建一个新<xref:System.Security.Policy.PolicyLevel>与<xref:System.Security.Policy.PolicyLevel.Label%2A>&quot;AppDomain&quot;。</xref:System.Security.Policy.PolicyLevel.Label%2A> </xref:System.Security.Policy.PolicyLevel> 新<xref:System.Security.Policy.PolicyLevel>最初包含相同<xref:System.Security.NamedPermissionSet>如下所示的默认计算机策略和将对象具有授予的单个根代码组`FullTrust`于的所有代码。</xref:System.Security.NamedPermissionSet> </xref:System.Security.Policy.PolicyLevel>"
  syntax:
    content: public static System.Security.Policy.PolicyLevel CreateAppDomainLevel ();
    parameters: []
    return:
      type: System.Security.Policy.PolicyLevel
      description: "新创建<xref href=&quot;System.Security.Policy.PolicyLevel&quot;> </xref>。"
  overload: System.Security.Policy.PolicyLevel.CreateAppDomainLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PolicyLevel.FromXml(SecurityElement)
  fullName: System.Security.Policy.PolicyLevel.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "重新构造具有给定状态的 XML 编码的安全对象。"
  syntax:
    content: public void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "编码用于重新构造安全对象的 XML。"
  overload: System.Security.Policy.PolicyLevel.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>e</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Security.SecurityElement&quot;> </xref>指定的<code> e </code>参数无效。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.FullTrustAssemblies
  id: FullTrustAssemblies
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: FullTrustAssemblies
  nameWithType: PolicyLevel.FullTrustAssemblies
  fullName: System.Security.Policy.PolicyLevel.FullTrustAssemblies
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取一份<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集用于评估安全策略的组的成员。"
  remarks: "FullTrustAssemblies 的程序集不在列表中，安全策略评估过程中被授予完全信任，但是不会自动授予完全信任时直接通过安全策略系统计算。       在版本 2.0 或更高版本的.NET framework 中不支持 FullTrustAssemblies 属性，因为这些版本中不使用完全信任程序集的列表。"
  syntax:
    content: public System.Collections.IList FullTrustAssemblies { get; }
    return:
      type: System.Collections.IList
      description: "一份<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>对象用于确定程序集是否为程序集用于评估安全策略的组的成员。 这些程序集的程序集不在列表中的安全策略评估过程授予完全信任。"
  overload: System.Security.Policy.PolicyLevel.FullTrustAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)
  id: GetNamedPermissionSet(System.String)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: GetNamedPermissionSet(String)
  nameWithType: PolicyLevel.GetNamedPermissionSet(String)
  fullName: System.Security.Policy.PolicyLevel.GetNamedPermissionSet(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "返回<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>中具有指定名称的当前策略级别。"
  syntax:
    content: public System.Security.NamedPermissionSet GetNamedPermissionSet (string name);
    parameters:
    - id: name
      type: System.String
      description: "名称<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>查找。"
    return:
      type: System.Security.NamedPermissionSet
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>中具有指定名称，如果找到; 否则为当前的策略级别<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Policy.PolicyLevel.GetNamedPermissionSet*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.Label
  id: Label
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: Label
  nameWithType: PolicyLevel.Label
  fullName: System.Security.Policy.PolicyLevel.Label
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取策略级别的描述性标签。"
  remarks: "标签用于帮助管理员识别的策略级别。"
  syntax:
    content: public string Label { get; }
    return:
      type: System.String
      description: "与策略级别关联的标签。"
  overload: System.Security.Policy.PolicyLevel.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.NamedPermissionSets
  id: NamedPermissionSets
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: NamedPermissionSets
  nameWithType: PolicyLevel.NamedPermissionSets
  fullName: System.Security.Policy.PolicyLevel.NamedPermissionSets
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取为策略级别定义的命名的权限集的列表。"
  syntax:
    content: public System.Collections.IList NamedPermissionSets { get; }
    return:
      type: System.Collections.IList
      description: "为策略级别定义的命名的权限集的列表。"
  overload: System.Security.Policy.PolicyLevel.NamedPermissionSets*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.Recover
  id: Recover
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: Recover()
  nameWithType: PolicyLevel.Recover()
  fullName: System.Security.Policy.PolicyLevel.Recover()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "此替换配置文件<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>与 （反映在上次保存之前的策略的状态） 的最后一次备份并返回到的最后一个状态将保存。"
  remarks: "此方法不会进行修改当前<xref:System.Security.Policy.PolicyLevel>.</xref:System.Security.Policy.PolicyLevel> 相反，它更新<xref:System.Security.Policy.PolicyLevel>对象的文件和<xref:System.Security.Policy.PolicyLevel>安全系统用来评估策略。</xref:System.Security.Policy.PolicyLevel> </xref:System.Security.Policy.PolicyLevel>       此方法由 caspol-恢复选项 (请参阅[Caspol.exe （代码访问安全策略工具）](~/add/includes/ajax-current-ext-md.md))。"
  syntax:
    content: public void Recover ();
    parameters: []
  overload: System.Security.Policy.PolicyLevel.Recover*
  exceptions:
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "策略级别不具有有效的配置文件。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)
  id: RemoveFullTrustAssembly(System.Security.Policy.StrongName)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: RemoveFullTrustAssembly(StrongName)
  nameWithType: PolicyLevel.RemoveFullTrustAssembly(StrongName)
  fullName: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(StrongName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "中移除与指定程序集<xref href=&quot;System.Security.Policy.StrongName&quot;></xref>从列表中的程序集的策略级别用来评估策略。"
  remarks: "在版本 2.0 或更高版本的.NET framework 中不支持 RemoveFullTrustAssembly 方法，因为这些版本中不使用完全信任程序集的列表。"
  syntax:
    content: public void RemoveFullTrustAssembly (System.Security.Policy.StrongName sn);
    parameters:
    - id: sn
      type: System.Security.Policy.StrongName
      description: "<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>要从程序集用于评估策略的列表中删除的程序集。"
  overload: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>sn</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "具有程序集<xref href=&quot;System.Security.Policy.StrongName&quot;></xref>指定的<code> sn </code>参数没有完全信任。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  id: RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: RemoveFullTrustAssembly(StrongNameMembershipCondition)
  nameWithType: PolicyLevel.RemoveFullTrustAssembly(StrongNameMembershipCondition)
  fullName: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(StrongNameMembershipCondition)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "中移除与指定程序集<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;></xref>从列表中的程序集的策略级别用来评估策略。"
  remarks: "在版本 2.0 或更高版本的.NET framework 中不支持 RemoveFullTrustAssembly 方法，因为这些版本中不使用完全信任程序集的列表。"
  syntax:
    content: public void RemoveFullTrustAssembly (System.Security.Policy.StrongNameMembershipCondition snMC);
    parameters:
    - id: snMC
      type: System.Security.Policy.StrongNameMembershipCondition
      description: "<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;> </xref>要从程序集用于评估策略的列表中删除的程序集。"
  overload: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>snMC</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Security.Policy.StrongNameMembershipCondition&quot;> </xref>指定的<code> snMC </code>参数没有完全信任。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)
  id: RemoveNamedPermissionSet(System.Security.NamedPermissionSet)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: RemoveNamedPermissionSet(NamedPermissionSet)
  nameWithType: PolicyLevel.RemoveNamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(NamedPermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "中移除指定<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>从当前的策略级别。"
  syntax:
    content: public System.Security.NamedPermissionSet RemoveNamedPermissionSet (System.Security.NamedPermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.NamedPermissionSet
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>以移除当前的策略级别。"
    return:
      type: System.Security.NamedPermissionSet
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> ，已删除。"
  overload: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>指定的<code> permSet </code>找不到参数。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>permSet</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)
  id: RemoveNamedPermissionSet(System.String)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: RemoveNamedPermissionSet(String)
  nameWithType: PolicyLevel.RemoveNamedPermissionSet(String)
  fullName: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "删除<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>具有指定名称从当前的策略级别。"
  syntax:
    content: public System.Security.NamedPermissionSet RemoveNamedPermissionSet (string name);
    parameters:
    - id: name
      type: System.String
      description: "名称<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>删除。"
    return:
      type: System.Security.NamedPermissionSet
      description: "<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref> ，已删除。"
  overload: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>参数等于保留的权限集的名称。       -或- <xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>找不到具有指定名称。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.Reset
  id: Reset
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: Reset()
  nameWithType: PolicyLevel.Reset()
  fullName: System.Security.Policy.PolicyLevel.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "返回当前的策略级别的默认状态。"
  remarks: "默认状态是不同的每个策略级别。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Policy.PolicyLevel.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)
  id: Resolve(System.Security.Policy.Evidence)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: Resolve(Evidence)
  nameWithType: PolicyLevel.Resolve(Evidence)
  fullName: System.Security.Policy.PolicyLevel.Resolve(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "解析基于证据的策略级别，策略并返回生成<xref href=&quot;System.Security.Policy.PolicyStatement&quot;> </xref>。"
  remarks: "解析为策略级别的基本策略求值运算。 给定一组作为输入的证据，则此方法将测试从根目录开始并匹配下正常工作的代码组的成员资格条件。 匹配的代码中得到的权限组合组生成<xref:System.Security.Policy.PolicyStatement>返回。</xref:System.Security.Policy.PolicyStatement>       在向代码授予权限，安全策略使用所有合适的策略级别，以及代码的权限请求的解决的策略语句。"
  example:
  - "The following code shows the use of the Resolve method. This code example is part of a larger example provided for the <xref:System.Security.Policy.PolicyLevel> class.  \n  \n [!code-cpp[system.Security.policy.policylevel#13](~/add/codesnippet/cpp/m-system.security.policy_27_1.cpp)]\n [!code-cs[system.Security.policy.policylevel#13](~/add/codesnippet/csharp/m-system.security.policy_27_1.cs)]\n [!code-vb[system.Security.policy.policylevel#13](~/add/codesnippet/visualbasic/m-system.security.policy_27_1.vb)]"
  syntax:
    content: public System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref>用于解析<xref href=&quot;System.Security.Policy.PolicyLevel&quot;> </xref>。"
    return:
      type: System.Security.Policy.PolicyStatement
      description: "生成<xref href=&quot;System.Security.Policy.PolicyStatement&quot;> </xref>。"
  overload: System.Security.Policy.PolicyLevel.Resolve*
  exceptions:
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "策略级别包含标记为独占的多个匹配的代码组。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>evidence</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  id: ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: ResolveMatchingCodeGroups(Evidence)
  nameWithType: PolicyLevel.ResolveMatchingCodeGroups(Evidence)
  fullName: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "解析策略级别的策略，并返回匹配证据代码组树的根。"
  remarks: "此方法可用于分析的证据集与策略级别中的代码组的效果。 例如，如果安全策略不授予程序集所需的最小代码请求权限，它很难通过检查问题处于的确切位置的代码组来判断。       由于此方法返回时可以有子代码组的代码组，它时，管理员可以检查的代码组和它的子代码组，并确定哪些代码组匹配。"
  syntax:
    content: public System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref>用于解析策略。"
    return:
      type: System.Security.Policy.CodeGroup
      description: "A <xref href=&quot;System.Security.Policy.CodeGroup&quot;> </xref>表示匹配指定的证据的代码组的树的根。"
  overload: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups*
  exceptions:
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "策略级别包含标记为独占的多个匹配的代码组。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>evidence</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.RootCodeGroup
  id: RootCodeGroup
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: RootCodeGroup
  nameWithType: PolicyLevel.RootCodeGroup
  fullName: System.Security.Policy.PolicyLevel.RootCodeGroup
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取或设置的策略级别的根代码组。"
  remarks: "每个策略级别都有一个根<xref:System.Security.Policy.CodeGroup>.</xref:System.Security.Policy.CodeGroup>"
  syntax:
    content: public System.Security.Policy.CodeGroup RootCodeGroup { get; set; }
    return:
      type: System.Security.Policy.CodeGroup
      description: "<xref href=&quot;System.Security.Policy.CodeGroup&quot;> </xref>即策略级别的代码组的树的根。"
  overload: System.Security.Policy.PolicyLevel.RootCodeGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "值为 RootCodeGroup <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.StoreLocation
  id: StoreLocation
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: StoreLocation
  nameWithType: PolicyLevel.StoreLocation
  fullName: System.Security.Policy.PolicyLevel.StoreLocation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取策略文件的存储位置的路径。"
  remarks: ''
  example:
  - "The following code shows how to display the store location for a policy level. This code example is part of a larger example provided for the <xref:System.Security.Policy.PolicyLevel> class.  \n  \n [!code-cpp[system.Security.policy.policylevel#15](~/add/codesnippet/cpp/p-system.security.policy_12_1.cpp)]\n [!code-cs[system.Security.policy.policylevel#15](~/add/codesnippet/csharp/p-system.security.policy_12_1.cs)]\n [!code-vb[system.Security.policy.policylevel#15](~/add/codesnippet/visualbasic/p-system.security.policy_12_1.vb)]"
  syntax:
    content: public string StoreLocation { get; }
    return:
      type: System.String
      description: "策略文件的存储位置路径或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>没有存储位置。"
  overload: System.Security.Policy.PolicyLevel.StoreLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.ToXml
  id: ToXml
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: ToXml()
  nameWithType: PolicyLevel.ToXml()
  fullName: System.Security.Policy.PolicyLevel.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "创建安全对象及其当前状态的 XML 编码。"
  syntax:
    content: public System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "安全对象，包括任何状态信息的 XML 编码。"
  overload: System.Security.Policy.PolicyLevel.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.PolicyLevel.Type
  id: Type
  parent: System.Security.Policy.PolicyLevel
  langs:
  - csharp
  name: Type
  nameWithType: PolicyLevel.Type
  fullName: System.Security.Policy.PolicyLevel.Type
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取策略级别的类型。"
  remarks: "安全策略的最高级别是企业范围。 连续较低级别的层次结构表示更多的策略限制，但永远不会授予比允许的更高级别的权限。 按顺序的策略级别如下所示。      1.  企业 2。  计算机 3。  用户为 4。  应用程序域的详细信息，请参阅<xref:System.Security.PolicyLevelType>。</xref:System.Security.PolicyLevelType>"
  syntax:
    content: public System.Security.PolicyLevelType Type { get; }
    return:
      type: System.Security.PolicyLevelType
      description: "之一<xref href=&quot;System.Security.PolicyLevelType&quot;></xref>值。"
  overload: System.Security.Policy.PolicyLevel.Type*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: AddFullTrustAssembly(StrongName)
  nameWithType: PolicyLevel.AddFullTrustAssembly(StrongName)
  fullName: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(StrongName)
- uid: System.Security.Policy.StrongName
  parent: System.Security.Policy
  isExternal: false
  name: StrongName
  nameWithType: StrongName
  fullName: System.Security.Policy.StrongName
- uid: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: AddFullTrustAssembly(StrongNameMembershipCondition)
  nameWithType: PolicyLevel.AddFullTrustAssembly(StrongNameMembershipCondition)
  fullName: System.Security.Policy.PolicyLevel.AddFullTrustAssembly(StrongNameMembershipCondition)
- uid: System.Security.Policy.StrongNameMembershipCondition
  parent: System.Security.Policy
  isExternal: false
  name: StrongNameMembershipCondition
  nameWithType: StrongNameMembershipCondition
  fullName: System.Security.Policy.StrongNameMembershipCondition
- uid: System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: AddNamedPermissionSet(NamedPermissionSet)
  nameWithType: PolicyLevel.AddNamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.Policy.PolicyLevel.AddNamedPermissionSet(NamedPermissionSet)
- uid: System.Security.NamedPermissionSet
  parent: System.Security
  isExternal: false
  name: NamedPermissionSet
  nameWithType: NamedPermissionSet
  fullName: System.Security.NamedPermissionSet
- uid: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ChangeNamedPermissionSet(String,PermissionSet)
  nameWithType: PolicyLevel.ChangeNamedPermissionSet(String,PermissionSet)
  fullName: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(String,PermissionSet)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.Policy.PolicyLevel.CreateAppDomainLevel
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: CreateAppDomainLevel()
  nameWithType: PolicyLevel.CreateAppDomainLevel()
  fullName: System.Security.Policy.PolicyLevel.CreateAppDomainLevel()
- uid: System.Security.Policy.PolicyLevel
  parent: System.Security.Policy
  isExternal: false
  name: PolicyLevel
  nameWithType: PolicyLevel
  fullName: System.Security.Policy.PolicyLevel
- uid: System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PolicyLevel.FromXml(SecurityElement)
  fullName: System.Security.Policy.PolicyLevel.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Policy.PolicyLevel.FullTrustAssemblies
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: FullTrustAssemblies
  nameWithType: PolicyLevel.FullTrustAssemblies
  fullName: System.Security.Policy.PolicyLevel.FullTrustAssemblies
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: GetNamedPermissionSet(String)
  nameWithType: PolicyLevel.GetNamedPermissionSet(String)
  fullName: System.Security.Policy.PolicyLevel.GetNamedPermissionSet(String)
- uid: System.Security.Policy.PolicyLevel.Label
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Label
  nameWithType: PolicyLevel.Label
  fullName: System.Security.Policy.PolicyLevel.Label
- uid: System.Security.Policy.PolicyLevel.NamedPermissionSets
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: NamedPermissionSets
  nameWithType: PolicyLevel.NamedPermissionSets
  fullName: System.Security.Policy.PolicyLevel.NamedPermissionSets
- uid: System.Security.Policy.PolicyLevel.Recover
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Recover()
  nameWithType: PolicyLevel.Recover()
  fullName: System.Security.Policy.PolicyLevel.Recover()
- uid: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveFullTrustAssembly(StrongName)
  nameWithType: PolicyLevel.RemoveFullTrustAssembly(StrongName)
  fullName: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(StrongName)
- uid: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveFullTrustAssembly(StrongNameMembershipCondition)
  nameWithType: PolicyLevel.RemoveFullTrustAssembly(StrongNameMembershipCondition)
  fullName: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(StrongNameMembershipCondition)
- uid: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveNamedPermissionSet(NamedPermissionSet)
  nameWithType: PolicyLevel.RemoveNamedPermissionSet(NamedPermissionSet)
  fullName: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(NamedPermissionSet)
- uid: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveNamedPermissionSet(String)
  nameWithType: PolicyLevel.RemoveNamedPermissionSet(String)
  fullName: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(String)
- uid: System.Security.Policy.PolicyLevel.Reset
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Reset()
  nameWithType: PolicyLevel.Reset()
  fullName: System.Security.Policy.PolicyLevel.Reset()
- uid: System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Resolve(Evidence)
  nameWithType: PolicyLevel.Resolve(Evidence)
  fullName: System.Security.Policy.PolicyLevel.Resolve(Evidence)
- uid: System.Security.Policy.PolicyStatement
  parent: System.Security.Policy
  isExternal: false
  name: PolicyStatement
  nameWithType: PolicyStatement
  fullName: System.Security.Policy.PolicyStatement
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ResolveMatchingCodeGroups(Evidence)
  nameWithType: PolicyLevel.ResolveMatchingCodeGroups(Evidence)
  fullName: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(Evidence)
- uid: System.Security.Policy.CodeGroup
  parent: System.Security.Policy
  isExternal: false
  name: CodeGroup
  nameWithType: CodeGroup
  fullName: System.Security.Policy.CodeGroup
- uid: System.Security.Policy.PolicyLevel.RootCodeGroup
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RootCodeGroup
  nameWithType: PolicyLevel.RootCodeGroup
  fullName: System.Security.Policy.PolicyLevel.RootCodeGroup
- uid: System.Security.Policy.PolicyLevel.StoreLocation
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: StoreLocation
  nameWithType: PolicyLevel.StoreLocation
  fullName: System.Security.Policy.PolicyLevel.StoreLocation
- uid: System.Security.Policy.PolicyLevel.ToXml
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ToXml()
  nameWithType: PolicyLevel.ToXml()
  fullName: System.Security.Policy.PolicyLevel.ToXml()
- uid: System.Security.Policy.PolicyLevel.Type
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Type
  nameWithType: PolicyLevel.Type
  fullName: System.Security.Policy.PolicyLevel.Type
- uid: System.Security.PolicyLevelType
  parent: System.Security
  isExternal: false
  name: PolicyLevelType
  nameWithType: PolicyLevelType
  fullName: System.Security.PolicyLevelType
- uid: System.Security.Policy.PolicyLevel.AddFullTrustAssembly*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: AddFullTrustAssembly
  nameWithType: PolicyLevel.AddFullTrustAssembly
- uid: System.Security.Policy.PolicyLevel.AddNamedPermissionSet*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: AddNamedPermissionSet
  nameWithType: PolicyLevel.AddNamedPermissionSet
- uid: System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ChangeNamedPermissionSet
  nameWithType: PolicyLevel.ChangeNamedPermissionSet
- uid: System.Security.Policy.PolicyLevel.CreateAppDomainLevel*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: CreateAppDomainLevel
  nameWithType: PolicyLevel.CreateAppDomainLevel
- uid: System.Security.Policy.PolicyLevel.FromXml*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: FromXml
  nameWithType: PolicyLevel.FromXml
- uid: System.Security.Policy.PolicyLevel.FullTrustAssemblies*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: FullTrustAssemblies
  nameWithType: PolicyLevel.FullTrustAssemblies
- uid: System.Security.Policy.PolicyLevel.GetNamedPermissionSet*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: GetNamedPermissionSet
  nameWithType: PolicyLevel.GetNamedPermissionSet
- uid: System.Security.Policy.PolicyLevel.Label*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Label
  nameWithType: PolicyLevel.Label
- uid: System.Security.Policy.PolicyLevel.NamedPermissionSets*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: NamedPermissionSets
  nameWithType: PolicyLevel.NamedPermissionSets
- uid: System.Security.Policy.PolicyLevel.Recover*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Recover
  nameWithType: PolicyLevel.Recover
- uid: System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveFullTrustAssembly
  nameWithType: PolicyLevel.RemoveFullTrustAssembly
- uid: System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RemoveNamedPermissionSet
  nameWithType: PolicyLevel.RemoveNamedPermissionSet
- uid: System.Security.Policy.PolicyLevel.Reset*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Reset
  nameWithType: PolicyLevel.Reset
- uid: System.Security.Policy.PolicyLevel.Resolve*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Resolve
  nameWithType: PolicyLevel.Resolve
- uid: System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ResolveMatchingCodeGroups
  nameWithType: PolicyLevel.ResolveMatchingCodeGroups
- uid: System.Security.Policy.PolicyLevel.RootCodeGroup*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: RootCodeGroup
  nameWithType: PolicyLevel.RootCodeGroup
- uid: System.Security.Policy.PolicyLevel.StoreLocation*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: StoreLocation
  nameWithType: PolicyLevel.StoreLocation
- uid: System.Security.Policy.PolicyLevel.ToXml*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: ToXml
  nameWithType: PolicyLevel.ToXml
- uid: System.Security.Policy.PolicyLevel.Type*
  parent: System.Security.Policy.PolicyLevel
  isExternal: false
  name: Type
  nameWithType: PolicyLevel.Type
