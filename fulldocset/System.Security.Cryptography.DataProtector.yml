### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DataProtector
  id: DataProtector
  children:
  - System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.ApplicationName
  - System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  - System.Security.Cryptography.DataProtector.GetHashedPurpose
  - System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  - System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  - System.Security.Cryptography.DataProtector.PrimaryPurpose
  - System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  - System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  - System.Security.Cryptography.DataProtector.SpecificPurposes
  - System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  langs:
  - csharp
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
  type: Class
  summary: "提供有关数据保护程序的基类。"
  remarks: "This class protects stored data from viewing and tampering. The access to the protected data is obtained by creating an instance of this class and using the exact purpose strings that were used to protect the data.  The caller does not need a key to either protect or unprotect the data. The key is provided by the encryption algorithm.  \n  \n Derived classes must override the [ProviderProtect(Byte\\[\\])](assetId:///M:System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])?qualifyHint=False&autoUpgrade=True) and <xref:System.Security.Cryptography.DataProtector.Unprotect%2A> methods, which the DataProtector base class calls back into. They must also override the <xref:System.Security.Cryptography.DataProtector.IsReprotectRequired%2A> method, which can always return `true` with a  potential small loss of efficiency when applications refresh their database of stored cipher text. Derived classes should provide a constructor that calls the base class constructor, which sets the <xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>, <xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>, and <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> properties."
  example:
  - "The following example demonstrates how to create a data protector that uses a protection class with an option for extra entropy. By default, the DataProtector class prepends the hash of the purpose properties to the data to be encrypted. You can turn that functionality off and use the hashed purpose as extra entropy when calling a data protector with an extra entropy option.  \n  \n [!code-cs[Cryptography.DataProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_1.cs)]\n [!code-vb[Cryptography.DataProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_1.vb)]  \n  \n The following example demonstrates a simple data protector that uses the <xref:System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext%2A> functionality of the DataProtector class.  \n  \n [!code-vb[Cryptography.MemoryProtector#1](~/add/codesnippet/visualbasic/t-system.security.crypto_7_2.vb)]\n [!code-cs[Cryptography.MemoryProtector#1](~/add/codesnippet/csharp/t-system.security.crypto_7_2.cs)]"
  syntax:
    content: public abstract class DataProtector
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  id: '#ctor(System.String,System.String,System.String[])'
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
  type: Constructor
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "创建的新实例<xref href=&quot;System.Security.Cryptography.DataProtector&quot;></xref>通过使用提供的应用程序名称、 主要用途和特定用途的类。"
  remarks: "此构造函数设置<xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>， <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>，和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>属性。</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A> 这三个属性的组合必须唯一地标识要保护的数据。 如果不唯一标识数据，你可能会无意中阅读数据错误，或其他数据可能替换为你的帐户。 主要和特定用途对示例是&quot;发票&quot;和发票数、&quot;礼品卡&quot;和礼品卡号、&quot;密码&quot;和 URL 字符串。"
  syntax:
    content: protected DataProtector (string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: applicationName
      type: System.String
      description: "应用程序的名称。"
    - id: primaryPurpose
      type: System.String
      description: "受保护数据的主要用途。 其他重要信息，请参阅备注。"
    - id: specificPurposes
      type: System.String[]
      description: "受保护数据的特定目的。 其他重要信息，请参阅备注。"
  overload: System.Security.Cryptography.DataProtector.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>applicationName</code>为空字符串或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -<code>primaryPurpose</code>为空字符串或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -<code>specificPurposes</code>包含一个空字符串或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  id: ApplicationName
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "获取应用程序的名称。"
  syntax:
    content: protected string ApplicationName { get; }
    return:
      type: System.String
      description: "应用程序的名称。"
  overload: System.Security.Cryptography.DataProtector.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  id: Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "使用指定的类名称的数据保护程序、 应用程序名称、 的主要目的，和特定目的创建的数据保护程序实现的实例。"
  syntax:
    content: public static System.Security.Cryptography.DataProtector Create (string providerClass, string applicationName, string primaryPurpose, string[] specificPurposes);
    parameters:
    - id: providerClass
      type: System.String
      description: "数据保护程序类名。"
    - id: applicationName
      type: System.String
      description: "应用程序的名称。"
    - id: primaryPurpose
      type: System.String
      description: "受保护数据的主要用途。"
    - id: specificPurposes
      type: System.String[]
      description: "受保护数据的特定目的。"
    return:
      type: System.Security.Cryptography.DataProtector
      description: "数据保护程序实现对象。"
  overload: System.Security.Cryptography.DataProtector.Create*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>providerClass</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  id: GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "创建指定构造函数的属性值的哈的希。"
  remarks: "GetHashedPurpose 计算应用程序名称和完整目的的哈希。  完整的目的是所有的串联<xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>属性。</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>  每三个部分被开头其长度，因此可以反转哈希。"
  example:
  - "The following example shows how to use the GetHashedPurpose method to hash the purpose properties for use as extra entropy.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-cs[Cryptography.DataProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_107_1.cs)]\n [!code-vb[Cryptography.DataProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_107_1.vb)]"
  syntax:
    content: protected virtual byte[] GetHashedPurpose ();
    parameters: []
    return:
      type: System.Byte[]
      description: "包含的哈希的字节数组<> *1>， <> </> *1>，和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>属性。</xref:System.Security.Cryptography.DataProtector.SpecificPurposes*>"
  overload: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  id: IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "确定是否需要指定的加密数据重新加密。"
  syntax:
    content: public abstract bool IsReprotectRequired (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "要计算的加密的数据。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果必须对数据进行重新加密;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  id: PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "指定是否加密前的文本数组被预置哈希。"
  remarks: "默认情况下，假定派生的类将预先计算的哈希<xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>， <xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A>，和<xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A>属性设置为加密，并将前的纯文本检查，并在解密过程中验证哈希。</xref:System.Security.Cryptography.DataProtector.SpecificPurposes%2A> </xref:System.Security.Cryptography.DataProtector.PrimaryPurpose%2A> </xref:System.Security.Cryptography.DataProtector.ApplicationName%2A>  如果派生的类想要在其自己上指定的预先计算的数据 （例如作为可选的平均信息量值），此属性可以重写并设置为返回`false`。  如果 PrependHashedPurposeToPlaintext `false`，<xref:System.Security.Cryptography.DataProtector.Protect%2A>和<xref:System.Security.Cryptography.DataProtector.Unprotect%2A>将直接通过传递给<xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A>和<xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A>替代而无需更改的字节数组。</xref:System.Security.Cryptography.DataProtector.ProviderUnprotect%2A> </xref:System.Security.Cryptography.DataProtector.ProviderProtect%2A> </xref:System.Security.Cryptography.DataProtector.Unprotect%2A> </xref:System.Security.Cryptography.DataProtector.Protect%2A>"
  syntax:
    content: protected virtual bool PrependHashedPurposeToPlaintext { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  id: PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "获取受保护数据的主要目的。"
  syntax:
    content: protected string PrimaryPurpose { get; }
    return:
      type: System.String
      description: "受保护数据的主要用途。"
  overload: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  id: Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "保护指定的用户数据。"
  syntax:
    content: public byte[] Protect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "要保护的数据。"
    return:
      type: System.Byte[]
      description: "包含加密的数据的字节数组。"
  overload: System.Security.Cryptography.DataProtector.Protect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>userData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  id: ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "指定的委托方法在派生类<xref:System.Security.Cryptography.DataProtector.Protect*>基类中的方法调用返回到。</xref:System.Security.Cryptography.DataProtector.Protect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderProtect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#3](~/add/codesnippet/visualbasic/m-system.security.crypto_130_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#3](~/add/codesnippet/csharp/m-system.security.crypto_130_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderProtect (byte[] userData);
    parameters:
    - id: userData
      type: System.Byte[]
      description: "要进行加密的数据。"
    return:
      type: System.Byte[]
      description: "包含加密的数据的字节数组。"
  overload: System.Security.Cryptography.DataProtector.ProviderProtect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  id: ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "指定的委托方法在派生类<xref:System.Security.Cryptography.DataProtector.Unprotect*>基类中的方法调用返回到。</xref:System.Security.Cryptography.DataProtector.Unprotect*>"
  remarks: ''
  example:
  - "The following example shows an implementation of the ProviderUnprotect method.  It is part of a larger code example for the <xref:System.Security.Cryptography.DataProtector> class.  \n  \n [!code-vb[Cryptography.MemoryProtector#4](~/add/codesnippet/visualbasic/m-system.security.crypto_20_1.vb)]\n [!code-cs[Cryptography.MemoryProtector#4](~/add/codesnippet/csharp/m-system.security.crypto_20_1.cs)]"
  syntax:
    content: protected abstract byte[] ProviderUnprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "要进行加密的数据。"
    return:
      type: System.Byte[]
      description: "未加密的数据..."
  overload: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  id: SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
  type: Property
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "获取特定目的的受保护数据。"
  syntax:
    content: protected System.Collections.Generic.IEnumerable<string> SpecificPurposes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "受保护数据的特定目的的集合。"
  overload: System.Security.Cryptography.DataProtector.SpecificPurposes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  id: Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  langs:
  - csharp
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
  type: Method
  assemblies:
  - System.Security
  namespace: System.Security.Cryptography
  summary: "取消保护指定的受保护的数据。"
  syntax:
    content: public byte[] Unprotect (byte[] encryptedData);
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "要将未受保护的加密的数据。"
    return:
      type: System.Byte[]
      description: "包含纯文本数据的字节数组。"
  overload: System.Security.Cryptography.DataProtector.Unprotect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>encryptedData</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>encryptedData</code>包含无效的用途。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.DataProtector.#ctor(System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector(String,String,String[])
  nameWithType: DataProtector.DataProtector(String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.DataProtector(String,String,String[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.ApplicationName
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
  fullName: System.Security.Cryptography.DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create(System.String,System.String,System.String,System.String[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create(String,String,String,String[])
  nameWithType: DataProtector.Create(String,String,String,String[])
  fullName: System.Security.Cryptography.DataProtector.Create(String,String,String,String[])
- uid: System.Security.Cryptography.DataProtector
  parent: System.Security.Cryptography
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector
  fullName: System.Security.Cryptography.DataProtector
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose()
  nameWithType: DataProtector.GetHashedPurpose()
  fullName: System.Security.Cryptography.DataProtector.GetHashedPurpose()
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired(Byte[])
  nameWithType: DataProtector.IsReprotectRequired(Byte[])
  fullName: System.Security.Cryptography.DataProtector.IsReprotectRequired(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
  fullName: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
  fullName: System.Security.Cryptography.DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect(Byte[])
  nameWithType: DataProtector.Protect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Protect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderProtect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect(Byte[])
  nameWithType: DataProtector.ProviderProtect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderProtect(Byte[])
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect(Byte[])
  nameWithType: DataProtector.ProviderUnprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.ProviderUnprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
  fullName: System.Security.Cryptography.DataProtector.SpecificPurposes
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Cryptography.DataProtector.Unprotect(System.Byte[])
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect(Byte[])
  nameWithType: DataProtector.Unprotect(Byte[])
  fullName: System.Security.Cryptography.DataProtector.Unprotect(Byte[])
- uid: System.Security.Cryptography.DataProtector.#ctor*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: DataProtector
  nameWithType: DataProtector.DataProtector
- uid: System.Security.Cryptography.DataProtector.ApplicationName*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ApplicationName
  nameWithType: DataProtector.ApplicationName
- uid: System.Security.Cryptography.DataProtector.Create*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Create
  nameWithType: DataProtector.Create
- uid: System.Security.Cryptography.DataProtector.GetHashedPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: GetHashedPurpose
  nameWithType: DataProtector.GetHashedPurpose
- uid: System.Security.Cryptography.DataProtector.IsReprotectRequired*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: IsReprotectRequired
  nameWithType: DataProtector.IsReprotectRequired
- uid: System.Security.Cryptography.DataProtector.PrependHashedPurposeToPlaintext*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrependHashedPurposeToPlaintext
  nameWithType: DataProtector.PrependHashedPurposeToPlaintext
- uid: System.Security.Cryptography.DataProtector.PrimaryPurpose*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: PrimaryPurpose
  nameWithType: DataProtector.PrimaryPurpose
- uid: System.Security.Cryptography.DataProtector.Protect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Protect
  nameWithType: DataProtector.Protect
- uid: System.Security.Cryptography.DataProtector.ProviderProtect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderProtect
  nameWithType: DataProtector.ProviderProtect
- uid: System.Security.Cryptography.DataProtector.ProviderUnprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: ProviderUnprotect
  nameWithType: DataProtector.ProviderUnprotect
- uid: System.Security.Cryptography.DataProtector.SpecificPurposes*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: SpecificPurposes
  nameWithType: DataProtector.SpecificPurposes
- uid: System.Security.Cryptography.DataProtector.Unprotect*
  parent: System.Security.Cryptography.DataProtector
  isExternal: false
  name: Unprotect
  nameWithType: DataProtector.Unprotect
