### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.Matrix
  id: Matrix
  children:
  - System.Drawing.Drawing2D.Matrix.#ctor
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Clone
  - System.Drawing.Drawing2D.Matrix.Dispose
  - System.Drawing.Drawing2D.Matrix.Elements
  - System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  - System.Drawing.Drawing2D.Matrix.Finalize
  - System.Drawing.Drawing2D.Matrix.GetHashCode
  - System.Drawing.Drawing2D.Matrix.Invert
  - System.Drawing.Drawing2D.Matrix.IsIdentity
  - System.Drawing.Drawing2D.Matrix.IsInvertible
  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.OffsetX
  - System.Drawing.Drawing2D.Matrix.OffsetY
  - System.Drawing.Drawing2D.Matrix.Reset
  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  - System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  - System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  - System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  - System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  - System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  langs:
  - csharp
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
  type: Class
  summary: "封装表示几何变换 3 x 3 仿射矩阵。 此类不能被继承。"
  remarks: "在[!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]可以存储仿射转换矩阵对象中。 因为表示仿射转换矩阵的第三个列始终为 （0，0，1） 时构造矩阵对象在前两个列中指定六个数字。 语句`Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)`构造如下图中所示的矩阵。       ![转换](~/add/media/aboutgdip05-art10.gif &quot;转换&quot;)# # 复合转换一个复合转换是一系列的转换后, 跟另一个。 请考虑矩阵和以下列表中的转换: | | |  |-|-|  |矩阵 A |旋转 90 度 |  |矩阵 B |按在 x 方向的 2 倍缩放 |  |矩阵 C |平移 y 方向的 3 个单位 |      如果我们从开始点 （2，1）-表示通过矩阵 [2 1 1]-和乘以 A、 B，然后 C，点 （2，1） 将进行按列出的顺序的三个转换。       [2 1 1]ABC = [-2 5 1] 而不是存储在三个单独的矩阵复合转换的三个部分，你可以乘以 A、 B 和 C 在一起以获取存储整个复合转换的单个 3 × 3 矩阵。 假设 ABC = d。然后乘以 D 点会使相同的结果为点乘以 A、 B，然后按 c。      [2 1 1]D = [-2 5 1] 下图显示了矩阵 A、 B、 C 和 d。      ![转换](~/add/media/aboutgdip05-art12.gif &quot;转换&quot;)，可以由复合变换的矩阵相乘单独的变换矩阵的事实意味着仿射转换的任何序列，可以存储在单个矩阵对象。      1> [!CAUTION]&1;> 复合转换的顺序很重要。 一般情况下，旋转，再缩放、 然后转换不相同与先缩放、 旋转，然后转换。 同样，矩阵乘法的顺序很重要。 一般情况下，ABC 不与备份相同。       矩阵类提供用于构建复合转换的多种方法︰ <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>， <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>， <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>， <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>， <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>，和<xref:System.Drawing.Drawing2D.Matrix.Translate%2A>。</xref:System.Drawing.Drawing2D.Matrix.Translate%2A> </xref:System.Drawing.Drawing2D.Matrix.Shear%2A> </xref:System.Drawing.Drawing2D.Matrix.Scale%2A> </xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A> </xref:System.Drawing.Drawing2D.Matrix.Rotate%2A> </xref:System.Drawing.Drawing2D.Matrix.Multiply%2A> 下面的示例创建一个复合转换，它首先旋转 30 度，然后按 y 方向的 2 倍缩放并会将 5 个单位在 x 方向的转换的矩阵︰ [!code-vb [System.Drawing.CoordinateSystems#11](~/add/codesnippet/visualbasic/t-system.drawing.drawing_10_1.vb)][!code-cs[System.Drawing.CoordinateSystems#11  ](~/add/codesnippet/csharp/t-system.drawing.drawing_10_1.cs)]"
  syntax:
    content: 'public sealed class Matrix : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor
  id: '#ctor'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix()
  nameWithType: Matrix.Matrix()
  fullName: System.Drawing.Drawing2D.Matrix.Matrix()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>类作为单位矩阵。"
  syntax:
    content: public Matrix ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  id: '#ctor(System.Drawing.Rectangle,System.Drawing.Point[])'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(Rectangle,Point[])
  nameWithType: Matrix.Matrix(Rectangle,Point[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定的矩形和点数组定义的几何转换的类。"
  remarks: "此方法初始化新的矩阵，这样它表示由指定的矩形映射的几何变换`rect`参数中的三个点定义的平行四边形`plgpts`参数。 矩形的左上角映射中的第一个点到`plgpts`数组，右上角映射到第二个点，并且左下角映射到第三个点。 平行四边形的右下角点也将暗示的前三个。"
  syntax:
    content: public Matrix (System.Drawing.Rectangle rect, System.Drawing.Point[] plgpts);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref>结构，它表示要转换的矩形。"
    - id: plgpts
      type: System.Drawing.Point[]
      description: "数组的三个<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示矩形的左上角、 右上角和左下角是要转换的平行四边形的点。 前三个角所隐含的平行四边形的右下角。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  id: '#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(RectangleF,PointF[])
  nameWithType: Matrix.Matrix(RectangleF,PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定的矩形和点数组定义的几何转换的类。"
  remarks: "此方法初始化新<xref:System.Drawing.Drawing2D.Matrix>这样它表示由指定的矩形映射的几何变换`rect`参数中的三个点定义的平行四边形`plgpts`参数。</xref:System.Drawing.Drawing2D.Matrix> 矩形的左上角映射中的第一个点到`plgpts`数组，右上角映射到第二个点，并且左下角映射到第三个点。 平行四边形的右下角点也将暗示的前三个。"
  syntax:
    content: public Matrix (System.Drawing.RectangleF rect, System.Drawing.PointF[] plgpts);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>结构，它表示要转换的矩形。"
    - id: plgpts
      type: System.Drawing.PointF[]
      description: "数组的三个<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示矩形的左上角、 右上角和左下角是要转换的平行四边形的点。 前三个角所隐含的平行四边形的右下角。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)'
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Matrix(Single,Single,Single,Single,Single,Single)
  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>与指定的元素的类。"
  syntax:
    content: public Matrix (float m11, float m12, float m21, float m22, float dx, float dy);
    parameters:
    - id: m11
      type: System.Single
      description: "中的第一行和第一列的新值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: m12
      type: System.Single
      description: "新的第一个行和第二列中的值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: m21
      type: System.Single
      description: "中的第二行和新的第一列的值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: m22
      type: System.Single
      description: "在新的第二行和第二列的值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: dx
      type: System.Single
      description: "中的第三行和新的第一列的值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: dy
      type: System.Single
      description: "新的第三个行和第二列中的值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Clone
  id: Clone
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Clone()
  nameWithType: Matrix.Clone()
  fullName: System.Drawing.Drawing2D.Matrix.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "创建此的精确副本<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  syntax:
    content: public System.Drawing.Drawing2D.Matrix Clone ();
    parameters: []
    return:
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>此方法创建。"
  overload: System.Drawing.Drawing2D.Matrix.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Dispose()
  nameWithType: Matrix.Dispose()
  fullName: System.Drawing.Drawing2D.Matrix.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "释放所有资源由此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  remarks: "调用`Dispose`允许使用的资源<xref:System.Drawing.Drawing2D.Matrix>对象可以重新分配用于其他目的。</xref:System.Drawing.Drawing2D.Matrix>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Elements
  id: Elements
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Elements
  nameWithType: Matrix.Elements
  fullName: System.Drawing.Drawing2D.Matrix.Elements
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取表示此元素的浮点值数组<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  remarks: "元素 m11、 m12、 m21、 m22、 dx 和的 dy<xref:System.Drawing.Drawing2D.Matrix>表示通过以该顺序数组中的值。</xref:System.Drawing.Drawing2D.Matrix>"
  syntax:
    content: public float[] Elements { get; }
    return:
      type: System.Single[]
      description: "一个浮点值的数组，表示此元素<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Elements*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Matrix.Equals(Object)
  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "测试指定的对象是否是<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>和等同于此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要测试的对象。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>是指定<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>等同于此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Finalize()
  nameWithType: Matrix.Finalize()
  fullName: System.Drawing.Drawing2D.Matrix.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "允许该对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~Matrix ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode
  id: GetHashCode
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Matrix.GetHashCode()
  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "返回的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "此哈希代码<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Invert
  id: Invert
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Invert()
  nameWithType: Matrix.Invert()
  fullName: System.Drawing.Drawing2D.Matrix.Invert()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "反转此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>，如果它是可逆转。"
  remarks: ''
  example:
  - "The following code example creates a matrix and inverts it:  \n  \n```c#  \nMatrix myMatrix = new Matrix(3, 5, 1, 2, 2, 4);  \n myMatrix.Invert();  \n```"
  syntax:
    content: public void Invert ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Invert*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity
  id: IsIdentity
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>为单位矩阵。"
  syntax:
    content: public bool IsIdentity { get; }
    return:
      type: System.Boolean
      description: "此属性是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>是标识; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.IsIdentity*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible
  id: IsInvertible
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>是否可逆转。"
  syntax:
    content: public bool IsInvertible { get; }
    return:
      type: System.Boolean
      description: "此属性是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>可逆转; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.IsInvertible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  id: Multiply(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Multiply(Matrix)
  nameWithType: Matrix.Multiply(Matrix)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "乘以这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>中指定的矩阵<code> matrix </code>参数，通过预先计算指定<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>.
  syntax:
    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>通过此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>是相乘。"
  overload: System.Drawing.Drawing2D.Matrix.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  id: Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Multiply(Matrix,MatrixOrder)
  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "乘以这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>中指定的矩阵<code> matrix </code>参数，并在指定的顺序<code> order </code>参数。"
  remarks: "如果指定的顺序是<xref:System.Drawing.Drawing2D.MatrixOrder>，则此<xref:System.Drawing.Drawing2D.Matrix>中预先计算的顺序对指定矩阵的乘积。</xref:System.Drawing.Drawing2D.Matrix> </xref:System.Drawing.Drawing2D.MatrixOrder> 如果指定的顺序是<xref:System.Drawing.Drawing2D.MatrixOrder>，则此<xref:System.Drawing.Drawing2D.Matrix>追加的顺序对指定矩阵的乘积。</xref:System.Drawing.Drawing2D.Matrix> </xref:System.Drawing.Drawing2D.MatrixOrder>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates three matrices.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Multiplies matrix 1 by matrix 2 and stores the result in matrix 1.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Multiplies the result stored in matrix 1 by matrix 3, and again stores the result in matrix 1.  \n  \n-   Lists the contents of matrix 1 to the screen.  \n  \n-   Draws a rectangle to the screen prior to applying the matrix 1 transform (the blue rectangle).  \n  \n-   Applies the transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \n  \n Notice that the red rectangle has been scaled by a factor of two in the horizontal direction, then rotated 90 degrees, and then moved (translated) 250 points in the x direction and 50 points in the y direction.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/cpp/8671b24d-b76c-4435-bbb4-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/visualbasic/8671b24d-b76c-4435-bbb4-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/add/codesnippet/csharp/8671b24d-b76c-4435-bbb4-_1.cs)]"
  syntax:
    content: public void Multiply (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>通过此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>是相乘。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "<xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref> ，表示乘法的顺序。"
  overload: System.Drawing.Drawing2D.Matrix.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.OffsetX
  id: OffsetX
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: OffsetX
  nameWithType: Matrix.OffsetX
  fullName: System.Drawing.Drawing2D.Matrix.OffsetX
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取的 x 转换值 （dx 值或第三行、 第一列中的元素） 的这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  syntax:
    content: public float OffsetX { get; }
    return:
      type: System.Single
      description: "此的 x 转换值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.OffsetX*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.OffsetY
  id: OffsetY
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: OffsetY
  nameWithType: Matrix.OffsetY
  fullName: System.Drawing.Drawing2D.Matrix.OffsetY
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取的 y 转换值 （dy 值或第三个行和第二列中的元素） 的这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  syntax:
    content: public float OffsetY { get; }
    return:
      type: System.Single
      description: "此的 y 转换值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.OffsetY*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Reset
  id: Reset
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Reset()
  nameWithType: Matrix.Reset()
  fullName: System.Drawing.Drawing2D.Matrix.Reset()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "重置此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>能够标识矩阵的元素。"
  remarks: "单位矩阵的主对角线上的元素均为 1。 标识矩阵的所有其他元素都是 0。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates a scaling matrix.  \n  \n-   Lists the matrix elements to the screen.  \n  \n-   Resets the matrix to identity.  \n  \n-   Lists the elements to the screen.  \n  \n-   Translates the matrix by 50 points in the x-axis and 40 points in the y-axis.  \n  \n-   Lists the elements of the translated matrix to the screen.  \n  \n-   Draws a rectangle is drawn to the screen prior to applying the matrix transform (the blue rectangle).  \n  \n-   Applies the transform to the rectangle.  \n  \n-   Draws the transformed rectangle is drawn to the screen (the red rectangle), using the same coordinates as the previous rectangle.  \n  \n Notice that the red rectangle was not scaled (because of the reset) but was translated in the x-axis and y-axis.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/cpp/m-system.drawing.drawing_5_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/visualbasic/m-system.drawing.drawing_5_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/add/codesnippet/csharp/m-system.drawing.drawing_5_1.cs)]"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Drawing.Drawing2D.Matrix.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  id: Rotate(System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Rotate(Single)
  nameWithType: Matrix.Rotate(Single)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "预先计算此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>沿原点并指定角度的顺时针旋转。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Rotate%28System.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Rotate (float angle);
    parameters:
    - id: angle
      type: System.Single
      description: "旋转，以度为单位的角度。"
  overload: System.Drawing.Drawing2D.Matrix.Rotate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Rotate(Single,MatrixOrder)
  nameWithType: Matrix.Rotate(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "中指定的金额顺时针旋转<code> angle </code>参数，沿原点 （零 x 和 y 坐标表示） 为此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \n  \n-   Creates a matrix and rotates it 45 degrees.  \n  \n-   Applies this matrix transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been rotated around the 0, 0 screen coordinates.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/cpp/4dc64a49-8a71-40e5-a40b-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/visualbasic/4dc64a49-8a71-40e5-a40b-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/add/codesnippet/csharp/4dc64a49-8a71-40e5-a40b-_1.cs)]"
  syntax:
    content: public void Rotate (float angle, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: "以度为单位的旋转角度 （范围）。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>指定的顺序 （追加或预先计算） 中的旋转应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Rotate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  id: RotateAt(System.Single,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: RotateAt(Single,PointF)
  nameWithType: Matrix.RotateAt(Single,PointF)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用到此顺时针旋转<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>围绕中指定的点<code> point </code>参数，并通过预先计算旋转。"
  remarks: ''
  example:
  - "The following code example demonstrates using a <xref:System.Drawing.Drawing2D.Matrix> and the <xref:System.Drawing.Drawing2D.GraphicsPath.Transform%2A> method to rotate a string. This example is designed to be used with Windows Forms. Create a form and paste the following code into it. Call the `DrawVerticalStringFromBottomUp` method in the form's <xref:System.Windows.Forms.Control.Paint> event handler, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-cs[System.Drawing.MiscExamples#5](~/add/codesnippet/csharp/m-system.drawing.drawing_11_1.cs)]\n [!code-cpp[System.Drawing.MiscExamples#5](~/add/codesnippet/cpp/m-system.drawing.drawing_11_1.cpp)]\n [!code-vb[System.Drawing.MiscExamples#5](~/add/codesnippet/visualbasic/m-system.drawing.drawing_11_1.vb)]"
  syntax:
    content: public void RotateAt (float angle, System.Drawing.PointF point);
    parameters:
    - id: angle
      type: System.Single
      description: "以度为单位的旋转角度 （范围）。"
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，表示旋转中心。"
  overload: System.Drawing.Drawing2D.Matrix.RotateAt*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  id: RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: RotateAt(Single,PointF,MatrixOrder)
  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "有关指定点顺时针旋转应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定顺序排序。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a rotation transform (the blue rectangle).  \n  \n-   Creates a matrix and rotates it 45 degrees around a specified point.  \n  \n-   Applies this matrix transform is to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been rotated around the upper left-hand corner of the rectangle (the rotation point specified the RotateAt method).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/cpp/fc8aec2b-1f13-41da-9f14-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/visualbasic/fc8aec2b-1f13-41da-9f14-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/add/codesnippet/csharp/fc8aec2b-1f13-41da-9f14-_1.cs)]"
  syntax:
    content: public void RotateAt (float angle, System.Drawing.PointF point, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: angle
      type: System.Single
      description: "旋转，以度为单位的角度。"
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，表示旋转中心。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>指定的顺序 （追加或预先计算） 中应用的旋转。"
  overload: System.Drawing.Drawing2D.Matrix.RotateAt*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  id: Scale(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Scale(Single,Single)
  nameWithType: Matrix.Scale(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定的比例向量应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>通过预先计算比例向量。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Scale%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Scale (float scaleX, float scaleY);
    parameters:
    - id: scaleX
      type: System.Single
      description: "缩放这值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> x 轴方向。"
    - id: scaleY
      type: System.Single
      description: "缩放这值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> y 轴方向。"
  overload: System.Drawing.Drawing2D.Matrix.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Scale(Single,Single,MatrixOrder)
  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将指定的比例向量应用 (<code> scaleX </code>和<code> scaleY </code>) 至此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>使用指定的顺序。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \n  \n-   Applies this matrix transform to the rectangle.  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/cpp/05985bb7-69b2-4fd4-9c7f-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/visualbasic/05985bb7-69b2-4fd4-9c7f-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/add/codesnippet/csharp/05985bb7-69b2-4fd4-9c7f-_1.cs)]"
  syntax:
    content: public void Scale (float scaleX, float scaleY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: scaleX
      type: System.Single
      description: "缩放这值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> x 轴方向。"
    - id: scaleY
      type: System.Single
      description: "缩放这值<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> y 轴方向。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>指定的顺序 （追加或预先计算） 中的比例向量应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  id: Shear(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Shear(Single,Single)
  nameWithType: Matrix.Shear(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定的切变向量应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>通过预先计算切变转换。"
  remarks: "此方法中应用转换是纯切变，仅当其中一个参数为 0。 应用于原始，矩形时`shearY`因子为 0 时，转换将移动下边缘水平`shearX`倍的矩形的高度。 当`shearX`因子为 0 时，它将移动右边缘垂直`shearY`倍的矩形的宽度。 当两个参数均不为零，因为结果很难预测，警告将处于顺序。 例如，如果这两个因素都为 1，转换为单数形式 (因此不可逆)，挤压到单个行的整个平面。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following action:  \n  \n-   Draws a rectangle to the screen, using a green pen, prior to applying a scaling transform.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.Matrix> and uses it to set a world-coordinate transform for the <xref:System.Drawing.Graphics>.  \n  \n-   Draws another rectangle using a red pen.  \n  \n-   Draws an ellipse using a blue pen.  \n  \n The result is a green rectangle, a red parallelogram and a transformed, blue ellipse. Notice that the green rectangle (drawn prior to setting the transform) directly uses the coordinates supplied in the <xref:System.Drawing.Graphics.DrawRectangle%2A> call. The other two figures are transformed prior to drawing. The rectangle is transformed to a parallelogram (red), and the ellipse (blue) is transformed to fit into the transformed parallelogram. Notice the bottom of the rectangle is moved (sheared) in the x-axis by a factor of two times the height of the rectangle, thus forming the parallelogram.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/cpp/m-system.drawing.drawing_3_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.drawing_3_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/add/codesnippet/csharp/m-system.drawing.drawing_3_1.cs)]"
  syntax:
    content: public void Shear (float shearX, float shearY);
    parameters:
    - id: shearX
      type: System.Single
      description: "水平切变因子。"
    - id: shearY
      type: System.Single
      description: "垂直切变因子。"
  overload: System.Drawing.Drawing2D.Matrix.Shear*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Shear(Single,Single,MatrixOrder)
  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定的切变向量应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定顺序排序。"
  remarks: "此方法中应用转换是纯切变，仅当其中一个参数为 0。 应用于原始，矩形时`shearY`因子为 0 时，转换将移动下边缘水平`shearX`倍的矩形的高度。 当`shearX`因子为 0 时，它将移动右边缘垂直`shearY`倍的矩形的宽度。 当两个参数均不为零，因为结果很难预测，警告将处于顺序。 例如，如果这两个因素都为 1，转换为单数形式 (因此不可逆)，挤压到单个行的整个平面。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Shear%28System.Single%2CSystem.Single%29>.
  syntax:
    content: public void Shear (float shearX, float shearY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: shearX
      type: System.Single
      description: "水平切变因子。"
    - id: shearY
      type: System.Single
      description: "垂直切变因子。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>指定的顺序 （追加或预先计算） 中应用切变所。"
  overload: System.Drawing.Drawing2D.Matrix.Shear*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  id: TransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformPoints(Point[])
  nameWithType: Matrix.TransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将应用此所表示的几何变换<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>到指定的点数组。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates an array of points that form a rectangle.  \n  \n-   Draws this array of points (to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis.  \n  \n-   Applies this matrix transform to the array of points.  \n  \n-   Draws the transformed array to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle).  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/cpp/m-system.drawing.drawing_1_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/visualbasic/m-system.drawing.drawing_1_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/add/codesnippet/csharp/m-system.drawing.drawing_1_1.cs)]"
  syntax:
    content: public void TransformPoints (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示要变换的点。"
  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  id: TransformPoints(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformPoints(PointF[])
  nameWithType: Matrix.TransformPoints(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将应用此所表示的几何变换<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>到指定的点数组。"
  remarks: ''
  example:
  - For an example, see [TransformPoints(Point\[\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void TransformPoints (System.Drawing.PointF[] pts);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示要变换的点。"
  overload: System.Drawing.Drawing2D.Matrix.TransformPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  id: TransformVectors(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformVectors(Point[])
  nameWithType: Matrix.TransformVectors(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "适用的缩放和旋转成分这<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>到指定的点数组。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Creates an array of points that form a rectangle.  \n  \n-   Draws this array of points to the screen prior to applying a scaling transform (the blue rectangle).  \n  \n-   Creates a matrix and scales it by 3 in the x-axis and 2 in the y-axis, and translates it by 100 in both axes.  \n  \n-   Lists the matrix elements to the screen.  \n  \n-   Applies this matrix transform to the array of points.  \n  \n-   Draws the transformed array to the screen (the red rectangle).  \n  \n Notice that the red rectangle has been scaled by a factor of 3 in the x-axis and by 2 in the y-axis, including the upper left-hand corner of the rectangle (the beginning point of the rectangle) but the translation vector (the last two elements of the matrix) is ignored.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/cpp/m-system.drawing.drawing_12_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.drawing_12_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/add/codesnippet/csharp/m-system.drawing.drawing_12_1.cs)]"
  syntax:
    content: public void TransformVectors (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示要变换的点。"
  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  id: TransformVectors(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: TransformVectors(PointF[])
  nameWithType: Matrix.TransformVectors(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "与数组矩阵中的每个向量相乘。 此矩阵的转换元素 （第三个行） 将被忽略。"
  remarks: ''
  example:
  - For an example, see [TransformVectors(Point\[\])](assetId:///M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void TransformVectors (System.Drawing.PointF[] pts);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示要变换的点。"
  overload: System.Drawing.Drawing2D.Matrix.TransformVectors*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  id: Translate(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Translate(Single,Single)
  nameWithType: Matrix.Translate(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将指定的转换向量应用 (<code> offsetX </code>和<code> offsetY </code>) 至此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>通过预先计算转换向量。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.Matrix.Translate%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.
  syntax:
    content: public void Translate (float offsetX, float offsetY);
    parameters:
    - id: offsetX
      type: System.Single
      description: "X 值，通过它转换此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: offsetY
      type: System.Single
      description: "Y 值，通过它转换此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  id: Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: Translate(Single,Single,MatrixOrder)
  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指定的转换向量应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>指定顺序排序。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Control.Paint> event object. The code performs the following actions:  \n  \n-   Draws a rectangle to the screen prior to applying a translate transform (the blue rectangle).  \n  \n-   Creates a matrix and translates it by 100 in both axes.  \n  \n-   Applies this matrix transform to the rectangle,  \n  \n-   Draws the transformed rectangle to the screen (the red rectangle).  \n  \n Notice that the beginning of the red rectangle is located 100 points in both axes from the beginning of the blue triangle.  \n  \n [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/cpp/48411d65-00d9-48ff-a809-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/visualbasic/48411d65-00d9-48ff-a809-_1.vb)]\n [!code-cs[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/add/codesnippet/csharp/48411d65-00d9-48ff-a809-_1.cs)]"
  syntax:
    content: public void Translate (float offsetX, float offsetY, System.Drawing.Drawing2D.MatrixOrder order);
    parameters:
    - id: offsetX
      type: System.Single
      description: "X 值，通过它转换此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: offsetY
      type: System.Single
      description: "Y 值，通过它转换此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
    - id: order
      type: System.Drawing.Drawing2D.MatrixOrder
      description: "A <xref href=&quot;System.Drawing.Drawing2D.MatrixOrder&quot;> </xref>指定的顺序 （追加或预先计算） 中的转换应用到此<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.Matrix.Translate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  id: VectorTransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  langs:
  - csharp
  name: VectorTransformPoints(Point[])
  nameWithType: Matrix.VectorTransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "与数组矩阵中的每个向量相乘。 此矩阵的转换元素 （第三个行） 将被忽略。"
  syntax:
    content: public void VectorTransformPoints (System.Drawing.Point[] pts);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示要变换的点。"
  overload: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.Matrix.#ctor
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix()
  nameWithType: Matrix.Matrix()
  fullName: System.Drawing.Drawing2D.Matrix.Matrix()
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(Rectangle,Point[])
  nameWithType: Matrix.Matrix(Rectangle,Point[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Rectangle,Point[])
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.Point[]
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point[]
  spec.csharp:
  - uid: System.Drawing.Point
    name: Point
    nameWithType: Point
    fullName: Point[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(RectangleF,PointF[])
  nameWithType: Matrix.Matrix(RectangleF,PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(RectangleF,PointF[])
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix(Single,Single,Single,Single,Single,Single)
  nameWithType: Matrix.Matrix(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Matrix(Single,Single,Single,Single,Single,Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Drawing2D.Matrix.Clone
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Clone()
  nameWithType: Matrix.Clone()
  fullName: System.Drawing.Drawing2D.Matrix.Clone()
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Drawing2D.Matrix.Dispose
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Dispose()
  nameWithType: Matrix.Dispose()
  fullName: System.Drawing.Drawing2D.Matrix.Dispose()
- uid: System.Drawing.Drawing2D.Matrix.Elements
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Elements
  nameWithType: Matrix.Elements
  fullName: System.Drawing.Drawing2D.Matrix.Elements
- uid: System.Single[]
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.Matrix.Equals(System.Object)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Equals(Object)
  nameWithType: Matrix.Equals(Object)
  fullName: System.Drawing.Drawing2D.Matrix.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Drawing2D.Matrix.Finalize
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Finalize()
  nameWithType: Matrix.Finalize()
  fullName: System.Drawing.Drawing2D.Matrix.Finalize()
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: GetHashCode()
  nameWithType: Matrix.GetHashCode()
  fullName: System.Drawing.Drawing2D.Matrix.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Drawing2D.Matrix.Invert
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Invert()
  nameWithType: Matrix.Invert()
  fullName: System.Drawing.Drawing2D.Matrix.Invert()
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
  fullName: System.Drawing.Drawing2D.Matrix.IsIdentity
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
  fullName: System.Drawing.Drawing2D.Matrix.IsInvertible
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply(Matrix)
  nameWithType: Matrix.Multiply(Matrix)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix)
- uid: System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply(Matrix,MatrixOrder)
  nameWithType: Matrix.Multiply(Matrix,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Multiply(Matrix,MatrixOrder)
- uid: System.Drawing.Drawing2D.MatrixOrder
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: MatrixOrder
  nameWithType: MatrixOrder
  fullName: System.Drawing.Drawing2D.MatrixOrder
- uid: System.Drawing.Drawing2D.Matrix.OffsetX
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetX
  nameWithType: Matrix.OffsetX
  fullName: System.Drawing.Drawing2D.Matrix.OffsetX
- uid: System.Drawing.Drawing2D.Matrix.OffsetY
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetY
  nameWithType: Matrix.OffsetY
  fullName: System.Drawing.Drawing2D.Matrix.OffsetY
- uid: System.Drawing.Drawing2D.Matrix.Reset
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Reset()
  nameWithType: Matrix.Reset()
  fullName: System.Drawing.Drawing2D.Matrix.Reset()
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate(Single)
  nameWithType: Matrix.Rotate(Single)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single)
- uid: System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate(Single,MatrixOrder)
  nameWithType: Matrix.Rotate(Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Rotate(Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt(Single,PointF)
  nameWithType: Matrix.RotateAt(Single,PointF)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF)
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt(Single,PointF,MatrixOrder)
  nameWithType: Matrix.RotateAt(Single,PointF,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.RotateAt(Single,PointF,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale(Single,Single)
  nameWithType: Matrix.Scale(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale(Single,Single,MatrixOrder)
  nameWithType: Matrix.Scale(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Scale(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear(Single,Single)
  nameWithType: Matrix.Shear(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear(Single,Single,MatrixOrder)
  nameWithType: Matrix.Shear(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Shear(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints(Point[])
  nameWithType: Matrix.TransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(Point[])
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints(PointF[])
  nameWithType: Matrix.TransformPoints(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformPoints(PointF[])
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors(Point[])
  nameWithType: Matrix.TransformVectors(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(Point[])
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors(PointF[])
  nameWithType: Matrix.TransformVectors(PointF[])
  fullName: System.Drawing.Drawing2D.Matrix.TransformVectors(PointF[])
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate(Single,Single)
  nameWithType: Matrix.Translate(Single,Single)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single)
- uid: System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate(Single,Single,MatrixOrder)
  nameWithType: Matrix.Translate(Single,Single,MatrixOrder)
  fullName: System.Drawing.Drawing2D.Matrix.Translate(Single,Single,MatrixOrder)
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: VectorTransformPoints(Point[])
  nameWithType: Matrix.VectorTransformPoints(Point[])
  fullName: System.Drawing.Drawing2D.Matrix.VectorTransformPoints(Point[])
- uid: System.Drawing.Drawing2D.Matrix.#ctor*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Matrix
  nameWithType: Matrix.Matrix
- uid: System.Drawing.Drawing2D.Matrix.Clone*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Clone
  nameWithType: Matrix.Clone
- uid: System.Drawing.Drawing2D.Matrix.Dispose*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Dispose
  nameWithType: Matrix.Dispose
- uid: System.Drawing.Drawing2D.Matrix.Elements*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Elements
  nameWithType: Matrix.Elements
- uid: System.Drawing.Drawing2D.Matrix.Equals*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Equals
  nameWithType: Matrix.Equals
- uid: System.Drawing.Drawing2D.Matrix.Finalize*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Finalize
  nameWithType: Matrix.Finalize
- uid: System.Drawing.Drawing2D.Matrix.GetHashCode*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: GetHashCode
  nameWithType: Matrix.GetHashCode
- uid: System.Drawing.Drawing2D.Matrix.Invert*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Invert
  nameWithType: Matrix.Invert
- uid: System.Drawing.Drawing2D.Matrix.IsIdentity*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsIdentity
  nameWithType: Matrix.IsIdentity
- uid: System.Drawing.Drawing2D.Matrix.IsInvertible*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: IsInvertible
  nameWithType: Matrix.IsInvertible
- uid: System.Drawing.Drawing2D.Matrix.Multiply*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Multiply
  nameWithType: Matrix.Multiply
- uid: System.Drawing.Drawing2D.Matrix.OffsetX*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetX
  nameWithType: Matrix.OffsetX
- uid: System.Drawing.Drawing2D.Matrix.OffsetY*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: OffsetY
  nameWithType: Matrix.OffsetY
- uid: System.Drawing.Drawing2D.Matrix.Reset*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Reset
  nameWithType: Matrix.Reset
- uid: System.Drawing.Drawing2D.Matrix.Rotate*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Rotate
  nameWithType: Matrix.Rotate
- uid: System.Drawing.Drawing2D.Matrix.RotateAt*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: RotateAt
  nameWithType: Matrix.RotateAt
- uid: System.Drawing.Drawing2D.Matrix.Scale*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Scale
  nameWithType: Matrix.Scale
- uid: System.Drawing.Drawing2D.Matrix.Shear*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Shear
  nameWithType: Matrix.Shear
- uid: System.Drawing.Drawing2D.Matrix.TransformPoints*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformPoints
  nameWithType: Matrix.TransformPoints
- uid: System.Drawing.Drawing2D.Matrix.TransformVectors*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: TransformVectors
  nameWithType: Matrix.TransformVectors
- uid: System.Drawing.Drawing2D.Matrix.Translate*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: Translate
  nameWithType: Matrix.Translate
- uid: System.Drawing.Drawing2D.Matrix.VectorTransformPoints*
  parent: System.Drawing.Drawing2D.Matrix
  isExternal: false
  name: VectorTransformPoints
  nameWithType: Matrix.VectorTransformPoints
