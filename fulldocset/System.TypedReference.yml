### YamlMime:ManagedReference
items:
- uid: System.TypedReference
  id: TypedReference
  children:
  - System.TypedReference.Equals(System.Object)
  - System.TypedReference.GetHashCode
  - System.TypedReference.GetTargetType(System.TypedReference)
  - System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  - System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  - System.TypedReference.TargetTypeToken(System.TypedReference)
  - System.TypedReference.ToObject(System.TypedReference)
  langs:
  - csharp
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
  type: Struct
  summary: "描述包含这两个的托管的指针的位置和的运行时表示形式可能存储在该位置的类型的对象。"
  remarks: "类型化的引用是用于 varargs 和其他支持的类型/值组合。 `TypedReference`是可以用于参数和局部变量内置值类型。       数组`TypedReference`无法创建对象。 例如，以下调用无效︰ [!code-cs [System.TypedReference#1](~/add/codesnippet/csharp/t-system.typedreference_1.cs)][!code-cpp[System.TypedReference#1](~/add/codesnippet/cpp/t-system.typedreference_1.cpp)][!code-vb[System.TypedReference#1    ](~/add/codesnippet/visualbasic/t-system.typedreference_1.vb)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public struct TypedReference
  inheritance:
  - System.ValueType
  implements: []
  platform:
  - net462
- uid: System.TypedReference.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "检查此对象是否等于指定的对象。"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "具有要与当前对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此对象是否等于指定的对象;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.TypedReference.Equals*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "未实现此方法。"
  platform:
  - net462
- uid: System.TypedReference.GetHashCode
  id: GetHashCode
  parent: System.TypedReference
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回此对象的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "此对象的哈希代码。"
  overload: System.TypedReference.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  id: GetTargetType(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回指定的目标的类型<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。"
  syntax:
    content: public static Type GetTargetType (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "其目标的类型为要返回的值。"
    return:
      type: System.Type
      description: "指定的目标的类型<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。"
  overload: System.TypedReference.GetTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  id: MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  langs:
  - csharp
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "使<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>由指定的对象和字段说明列表标识的字段。"
  remarks: "MakeTypedReference 方法返回某些终端字段的类型化的引用其中`target`参数包含的第一个元素说明的字段`flds`，由的第一个元素说明的字段`flds`包含由第二个元素说明的字段`flds`，依此类推，直到达到终端的字段。      1> [!NOTE]&1;> 开头[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]，此方法可以用于访问非公共成员，如果调用方已被授予<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>标志，并且如果非公共成员的授予集限制为调用方的授予集或其子集。</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> (请参阅[反射的安全注意事项](~/add/includes/ajax-current-ext-md.md)。)  >> 到使用此功能，你的应用程序应面向[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]或更高版本。"
  syntax:
    content: public static TypedReference MakeTypedReference (object target, System.Reflection.FieldInfo[] flds);
    parameters:
    - id: target
      type: System.Object
      description: "包含由的第一个元素说明的字段的对象`flds`。"
    - id: flds
      type: System.Reflection.FieldInfo[]
      description: "其中的每个元素描述包含由后续元素说明的字段的字段的字段说明列表。 每个说明的字段必须是值类型。 字段说明必须是<xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;></xref>类型系统所提供的对象。"
    return:
      type: System.TypedReference
      description: "A <xref href=&quot;System.TypedReference&quot;> </xref>的最后一个元素说明的字段<code> flds </code>。"
  overload: System.TypedReference.MakeTypedReference*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>or <code>flds</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -的元素<code>flds</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> flds </code>数组不包含任何元素。       -的元素<code> flds </code>不<xref uid=&quot;langword_csharp_RuntimeFieldInfo&quot; name=&quot;RuntimeFieldInfo&quot; href=&quot;&quot;></xref>对象。       -or-       The <>*> or <>*> property of an element of <code>flds</code> is <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "参数<code> target </code>不包含由的第一个元素说明的字段<code> flds </code>，或的元素<code> flds </code>说明的字段均未包含在由后续元素说明的字段<code> flds </code>。       -由的一个元素说明的字段<code> flds </code>不是值类型。"
  platform:
  - net462
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  id: SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  langs:
  - csharp
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "指定将值转换为<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。 不支持此方法。"
  remarks: "此方法始终引发<xref:System.NotSupportedException>.</xref:System.NotSupportedException>"
  syntax:
    content: public static void SetTypedReference (TypedReference target, object value);
    parameters:
    - id: target
      type: System.TypedReference
      description: "转换的目标。"
    - id: value
      type: System.Object
      description: "要转换的值。"
  overload: System.TypedReference.SetTypedReference*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在所有情况下。"
  platform:
  - net462
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  id: TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回指定的内部元数据类型句柄<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。"
  syntax:
    content: public static RuntimeTypeHandle TargetTypeToken (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>为其请求的类型句柄。"
    return:
      type: System.RuntimeTypeHandle
      description: "指定的内部元数据类型句柄<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。"
  overload: System.TypedReference.TargetTypeToken*
  exceptions: []
  platform:
  - net462
- uid: System.TypedReference.ToObject(System.TypedReference)
  id: ToObject(System.TypedReference)
  parent: System.TypedReference
  langs:
  - csharp
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将转换指定<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;></xref>到<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>。"
  remarks: "这可能是装箱操作。"
  syntax:
    content: public static object ToObject (TypedReference value);
    parameters:
    - id: value
      type: System.TypedReference
      description: "<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>要转换。"
    return:
      type: System.Object
      description: "<xref:System.Object>转换从<xref uid=&quot;langword_csharp_TypedReference&quot; name=&quot;TypedReference&quot; href=&quot;&quot;> </xref>。</xref:System.Object>"
  overload: System.TypedReference.ToObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingMemberException
  isExternal: true
  name: System.MissingMemberException
- uid: System.TypedReference.Equals(System.Object)
  parent: System.TypedReference
  isExternal: false
  name: Equals(Object)
  nameWithType: TypedReference.Equals(Object)
  fullName: System.TypedReference.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.TypedReference.GetHashCode
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode()
  nameWithType: TypedReference.GetHashCode()
  fullName: System.TypedReference.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TypedReference.GetTargetType(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType(TypedReference)
  nameWithType: TypedReference.GetTargetType(TypedReference)
  fullName: System.TypedReference.GetTargetType(TypedReference)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.TypedReference
  parent: System
  isExternal: false
  name: TypedReference
  nameWithType: TypedReference
  fullName: System.TypedReference
- uid: System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference(Object,FieldInfo[])
  nameWithType: TypedReference.MakeTypedReference(Object,FieldInfo[])
  fullName: System.TypedReference.MakeTypedReference(Object,FieldInfo[])
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.TypedReference.SetTypedReference(System.TypedReference,System.Object)
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference(TypedReference,Object)
  nameWithType: TypedReference.SetTypedReference(TypedReference,Object)
  fullName: System.TypedReference.SetTypedReference(TypedReference,Object)
- uid: System.TypedReference.TargetTypeToken(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken(TypedReference)
  nameWithType: TypedReference.TargetTypeToken(TypedReference)
  fullName: System.TypedReference.TargetTypeToken(TypedReference)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.TypedReference.ToObject(System.TypedReference)
  parent: System.TypedReference
  isExternal: false
  name: ToObject(TypedReference)
  nameWithType: TypedReference.ToObject(TypedReference)
  fullName: System.TypedReference.ToObject(TypedReference)
- uid: System.TypedReference.Equals*
  parent: System.TypedReference
  isExternal: false
  name: Equals
  nameWithType: TypedReference.Equals
- uid: System.TypedReference.GetHashCode*
  parent: System.TypedReference
  isExternal: false
  name: GetHashCode
  nameWithType: TypedReference.GetHashCode
- uid: System.TypedReference.GetTargetType*
  parent: System.TypedReference
  isExternal: false
  name: GetTargetType
  nameWithType: TypedReference.GetTargetType
- uid: System.TypedReference.MakeTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: MakeTypedReference
  nameWithType: TypedReference.MakeTypedReference
- uid: System.TypedReference.SetTypedReference*
  parent: System.TypedReference
  isExternal: false
  name: SetTypedReference
  nameWithType: TypedReference.SetTypedReference
- uid: System.TypedReference.TargetTypeToken*
  parent: System.TypedReference
  isExternal: false
  name: TargetTypeToken
  nameWithType: TypedReference.TargetTypeToken
- uid: System.TypedReference.ToObject*
  parent: System.TypedReference
  isExternal: false
  name: ToObject
  nameWithType: TypedReference.ToObject
