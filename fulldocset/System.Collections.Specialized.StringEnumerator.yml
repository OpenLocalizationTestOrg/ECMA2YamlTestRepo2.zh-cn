### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.StringEnumerator
  id: StringEnumerator
  children:
  - System.Collections.Specialized.StringEnumerator.Current
  - System.Collections.Specialized.StringEnumerator.MoveNext
  - System.Collections.Specialized.StringEnumerator.Reset
  langs:
  - csharp
  name: StringEnumerator
  nameWithType: StringEnumerator
  fullName: System.Collections.Specialized.StringEnumerator
  type: Class
  summary: "支持简单遍历<xref href=&quot;System.Collections.Specialized.StringCollection&quot;> </xref>。"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.Specialized.StringEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.Specialized.StringEnumerator.Reset%2A> 在此位置，调用<xref:System.Collections.Specialized.StringEnumerator.Current%2A>引发异常。</xref:System.Collections.Specialized.StringEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.Specialized.StringEnumerator.Current%2A>.</xref:System.Collections.Specialized.StringEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       <xref:System.Collections.Specialized.StringEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>称为。</xref:System.Collections.Specialized.StringEnumerator.Reset%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A></xref:System.Collections.Specialized.StringEnumerator.Current%2A> <xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>设置<xref:System.Collections.Specialized.StringEnumerator.Current%2A>到下一个元素。</xref:System.Collections.Specialized.StringEnumerator.Current%2A></xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       如果<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.Specialized.StringEnumerator.Current%2A>引发异常。</xref:System.Collections.Specialized.StringEnumerator.Current%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.Specialized.StringEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>后, 跟<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>.</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> </xref:System.Collections.Specialized.StringEnumerator.Reset%2A> </xref:System.Collections.Specialized.StringEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.Specialized.StringEnumerator.Reset%2A></xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>和<xref:System.Collections.Specialized.StringEnumerator.Current%2A>，<xref:System.Collections.Specialized.StringEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.Specialized.StringEnumerator.Current%2A> </xref:System.Collections.Specialized.StringEnumerator.Current%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example demonstrates several of the properties and methods of StringEnumerator.  \n  \n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/t-system.collections.spe_8_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/t-system.collections.spe_8_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_8_1.vb)]"
  syntax:
    content: public class StringEnumerator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringEnumerator.Current
  id: Current
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: StringEnumerator.Current
  fullName: System.Collections.Specialized.StringEnumerator.Current
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取集合中的当前元素。"
  remarks: "创建一个枚举器或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>调用时，<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>必须调用来枚举器向前移动到第一个元素的集合，然后再读取值的当前; 否则，当前是不确定。</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A> </xref:System.Collections.Specialized.StringEnumerator.Reset%2A>       当前还会引发异常如果最后一次调用到<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>返回`false`，指示集合的末尾。</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       当前不会移动该枚举数的位置和当前的连续调用返回的对象相同之前<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>称为。</xref:System.Collections.Specialized.StringEnumerator.Reset%2A> </xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>"
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \n  \n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/p-system.collections.spe_8_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/p-system.collections.spe_8_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/p-system.collections.spe_8_1.vb)]"
  syntax:
    content: public string Current { get; }
    return:
      type: System.String
      description: "集合中的当前元素。"
  overload: System.Collections.Specialized.StringEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "枚举数定位在集合或最后一个元素之后的第一个元素之前。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringEnumerator.MoveNext
  id: MoveNext
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: StringEnumerator.MoveNext()
  fullName: System.Collections.Specialized.StringEnumerator.MoveNext()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将枚举数推进到集合的下一个元素。"
  remarks: "创建一个枚举器或<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>是调用，枚举数定位在集合中，第一个元素之前和 MoveNext 首次调用将枚举器移到集合的第一个元素上。</xref:System.Collections.Specialized.StringEnumerator.Reset%2A>       如果 MoveNext 将传递到集合的末尾，枚举数定位在集合中的最后一个元素之后和 MoveNext 返回`false`。 对 MoveNext 的后续调用时该枚举数将在此位置，还返回`false`直到<xref:System.Collections.Specialized.StringEnumerator.Reset%2A>称为。</xref:System.Collections.Specialized.StringEnumerator.Reset%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>"
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \n  \n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/m-system.collections.spe_12_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/m-system.collections.spe_12_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_12_1.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数传递到集合的末尾。"
  overload: System.Collections.Specialized.StringEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "创建枚举器之后，集合已修改。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringEnumerator.Reset
  id: Reset
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: StringEnumerator.Reset()
  fullName: System.Collections.Specialized.StringEnumerator.Reset()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将枚举数设置为其初始位置，集合中第一个元素之前。"
  remarks: "重置将枚举器移动到集合，在第一个元素的开头。 重置之后，<xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>必须调用的第一个元素的集合，然后再读取<xref:System.Collections.Specialized.StringEnumerator.Current%2A>.</xref:System.Collections.Specialized.StringEnumerator.Current%2A>的值枚举器向前</xref:System.Collections.Specialized.StringEnumerator.MoveNext%2A>"
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringEnumerator>.  \n  \n [!code-cs[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/csharp/m-system.collections.spe_14_1.cs)]\n [!code-cpp[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/cpp/m-system.collections.spe_14_1.cpp)]\n [!code-vb[System.Collections.Specialized.StringEnumerator2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_14_1.vb)]"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Collections.Specialized.StringEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "创建枚举器之后，集合已修改。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.Specialized.StringEnumerator.Current
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: Current
  nameWithType: StringEnumerator.Current
  fullName: System.Collections.Specialized.StringEnumerator.Current
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.StringEnumerator.MoveNext
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: StringEnumerator.MoveNext()
  fullName: System.Collections.Specialized.StringEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.StringEnumerator.Reset
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: Reset()
  nameWithType: StringEnumerator.Reset()
  fullName: System.Collections.Specialized.StringEnumerator.Reset()
- uid: System.Collections.Specialized.StringEnumerator.Current*
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: Current
  nameWithType: StringEnumerator.Current
- uid: System.Collections.Specialized.StringEnumerator.MoveNext*
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: StringEnumerator.MoveNext
- uid: System.Collections.Specialized.StringEnumerator.Reset*
  parent: System.Collections.Specialized.StringEnumerator
  isExternal: false
  name: Reset
  nameWithType: StringEnumerator.Reset
