### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyObjectType
  id: DependencyObjectType
  children:
  - System.Windows.DependencyObjectType.BaseType
  - System.Windows.DependencyObjectType.FromSystemType(System.Type)
  - System.Windows.DependencyObjectType.GetHashCode
  - System.Windows.DependencyObjectType.Id
  - System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  - System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  - System.Windows.DependencyObjectType.Name
  - System.Windows.DependencyObjectType.SystemType
  langs:
  - csharp
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
  type: Class
  summary: "实现用于将所有的基础类型缓存<xref href=&quot;System.Windows.DependencyObject&quot;></xref>派生类型。"
  remarks: "DependencyObjectType 表示特定的基础系统 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)])<xref:System.Type>的一种<xref:System.Windows.DependencyObject>。</xref:System.Windows.DependencyObject> </xref:System.Type> DependencyObjectType 是实质上是包装器 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) <xref:System.Type>，以便它可以扩展其功能的某些。</xref:System.Type>       此类具有没有公共构造函数。 此类的实例可以仅获取通过对其他对象的属性 (如<xref:System.Windows.DependencyObject.DependencyObjectType%2A?displayProperty=fullName>)，或通过静态方法<xref:System.Windows.DependencyObjectType.FromSystemType%2A>.</xref:System.Windows.DependencyObjectType.FromSystemType%2A> </xref:System.Windows.DependencyObject.DependencyObjectType%2A?displayProperty=fullName>"
  syntax:
    content: public class DependencyObjectType
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.BaseType
  id: BaseType
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
  fullName: System.Windows.DependencyObjectType.BaseType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>当前的即时基类<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public System.Windows.DependencyObjectType BaseType { get; }
    return:
      type: System.Windows.DependencyObjectType
      description: "基本类的类型。"
  overload: System.Windows.DependencyObjectType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.FromSystemType(System.Type)
  id: FromSystemType(System.Type)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: FromSystemType(Type)
  nameWithType: DependencyObjectType.FromSystemType(Type)
  fullName: System.Windows.DependencyObjectType.FromSystemType(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>表示给定的系统 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 类型。"
  remarks: "每个<xref:System.Windows.DependencyObject>维护<xref:System.Windows.DependencyObject.DependencyObjectType%2A>返回的属性<xref:System.Windows.DependencyObjectType>，但这需要有特定<xref:System.Windows.DependencyObject>实例。</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyObject.DependencyObjectType%2A> </xref:System.Windows.DependencyObject> 如果你还没有一个<xref:System.Windows.DependencyObject>实例，并需要一种<xref:System.Windows.DependencyObjectType>。</xref:System.Windows.DependencyObjectType> </xref:System.Windows.DependencyObject> ，可以使用此静态实用工具方法"
  example:
  - "The following example calls FromSystemType , creating a <xref:System.Windows.DependencyObjectType> based on the type of the <xref:System.Windows.Window> class.  \n  \n [!code-cs[PropertiesOvwSupport#DOTFromSystemType](~/add/codesnippet/csharp/PropertiesOvwSupport/page3.xaml.cs#dotfromsystemtype)]\n [!code-vb[PropertiesOvwSupport#DOTFromSystemType](~/add/codesnippet/visualbasic/propertiesovwsupport/page3.xaml.vb#dotfromsystemtype)]"
  syntax:
    content: public static System.Windows.DependencyObjectType FromSystemType (Type systemType);
    parameters:
    - id: systemType
      type: System.Type
      description: "系统 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 要转换类型。"
    return:
      type: System.Windows.DependencyObjectType
      description: "A <xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>表示系统 ([!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]) 类型。"
  overload: System.Windows.DependencyObjectType.FromSystemType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.GetHashCode
  id: GetHashCode
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: DependencyObjectType.GetHashCode()
  fullName: System.Windows.DependencyObjectType.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回此哈希代码<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  remarks: "此实现链接到的值<xref:System.Windows.DependencyObjectType.Id%2A>属性。</xref:System.Windows.DependencyObjectType.Id%2A>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 位有符号的整数哈希代码。"
  overload: System.Windows.DependencyObjectType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.Id
  id: Id
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: Id
  nameWithType: DependencyObjectType.Id
  fullName: System.Windows.DependencyObjectType.Id
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取常量时间数组查找操作的从零开始的唯一标识符。"
  remarks: "不用于常规的哈希函数。 没有此值能保证。 它会有所不同应用程序运行。"
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "内部标识符。"
  overload: System.Windows.DependencyObjectType.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  id: IsInstanceOfType(System.Windows.DependencyObject)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: IsInstanceOfType(DependencyObject)
  nameWithType: DependencyObjectType.IsInstanceOfType(DependencyObject)
  fullName: System.Windows.DependencyObjectType.IsInstanceOfType(DependencyObject)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "确定指定的对象是否与当前实例<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  remarks: "类型完全相同的对象返回`true`。"
  syntax:
    content: public bool IsInstanceOfType (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "要与当前比较的对象<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果类表示由当前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>的继承层次结构中<xref href=&quot;System.Windows.DependencyObject&quot;></xref>作为传递<code> d </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.DependencyObjectType.IsInstanceOfType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  id: IsSubclassOf(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: IsSubclassOf(DependencyObjectType)
  nameWithType: DependencyObjectType.IsSubclassOf(DependencyObjectType)
  fullName: System.Windows.DependencyObjectType.IsSubclassOf(DependencyObjectType)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "确定是否当前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>派生自指定<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public bool IsSubclassOf (System.Windows.DependencyObjectType dependencyObjectType);
    parameters:
    - id: dependencyObjectType
      type: System.Windows.DependencyObjectType
      description: "<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> dependencyObjectType </code>参数和当前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>表示类型的类和表示由当前的类<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>派生自表示的类<code> dependencyObjectType </code>。 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 此方法也返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果<code> dependencyObjectType </code>和当前<xref href=&quot;System.Windows.DependencyObjectType&quot;></xref>表示相同的类。"
  overload: System.Windows.DependencyObjectType.IsSubclassOf*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.Name
  id: Name
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: Name
  nameWithType: DependencyObjectType.Name
  fullName: System.Windows.DependencyObjectType.Name
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取表示的名称[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]系统类型。"
  remarks: "名称的值是<xref:System.Type>.</xref:System.Type>的类型名称的名称相同的字符串"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "名称的表示[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]系统类型。"
  overload: System.Windows.DependencyObjectType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyObjectType.SystemType
  id: SystemType
  parent: System.Windows.DependencyObjectType
  langs:
  - csharp
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
  fullName: System.Windows.DependencyObjectType.SystemType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]系统类型由此<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  syntax:
    content: public Type SystemType { get; }
    return:
      type: System.Type
      description: "[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]系统类型由此<xref href=&quot;System.Windows.DependencyObjectType&quot;> </xref>。"
  overload: System.Windows.DependencyObjectType.SystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.DependencyObjectType.BaseType
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
  fullName: System.Windows.DependencyObjectType.BaseType
- uid: System.Windows.DependencyObjectType
  parent: System.Windows
  isExternal: false
  name: DependencyObjectType
  nameWithType: DependencyObjectType
  fullName: System.Windows.DependencyObjectType
- uid: System.Windows.DependencyObjectType.FromSystemType(System.Type)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: FromSystemType(Type)
  nameWithType: DependencyObjectType.FromSystemType(Type)
  fullName: System.Windows.DependencyObjectType.FromSystemType(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.DependencyObjectType.GetHashCode
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: GetHashCode()
  nameWithType: DependencyObjectType.GetHashCode()
  fullName: System.Windows.DependencyObjectType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.DependencyObjectType.Id
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Id
  nameWithType: DependencyObjectType.Id
  fullName: System.Windows.DependencyObjectType.Id
- uid: System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsInstanceOfType(DependencyObject)
  nameWithType: DependencyObjectType.IsInstanceOfType(DependencyObject)
  fullName: System.Windows.DependencyObjectType.IsInstanceOfType(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsSubclassOf(DependencyObjectType)
  nameWithType: DependencyObjectType.IsSubclassOf(DependencyObjectType)
  fullName: System.Windows.DependencyObjectType.IsSubclassOf(DependencyObjectType)
- uid: System.Windows.DependencyObjectType.Name
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Name
  nameWithType: DependencyObjectType.Name
  fullName: System.Windows.DependencyObjectType.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.DependencyObjectType.SystemType
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
  fullName: System.Windows.DependencyObjectType.SystemType
- uid: System.Windows.DependencyObjectType.BaseType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: BaseType
  nameWithType: DependencyObjectType.BaseType
- uid: System.Windows.DependencyObjectType.FromSystemType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: FromSystemType
  nameWithType: DependencyObjectType.FromSystemType
- uid: System.Windows.DependencyObjectType.GetHashCode*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: GetHashCode
  nameWithType: DependencyObjectType.GetHashCode
- uid: System.Windows.DependencyObjectType.Id*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Id
  nameWithType: DependencyObjectType.Id
- uid: System.Windows.DependencyObjectType.IsInstanceOfType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsInstanceOfType
  nameWithType: DependencyObjectType.IsInstanceOfType
- uid: System.Windows.DependencyObjectType.IsSubclassOf*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: IsSubclassOf
  nameWithType: DependencyObjectType.IsSubclassOf
- uid: System.Windows.DependencyObjectType.Name*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: Name
  nameWithType: DependencyObjectType.Name
- uid: System.Windows.DependencyObjectType.SystemType*
  parent: System.Windows.DependencyObjectType
  isExternal: false
  name: SystemType
  nameWithType: DependencyObjectType.SystemType
