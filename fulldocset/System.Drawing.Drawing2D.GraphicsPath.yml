### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.GraphicsPath
  id: GraphicsPath
  children:
  - System.Drawing.Drawing2D.GraphicsPath.#ctor
  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])
  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])
  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])
  - System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])
  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)
  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)
  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)
  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)
  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])
  - System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)
  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])
  - System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)
  - System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)
  - System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])
  - System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])
  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)
  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)
  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)
  - System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)
  - System.Drawing.Drawing2D.GraphicsPath.ClearMarkers
  - System.Drawing.Drawing2D.GraphicsPath.Clone
  - System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures
  - System.Drawing.Drawing2D.GraphicsPath.CloseFigure
  - System.Drawing.Drawing2D.GraphicsPath.Dispose
  - System.Drawing.Drawing2D.GraphicsPath.FillMode
  - System.Drawing.Drawing2D.GraphicsPath.Finalize
  - System.Drawing.Drawing2D.GraphicsPath.Flatten
  - System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.GetBounds
  - System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.GetLastPoint
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  - System.Drawing.Drawing2D.GraphicsPath.PathData
  - System.Drawing.Drawing2D.GraphicsPath.PathPoints
  - System.Drawing.Drawing2D.GraphicsPath.PathTypes
  - System.Drawing.Drawing2D.GraphicsPath.PointCount
  - System.Drawing.Drawing2D.GraphicsPath.Reset
  - System.Drawing.Drawing2D.GraphicsPath.Reverse
  - System.Drawing.Drawing2D.GraphicsPath.SetMarkers
  - System.Drawing.Drawing2D.GraphicsPath.StartFigure
  - System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)
  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)
  - System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)
  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)
  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)
  - System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)
  langs:
  - csharp
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
  type: Class
  summary: "表示一系列连接的直线和曲线。 此类不能被继承。"
  remarks: "应用程序使用路径绘制形状的轮廓、 填充的形状的内部和创建剪辑区域。 图形引擎会保留世界坐标空间在路径中的几何形状的坐标。       路径可能组成任意数量的图形 （子路径）。 每个图或者组成的一系列连接的直线和曲线或几何形状基元。 图的起始点是序列中的连接的直线和曲线的第一个点。 结束点是在序列中的最后一个点。 由基元规范定义的几何形状基元的起始和结束点。       一个图，它由一系列连接的直线和曲线 （其起始和结束点可以是同一） 是开放的图形，除非显式关闭。 可以通过使用显式，关闭图<xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A>方法，这会关闭当前图通过将行从终结点连接到的起始点。</xref:System.Drawing.Drawing2D.GraphicsPath.CloseFigure%2A> 包含几何形状基元图是闭合的图形。       出于填充和剪辑的目的 (例如，如果使用呈现路径<xref:System.Drawing.Graphics.FillPath%2A>)，所有打开图形闭合通过将行从图的第一个点添加到其终结点。</xref:System.Drawing.Graphics.FillPath%2A>       时创建路径，或者关闭图时，将隐式启动一个新图形。 时，显式将创建一个新图形<xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A>调用方法。</xref:System.Drawing.Drawing2D.GraphicsPath.StartFigure%2A>       几何形状基元添加到路径，它将添加包含的几何形状图，并同样隐式开始一个新图形。 因此，没有始终在当前图形路径中。 直线和曲线被添加到路径中，根据需要连接到新的直线和曲线以形成一系列连接的直线和曲线的起始点的当前图的结束点被添加隐式行。       图都有描述直线和曲线的段的起始点和结束点之间的跟踪方式的方向。 方向是直线和曲线添加到图中，或定义的几何形状基元与订单中定义的。 方向用于确定剪辑和填充的路径内部。"
  syntax:
    content: 'public sealed class GraphicsPath : MarshalByRefObject, ICloneable, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor
  id: '#ctor'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath()
  nameWithType: GraphicsPath.GraphicsPath()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>类，该类具有<xref:System.Drawing.Drawing2D.GraphicsPath.FillMode*>值<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>。</xref:System.Drawing.Drawing2D.GraphicsPath.FillMode*>"
  syntax:
    content: public GraphicsPath ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)
  id: '#ctor(System.Drawing.Drawing2D.FillMode)'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath(FillMode)
  nameWithType: GraphicsPath.GraphicsPath(FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(FillMode)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>使用指定的类<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;></xref>枚举。"
  syntax:
    content: public GraphicsPath (System.Drawing.Drawing2D.FillMode fillMode);
    parameters:
    - id: fillMode
      type: System.Drawing.Drawing2D.FillMode
      description: "<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>该枚举确定将如何此内部<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>填充。"
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])
  id: '#ctor(System.Drawing.Point[],System.Byte[])'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath(Point[],Byte[])
  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>使用指定的类<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>和<xref href=&quot;System.Drawing.Point&quot;></xref>数组。"
  syntax:
    content: public GraphicsPath (System.Drawing.Point[] pts, byte[] types);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>定义构成这点的坐标的结构<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
    - id: types
      type: System.Byte[]
      description: "数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>指定中每个相应点的类型的枚举元素`pts`数组。"
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])
  id: '#ctor(System.Drawing.PointF[],System.Byte[])'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath(PointF[],Byte[])
  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[])
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>使用指定的数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>和<xref href=&quot;System.Drawing.PointF&quot;></xref>数组。"
  syntax:
    content: public GraphicsPath (System.Drawing.PointF[] pts, byte[] types);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>定义构成这点的坐标的结构<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
    - id: types
      type: System.Byte[]
      description: "数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>指定中每个相应点的类型的枚举元素`pts`数组。"
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  id: '#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath(Point[],Byte[],FillMode)
  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>使用指定的类<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>和<xref href=&quot;System.Drawing.Point&quot;></xref>数组以及指定<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;></xref>枚举元素。"
  syntax:
    content: public GraphicsPath (System.Drawing.Point[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);
    parameters:
    - id: pts
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>定义构成这点的坐标的结构<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
    - id: types
      type: System.Byte[]
      description: "数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>指定中每个相应点的类型的枚举元素`pts`数组。"
    - id: fillMode
      type: System.Drawing.Drawing2D.FillMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>枚举，它指定如何在此形状内部<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>填充。"
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  id: '#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)'
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GraphicsPath(PointF[],Byte[],FillMode)
  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>使用指定的数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>和<xref href=&quot;System.Drawing.PointF&quot;></xref>数组以及指定<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;></xref>枚举元素。"
  syntax:
    content: public GraphicsPath (System.Drawing.PointF[] pts, byte[] types, System.Drawing.Drawing2D.FillMode fillMode);
    parameters:
    - id: pts
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>定义构成这点的坐标的结构<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
    - id: types
      type: System.Byte[]
      description: "数组<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>指定中每个相应点的类型的枚举元素`pts`数组。"
    - id: fillMode
      type: System.Drawing.Drawing2D.FillMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>枚举，它指定如何在此形状内部<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>填充。"
  overload: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)
  id: AddArc(System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddArc(Rectangle,Single,Single)
  nameWithType: GraphicsPath.AddArc(Rectangle,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Rectangle,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条椭圆弧追加到当前的图。"
  remarks: "如果没有以前的行或图中的曲线，添加行以连接到弧线的开头的前一条线段的终结点。       圆弧会沿受指定的矩形的椭圆外围进行跟踪。 通过从 （从 0 度角度看） 椭圆的 x 轴沿顺时针方向度量的起始角度的度数确定弧线的起始点。 通过从起始点沿顺时针方向度量的中扫描角度度数位于同样到终结点。 如果大于 360 度或小于-360 度扫描角度，是分别将弧线扫频完全 360 度或-360 度。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a rectangle, from which the arc is defined.  \n  \n-   Creates a path, `myPath`.  \n  \n-   Defines a 180-degree elliptical arc that sweeps from 0 degrees to 180 degrees and appends it to a path.  \n  \n-   Draws the path to screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/csharp/e9f8971e-41e5-4f3a-9883-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/cpp/e9f8971e-41e5-4f3a-9883-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#1](~/add/codesnippet/visualbasic/e9f8971e-41e5-4f3a-9883-_1.vb)]"
  syntax:
    content: public void AddArc (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref>表示快照与从中创建弧线的椭圆的矩形边界。"
    - id: startAngle
      type: System.Single
      description: "弧线的起始角度测量以度为单位从 x 轴沿顺时针方向。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和弧线的结束。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)
  id: AddArc(System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddArc(RectangleF,Single,Single)
  nameWithType: GraphicsPath.AddArc(RectangleF,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(RectangleF,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条椭圆弧追加到当前的图。"
  remarks: "如果没有以前的行或图中的曲线，添加行以连接到弧线的开头的前一条线段的终结点。       圆弧会沿受指定的矩形的椭圆外围进行跟踪。 通过从 （从 0 度角度看） 椭圆的 x 轴沿顺时针方向度量的起始角度的度数确定弧线的起始点。 通过从起始点沿顺时针方向度量的中扫描角度度数位于同样到终结点。 如果大于 360 度或小于-360 度扫描角度，是分别将弧线扫频完全 360 度或-360 度。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.
  syntax:
    content: public void AddArc (System.Drawing.RectangleF rect, float startAngle, float sweepAngle);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示快照与从中创建弧线的椭圆的矩形边界。"
    - id: startAngle
      type: System.Single
      description: "弧线的起始角度测量以度为单位从 x 轴沿顺时针方向。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和弧线的结束。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  id: AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddArc(Int32,Int32,Int32,Int32,Single,Single)
  nameWithType: GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条椭圆弧追加到当前的图。"
  remarks: "如果没有以前的行或图中的曲线，添加行以连接到弧线的开头的前一条线段的终结点。       圆弧会沿受指定的矩形的椭圆外围进行跟踪。 通过从 （从 0 度角度看） 椭圆的 x 轴沿顺时针方向度量的起始角度的度数确定弧线的起始点。 通过从起始点沿顺时针方向度量的中扫描角度度数位于同样到终结点。 如果大于 360 度或小于-360 度扫描角度，是分别将弧线扫频完全 360 度或-360 度。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.
  syntax:
    content: public void AddArc (int x, int y, int width, int height, float startAngle, float sweepAngle);
    parameters:
    - id: x
      type: System.Int32
      description: "定义从中绘制弧的椭圆的矩形区域的左上角 x 坐标。"
    - id: y
      type: System.Int32
      description: "定义从中绘制弧的椭圆的矩形区域的左上角的 y 坐标。"
    - id: width
      type: System.Int32
      description: "定义从中绘制弧的椭圆的矩形区域的宽度。"
    - id: height
      type: System.Int32
      description: "定义从中绘制弧的椭圆的矩形区域的高度。"
    - id: startAngle
      type: System.Single
      description: "弧线的起始角度测量以度为单位从 x 轴沿顺时针方向。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和弧线的结束。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddArc(Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条椭圆弧追加到当前的图。"
  remarks: "如果没有以前的行或图中的曲线，添加行以连接到弧线的开头的前一条线段的终结点。       圆弧会沿受指定的矩形的椭圆外围进行跟踪。 通过从 （从 0 度角度看） 椭圆的 x 轴沿顺时针方向度量的起始角度的度数确定弧线的起始点。 通过从起始点沿顺时针方向度量的中扫描角度度数位于同样到终结点。 如果大于 360 度或小于-360 度扫描角度，是分别将弧线扫频完全 360 度或-360 度。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddArc%28System.Drawing.Rectangle%2CSystem.Single%2CSystem.Single%29>.
  syntax:
    content: public void AddArc (float x, float y, float width, float height, float startAngle, float sweepAngle);
    parameters:
    - id: x
      type: System.Single
      description: "定义从中绘制弧的椭圆的矩形区域的左上角 x 坐标。"
    - id: y
      type: System.Single
      description: "定义从中绘制弧的椭圆的矩形区域的左上角的 y 坐标。"
    - id: width
      type: System.Single
      description: "定义从中绘制弧的椭圆的矩形区域的宽度。"
    - id: height
      type: System.Single
      description: "定义从中绘制弧的椭圆的矩形区域的高度。"
    - id: startAngle
      type: System.Single
      description: "弧线的起始角度测量以度为单位从 x 轴沿顺时针方向。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和弧线的结束。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddArc*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  id: AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBezier(Point,Point,Point,Point)
  nameWithType: GraphicsPath.AddBezier(Point,Point,Point,Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Point,Point,Point,Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将三次方贝塞尔曲线添加到当前的图。"
  remarks: "三次方曲线通过使用第二个和第三个点为控制点构造从第一个点到四个点。       如果没有上一行或图中的曲线线段，添加一条线连接到三次方曲线的起始点的前一条线段的终结点。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddBezier (System.Drawing.Point pt1, System.Drawing.Point pt2, System.Drawing.Point pt3, System.Drawing.Point pt4);
    parameters:
    - id: pt1
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示曲线的起始点。"
    - id: pt2
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示曲线的第一个控制点。"
    - id: pt3
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示曲线的第二个控制点。"
    - id: pt4
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示曲线的终结点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  id: AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBezier(PointF,PointF,PointF,PointF)
  nameWithType: GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将三次方贝塞尔曲线添加到当前的图。"
  remarks: "三次方曲线通过使用第二个和第三个点为控制点构造从第一个点到四个点。       如果没有上一行或图中的曲线线段，添加一条线连接到三次方曲线的起始点的前一条线段的终结点。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddBezier (System.Drawing.PointF pt1, System.Drawing.PointF pt2, System.Drawing.PointF pt3, System.Drawing.PointF pt4);
    parameters:
    - id: pt1
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示曲线的起始点。"
    - id: pt2
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示曲线的第一个控制点。"
    - id: pt3
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示曲线的第二个控制点。"
    - id: pt4
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示曲线的终结点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将三次方贝塞尔曲线添加到当前的图。"
  remarks: "三次方曲线通过使用第二个和第三个点为控制点构造从第一个点到四个点。       如果没有上一行或图中的曲线线段，添加一条线连接到三次方曲线的起始点的前一条线段的终结点。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds a cubic Bézier curve defined by the points (50, 50), (70, 0), (100, 120), and (150, 50) to the path.  \n  \n-   Closes the curve.  \n  \n-   Draws the path to screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/csharp/745fdee9-1ec2-4fd8-a91a-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/cpp/745fdee9-1ec2-4fd8-a91a-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#2](~/add/codesnippet/visualbasic/745fdee9-1ec2-4fd8-a91a-_1.vb)]"
  syntax:
    content: public void AddBezier (int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
    parameters:
    - id: x1
      type: System.Int32
      description: "曲线的起始点 x 坐标。"
    - id: y1
      type: System.Int32
      description: "曲线的起始点的 y 坐标。"
    - id: x2
      type: System.Int32
      description: "曲线的第一个控制点的 x 坐标。"
    - id: y2
      type: System.Int32
      description: "曲线的第一个控制点的 y 坐标。"
    - id: x3
      type: System.Int32
      description: "曲线的第二个控制点的 x 坐标。"
    - id: y3
      type: System.Int32
      description: "曲线的第二个控制点的 y 坐标。"
    - id: x4
      type: System.Int32
      description: "曲线的终结点的 x 坐标。"
    - id: y4
      type: System.Int32
      description: "曲线的终结点的 y 坐标。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将三次方贝塞尔曲线添加到当前的图。"
  remarks: "三次方曲线通过使用第二个和第三个点为控制点构造从第一个点到四个点。       如果没有上一行或图中的曲线线段，添加一条线连接到三次方曲线的起始点的前一条线段的终结点。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddBezier%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddBezier (float x1, float y1, float x2, float y2, float x3, float y3, float x4, float y4);
    parameters:
    - id: x1
      type: System.Single
      description: "曲线的起始点 x 坐标。"
    - id: y1
      type: System.Single
      description: "曲线的起始点的 y 坐标。"
    - id: x2
      type: System.Single
      description: "曲线的第一个控制点的 x 坐标。"
    - id: y2
      type: System.Single
      description: "曲线的第一个控制点的 y 坐标。"
    - id: x3
      type: System.Single
      description: "曲线的第二个控制点的 x 坐标。"
    - id: y3
      type: System.Single
      description: "曲线的第二个控制点的 y 坐标。"
    - id: x4
      type: System.Single
      description: "曲线的终结点的 x 坐标。"
    - id: y4
      type: System.Single
      description: "曲线的终结点的 y 坐标。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBezier*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])
  id: AddBeziers(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBeziers(Point[])
  nameWithType: GraphicsPath.AddBeziers(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将连接的三次方贝塞尔曲线的序列添加到当前的图。"
  remarks: "`points`参数指定终结点的数组和控制的连接的曲线的点。 第一条曲线的第一个点从构造中的第四个点`points`为控制点使用第二个和第三个点的数组。 前一条曲线的终结点，除了序列中的每个后续曲线需要完全三个点︰ 序列中的下两个点是控点和第三个是添加曲线的终结点。       如果没有以前的行或图中的曲线，添加一个行以连接到序列中的第一个三次曲线的起始点的前一条线段的终结点。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates an array of seven points (representing two connected Bézier curves).  \n  \n-   Creates a path and adds the series of Bézier curve points to the path.  \n  \n-   Draws the path to screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/csharp/m-system.drawing.drawing_9_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/cpp/m-system.drawing.drawing_9_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_9_1.vb)]"
  syntax:
    content: public void AddBeziers (System.Drawing.Point[] points);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])
  id: AddBeziers(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddBeziers(PointF[])
  nameWithType: GraphicsPath.AddBeziers(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将连接的三次方贝塞尔曲线的序列添加到当前的图。"
  remarks: "`points`参数指定终结点的数组和控制的连接的曲线的点。 第一条曲线的第一个点从构造中的第四个点`points`为控制点使用第二个和第三个点的数组。 前一条曲线的终结点，除了序列中的每个后续曲线需要完全三个点︰ 序列中的下两个点是控点和第三个是添加曲线的终结点。       如果没有以前的行或图中的曲线，添加一个行以连接到序列中的第一个三次曲线的起始点的前一条线段的终结点。"
  example:
  - "For an example see:  \n  \n [AddBeziers(Point\\[\\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False)"
  syntax:
    content: public void AddBeziers (System.Drawing.PointF[] points);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])
  id: AddClosedCurve(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddClosedCurve(Point[])
  nameWithType: GraphicsPath.AddClosedCurve(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将闭合的曲线添加到此路径。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。 如果第一个点和中的最后一个点`points`数组不是相同的点，通过连接这两个点来闭合曲线。 张力值不能设置为此方法，默认值为 0.5 的值相等。"
  example:
  - For an example, see [AddClosedCurve(Point\[\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddClosedCurve (System.Drawing.Point[] points);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])
  id: AddClosedCurve(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddClosedCurve(PointF[])
  nameWithType: GraphicsPath.AddClosedCurve(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将闭合的曲线添加到此路径。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。 如果第一个点和中的最后一个点`points`数组不是相同的点，通过连接这两个点来闭合曲线。 张力值不能设置为此方法，默认值为 0.5 的值相等。"
  example:
  - For an example, see [AddClosedCurve(Point\[\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddClosedCurve (System.Drawing.PointF[] points);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)
  id: AddClosedCurve(System.Drawing.Point[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddClosedCurve(Point[],Single)
  nameWithType: GraphicsPath.AddClosedCurve(Point[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[],Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将闭合的曲线添加到此路径。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。 如果第一个点和中的最后一个点`points`数组不是相同的点，通过连接这两个点来闭合曲线。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates an array of six points (representing a cardinal spline).  \n  \n-   Creates a path and adds the closed cardinal spline curves to the path (closed from the endpoint to the starting point).  \n  \n-   Draws the path to screen.  \n  \n Notice that a tension of 0.5 is used.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/csharp/1adde1d4-17a0-40d7-b406-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/cpp/1adde1d4-17a0-40d7-b406-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#4](~/add/codesnippet/visualbasic/1adde1d4-17a0-40d7-b406-_1.vb)]"
  syntax:
    content: public void AddClosedCurve (System.Drawing.Point[] points, float tension);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
    - id: tension
      type: System.Single
      description: "介于 0 和 1 指定量的曲线弯曲之间使用 0 表示最小曲线 （清晰角），1 表示平滑曲线的点之间的值。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)
  id: AddClosedCurve(System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddClosedCurve(PointF[],Single)
  nameWithType: GraphicsPath.AddClosedCurve(PointF[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[],Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将闭合的曲线添加到此路径。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。 如果第一个点和中的最后一个点`points`数组不是相同的点，通过连接这两个点来闭合曲线。"
  example:
  - For an example, see [AddClosedCurve(Point\[\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddClosedCurve (System.Drawing.PointF[] points, float tension);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
    - id: tension
      type: System.Single
      description: "介于 0 和 1 指定量的曲线弯曲之间使用 0 表示最小曲线 （清晰角），1 表示平滑曲线的点之间的值。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])
  id: AddCurve(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(Point[])
  nameWithType: GraphicsPath.AddCurve(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。"
  example:
  - For an example, see [AddClosedCurve(Point\[\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddCurve (System.Drawing.Point[] points);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])
  id: AddCurve(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(PointF[])
  nameWithType: GraphicsPath.AddCurve(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。 使用基数样条曲线的曲线穿越每个点数组中原因。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。"
  example:
  - For an example, see [AddCurve(Point\[\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddCurve (System.Drawing.PointF[] points);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)
  id: AddCurve(System.Drawing.Point[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(Point[],Single)
  nameWithType: GraphicsPath.AddCurve(Point[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。"
  example:
  - For an example, see [AddClosedCurve(Point\[\], Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddCurve (System.Drawing.Point[] points, float tension);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
    - id: tension
      type: System.Single
      description: "该值指定曲线控制点间弯曲的金额。 大于 1 的值将产生不可预知的结果。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)
  id: AddCurve(System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(PointF[],Single)
  nameWithType: GraphicsPath.AddCurve(PointF[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。"
  example:
  - For an example, see [AddCurve(Point\[\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddCurve (System.Drawing.PointF[] points, float tension);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
    - id: tension
      type: System.Single
      description: "该值指定曲线控制点间弯曲的金额。 大于 1 的值将产生不可预知的结果。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  id: AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(Point[],Int32,Int32,Single)
  nameWithType: GraphicsPath.AddCurve(Point[],Int32,Int32,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Int32,Int32,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。       曲线以指定数组中的点开始`offset`参数包括由指定的点 （段） 的数量和`numberOfSegments`。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates an array of four points (representing a cardinal spline).  \n  \n-   Creates a path and using the array of points, adds the curve to the path.  \n  \n-   Draws the path to the screen.  \n  \n Notice that while the array holds four points, there are only three segments, which is the number specified in the third argument of the call to <xref:System.Drawing.Drawing2D.GraphicsPath.AddCurve%2A>.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/csharp/ceb7a1f2-0262-4010-ad5e-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/cpp/ceb7a1f2-0262-4010-ad5e-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#5](~/add/codesnippet/visualbasic/ceb7a1f2-0262-4010-ad5e-_1.vb)]"
  syntax:
    content: public void AddCurve (System.Drawing.Point[] points, int offset, int numberOfSegments, float tension);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示定义曲线的点。"
    - id: offset
      type: System.Int32
      description: "中的元素的索引`points`用作曲线的第一个点的数组。"
    - id: numberOfSegments
      type: System.Int32
      description: "该值指定曲线控制点间弯曲的金额。 大于 1 的值将产生不可预知的结果。"
    - id: tension
      type: System.Single
      description: "该值指定曲线控制点间弯曲的金额。 大于 1 的值将产生不可预知的结果。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  id: AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddCurve(PointF[],Int32,Int32,Single)
  nameWithType: GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将样条曲线添加到当前的图。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。       曲线以指定数组中的点开始`offset`，包括由指定的点 （段） 的数量和`numberOfSegments`。"
  example:
  - For an example, see [AddCurve(Point\[\], Int32, Int32, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddCurve (System.Drawing.PointF[] points, int offset, int numberOfSegments, float tension);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示定义曲线的点。"
    - id: offset
      type: System.Int32
      description: "中的元素的索引`points`用作曲线的第一个点的数组。"
    - id: numberOfSegments
      type: System.Int32
      description: "用于绘制曲线的段的数。 段可视为一条连接两个点。"
    - id: tension
      type: System.Single
      description: "该值指定曲线控制点间弯曲的金额。 大于 1 的值将产生不可预知的结果。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)
  id: AddEllipse(System.Drawing.Rectangle)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddEllipse(Rectangle)
  nameWithType: GraphicsPath.AddEllipse(Rectangle)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "向当前路径中添加一个椭圆。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n Creates a bounding rectangle that defines an ellipse.  \n  \n Creates a path and adds the ellipse to the path.  \n  \n Draws the path to screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/csharp/m-system.drawing.drawing_15_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/cpp/m-system.drawing.drawing_15_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#6](~/add/codesnippet/visualbasic/m-system.drawing.drawing_15_1.vb)]"
  syntax:
    content: public void AddEllipse (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> ，它表示定义椭圆的边框。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)
  id: AddEllipse(System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddEllipse(RectangleF)
  nameWithType: GraphicsPath.AddEllipse(RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "向当前路径中添加一个椭圆。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.
  syntax:
    content: public void AddEllipse (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref> ，它表示定义椭圆的边框。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddEllipse(Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "向当前路径中添加一个椭圆。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.
  syntax:
    content: public void AddEllipse (int x, int y, int width, int height);
    parameters:
    - id: x
      type: System.Int32
      description: "定义椭圆的边框的左上角 x 坐标。"
    - id: y
      type: System.Int32
      description: "定义椭圆的边框的左上角的 y 坐标。"
    - id: width
      type: System.Int32
      description: "定义椭圆的边框宽度。"
    - id: height
      type: System.Int32
      description: "定义椭圆的边框的高度。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)
  id: AddEllipse(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddEllipse(Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddEllipse(Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "向当前路径中添加一个椭圆。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddEllipse%28System.Drawing.Rectangle%29>.
  syntax:
    content: public void AddEllipse (float x, float y, float width, float height);
    parameters:
    - id: x
      type: System.Single
      description: "定义椭圆的边框的左上角 x 坐标。"
    - id: y
      type: System.Single
      description: "定义椭圆的边框的左上角的 y 坐标。"
    - id: width
      type: System.Single
      description: "定义椭圆的边框宽度。"
    - id: height
      type: System.Single
      description: "定义椭圆的边框的高度。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)
  id: AddLine(System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLine(Point,Point)
  nameWithType: GraphicsPath.AddLine(Point,Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Point,Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条直线段追加到此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "此方法将添加到此<xref:System.Drawing.Drawing2D.GraphicsPath>。</xref:System.Drawing.Drawing2D.GraphicsPath>末尾的指定点定义的线段 如果没有以前的行或中的曲线<xref:System.Drawing.Drawing2D.GraphicsPath>，一条直线段绘制连接到新的直线线段的第一个点的路径中的最后一个点。</xref:System.Drawing.Drawing2D.GraphicsPath>"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddLine (System.Drawing.Point pt1, System.Drawing.Point pt2);
    parameters:
    - id: pt1
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示行的起始点。"
    - id: pt2
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示行的终结点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)
  id: AddLine(System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLine(PointF,PointF)
  nameWithType: GraphicsPath.AddLine(PointF,PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(PointF,PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条直线段追加到此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "此方法将添加到此<xref:System.Drawing.Drawing2D.GraphicsPath>。</xref:System.Drawing.Drawing2D.GraphicsPath>末尾的指定点定义的线段 如果没有以前的行或中的曲线<xref:System.Drawing.Drawing2D.GraphicsPath>，一条直线段绘制连接到新的直线线段的第一个点的路径中的最后一个点。</xref:System.Drawing.Drawing2D.GraphicsPath>"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddLine (System.Drawing.PointF pt1, System.Drawing.PointF pt2);
    parameters:
    - id: pt1
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示行的起始点。"
    - id: pt2
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示行的终结点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)
  id: AddLine(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLine(Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddLine(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条直线段追加到当前的图。"
  remarks: "此方法将添加到当前图末尾的指定点定义的线段。 如果没有以前的行或中的曲线<xref:System.Drawing.Drawing2D.GraphicsPath>，一条直线段绘制连接到新的直线线段的第一个点的路径中的最后一个点。</xref:System.Drawing.Drawing2D.GraphicsPath>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path, adds three lines that form a triangle, and then draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/csharp/d1f4d9ed-8464-43dc-8776-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/cpp/d1f4d9ed-8464-43dc-8776-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#7](~/add/codesnippet/visualbasic/d1f4d9ed-8464-43dc-8776-_1.vb)]"
  syntax:
    content: public void AddLine (int x1, int y1, int x2, int y2);
    parameters:
    - id: x1
      type: System.Int32
      description: "行的起始点 x 坐标。"
    - id: y1
      type: System.Int32
      description: "行的起始点的 y 坐标。"
    - id: x2
      type: System.Int32
      description: "直线终点的 x 坐标。"
    - id: y2
      type: System.Int32
      description: "直线终点的 y 坐标。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)
  id: AddLine(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLine(Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddLine(Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一条直线段追加到此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "此方法将添加到此<xref:System.Drawing.Drawing2D.GraphicsPath>。</xref:System.Drawing.Drawing2D.GraphicsPath>末尾的指定点定义的线段 如果没有以前的行或中的曲线<xref:System.Drawing.Drawing2D.GraphicsPath>，一条直线段绘制连接到新的直线线段的第一个点的路径中的最后一个点。</xref:System.Drawing.Drawing2D.GraphicsPath>"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddLine%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>.
  syntax:
    content: public void AddLine (float x1, float y1, float x2, float y2);
    parameters:
    - id: x1
      type: System.Single
      description: "行的起始点 x 坐标。"
    - id: y1
      type: System.Single
      description: "行的起始点的 y 坐标。"
    - id: x2
      type: System.Single
      description: "直线终点的 x 坐标。"
    - id: y2
      type: System.Single
      description: "直线终点的 y 坐标。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLine*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])
  id: AddLines(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLines(Point[])
  nameWithType: GraphicsPath.AddLines(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一系列连接的线条段追加到此末尾<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "如果没有以前的行或图中的曲线，添加一个行以连接前一条线段的行的起始点的终结点。 `points`参数指定终结点的数组。 前两个指定的第一行。 每个附加点指定一条直线段的起始点是在上一行的终结点的终结点。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates an array of four points that describe a triangle.  \n  \n-   Creates a path and adds the array of lines.  \n  \n-   Draws the path to screen.  \n  \n Notice that each line after the first point uses the previous point as the starting point and the new point as the endpoint.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/csharp/m-system.drawing.drawing_24_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/cpp/m-system.drawing.drawing_24_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#8](~/add/codesnippet/visualbasic/m-system.drawing.drawing_24_1.vb)]"
  syntax:
    content: public void AddLines (System.Drawing.Point[] points);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>这些结构表示要定义要添加的直线线段的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLines*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])
  id: AddLines(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddLines(PointF[])
  nameWithType: GraphicsPath.AddLines(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一系列连接的线条段追加到此末尾<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "如果没有以前的行或图中的曲线，添加一个行以连接前一条线段的行的起始点的终结点。 `points`参数指定终结点的数组。 前两个指定的第一行。 每个附加点指定一条直线段的起始点是在上一行的终结点的终结点。"
  example:
  - For an example, see [AddLines(Point\[\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddLines (System.Drawing.PointF[] points);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示要定义要添加的直线线段的点。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddLines*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)
  id: AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPath(GraphicsPath,Boolean)
  nameWithType: GraphicsPath.AddPath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPath(GraphicsPath,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "追加指定<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到此路径。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates two paths one a right-side-up triangle and the other an up-side-down triangle.  \n  \n-   Adds the second path to the first.  \n  \n-   Draws the resultant path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/csharp/4c3ef7f8-9fc4-4762-b79e-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/cpp/4c3ef7f8-9fc4-4762-b79e-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#9](~/add/codesnippet/visualbasic/4c3ef7f8-9fc4-4762-b79e-_1.vb)]"
  syntax:
    content: public void AddPath (System.Drawing.Drawing2D.GraphicsPath addingPath, bool connect);
    parameters:
    - id: addingPath
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "The <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref> to add."
    - id: connect
      type: System.Boolean
      description: "一个布尔值，指定第一个图中添加的路径是否为此路径中的最后一个图形的一部分。 值为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定 （如果可能） 添加的路径中的第一个图形是此路径中的最后一个图形的一部分。 值为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>指定添加的路径中的第一个图形是独立于此路径中的最后一个图形。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)
  id: AddPie(System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPie(Rectangle,Single,Single)
  nameWithType: GraphicsPath.AddPie(Rectangle,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Rectangle,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "添加到此路径的扇形的轮廓。"
  remarks: "扇形，该形状由一个椭圆和两条射线相交部分轮廓的终结点的部分概述定义。 部分轮廓开始`startAngle`（从 x 轴沿顺时针方向度量），并在结束`startAngle`  +  `sweepAngle`。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.
  syntax:
    content: public void AddPie (System.Drawing.Rectangle rect, float startAngle, float sweepAngle);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> ，它表示定义从中绘制饼图的椭圆的边框。"
    - id: startAngle
      type: System.Single
      description: "以度从 x 轴沿顺时针方向度量扇形区的起始角度。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和扇形区，以从顺时针旋转度为单位的结束`startAngle`。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  id: AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPie(Int32,Int32,Int32,Int32,Single,Single)
  nameWithType: GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "添加到此路径的扇形的轮廓。"
  remarks: "扇形，该形状由一个椭圆和两条射线相交部分轮廓的终结点的部分概述定义。 部分轮廓开始`startAngle`（从 x 轴沿顺时针方向度量），并在结束`startAngle`  +  `sweepAngle`。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a graphics path, adds the pie shape, and then draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/csharp/b8813bf5-5d25-47d2-b607-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/cpp/b8813bf5-5d25-47d2-b607-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#10](~/add/codesnippet/visualbasic/b8813bf5-5d25-47d2-b607-_1.vb)]"
  syntax:
    content: public void AddPie (int x, int y, int width, int height, float startAngle, float sweepAngle);
    parameters:
    - id: x
      type: System.Int32
      description: "定义将要从中绘制饼图的椭圆的边框的左上角 x 坐标。"
    - id: y
      type: System.Int32
      description: "定义将要从中绘制饼图的椭圆的边框的左上角的 y 坐标。"
    - id: width
      type: System.Int32
      description: "定义将要从中绘制饼图的椭圆的边框宽度。"
    - id: height
      type: System.Int32
      description: "定义将要从中绘制饼图的椭圆的边框的高度。"
    - id: startAngle
      type: System.Single
      description: "以度从 x 轴沿顺时针方向度量扇形区的起始角度。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和扇形区，以从顺时针旋转度为单位的结束`startAngle`。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  id: AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPie(Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "添加到此路径的扇形的轮廓。"
  remarks: "扇形，该形状由一个椭圆和两条射线相交部分轮廓的终结点的部分概述定义。 部分轮廓开始`startAngle`（从 x 轴沿顺时针方向度量），并在结束`startAngle`  +  `sweepAngle`。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddPie%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Single%2CSystem.Single%29>.
  syntax:
    content: public void AddPie (float x, float y, float width, float height, float startAngle, float sweepAngle);
    parameters:
    - id: x
      type: System.Single
      description: "定义将要从中绘制饼图的椭圆的边框的左上角 x 坐标。"
    - id: y
      type: System.Single
      description: "定义将要从中绘制饼图的椭圆的边框的左上角的 y 坐标。"
    - id: width
      type: System.Single
      description: "定义将要从中绘制饼图的椭圆的边框宽度。"
    - id: height
      type: System.Single
      description: "定义将要从中绘制饼图的椭圆的边框的高度。"
    - id: startAngle
      type: System.Single
      description: "以度从 x 轴沿顺时针方向度量扇形区的起始角度。"
    - id: sweepAngle
      type: System.Single
      description: "之间的角度`startAngle`和扇形区，以从顺时针旋转度为单位的结束`startAngle`。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPie*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])
  id: AddPolygon(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPolygon(Point[])
  nameWithType: GraphicsPath.AddPolygon(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(Point[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将多边形添加到此路径。"
  remarks: "中的点`points`数组指定的多边形的顶点。 如果数组中的第一个点不是最后一个点相同，这两个点都连接到关闭多边形。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates an array of points that defines a polygon.  \n  \n-   Creates a path and adds the polygon to the path.  \n  \n-   Draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/csharp/m-system.drawing.drawing_14_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/cpp/m-system.drawing.drawing_14_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#11](~/add/codesnippet/visualbasic/m-system.drawing.drawing_14_1.vb)]"
  syntax:
    content: public void AddPolygon (System.Drawing.Point[] points);
    parameters:
    - id: points
      type: System.Drawing.Point[]
      description: "数组<xref href=&quot;System.Drawing.Point&quot;></xref>定义要添加的多边形的结构。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])
  id: AddPolygon(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddPolygon(PointF[])
  nameWithType: GraphicsPath.AddPolygon(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(PointF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将多边形添加到此路径。"
  remarks: "中的点`points`数组指定的多边形的顶点。 如果数组中的第一个点不是最后一个点相同，这两个点都连接到关闭多边形。"
  example:
  - For an example, see [AddPolygon(Point\[\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddPolygon (System.Drawing.PointF[] points);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>定义要添加的多边形的结构。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)
  id: AddRectangle(System.Drawing.Rectangle)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddRectangle(Rectangle)
  nameWithType: GraphicsPath.AddRectangle(Rectangle)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将矩形添加到此路径。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Creates a rectangle and adds the rectangle to the path.  \n  \n-   Draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/csharp/m-system.drawing.drawing_13_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/cpp/m-system.drawing.drawing_13_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#12](~/add/codesnippet/visualbasic/m-system.drawing.drawing_13_1.vb)]"
  syntax:
    content: public void AddRectangle (System.Drawing.Rectangle rect);
    parameters:
    - id: rect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> ，它表示要添加的矩形。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)
  id: AddRectangle(System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddRectangle(RectangleF)
  nameWithType: GraphicsPath.AddRectangle(RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将矩形添加到此路径。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddRectangle%28System.Drawing.Rectangle%29>.
  syntax:
    content: public void AddRectangle (System.Drawing.RectangleF rect);
    parameters:
    - id: rect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref> ，它表示要添加的矩形。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])
  id: AddRectangles(System.Drawing.Rectangle[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddRectangles(Rectangle[])
  nameWithType: GraphicsPath.AddRectangles(Rectangle[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(Rectangle[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一系列矩形添加到此路径。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Creates an array of rectangles and adds the rectangles to the path.  \n  \n-   Draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/csharp/0c74854d-da2e-4c90-801f-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/cpp/0c74854d-da2e-4c90-801f-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#13](~/add/codesnippet/visualbasic/0c74854d-da2e-4c90-801f-_1.vb)]"
  syntax:
    content: public void AddRectangles (System.Drawing.Rectangle[] rects);
    parameters:
    - id: rects
      type: System.Drawing.Rectangle[]
      description: "数组<xref href=&quot;System.Drawing.Rectangle&quot;></xref>这些结构表示要添加的矩形。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])
  id: AddRectangles(System.Drawing.RectangleF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddRectangles(RectangleF[])
  nameWithType: GraphicsPath.AddRectangles(RectangleF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(RectangleF[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将一系列矩形添加到此路径。"
  remarks: ''
  example:
  - For an example, see [AddRectangles(Rectangle\[\])](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void AddRectangles (System.Drawing.RectangleF[] rects);
    parameters:
    - id: rects
      type: System.Drawing.RectangleF[]
      description: "数组<xref href=&quot;System.Drawing.RectangleF&quot;></xref>这些结构表示要添加的矩形。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)
  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddString(String,FontFamily,Int32,Single,Point,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将文本字符串添加到此路径。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Sets up string and font arguments.  \n  \n-   Adds the string to the path.  \n  \n-   Draws the string to the screen.  \n  \n There are two important things to be pointed out. First, notice that the `fontStyle` argument is cast as an integer. The AddString method requires this so that two or more <xref:System.Drawing.FontStyle> members can be combined to create the desired font style (in this case, <xref:System.Drawing.FontStyle> and <xref:System.Drawing.FontStyle>). Secondly, notice that the <xref:System.Drawing.Graphics.FillPath%2A> method is used rather than the <xref:System.Drawing.Graphics.DrawPath%2A> method. If <xref:System.Drawing.Graphics.FillPath%2A> is used, solid text is rendered, whereas if <xref:System.Drawing.Graphics.DrawPath%2A> is used, the text will be an outline style.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/csharp/6c72550e-791b-4037-846e-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/cpp/6c72550e-791b-4037-846e-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#14](~/add/codesnippet/visualbasic/6c72550e-791b-4037-846e-_1.vb)]"
  syntax:
    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Point origin, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: "<xref:System.String>添加</xref:System.String>"
    - id: family
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> ，表示与其绘制测试的字体的名称。"
    - id: style
      type: System.Int32
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>枚举，它表示的文本 （粗体、 斜体等） 相关的样式信息。 这必须可强制转换为整数 （请参阅本节后面的示例代码）。"
    - id: emSize
      type: System.Single
      description: "限定字符 em 方形框的高度。"
    - id: origin
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示文本的起始位置的点。"
    - id: format
      type: System.Drawing.StringFormat
      description: "A <xref href=&quot;System.Drawing.StringFormat&quot;> </xref> ，它指定文本格式信息，如行距和对齐方式。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)
  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将文本字符串添加到此路径。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.
  syntax:
    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.PointF origin, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: "<xref:System.String>添加</xref:System.String>"
    - id: family
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> ，表示与其绘制测试的字体的名称。"
    - id: style
      type: System.Int32
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>枚举，它表示的文本 （粗体、 斜体等） 相关的样式信息。 这必须可强制转换为整数 （请参阅本节后面的示例代码）。"
    - id: emSize
      type: System.Single
      description: "限定字符 em 方形框的高度。"
    - id: origin
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref>表示文本的起始位置的点。"
    - id: format
      type: System.Drawing.StringFormat
      description: "A <xref href=&quot;System.Drawing.StringFormat&quot;> </xref> ，它指定文本格式信息，如行距和对齐方式。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)
  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将文本字符串添加到此路径。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.
  syntax:
    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.Rectangle layoutRect, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: "<xref:System.String>添加</xref:System.String>"
    - id: family
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> ，表示与其绘制测试的字体的名称。"
    - id: style
      type: System.Int32
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>枚举，它表示的文本 （粗体、 斜体等） 相关的样式信息。 这必须可强制转换为整数 （请参阅本节后面的示例代码）。"
    - id: emSize
      type: System.Single
      description: "限定字符 em 方形框的高度。"
    - id: layoutRect
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref>表示限定文本的矩形。"
    - id: format
      type: System.Drawing.StringFormat
      description: "A <xref href=&quot;System.Drawing.StringFormat&quot;> </xref> ，它指定文本格式信息，如行距和对齐方式。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)
  id: AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将文本字符串添加到此路径。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.AddString%28System.String%2CSystem.Drawing.FontFamily%2CSystem.Int32%2CSystem.Single%2CSystem.Drawing.Point%2CSystem.Drawing.StringFormat%29>.
  syntax:
    content: public void AddString (string s, System.Drawing.FontFamily family, int style, float emSize, System.Drawing.RectangleF layoutRect, System.Drawing.StringFormat format);
    parameters:
    - id: s
      type: System.String
      description: "<xref:System.String>添加</xref:System.String>"
    - id: family
      type: System.Drawing.FontFamily
      description: "A <xref href=&quot;System.Drawing.FontFamily&quot;> </xref> ，表示与其绘制测试的字体的名称。"
    - id: style
      type: System.Int32
      description: "A <xref href=&quot;System.Drawing.FontStyle&quot;> </xref>枚举，它表示的文本 （粗体、 斜体等） 相关的样式信息。 这必须可强制转换为整数 （请参阅本节后面的示例代码）。"
    - id: emSize
      type: System.Single
      description: "限定字符 em 方形框的高度。"
    - id: layoutRect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示限定文本的矩形。"
    - id: format
      type: System.Drawing.StringFormat
      description: "A <xref href=&quot;System.Drawing.StringFormat&quot;> </xref> ，它指定文本格式信息，如行距和对齐方式。"
  overload: System.Drawing.Drawing2D.GraphicsPath.AddString*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers
  id: ClearMarkers
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: ClearMarkers()
  nameWithType: GraphicsPath.ClearMarkers()
  fullName: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "清除此路径中的所有标记。"
  remarks: "使用<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>方法来创建一种<xref:System.Drawing.Drawing2D.GraphicsPath>。</xref:System.Drawing.Drawing2D.GraphicsPath>中当前的位置标记</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> 使用<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>方法来循环访问的现有标记中的路径。</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>       标记用于分隔的子路径的组。 一个或多个子可以包含两个标记之间。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds several objects to the path.  \n  \n-   Adds markers to the path.  \n  \n-   Clears all markers from the path.  \n  \n-   Draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/csharp/m-system.drawing.drawing_21_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/cpp/m-system.drawing.drawing_21_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#15](~/add/codesnippet/visualbasic/m-system.drawing.drawing_21_1.vb)]"
  syntax:
    content: public void ClearMarkers ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Clone
  id: Clone
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Clone()
  nameWithType: GraphicsPath.Clone()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "创建此路径的一个精确副本。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds several figures to the path.  \n  \n-   Draws the path to the screen.  \n  \n-   Clones a copy of that path.  \n  \n-   Draws the new path to the screen.  \n  \n Notice that the call the Clone method must be cast as a <xref:System.Drawing.Drawing2D.GraphicsPath>.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/csharp/m-system.drawing.drawing_2_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/cpp/m-system.drawing.drawing_2_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#16](~/add/codesnippet/visualbasic/m-system.drawing.drawing_2_1.vb)]"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>此方法创建的、 强制转换为对象。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures
  id: CloseAllFigures
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: CloseAllFigures()
  nameWithType: GraphicsPath.CloseAllFigures()
  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "关闭此路径中的所有打开图表并开始一个新图形。 通过将行从其终结点连接到起始点，它关闭每个打开的图。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds several open figures to the path.  \n  \n-   Closes all figures in the path.  \n  \n-   Draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/csharp/m-system.drawing.drawing_23_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/cpp/m-system.drawing.drawing_23_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#17](~/add/codesnippet/visualbasic/m-system.drawing.drawing_23_1.vb)]"
  syntax:
    content: public void CloseAllFigures ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure
  id: CloseFigure
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: CloseFigure()
  nameWithType: GraphicsPath.CloseFigure()
  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseFigure()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "关闭当前图形并开始一个新图形。 如果当前图包含一系列连接的直线和曲线，该方法将关闭循环通过从终结点的一条线连接到的起始点。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a triangle by creating a new path, starting a figure, adding two intersecting lines to the figure, and then closing the figure to form a triangle. The path is then drawn to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/csharp/m-system.drawing.drawing_19_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/cpp/m-system.drawing.drawing_19_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#18](~/add/codesnippet/visualbasic/m-system.drawing.drawing_19_1.vb)]"
  syntax:
    content: public void CloseFigure ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.CloseFigure*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Dispose()
  nameWithType: GraphicsPath.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "释放所有资源由此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "调用 Dispose 允许使用的资源<xref:System.Drawing.Drawing2D.GraphicsPath>可以重新分配用于其他目的。</xref:System.Drawing.Drawing2D.GraphicsPath>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode
  id: FillMode
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: FillMode
  nameWithType: GraphicsPath.FillMode
  fullName: System.Drawing.Drawing2D.GraphicsPath.FillMode
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取或设置<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;></xref>该枚举确定将如何在此形状内部<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>填充。"
  syntax:
    content: public System.Drawing.Drawing2D.FillMode FillMode { get; set; }
    return:
      type: System.Drawing.Drawing2D.FillMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>枚举，它指定如何在此形状内部<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>填充。"
  overload: System.Drawing.Drawing2D.GraphicsPath.FillMode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Finalize()
  nameWithType: GraphicsPath.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "允许该对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~GraphicsPath ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten
  id: Flatten
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Flatten()
  nameWithType: GraphicsPath.Flatten()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将此路径中的每个曲线转换为一系列连接的线条线段。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.
  syntax:
    content: public void Flatten ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)
  id: Flatten(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Flatten(Matrix)
  nameWithType: GraphicsPath.Flatten(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用指定的转换，然后将转换中的每个曲线<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到一系列连接的线条线段。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%28System.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.
  syntax:
    content: public void Flatten (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>进行变换这<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>之前平展。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)
  id: Flatten(System.Drawing.Drawing2D.Matrix,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Flatten(Matrix,Single)
  nameWithType: GraphicsPath.Flatten(Matrix,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将转换中的每个曲线<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到一系列连接的线条线段。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path and a translation matrix.  \n  \n-   Adds a curve to the path using four points.  \n  \n-   Draws the path (curve) to the screen, using a black pen.  \n  \n-   Shifts the curve down 10 pixels and flattens it.  \n  \n-   Draws the curve to the screen using, a red pen.  \n  \n Notice that the red curve has flattened lines connecting the points.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/csharp/3641dbbe-5db3-4043-b7d1-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/cpp/3641dbbe-5db3-4043-b7d1-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#19](~/add/codesnippet/visualbasic/3641dbbe-5db3-4043-b7d1-_1.vb)]"
  syntax:
    content: public void Flatten (System.Drawing.Drawing2D.Matrix matrix, float flatness);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>进行变换这<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>之前平展。"
    - id: flatness
      type: System.Single
      description: "指定曲线和其平展的近似值之间的最大允许的错误。 默认值为 0.25 的值。 减少平坦度值将增加的近似中的直线线段的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Flatten*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds
  id: GetBounds
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GetBounds()
  nameWithType: GraphicsPath.GetBounds()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "返回一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: '返回的边框的大小会影响端帽、 钢笔的宽度，和钢笔斜接限制的类型，并因此生成&quot;松配合&quot;于被限定路径。 近似公式是︰ 初始边界矩形被放大钢笔的宽度，并且此结果乘以斜接限制，以及一些其他的边距，以容纳端帽。'
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Adds an ellipse (circle) to it and draws it to the screen.  \n  \n-   Retrieves the bounding rectangle for the circle with a call to GetBounds and draws the rectangle to the screen.  \n  \n-   Creates a second graphics path.  \n  \n-   Adds a circle and widens the path to a width of 10.  \n  \n-   Draws the path to the screen.  \n  \n-   Retrieves the bounding rectangle for the second circle.  \n  \n-   Draws the bounding rectangle to the screen.  \n  \n-   Displays the rectangle size in a dialog box.  \n  \n Notice that the bounding rectangle on the right is larger (to account for the extra width of the line).  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/csharp/m-system.drawing.drawing_4_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/cpp/m-system.drawing.drawing_4_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#20](~/add/codesnippet/visualbasic/m-system.drawing.drawing_4_1.vb)]"
  syntax:
    content: public System.Drawing.RectangleF GetBounds ();
    parameters: []
    return:
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)
  id: GetBounds(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GetBounds(Matrix)
  nameWithType: GraphicsPath.GetBounds(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "返回一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>在转换此路径由指定<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref>。"
  remarks: '返回的边框的大小会影响端帽、 钢笔的宽度，和钢笔斜接限制的类型，并因此生成&quot;松配合&quot;于被限定路径。 近似公式是︰ 初始边界矩形被放大钢笔的宽度，并且此结果乘以斜接限制，以及一些其他的边距，以容纳端帽。'
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.
  syntax:
    content: public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到此路径，在计算的边框之前的转换。 此路径不永久转换;仅在计算的边框的过程中使用转换。"
    return:
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)
  id: GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GetBounds(Matrix,Pen)
  nameWithType: GraphicsPath.GetBounds(Matrix,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix,Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "返回一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>在转换的当前路径由指定<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;></xref>和绘制具有指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>。"
  remarks: '返回的边框的大小会影响端帽、 钢笔的宽度，和钢笔斜接限制的类型，并因此生成&quot;松配合&quot;于被限定路径。 近似公式是︰ 初始边界矩形被放大钢笔的宽度，并且此结果乘以斜接限制，以及一些其他的边距，以容纳端帽。'
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.GetBounds>.
  syntax:
    content: public System.Drawing.RectangleF GetBounds (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Pen pen);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "<xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到此路径，在计算的边框之前的转换。 此路径不永久转换;仅在计算的边框的过程中使用转换。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>用于绘制<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
    return:
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示一个矩形，它限定此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.GetBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint
  id: GetLastPoint
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: GetLastPoint()
  nameWithType: GraphicsPath.GetLastPoint()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取最后一个点中<xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>此数组<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。</xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path, adds a line to the path, and then gets the last point in the path.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/csharp/m-system.drawing.drawing_10_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/cpp/m-system.drawing.drawing_10_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#21](~/add/codesnippet/visualbasic/m-system.drawing.drawing_10_1.vb)]"
  syntax:
    content: public System.Drawing.PointF GetLastPoint ();
    parameters: []
    return:
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，表示在此的最后一个点<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)
  id: IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Point,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (System.Drawing.Point point, System.Drawing.Pen pen);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref> ，它指定要测试的位置。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)
  id: IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(PointF,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (System.Drawing.PointF point, System.Drawing.Pen pen);
    parameters:
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，它指定要测试的位置。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)
  id: IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Point,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;></xref>和使用指定<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。 世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (System.Drawing.Point pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref> ，它指定要测试的位置。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)
  id: IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(PointF,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;></xref>和使用指定<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。 世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (System.Drawing.PointF pt, System.Drawing.Pen pen, System.Drawing.Graphics graphics);
    parameters:
    - id: pt
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，它指定要测试的位置。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)
  id: IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Int32,Int32,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen);
    parameters:
    - id: x
      type: System.Int32
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Int32
      description: "要测试的点的 y 坐标。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)
  id: IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Single,Single,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen);
    parameters:
    - id: x
      type: System.Single
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Single
      description: "要测试的点的 y 坐标。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)
  id: IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Int32,Int32,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;></xref>和使用指定<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。 世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds a rectangle to the path.  \n  \n-   Creates a wide pen and widens the path with that pen (to make the example clearer),  \n  \n-   Tests a point (100, 50) to see if it lies within (under) one of the edges of the rectangle by calling IsOutlineVisible.  \n  \n The result is shown in the message box (in this case, true). In other words the edge is rendered over that point.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/csharp/87b60199-549b-488d-9f2b-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/cpp/87b60199-549b-488d-9f2b-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#22](~/add/codesnippet/visualbasic/87b60199-549b-488d-9f2b-_1.vb)]"
  syntax:
    content: public bool IsOutlineVisible (int x, int y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);
    parameters:
    - id: x
      type: System.Int32
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Int32
      description: "要测试的点的 y 坐标。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)
  id: IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsOutlineVisible(Single,Single,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制并用指定<xref href=&quot;System.Drawing.Pen&quot;></xref>和使用指定<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "此方法进行测试以查看是否给定的路径的轮廓的呈现可见指定点处。 世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用参数。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Pen%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsOutlineVisible (float x, float y, System.Drawing.Pen pen, System.Drawing.Graphics graphics);
    parameters:
    - id: x
      type: System.Single
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Single
      description: "要测试的点的 y 坐标。"
    - id: pen
      type: System.Drawing.Pen
      description: "<xref href=&quot;System.Drawing.Pen&quot;> </xref>测试。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在 （下） 此大纲<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>绘制指定<xref href=&quot;System.Drawing.Pen&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)
  id: IsVisible(System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Point)
  nameWithType: GraphicsPath.IsVisible(Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.
  syntax:
    content: public bool IsVisible (System.Drawing.Point point);
    parameters:
    - id: point
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref> ，表示要测试的点。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)
  id: IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(PointF)
  nameWithType: GraphicsPath.IsVisible(PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsVisible (System.Drawing.PointF point);
    parameters:
    - id: point
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，表示要测试的点。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Point,Graphics)
  nameWithType: GraphicsPath.IsVisible(Point,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用参数。"
  example:
  - For an example, see `GraphicsPath.IsVisible Method (Int32, Int32, Graphics)`.
  syntax:
    content: public bool IsVisible (System.Drawing.Point pt, System.Drawing.Graphics graphics);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref> ，表示要测试的点。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  id: IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(PointF,Graphics)
  nameWithType: GraphicsPath.IsVisible(PointF,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用参数。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsVisible (System.Drawing.PointF pt, System.Drawing.Graphics graphics);
    parameters:
    - id: pt
      type: System.Drawing.PointF
      description: "A <xref href=&quot;System.Drawing.PointF&quot;> </xref> ，表示要测试的点。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定的点是否包含在此; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)
  id: IsVisible(System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Int32,Int32)
  nameWithType: GraphicsPath.IsVisible(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsVisible (int x, int y);
    parameters:
    - id: x
      type: System.Int32
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Int32
      description: "要测试的点的 y 坐标。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)
  id: IsVisible(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Single,Single)
  nameWithType: GraphicsPath.IsVisible(Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsVisible (float x, float y);
    parameters:
    - id: x
      type: System.Single
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Single
      description: "要测试的点的 y 坐标。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  id: IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Int32,Int32,Graphics)
  nameWithType: GraphicsPath.IsVisible(Int32,Int32,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>，使用指定<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path and adds an ellipse to the path.  \n  \n-   Tests whether the specified point is contained within the path.  \n  \n-   Displays the result in a dialog box.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/csharp/dcc5e859-c137-4241-9ba4-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/cpp/dcc5e859-c137-4241-9ba4-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#23](~/add/codesnippet/visualbasic/dcc5e859-c137-4241-9ba4-_1.vb)]"
  syntax:
    content: public bool IsVisible (int x, int y, System.Drawing.Graphics graphics);
    parameters:
    - id: x
      type: System.Int32
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Int32
      description: "要测试的点的 y 坐标。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  id: IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: IsVisible(Single,Single,Graphics)
  nameWithType: GraphicsPath.IsVisible(Single,Single,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single,Graphics)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示指定的点是否包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>中指定的可见剪辑区域<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "世界坐标给出了要测试的点的坐标。 转换矩阵`graphics`前测试可见性临时应用参数。"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.IsVisible%28System.Int32%2CSystem.Int32%2CSystem.Drawing.Graphics%29>.
  syntax:
    content: public bool IsVisible (float x, float y, System.Drawing.Graphics graphics);
    parameters:
    - id: x
      type: System.Single
      description: "要测试的点 x 坐标。"
    - id: y
      type: System.Single
      description: "要测试的点的 y 坐标。"
    - id: graphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>要测试可见性。"
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的点包含在此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.PathData
  id: PathData
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: PathData
  nameWithType: GraphicsPath.PathData
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathData
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取<xref href=&quot;System.Drawing.Drawing2D.PathData&quot;></xref>封装的点数组 (<code>points</code>) 和类型 (<code>types</code>) 此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  syntax:
    content: public System.Drawing.Drawing2D.PathData PathData { get; }
    return:
      type: System.Drawing.Drawing2D.PathData
      description: "A <xref href=&quot;System.Drawing.Drawing2D.PathData&quot;> </xref>封装的点数组和此类型<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPath.PathData*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints
  id: PathPoints
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: PathPoints
  nameWithType: GraphicsPath.PathPoints
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathPoints
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取在路径中的点。"
  syntax:
    content: public System.Drawing.PointF[] PathPoints { get; }
    return:
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>表示路径的对象。"
  overload: System.Drawing.Drawing2D.GraphicsPath.PathPoints*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes
  id: PathTypes
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: PathTypes
  nameWithType: GraphicsPath.PathTypes
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathTypes
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取的类型中的相应点<xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>数组。</xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>"
  remarks: "PathTypes 属性返回的字节数组指定路径中的点类型以及数据点的标志。 对于每个点，位 0 到 2 指示一个点的类型和 3 到 7 位保留一组指定的点属性的标志。 下表显示可能的值以及它们的含义。      |值 |这意味着 |  |-----------|-------------|  |&0; |指示点是一个数字的开始。 |  |&1; |指示点是一条线的两个终结点之一。 |  |&3; |指示点是终结点或控件点的三次方贝塞尔样条。 |  |&0;x7 |屏蔽指示的 point 类型的三个低顺序位之外的所有位。 |  |&0;x20 |指定点是一个标记。 |  |&0;x80 |指定此点是封闭的子路径 （图） 中的最后一个点。 |"
  syntax:
    content: public byte[] PathTypes { get; }
    return:
      type: System.Byte[]
      description: "在路径中指定相应的点的类型的字节数组。"
  overload: System.Drawing.Drawing2D.GraphicsPath.PathTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount
  id: PointCount
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: PointCount
  nameWithType: GraphicsPath.PointCount
  fullName: System.Drawing.Drawing2D.GraphicsPath.PointCount
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取中的元素数<> *1> 或<> *1> 数组。"
  syntax:
    content: public int PointCount { get; }
    return:
      type: System.Int32
      description: "一个整数，指定中的元素数<> *1> 或<> *1> 数组。"
  overload: System.Drawing.Drawing2D.GraphicsPath.PointCount*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Reset
  id: Reset
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Reset()
  nameWithType: GraphicsPath.Reset()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Reset()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "清空<> *1> 和<> *1> 数组和设置<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;></xref>到<xref href=&quot;System.Drawing.Drawing2D.FillMode&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds several primitives to it.  \n  \n-   Draws the path's points array to the screen.  \n  \n-   Resets the path to an empty state.  \n  \n-   Re-acquires the points array (if it exists).  \n  \n-   Draws the array to the screen.  \n  \n Notice that it finds no array following the reset call.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/csharp/m-system.drawing.drawing_8_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/cpp/m-system.drawing.drawing_8_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#24](~/add/codesnippet/visualbasic/m-system.drawing.drawing_8_1.vb)]"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse
  id: Reverse
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Reverse()
  nameWithType: GraphicsPath.Reverse()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Reverse()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "中的点的顺序反转<xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>此数组<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。</xref:System.Drawing.Drawing2D.GraphicsPath.PathPoints*>"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path and adds several primitives to the path.  \n  \n-   Draws the path's points array to the screen.  \n  \n-   Draws the reversed points array to the screen.  \n  \n Notice that the second listing of points is in reverse order from the first.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/csharp/m-system.drawing.drawing_22_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/cpp/m-system.drawing.drawing_22_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#25](~/add/codesnippet/visualbasic/m-system.drawing.drawing_22_1.vb)]"
  syntax:
    content: public void Reverse ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.Reverse*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers
  id: SetMarkers
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: SetMarkers()
  nameWithType: GraphicsPath.SetMarkers()
  fullName: System.Drawing.Drawing2D.GraphicsPath.SetMarkers()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "此设置标记<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "此方法可以用于分隔的路径部分路径上创建一个标记。 你可以然后使用<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>用于循环访问路径中的标记方法</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>       标记用于分隔的子路径的组。 可以在路径中的两个标记之间包含一个或多个子路径。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code creates a path and adds several primitives to the path separated by markers, and draws the path to the screen.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/csharp/m-system.drawing.drawing_7_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/cpp/m-system.drawing.drawing_7_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#26](~/add/codesnippet/visualbasic/m-system.drawing.drawing_7_1.vb)]"
  syntax:
    content: public void SetMarkers ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.SetMarkers*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure
  id: StartFigure
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: StartFigure()
  nameWithType: GraphicsPath.StartFigure()
  fullName: System.Drawing.Drawing2D.GraphicsPath.StartFigure()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "无需关闭当前图形中启动一个新图形。 添加到路径中的所有后续点添加到此新图。"
  remarks: "如果需要则用户必须保留原始的点。 原始的点转换为三次方贝塞尔曲线控制点内部，因此没有任何机制可返回原始的点。       此方法会启动新的子路径的路径中。 子路径使您能够将一个路径部分分成和使用<xref:System.Drawing.Drawing2D.GraphicsPathIterator>类以循环访问这些子路径。</xref:System.Drawing.Drawing2D.GraphicsPathIterator>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path.  \n  \n-   Adds two sets of figures. The first set of figures combines four primitives into two figures. The second set of figures combines the same four primitives (except that they are offset in the y-axis) into three figures.  \n  \n-   Draws all the figures to the screen.  \n  \n Notice the difference in the appearance between the two sets of figures.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/csharp/m-system.drawing.drawing_0_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/cpp/m-system.drawing.drawing_0_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#27](~/add/codesnippet/visualbasic/m-system.drawing.drawing_0_1.vb)]"
  syntax:
    content: public void StartFigure ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPath.StartFigure*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)
  id: Transform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Transform(Matrix)
  nameWithType: GraphicsPath.Transform(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Transform(Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用到此转换矩阵<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "转换可以缩放、 翻译、 旋转或扭曲<xref:System.Drawing.Drawing2D.GraphicsPath>.</xref:System.Drawing.Drawing2D.GraphicsPath>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path and adds an ellipse to the path.  \n  \n-   Draws path to the screen.  \n  \n-   Creates a transform matrix to translate the path 100 units in the x-axis direction.  \n  \n-   Draws the transformed path to the screen.  \n  \n Notice that the original ellipse is drawn in black and the transformed ellipse is drawn in red.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/csharp/40450369-76ad-4f55-a17b-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/cpp/40450369-76ad-4f55-a17b-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#28](~/add/codesnippet/visualbasic/40450369-76ad-4f55-a17b-_1.vb)]"
  syntax:
    content: public void Transform (System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它表示要应用的转换。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)
  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Warp(PointF[],RectangleF)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用 warp 转换，矩形和一个平行四边形，到此定义<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see [Warp(PointF\[\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect);
    parameters:
    - id: destPoints
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;> </xref> ，这些结构定义向其定义的矩形的平行四边形`srcRect`转换。 该数组可以包含三个或四个元素。 如果数组包含三个元素，也将暗示的平行四边形的右下角的前三个点。"
    - id: srcRect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示的矩形的转换定义的平行四边形`destPoints`。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)
  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Warp(PointF[],RectangleF,Matrix)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用 warp 转换，矩形和一个平行四边形，到此定义<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see [Warp(PointF\[\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: destPoints
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;> </xref> ，这些结构定义向其定义的矩形的平行四边形`srcRect`转换。 该数组可以包含三个或四个元素。 如果数组包含三个元素，也将暗示的平行四边形的右下角的前三个点。"
    - id: srcRect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示的矩形的转换定义的平行四边形`destPoints`。"
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到的路径的几何转换。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)
  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Warp(PointF[],RectangleF,Matrix,WarpMode)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用 warp 转换，矩形和一个平行四边形，到此定义<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - For an example, see [Warp(PointF\[\], RectangleF, Matrix, WarpMode, Single)](assetId:///M:System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)?qualifyHint=False&autoUpgrade=False).
  syntax:
    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode);
    parameters:
    - id: destPoints
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;></xref>定义向其定义的矩形的平行四边形的结构`srcRect`转换。 该数组可以包含三个或四个元素。 如果数组包含三个元素，也将暗示的平行四边形的右下角的前三个点。"
    - id: srcRect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示的矩形的转换定义的平行四边形`destPoints`。"
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到的路径的几何转换。"
    - id: warpMode
      type: System.Drawing.Drawing2D.WarpMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.WarpMode&quot;> </xref>指定此 warp 操作是使用透视还是使用双线性模式的枚举。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)
  id: Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "应用 warp 转换，矩形和一个平行四边形，到此定义<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path and adds a rectangle to the path.  \n  \n-   Draws that rectangle to the screen in black.  \n  \n-   Warps the path with a perspective warp.  \n  \n-   Draws the warped rectangle (path) to the screen in red.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/csharp/55b0be67-c94c-4de0-a933-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/cpp/55b0be67-c94c-4de0-a933-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#29](~/add/codesnippet/visualbasic/55b0be67-c94c-4de0-a933-_1.vb)]"
  syntax:
    content: public void Warp (System.Drawing.PointF[] destPoints, System.Drawing.RectangleF srcRect, System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.WarpMode warpMode, float flatness);
    parameters:
    - id: destPoints
      type: System.Drawing.PointF[]
      description: "数组<xref href=&quot;System.Drawing.PointF&quot;> </xref> ，这些结构定义向其定义的矩形的平行四边形`srcRect`转换。 该数组可以包含三个或四个元素。 如果数组包含三个元素，也将暗示的平行四边形的右下角的前三个点。"
    - id: srcRect
      type: System.Drawing.RectangleF
      description: "A <xref href=&quot;System.Drawing.RectangleF&quot;> </xref>表示的矩形的转换定义的平行四边形`destPoints`。"
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到的路径的几何转换。"
    - id: warpMode
      type: System.Drawing.Drawing2D.WarpMode
      description: "A <xref href=&quot;System.Drawing.Drawing2D.WarpMode&quot;> </xref>指定此 warp 操作是使用透视还是使用双线性模式的枚举。"
    - id: flatness
      type: System.Single
      description: "是一个介于 0 到 1，用于指定如何平面生成的路径。 有关详细信息，请参阅<xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*>方法。</xref:System.Drawing.Drawing2D.GraphicsPath.Flatten*>"
  overload: System.Drawing.Drawing2D.GraphicsPath.Warp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)
  id: Widen(System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Widen(Pen)
  nameWithType: GraphicsPath.Widen(Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "向该路径添加其他大纲。"
  remarks: "此方法在此创建原始行的周围的边框<xref:System.Drawing.Drawing2D.GraphicsPath>，与现有行和新的轮廓之间的距离等于的宽度的<xref:System.Drawing.Pen>扩大到调用中使用。</xref:System.Drawing.Pen> </xref:System.Drawing.Drawing2D.GraphicsPath> 如果你想要填充行之间的间距必须使用<xref:System.Drawing.Graphics.FillPath%2A>而不是<xref:System.Drawing.Graphics.DrawPath%2A>.</xref:System.Drawing.Graphics.DrawPath%2A> </xref:System.Drawing.Graphics.FillPath%2A>"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.
  syntax:
    content: public void Widen (System.Drawing.Pen pen);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: "A <xref href=&quot;System.Drawing.Pen&quot;> </xref>指定原始轮廓的路径和此方法创建新轮廓之间的宽度。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)
  id: Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Widen(Pen,Matrix)
  nameWithType: GraphicsPath.Widen(Pen,Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "添加到附加轮廓<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>。"
  remarks: "此方法在此创建原始行的周围的边框<xref:System.Drawing.Drawing2D.GraphicsPath>，与现有行和新的轮廓之间的距离等于的宽度的<xref:System.Drawing.Pen>扩大到调用中使用。</xref:System.Drawing.Pen> </xref:System.Drawing.Drawing2D.GraphicsPath> 如果你想要填充行之间的间距必须使用<xref:System.Drawing.Graphics.FillPath%2A>而不是<xref:System.Drawing.Graphics.DrawPath%2A>.</xref:System.Drawing.Graphics.DrawPath%2A> </xref:System.Drawing.Graphics.FillPath%2A>"
  example:
  - For an example, see <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%28System.Drawing.Pen%2CSystem.Drawing.Drawing2D.Matrix%2CSystem.Single%29>.
  syntax:
    content: public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: "A <xref href=&quot;System.Drawing.Pen&quot;> </xref>指定原始轮廓的路径和此方法创建新轮廓之间的宽度。"
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到的路径，然后扩大转换才能的转换。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)
  id: Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  langs:
  - csharp
  name: Widen(Pen,Matrix,Single)
  nameWithType: GraphicsPath.Widen(Pen,Matrix,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix,Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "替换此窗口<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>与包含此路径用指定的钢笔绘制时填充区域的曲线。"
  remarks: "此方法在此创建原始行的周围的边框<xref:System.Drawing.Drawing2D.GraphicsPath>，与现有行和新的轮廓之间的距离等于的宽度的<xref:System.Drawing.Pen>扩大到调用中使用。</xref:System.Drawing.Pen> </xref:System.Drawing.Drawing2D.GraphicsPath> 如果你想要填充行之间的间距必须使用<xref:System.Drawing.Graphics.FillPath%2A>而不是<xref:System.Drawing.Graphics.DrawPath%2A>.</xref:System.Drawing.Graphics.DrawPath%2A> </xref:System.Drawing.Graphics.FillPath%2A>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a path and adds two ellipses to the path.  \n  \n-   Draws the path in black.  \n  \n-   Widens the path.  \n  \n-   Draws the path in red.  \n  \n Notice that the second rendering uses <xref:System.Drawing.Graphics.FillPath%2A> instead of <xref:System.Drawing.Graphics.DrawPath%2A>, and hence the rendered figure has the outline filled.  \n  \n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/csharp/baafea63-e45c-4b80-99b6-_1.cs)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/cpp/baafea63-e45c-4b80-99b6-_1.cpp)]\n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathExamples#30](~/add/codesnippet/visualbasic/baafea63-e45c-4b80-99b6-_1.vb)]"
  syntax:
    content: public void Widen (System.Drawing.Pen pen, System.Drawing.Drawing2D.Matrix matrix, float flatness);
    parameters:
    - id: pen
      type: System.Drawing.Pen
      description: "A <xref href=&quot;System.Drawing.Pen&quot;> </xref>指定原始轮廓的路径和此方法创建新轮廓之间的宽度。"
    - id: matrix
      type: System.Drawing.Drawing2D.Matrix
      description: "A <xref href=&quot;System.Drawing.Drawing2D.Matrix&quot;> </xref> ，它指定要应用到的路径，然后扩大转换才能的转换。"
    - id: flatness
      type: System.Single
      description: "该值指定曲线展平。"
  overload: System.Drawing.Drawing2D.GraphicsPath.Widen*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath()
  nameWithType: GraphicsPath.GraphicsPath()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath()
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath(FillMode)
  nameWithType: GraphicsPath.GraphicsPath(FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(FillMode)
- uid: System.Drawing.Drawing2D.FillMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: FillMode
  nameWithType: FillMode
  fullName: System.Drawing.Drawing2D.FillMode
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath(Point[],Byte[])
  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[])
- uid: System.Drawing.Point[]
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point[]
  spec.csharp:
  - uid: System.Drawing.Point
    name: Point
    nameWithType: Point
    fullName: Point[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath(PointF[],Byte[])
  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[])
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.Point[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath(Point[],Byte[],FillMode)
  nameWithType: GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(Point[],Byte[],FillMode)
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor(System.Drawing.PointF[],System.Byte[],System.Drawing.Drawing2D.FillMode)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath(PointF[],Byte[],FillMode)
  nameWithType: GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GraphicsPath(PointF[],Byte[],FillMode)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddArc(Rectangle,Single,Single)
  nameWithType: GraphicsPath.AddArc(Rectangle,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Rectangle,Single,Single)
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Drawing.RectangleF,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddArc(RectangleF,Single,Single)
  nameWithType: GraphicsPath.AddArc(RectangleF,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(RectangleF,Single,Single)
- uid: System.Drawing.RectangleF
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddArc(Int32,Int32,Int32,Int32,Single,Single)
  nameWithType: GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Int32,Int32,Int32,Int32,Single,Single)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddArc(Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddArc(Single,Single,Single,Single,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBezier(Point,Point,Point,Point)
  nameWithType: GraphicsPath.AddBezier(Point,Point,Point,Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Point,Point,Point,Point)
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBezier(PointF,PointF,PointF,PointF)
  nameWithType: GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(PointF,PointF,PointF,PointF)
- uid: System.Drawing.PointF
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBezier(Single,Single,Single,Single,Single,Single,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBeziers(Point[])
  nameWithType: GraphicsPath.AddBeziers(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(Point[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBeziers(PointF[])
  nameWithType: GraphicsPath.AddBeziers(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddBeziers(PointF[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddClosedCurve(Point[])
  nameWithType: GraphicsPath.AddClosedCurve(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddClosedCurve(PointF[])
  nameWithType: GraphicsPath.AddClosedCurve(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.Point[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddClosedCurve(Point[],Single)
  nameWithType: GraphicsPath.AddClosedCurve(Point[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(Point[],Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddClosedCurve(PointF[],Single)
  nameWithType: GraphicsPath.AddClosedCurve(PointF[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve(PointF[],Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(Point[])
  nameWithType: GraphicsPath.AddCurve(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(PointF[])
  nameWithType: GraphicsPath.AddCurve(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(Point[],Single)
  nameWithType: GraphicsPath.AddCurve(Point[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(PointF[],Single)
  nameWithType: GraphicsPath.AddCurve(PointF[],Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.Point[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(Point[],Int32,Int32,Single)
  nameWithType: GraphicsPath.AddCurve(Point[],Int32,Int32,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(Point[],Int32,Int32,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve(System.Drawing.PointF[],System.Int32,System.Int32,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve(PointF[],Int32,Int32,Single)
  nameWithType: GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddCurve(PointF[],Int32,Int32,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.Rectangle)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddEllipse(Rectangle)
  nameWithType: GraphicsPath.AddEllipse(Rectangle)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Rectangle)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddEllipse(RectangleF)
  nameWithType: GraphicsPath.AddEllipse(RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(RectangleF)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddEllipse(Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Int32,Int32,Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddEllipse(Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddEllipse(Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddEllipse(Single,Single,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.Point,System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLine(Point,Point)
  nameWithType: GraphicsPath.AddLine(Point,Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Point,Point)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Drawing.PointF,System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLine(PointF,PointF)
  nameWithType: GraphicsPath.AddLine(PointF,PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(PointF,PointF)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLine(Int32,Int32,Int32,Int32)
  nameWithType: GraphicsPath.AddLine(Int32,Int32,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Int32,Int32,Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine(System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLine(Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddLine(Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLine(Single,Single,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLines(Point[])
  nameWithType: GraphicsPath.AddLines(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(Point[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLines(PointF[])
  nameWithType: GraphicsPath.AddLines(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddLines(PointF[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPath(GraphicsPath,Boolean)
  nameWithType: GraphicsPath.AddPath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPath(GraphicsPath,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Drawing.Rectangle,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPie(Rectangle,Single,Single)
  nameWithType: GraphicsPath.AddPie(Rectangle,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Rectangle,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPie(Int32,Int32,Int32,Int32,Single,Single)
  nameWithType: GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Int32,Int32,Int32,Int32,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPie(Single,Single,Single,Single,Single,Single)
  nameWithType: GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPie(Single,Single,Single,Single,Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.Point[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPolygon(Point[])
  nameWithType: GraphicsPath.AddPolygon(Point[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(Point[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(System.Drawing.PointF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPolygon(PointF[])
  nameWithType: GraphicsPath.AddPolygon(PointF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddPolygon(PointF[])
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.Rectangle)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangle(Rectangle)
  nameWithType: GraphicsPath.AddRectangle(Rectangle)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(Rectangle)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangle(RectangleF)
  nameWithType: GraphicsPath.AddRectangle(RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangle(RectangleF)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.Rectangle[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangles(Rectangle[])
  nameWithType: GraphicsPath.AddRectangles(Rectangle[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(Rectangle[])
- uid: System.Drawing.Rectangle[]
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle[]
  spec.csharp:
  - uid: System.Drawing.Rectangle
    name: Rectangle
    nameWithType: Rectangle
    fullName: Rectangle[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(System.Drawing.RectangleF[])
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangles(RectangleF[])
  nameWithType: GraphicsPath.AddRectangles(RectangleF[])
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddRectangles(RectangleF[])
- uid: System.Drawing.RectangleF[]
  parent: System.Drawing
  isExternal: false
  name: RectangleF
  nameWithType: RectangleF
  fullName: System.Drawing.RectangleF[]
  spec.csharp:
  - uid: System.Drawing.RectangleF
    name: RectangleF
    nameWithType: RectangleF
    fullName: RectangleF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Point,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddString(String,FontFamily,Int32,Single,Point,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Point,StringFormat)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.FontFamily
  parent: System.Drawing
  isExternal: false
  name: FontFamily
  nameWithType: FontFamily
  fullName: System.Drawing.FontFamily
- uid: System.Drawing.StringFormat
  parent: System.Drawing
  isExternal: false
  name: StringFormat
  nameWithType: StringFormat
  fullName: System.Drawing.StringFormat
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.PointF,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,PointF,StringFormat)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.Rectangle,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,Rectangle,StringFormat)
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString(System.String,System.Drawing.FontFamily,System.Int32,System.Single,System.Drawing.RectangleF,System.Drawing.StringFormat)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
  nameWithType: GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
  fullName: System.Drawing.Drawing2D.GraphicsPath.AddString(String,FontFamily,Int32,Single,RectangleF,StringFormat)
- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: ClearMarkers()
  nameWithType: GraphicsPath.ClearMarkers()
  fullName: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers()
- uid: System.Drawing.Drawing2D.GraphicsPath.Clone
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Clone()
  nameWithType: GraphicsPath.Clone()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: CloseAllFigures()
  nameWithType: GraphicsPath.CloseAllFigures()
  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures()
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: CloseFigure()
  nameWithType: GraphicsPath.CloseFigure()
  fullName: System.Drawing.Drawing2D.GraphicsPath.CloseFigure()
- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Dispose()
  nameWithType: GraphicsPath.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Dispose()
- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: FillMode
  nameWithType: GraphicsPath.FillMode
  fullName: System.Drawing.Drawing2D.GraphicsPath.FillMode
- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Finalize()
  nameWithType: GraphicsPath.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Finalize()
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Flatten()
  nameWithType: GraphicsPath.Flatten()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten()
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Flatten(Matrix)
  nameWithType: GraphicsPath.Flatten(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix)
- uid: System.Drawing.Drawing2D.Matrix
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Drawing.Drawing2D.Matrix
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten(System.Drawing.Drawing2D.Matrix,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Flatten(Matrix,Single)
  nameWithType: GraphicsPath.Flatten(Matrix,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Flatten(Matrix,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetBounds()
  nameWithType: GraphicsPath.GetBounds()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds()
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetBounds(Matrix)
  nameWithType: GraphicsPath.GetBounds(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix)
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds(System.Drawing.Drawing2D.Matrix,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetBounds(Matrix,Pen)
  nameWithType: GraphicsPath.GetBounds(Matrix,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetBounds(Matrix,Pen)
- uid: System.Drawing.Pen
  parent: System.Drawing
  isExternal: false
  name: Pen
  nameWithType: Pen
  fullName: System.Drawing.Pen
- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetLastPoint()
  nameWithType: GraphicsPath.GetLastPoint()
  fullName: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint()
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Point,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(PointF,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.Point,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Point,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Point,Pen,Graphics)
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Drawing.PointF,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(PointF,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(PointF,Pen,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Int32,Int32,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Single,Single,Pen)
  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Int32,System.Int32,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Int32,Int32,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Int32,Int32,Pen,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(System.Single,System.Single,System.Drawing.Pen,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible(Single,Single,Pen,Graphics)
  nameWithType: GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible(Single,Single,Pen,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Point)
  nameWithType: GraphicsPath.IsVisible(Point)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(PointF)
  nameWithType: GraphicsPath.IsVisible(PointF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.Point,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Point,Graphics)
  nameWithType: GraphicsPath.IsVisible(Point,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Point,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Drawing.PointF,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(PointF,Graphics)
  nameWithType: GraphicsPath.IsVisible(PointF,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(PointF,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Int32,Int32)
  nameWithType: GraphicsPath.IsVisible(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Single,Single)
  nameWithType: GraphicsPath.IsVisible(Single,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Int32,System.Int32,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Int32,Int32,Graphics)
  nameWithType: GraphicsPath.IsVisible(Int32,Int32,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Int32,Int32,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible(System.Single,System.Single,System.Drawing.Graphics)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible(Single,Single,Graphics)
  nameWithType: GraphicsPath.IsVisible(Single,Single,Graphics)
  fullName: System.Drawing.Drawing2D.GraphicsPath.IsVisible(Single,Single,Graphics)
- uid: System.Drawing.Drawing2D.GraphicsPath.PathData
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathData
  nameWithType: GraphicsPath.PathData
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathData
- uid: System.Drawing.Drawing2D.PathData
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: PathData
  nameWithType: PathData
  fullName: System.Drawing.Drawing2D.PathData
- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathPoints
  nameWithType: GraphicsPath.PathPoints
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathPoints
- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathTypes
  nameWithType: GraphicsPath.PathTypes
  fullName: System.Drawing.Drawing2D.GraphicsPath.PathTypes
- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PointCount
  nameWithType: GraphicsPath.PointCount
  fullName: System.Drawing.Drawing2D.GraphicsPath.PointCount
- uid: System.Drawing.Drawing2D.GraphicsPath.Reset
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Reset()
  nameWithType: GraphicsPath.Reset()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Reset()
- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Reverse()
  nameWithType: GraphicsPath.Reverse()
  fullName: System.Drawing.Drawing2D.GraphicsPath.Reverse()
- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: SetMarkers()
  nameWithType: GraphicsPath.SetMarkers()
  fullName: System.Drawing.Drawing2D.GraphicsPath.SetMarkers()
- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: StartFigure()
  nameWithType: GraphicsPath.StartFigure()
  fullName: System.Drawing.Drawing2D.GraphicsPath.StartFigure()
- uid: System.Drawing.Drawing2D.GraphicsPath.Transform(System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Transform(Matrix)
  nameWithType: GraphicsPath.Transform(Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Transform(Matrix)
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Warp(PointF[],RectangleF)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF)
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Warp(PointF[],RectangleF,Matrix)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix)
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Warp(PointF[],RectangleF,Matrix,WarpMode)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode)
- uid: System.Drawing.Drawing2D.WarpMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: WarpMode
  nameWithType: WarpMode
  fullName: System.Drawing.Drawing2D.WarpMode
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp(System.Drawing.PointF[],System.Drawing.RectangleF,System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.WarpMode,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
  nameWithType: GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Warp(PointF[],RectangleF,Matrix,WarpMode,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Widen(Pen)
  nameWithType: GraphicsPath.Widen(Pen)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen)
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Widen(Pen,Matrix)
  nameWithType: GraphicsPath.Widen(Pen,Matrix)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix)
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen(System.Drawing.Pen,System.Drawing.Drawing2D.Matrix,System.Single)
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Widen(Pen,Matrix,Single)
  nameWithType: GraphicsPath.Widen(Pen,Matrix,Single)
  fullName: System.Drawing.Drawing2D.GraphicsPath.Widen(Pen,Matrix,Single)
- uid: System.Drawing.Drawing2D.GraphicsPath.#ctor*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath.GraphicsPath
- uid: System.Drawing.Drawing2D.GraphicsPath.AddArc*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddArc
  nameWithType: GraphicsPath.AddArc
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBezier*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBezier
  nameWithType: GraphicsPath.AddBezier
- uid: System.Drawing.Drawing2D.GraphicsPath.AddBeziers*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddBeziers
  nameWithType: GraphicsPath.AddBeziers
- uid: System.Drawing.Drawing2D.GraphicsPath.AddClosedCurve*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddClosedCurve
  nameWithType: GraphicsPath.AddClosedCurve
- uid: System.Drawing.Drawing2D.GraphicsPath.AddCurve*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddCurve
  nameWithType: GraphicsPath.AddCurve
- uid: System.Drawing.Drawing2D.GraphicsPath.AddEllipse*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddEllipse
  nameWithType: GraphicsPath.AddEllipse
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLine*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLine
  nameWithType: GraphicsPath.AddLine
- uid: System.Drawing.Drawing2D.GraphicsPath.AddLines*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddLines
  nameWithType: GraphicsPath.AddLines
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPath*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPath
  nameWithType: GraphicsPath.AddPath
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPie*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPie
  nameWithType: GraphicsPath.AddPie
- uid: System.Drawing.Drawing2D.GraphicsPath.AddPolygon*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddPolygon
  nameWithType: GraphicsPath.AddPolygon
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangle*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangle
  nameWithType: GraphicsPath.AddRectangle
- uid: System.Drawing.Drawing2D.GraphicsPath.AddRectangles*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddRectangles
  nameWithType: GraphicsPath.AddRectangles
- uid: System.Drawing.Drawing2D.GraphicsPath.AddString*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: AddString
  nameWithType: GraphicsPath.AddString
- uid: System.Drawing.Drawing2D.GraphicsPath.ClearMarkers*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: ClearMarkers
  nameWithType: GraphicsPath.ClearMarkers
- uid: System.Drawing.Drawing2D.GraphicsPath.Clone*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Clone
  nameWithType: GraphicsPath.Clone
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseAllFigures*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: CloseAllFigures
  nameWithType: GraphicsPath.CloseAllFigures
- uid: System.Drawing.Drawing2D.GraphicsPath.CloseFigure*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: CloseFigure
  nameWithType: GraphicsPath.CloseFigure
- uid: System.Drawing.Drawing2D.GraphicsPath.Dispose*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Dispose
  nameWithType: GraphicsPath.Dispose
- uid: System.Drawing.Drawing2D.GraphicsPath.FillMode*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: FillMode
  nameWithType: GraphicsPath.FillMode
- uid: System.Drawing.Drawing2D.GraphicsPath.Finalize*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Finalize
  nameWithType: GraphicsPath.Finalize
- uid: System.Drawing.Drawing2D.GraphicsPath.Flatten*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Flatten
  nameWithType: GraphicsPath.Flatten
- uid: System.Drawing.Drawing2D.GraphicsPath.GetBounds*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetBounds
  nameWithType: GraphicsPath.GetBounds
- uid: System.Drawing.Drawing2D.GraphicsPath.GetLastPoint*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: GetLastPoint
  nameWithType: GraphicsPath.GetLastPoint
- uid: System.Drawing.Drawing2D.GraphicsPath.IsOutlineVisible*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsOutlineVisible
  nameWithType: GraphicsPath.IsOutlineVisible
- uid: System.Drawing.Drawing2D.GraphicsPath.IsVisible*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: IsVisible
  nameWithType: GraphicsPath.IsVisible
- uid: System.Drawing.Drawing2D.GraphicsPath.PathData*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathData
  nameWithType: GraphicsPath.PathData
- uid: System.Drawing.Drawing2D.GraphicsPath.PathPoints*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathPoints
  nameWithType: GraphicsPath.PathPoints
- uid: System.Drawing.Drawing2D.GraphicsPath.PathTypes*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PathTypes
  nameWithType: GraphicsPath.PathTypes
- uid: System.Drawing.Drawing2D.GraphicsPath.PointCount*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: PointCount
  nameWithType: GraphicsPath.PointCount
- uid: System.Drawing.Drawing2D.GraphicsPath.Reset*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Reset
  nameWithType: GraphicsPath.Reset
- uid: System.Drawing.Drawing2D.GraphicsPath.Reverse*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Reverse
  nameWithType: GraphicsPath.Reverse
- uid: System.Drawing.Drawing2D.GraphicsPath.SetMarkers*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: SetMarkers
  nameWithType: GraphicsPath.SetMarkers
- uid: System.Drawing.Drawing2D.GraphicsPath.StartFigure*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: StartFigure
  nameWithType: GraphicsPath.StartFigure
- uid: System.Drawing.Drawing2D.GraphicsPath.Transform*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Transform
  nameWithType: GraphicsPath.Transform
- uid: System.Drawing.Drawing2D.GraphicsPath.Warp*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Warp
  nameWithType: GraphicsPath.Warp
- uid: System.Drawing.Drawing2D.GraphicsPath.Widen*
  parent: System.Drawing.Drawing2D.GraphicsPath
  isExternal: false
  name: Widen
  nameWithType: GraphicsPath.Widen
