### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.MemberChangeConflict
  id: MemberChangeConflict
  children:
  - System.Data.Linq.MemberChangeConflict.CurrentValue
  - System.Data.Linq.MemberChangeConflict.DatabaseValue
  - System.Data.Linq.MemberChangeConflict.IsModified
  - System.Data.Linq.MemberChangeConflict.IsResolved
  - System.Data.Linq.MemberChangeConflict.Member
  - System.Data.Linq.MemberChangeConflict.OriginalValue
  - System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  - System.Data.Linq.MemberChangeConflict.Resolve(System.Object)
  langs:
  - csharp
  name: MemberChangeConflict
  nameWithType: MemberChangeConflict
  fullName: System.Data.Linq.MemberChangeConflict
  type: Class
  summary: "表示在其尝试进行更新失败，因为客户端上次读取它们以来已更新了成员值的情况。"
  remarks: "下面的示例演示如何检索有关成员冲突信息。"
  example:
  - >-
    [!code-cs[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/csharp/memconflict/program.cs#1)]
     [!code-vb[System.Data.Linq.MemberChangeConflict#1](~/add/codesnippet/visualbasic/memconflict/module1.vb#1)]
  syntax:
    content: public sealed class MemberChangeConflict
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.CurrentValue
  id: CurrentValue
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: CurrentValue
  nameWithType: MemberChangeConflict.CurrentValue
  fullName: System.Data.Linq.MemberChangeConflict.CurrentValue
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取发生冲突的成员的当前值。"
  syntax:
    content: public object CurrentValue { get; }
    return:
      type: System.Object
      description: "发生冲突的对象。"
  overload: System.Data.Linq.MemberChangeConflict.CurrentValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue
  id: DatabaseValue
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: DatabaseValue
  nameWithType: MemberChangeConflict.DatabaseValue
  fullName: System.Data.Linq.MemberChangeConflict.DatabaseValue
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取发生冲突的成员的数据库值。"
  syntax:
    content: public object DatabaseValue { get; }
    return:
      type: System.Object
      description: "发生冲突的对象的值。"
  overload: System.Data.Linq.MemberChangeConflict.DatabaseValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.IsModified
  id: IsModified
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: IsModified
  nameWithType: MemberChangeConflict.IsModified
  fullName: System.Data.Linq.MemberChangeConflict.IsModified
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取一个值，该值指示是否因为最后一个数据库读取或刷新已更改的成员数据。"
  remarks: "使用属性来合并新值，而不会覆盖挂起的更新。"
  syntax:
    content: public bool IsModified { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果已更改的成员数据。"
  overload: System.Data.Linq.MemberChangeConflict.IsModified*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.IsResolved
  id: IsResolved
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: IsResolved
  nameWithType: MemberChangeConflict.IsResolved
  fullName: System.Data.Linq.MemberChangeConflict.IsResolved
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取一个值，该值指示是否已解决冲突。"
  remarks: "此属性是只读的将自动更新解决冲突。"
  syntax:
    content: public bool IsResolved { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果该冲突已得到解决。"
  overload: System.Data.Linq.MemberChangeConflict.IsResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.Member
  id: Member
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: Member
  nameWithType: MemberChangeConflict.Member
  fullName: System.Data.Linq.MemberChangeConflict.Member
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取有关成员的元数据信息发生冲突。"
  syntax:
    content: public System.Reflection.MemberInfo Member { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "有关发生冲突的成员的信息。"
  overload: System.Data.Linq.MemberChangeConflict.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.OriginalValue
  id: OriginalValue
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: OriginalValue
  nameWithType: MemberChangeConflict.OriginalValue
  fullName: System.Data.Linq.MemberChangeConflict.OriginalValue
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取发生冲突的成员的原始值。"
  syntax:
    content: public object OriginalValue { get; }
    return:
      type: System.Object
      description: "在冲突成员的原始值。"
  overload: System.Data.Linq.MemberChangeConflict.OriginalValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  id: Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: Resolve(RefreshMode)
  nameWithType: MemberChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.MemberChangeConflict.Resolve(RefreshMode)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "使用<xref href=&quot;System.Data.Linq.RefreshMode&quot;></xref>参数用于自动指定要将当前值设置为发生冲突的成员的值。"
  remarks: "下面的示例显示哪些结果生成的<xref:System.Data.Linq.RefreshMode>。</xref:System.Data.Linq.RefreshMode>使用不同的值"
  example:
  - "The following example overwrites current values with values from the database.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#1](~/add/codesnippet/csharp/refreshmode/program.cs#1)]\n [!code-vb[System.Data.Linq.RefreshMode#1](~/add/codesnippet/visualbasic/refreshmode/module1.vb#1)]  \n  \n The following example shows how to swap the original value with the values retrieved from the database. No current value is modified.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#2](~/add/codesnippet/csharp/refreshmode/program.cs#2)]\n [!code-vb[System.Data.Linq.RefreshMode#2](~/add/codesnippet/visualbasic/refreshmode/module1.vb#2)]  \n  \n The following example keeps the current values that have been changed, but updates the other values with database values.  \n  \n [!code-cs[System.Data.Linq.RefreshMode#3](~/add/codesnippet/csharp/refreshmode/program.cs#3)]\n [!code-vb[System.Data.Linq.RefreshMode#3](~/add/codesnippet/visualbasic/refreshmode/module1.vb#3)]"
  syntax:
    content: public void Resolve (System.Data.Linq.RefreshMode refreshMode);
    parameters:
    - id: refreshMode
      type: System.Data.Linq.RefreshMode
      description: "See <xref href=&quot;System.Data.Linq.RefreshMode&quot;></xref>."
  overload: System.Data.Linq.MemberChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Object)
  id: Resolve(System.Object)
  parent: System.Data.Linq.MemberChangeConflict
  langs:
  - csharp
  name: Resolve(Object)
  nameWithType: MemberChangeConflict.Resolve(Object)
  fullName: System.Data.Linq.MemberChangeConflict.Resolve(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "指定要将当前值设置为发生冲突的成员的值。"
  remarks: "此处设置的值是要用于后续的值<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作。</xref:System.Data.Linq.DataContext.SubmitChanges%2A>"
  syntax:
    content: public void Resolve (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要设置为当前值的值。"
  overload: System.Data.Linq.MemberChangeConflict.Resolve*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.MemberChangeConflict.CurrentValue
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: CurrentValue
  nameWithType: MemberChangeConflict.CurrentValue
  fullName: System.Data.Linq.MemberChangeConflict.CurrentValue
- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: DatabaseValue
  nameWithType: MemberChangeConflict.DatabaseValue
  fullName: System.Data.Linq.MemberChangeConflict.DatabaseValue
- uid: System.Data.Linq.MemberChangeConflict.IsModified
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: IsModified
  nameWithType: MemberChangeConflict.IsModified
  fullName: System.Data.Linq.MemberChangeConflict.IsModified
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.MemberChangeConflict.IsResolved
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: MemberChangeConflict.IsResolved
  fullName: System.Data.Linq.MemberChangeConflict.IsResolved
- uid: System.Data.Linq.MemberChangeConflict.Member
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: Member
  nameWithType: MemberChangeConflict.Member
  fullName: System.Data.Linq.MemberChangeConflict.Member
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Data.Linq.MemberChangeConflict.OriginalValue
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: OriginalValue
  nameWithType: MemberChangeConflict.OriginalValue
  fullName: System.Data.Linq.MemberChangeConflict.OriginalValue
- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: Resolve(RefreshMode)
  nameWithType: MemberChangeConflict.Resolve(RefreshMode)
  fullName: System.Data.Linq.MemberChangeConflict.Resolve(RefreshMode)
- uid: System.Data.Linq.RefreshMode
  parent: System.Data.Linq
  isExternal: false
  name: RefreshMode
  nameWithType: RefreshMode
  fullName: System.Data.Linq.RefreshMode
- uid: System.Data.Linq.MemberChangeConflict.Resolve(System.Object)
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: Resolve(Object)
  nameWithType: MemberChangeConflict.Resolve(Object)
  fullName: System.Data.Linq.MemberChangeConflict.Resolve(Object)
- uid: System.Data.Linq.MemberChangeConflict.CurrentValue*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: CurrentValue
  nameWithType: MemberChangeConflict.CurrentValue
- uid: System.Data.Linq.MemberChangeConflict.DatabaseValue*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: DatabaseValue
  nameWithType: MemberChangeConflict.DatabaseValue
- uid: System.Data.Linq.MemberChangeConflict.IsModified*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: IsModified
  nameWithType: MemberChangeConflict.IsModified
- uid: System.Data.Linq.MemberChangeConflict.IsResolved*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: IsResolved
  nameWithType: MemberChangeConflict.IsResolved
- uid: System.Data.Linq.MemberChangeConflict.Member*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: Member
  nameWithType: MemberChangeConflict.Member
- uid: System.Data.Linq.MemberChangeConflict.OriginalValue*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: OriginalValue
  nameWithType: MemberChangeConflict.OriginalValue
- uid: System.Data.Linq.MemberChangeConflict.Resolve*
  parent: System.Data.Linq.MemberChangeConflict
  isExternal: false
  name: Resolve
  nameWithType: MemberChangeConflict.Resolve
