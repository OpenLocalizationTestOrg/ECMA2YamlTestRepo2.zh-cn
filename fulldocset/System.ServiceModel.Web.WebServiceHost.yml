### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Web.WebServiceHost
  id: WebServiceHost
  children:
  - System.ServiceModel.Web.WebServiceHost.#ctor
  - System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  - System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  - System.ServiceModel.Web.WebServiceHost.OnOpening
  langs:
  - csharp
  name: WebServiceHost
  nameWithType: WebServiceHost
  fullName: System.ServiceModel.Web.WebServiceHost
  type: Class
  summary: "A <xref href=&quot;System.ServiceModel.ServiceHost&quot;> </xref>派生类补充[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]REST 编程模型。"
  remarks: "如果 WebServiceHost 服务说明中不找到任何终结点，它会自动为 HTTP 和 HTTPS 基址的服务的基址创建默认终结点。 它不创建终结点自动如果用户已显式配置终结点，在基址。 WebServiceHost 会自动配置终结点的绑定，若要使用的关联的 Internet 信息服务 (IIS) 安全设置在安全虚拟目录中使用时。       当创建默认 HTTP 终结点，WebServiceHost 同时禁用 HTTP 帮助页和 Web 服务描述语言 (WSDL) GET 功能使元数据终结点不干扰默认 HTTP 终结点。       此外，WebServiceHost 类将添加<xref:System.ServiceModel.Description.WebHttpBehavior>到所有终结点，不能已具有的行为和具有一种<xref:System.ServiceModel.Configuration.WebMessageEncodingElement>。</xref:System.ServiceModel.Configuration.WebMessageEncodingElement> </xref:System.ServiceModel.Description.WebHttpBehavior> 如果在服务上的所有操作都具有空的 HTTP 请求的正文，或者将 HTTP 请求正文以流形式处理，然后 WebServiceHost 自动配置适当的内容类型映射器绑定。"
  example:
  - "The following example shows how to use the WebServiceHost class to host a service that makes use of the [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)] REST programming model.  \n  \n [!code-cs[WebServiceHost#0](~/add/codesnippet/csharp/t-system.servicemodel.we_0_1.cs)]\n [!code-vb[WebServiceHost#0](~/add/codesnippet/visualbasic/t-system.servicemodel.we_0_1.vb)]"
  syntax:
    content: 'public class WebServiceHost : System.ServiceModel.ServiceHost'
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  - System.ServiceModel.ServiceHostBase
  - System.ServiceModel.ServiceHost
  implements: []
  inheritedMembers:
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHost.AddServiceEndpoint(System.Type,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHost.ApplyConfiguration
  - System.ServiceModel.ServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Object,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.InitializeDescription(System.Type,System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHost.OnClosed
  - System.ServiceModel.ServiceHost.SingletonInstance
  - System.ServiceModel.ServiceHostBase.AddBaseAddress(System.Uri)
  - System.ServiceModel.ServiceHostBase.AddDefaultEndpoints
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.ServiceModel.Description.ServiceEndpoint)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.String,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri)
  - System.ServiceModel.ServiceHostBase.AddServiceEndpoint(System.String,System.ServiceModel.Channels.Binding,System.Uri,System.Uri)
  - System.ServiceModel.ServiceHostBase.Authentication
  - System.ServiceModel.ServiceHostBase.Authorization
  - System.ServiceModel.ServiceHostBase.BaseAddresses
  - System.ServiceModel.ServiceHostBase.ChannelDispatchers
  - System.ServiceModel.ServiceHostBase.CloseTimeout
  - System.ServiceModel.ServiceHostBase.Credentials
  - System.ServiceModel.ServiceHostBase.DefaultCloseTimeout
  - System.ServiceModel.ServiceHostBase.DefaultOpenTimeout
  - System.ServiceModel.ServiceHostBase.Description
  - System.ServiceModel.ServiceHostBase.Extensions
  - System.ServiceModel.ServiceHostBase.ImplementedContracts
  - System.ServiceModel.ServiceHostBase.IncrementManualFlowControlLimit(System.Int32)
  - System.ServiceModel.ServiceHostBase.InitializeDescription(System.ServiceModel.UriSchemeKeyedCollection)
  - System.ServiceModel.ServiceHostBase.InitializeRuntime
  - System.ServiceModel.ServiceHostBase.LoadConfigurationSection(System.ServiceModel.Configuration.ServiceElement)
  - System.ServiceModel.ServiceHostBase.ManualFlowControlLimit
  - System.ServiceModel.ServiceHostBase.OnAbort
  - System.ServiceModel.ServiceHostBase.OnBeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnBeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ServiceHostBase.OnClose(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnEndClose(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnEndOpen(System.IAsyncResult)
  - System.ServiceModel.ServiceHostBase.OnOpen(System.TimeSpan)
  - System.ServiceModel.ServiceHostBase.OnOpened
  - System.ServiceModel.ServiceHostBase.OpenTimeout
  - System.ServiceModel.ServiceHostBase.ReleasePerformanceCounters
  - System.ServiceModel.ServiceHostBase.SetEndpointAddress(System.ServiceModel.Description.ServiceEndpoint,System.String)
  - System.ServiceModel.ServiceHostBase.System#IDisposable#Dispose
  - System.ServiceModel.ServiceHostBase.UnknownMessageReceived
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost()
  nameWithType: WebServiceHost.WebServiceHost()
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost()
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;></xref>类。"
  syntax:
    content: public WebServiceHost ();
    parameters: []
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  id: '#ctor(System.Object,System.Uri[])'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost(Object,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Object,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Object,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;></xref>类指定的单一服务器实例和基址。"
  remarks: "`baseAddresses`参数可包含的一个或多个基址。"
  example:
  - "The following example shows how to call this constructor.  \n  \n [!code-cs[WebServiceHost#1](~/add/codesnippet/csharp/m-system.servicemodel.we_1_1.cs)]\n [!code-vb[WebServiceHost#1](~/add/codesnippet/visualbasic/m-system.servicemodel.we_1_1.vb)]"
  syntax:
    content: public WebServiceHost (object singletonInstance, Uri[] baseAddresses);
    parameters:
    - id: singletonInstance
      type: System.Object
      description: "要用作单一实例的服务实例。"
    - id: baseAddresses
      type: System.Uri[]
      description: "服务基址。"
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  id: '#ctor(System.Type,System.Uri[])'
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: WebServiceHost(Type,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Type,Uri[])
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;></xref>使用指定的服务类型和基址的类。"
  remarks: "`baseAddresses`参数可包含的一个或多个基址。"
  example:
  - "The following example shows how to call this constructor.  \n  \n [!code-cs[WebServiceHost#2](~/add/codesnippet/csharp/m-system.servicemodel.we_0_1.cs)]\n [!code-vb[WebServiceHost#2](~/add/codesnippet/visualbasic/m-system.servicemodel.we_0_1.vb)]"
  syntax:
    content: public WebServiceHost (Type serviceType, Uri[] baseAddresses);
    parameters:
    - id: serviceType
      type: System.Type
      description: "服务类型。"
    - id: baseAddresses
      type: System.Uri[]
      description: "服务基址。"
  overload: System.ServiceModel.Web.WebServiceHost.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening
  id: OnOpening
  parent: System.ServiceModel.Web.WebServiceHost
  langs:
  - csharp
  name: OnOpening()
  nameWithType: WebServiceHost.OnOpening()
  fullName: System.ServiceModel.Web.WebServiceHost.OnOpening()
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Web
  summary: "时调用<xref href=&quot;System.ServiceModel.Web.WebServiceHost&quot;></xref>实例打开。"
  remarks: "调用此方法时出现以下情况︰ 1。  如果<xref:System.ServiceModel.Web.WebServiceHost>找不到终结点在服务描述中，它默认终结点将在创建服务的基址。</xref:System.ServiceModel.Web.WebServiceHost> <xref:System.ServiceModel.Web.WebServiceHost>会自动禁用 HTTP 帮助页和 WSDL GET 功能，以使元数据终结点不干扰默认 HTTP 终结点。</xref:System.ServiceModel.Web.WebServiceHost>      2.  <xref:System.ServiceModel.Web.WebServiceHost>检查<xref:System.ServiceModel.WebHttpBinding>以查看是否它们具有必需<xref:System.ServiceModel.Description.WebHttpBehavior>。</xref:System.ServiceModel.Description.WebHttpBehavior></xref:System.ServiceModel.WebHttpBinding>使用的所有终结点</xref:System.ServiceModel.Web.WebServiceHost> 如果不存在，<xref:System.ServiceModel.Web.WebServiceHost>添加<xref:System.ServiceModel.Description.WebHttpBehavior>终结点。</xref:System.ServiceModel.Description.WebHttpBehavior> </xref:System.ServiceModel.Web.WebServiceHost>      3.  <xref:System.ServiceModel.Web.WebServiceHost>配置终结点的绑定，以便与关联的 IIS 安全设置在安全虚拟目录中使用时一起使用。</xref:System.ServiceModel.Web.WebServiceHost>"
  syntax:
    content: protected override void OnOpening ();
    parameters: []
  overload: System.ServiceModel.Web.WebServiceHost.OnOpening*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.ServiceHost
  isExternal: false
  name: System.ServiceModel.ServiceHost
- uid: System.ServiceModel.Web.WebServiceHost.#ctor
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost()
  nameWithType: WebServiceHost.WebServiceHost()
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost()
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Object,System.Uri[])
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost(Object,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Object,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Object,Uri[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Uri[]
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri[]
  spec.csharp:
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: Uri[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Web.WebServiceHost.#ctor(System.Type,System.Uri[])
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost(Type,Uri[])
  nameWithType: WebServiceHost.WebServiceHost(Type,Uri[])
  fullName: System.ServiceModel.Web.WebServiceHost.WebServiceHost(Type,Uri[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: OnOpening()
  nameWithType: WebServiceHost.OnOpening()
  fullName: System.ServiceModel.Web.WebServiceHost.OnOpening()
- uid: System.ServiceModel.Web.WebServiceHost.#ctor*
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: WebServiceHost
  nameWithType: WebServiceHost.WebServiceHost
- uid: System.ServiceModel.Web.WebServiceHost.OnOpening*
  parent: System.ServiceModel.Web.WebServiceHost
  isExternal: false
  name: OnOpening
  nameWithType: WebServiceHost.OnOpening
