### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ICommandSource
  id: ICommandSource
  children:
  - System.Windows.Input.ICommandSource.Command
  - System.Windows.Input.ICommandSource.CommandParameter
  - System.Windows.Input.ICommandSource.CommandTarget
  langs:
  - csharp
  name: ICommandSource
  nameWithType: ICommandSource
  fullName: System.Windows.Input.ICommandSource
  type: Interface
  summary: "定义一个知道如何调用命令的对象。"
  remarks: "命令源定义命令由该特定对象的调用方式。  例如，如果<xref:System.Windows.Controls.Button>都与命令，该命令关联时调用<xref:System.Windows.Controls.Button>单击。</xref:System.Windows.Controls.Button> </xref:System.Windows.Controls.Button>       命令源通常会禁用自身如果与之关联的命令不能执行当前命令目标。  例如，<xref:System.Windows.Controls.MenuItem>与关联<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令将呈灰色<xref:System.Windows.Input.ApplicationCommands.Paste%2A>命令无法执行对当前的命令目标。</xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Input.ApplicationCommands.Paste%2A> </xref:System.Windows.Controls.MenuItem>       通常情况下，命令源会侦听<xref:System.Windows.Input.ICommand.CanExecuteChanged>命令的事件。</xref:System.Windows.Input.ICommand.CanExecuteChanged>  这可告知命令源时情况的变化对命令目标，如降低键盘焦点。  命令源可以然后查询命令使用<xref:System.Windows.Input.ICommand.CanExecute%2A>方法。</xref:System.Windows.Input.ICommand.CanExecute%2A>       中的类的一些[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]ICommandSource 是的实现︰ <xref:System.Windows.Controls.Primitives.ButtonBase>， <xref:System.Windows.Controls.MenuItem>，和<xref:System.Windows.Documents.Hyperlink>。</xref:System.Windows.Documents.Hyperlink> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.Primitives.ButtonBase>       在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A>ICommandSource 属性才适用<xref:System.Windows.Input.ICommand>一种<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>ICommandSource 上设置和相应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>"
  syntax:
    content: public interface ICommandSource
  implements: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.Command
  id: Command
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取调用命令源时将执行的命令。"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; }
    return:
      type: System.Windows.Input.ICommand
      description: "调用命令源时将执行该命令。"
  overload: System.Windows.Input.ICommandSource.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandParameter
  id: CommandParameter
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "表示用户定义的数据值，可以传递给该命令中，执行时。"
  remarks: "通常情况下，CommandParameter 用于执行时，将特定的信息传递给命令。  由该命令定义的数据类型。"
  syntax:
    content: public object CommandParameter { get; }
    return:
      type: System.Object
      description: "命令特定数据。"
  overload: System.Windows.Input.ICommandSource.CommandParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ICommandSource.CommandTarget
  id: CommandTarget
  parent: System.Windows.Input.ICommandSource
  langs:
  - csharp
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "在其执行该命令的对象。"
  remarks: "在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]命令系统中，<xref:System.Windows.Input.InputBinding.CommandTarget%2A>属性<xref:System.Windows.Input.ICommandSource>适用时才<xref:System.Windows.Input.ICommand>一种<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>  如果<xref:System.Windows.Input.InputBinding.CommandTarget%2A>上设置<xref:System.Windows.Input.ICommandSource>和相应的命令不是<xref:System.Windows.Input.RoutedCommand>，命令目标将被忽略。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.InputBinding.CommandTarget%2A>       如果用于<xref:System.Windows.Input.RoutedCommand>，命令目标是在其上的对象<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>引发事件。</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.RoutedCommand> 如果未设置 CommandTarget 属性，则具有键盘焦点的元素将用作目标。"
  syntax:
    content: public System.Windows.IInputElement CommandTarget { get; }
    return:
      type: System.Windows.IInputElement
      description: "在其执行该命令的对象。"
  overload: System.Windows.Input.ICommandSource.CommandTarget*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.ICommandSource.Command
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
  fullName: System.Windows.Input.ICommandSource.Command
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.ICommandSource.CommandParameter
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
  fullName: System.Windows.Input.ICommandSource.CommandParameter
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ICommandSource.CommandTarget
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
  fullName: System.Windows.Input.ICommandSource.CommandTarget
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ICommandSource.Command*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: Command
  nameWithType: ICommandSource.Command
- uid: System.Windows.Input.ICommandSource.CommandParameter*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandParameter
  nameWithType: ICommandSource.CommandParameter
- uid: System.Windows.Input.ICommandSource.CommandTarget*
  parent: System.Windows.Input.ICommandSource
  isExternal: false
  name: CommandTarget
  nameWithType: ICommandSource.CommandTarget
