### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.StringDictionary
  id: StringDictionary
  children:
  - System.Collections.Specialized.StringDictionary.#ctor
  - System.Collections.Specialized.StringDictionary.Add(System.String,System.String)
  - System.Collections.Specialized.StringDictionary.Clear
  - System.Collections.Specialized.StringDictionary.ContainsKey(System.String)
  - System.Collections.Specialized.StringDictionary.ContainsValue(System.String)
  - System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.StringDictionary.Count
  - System.Collections.Specialized.StringDictionary.GetEnumerator
  - System.Collections.Specialized.StringDictionary.IsSynchronized
  - System.Collections.Specialized.StringDictionary.Item(System.String)
  - System.Collections.Specialized.StringDictionary.Keys
  - System.Collections.Specialized.StringDictionary.Remove(System.String)
  - System.Collections.Specialized.StringDictionary.SyncRoot
  - System.Collections.Specialized.StringDictionary.Values
  langs:
  - csharp
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
  type: Class
  summary: "实现哈希表的键和值是强类型来字符串而不是对象。"
  remarks: "密钥不能为`null`，但值可以。       键的处理方式不区分大小写;在使用字符串字典之前对其进行转换为小写形式。       在.NET Framework 1.0 版中，此类使用区分区域性的字符串比较。 但是，在.NET Framework 1.1 和更高版本中，此类使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>比较字符串时。</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 有关如何区域性影响比较和排序的详细信息，请参阅[执行不区分区域性的字符串操作](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates several of the properties and methods of StringDictionary.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/cpp/t-system.collections.spe_4_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/csharp/t-system.collections.spe_4_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/visualbasic/t-system.collections.spe_4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.Design.Serialization.DesignerSerializer("System.Diagnostics.Design.StringDictionaryCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class StringDictionary : System.Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: StringDictionary()
  nameWithType: StringDictionary.StringDictionary()
  fullName: System.Collections.Specialized.StringDictionary.StringDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>类。"
  remarks: "此构造函数是 o （1） 操作。"
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/cpp/m-system.collections.spe_11_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/csharp/m-system.collections.spe_11_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.spe_11_1.vb)]"
  syntax:
    content: public StringDictionary ();
    parameters: []
  overload: System.Collections.Specialized.StringDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: StringDictionary.Add(String,String)
  fullName: System.Collections.Specialized.StringDictionary.Add(String,String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将添加一个具有指定的键和值转换为项<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: "键的处理方式不区分大小写;添加到字符串字典之前对其进行转换为小写形式。       此方法为 o （1） 运算。"
  example:
  - "The following code example demonstrates how to add and remove elements from a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/cpp/24bf4a19-6a1d-4d4c-ba1b-_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/csharp/24bf4a19-6a1d-4d4c-ba1b-_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/visualbasic/24bf4a19-6a1d-4d4c-ba1b-_1.vb)]"
  syntax:
    content: public virtual void Add (string key, string value);
    parameters:
    - id: key
      type: System.String
      description: "要添加的条目的键。"
    - id: value
      type: System.String
      description: "要添加的条目的值。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.StringDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中已存在具有相同键的项<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: StringDictionary.Clear()
  fullName: System.Collections.Specialized.StringDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除所有项从<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: "此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.StringDictionary.Count%2A>。</xref:System.Collections.Specialized.StringDictionary.Count%2A>"
  example:
  - "The following code example demonstrates how to add and remove elements from a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_10_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_10_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_10_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.Specialized.StringDictionary.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: StringDictionary.ContainsKey(String)
  fullName: System.Collections.Specialized.StringDictionary.ContainsKey(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "确定如果<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>包含特定键。"
  remarks: "键的处理方式不区分大小写;在使用之前对其进行转换为小写形式。       此方法为 o （1） 运算。       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否`item`存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_27_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_27_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_27_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (string key);
    parameters:
    - id: key
      type: System.String
      description: "要查找中的键<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>包含一个具有指定的项键; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.StringDictionary.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The key is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.ContainsValue(System.String)
  id: ContainsValue(System.String)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: ContainsValue(String)
  nameWithType: StringDictionary.ContainsValue(String)
  fullName: System.Collections.Specialized.StringDictionary.ContainsValue(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "确定如果<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>包含特定值。"
  remarks: "指定的值使用比较 StringDictionary 元素的值<xref:System.Object.Equals%2A?displayProperty=fullName>方法。</xref:System.Object.Equals%2A?displayProperty=fullName>       此方法执行的线性搜索;因此，平均执行时间正比<xref:System.Collections.Specialized.StringDictionary.Count%2A>.</xref:System.Collections.Specialized.StringDictionary.Count%2A> 也就是说，此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.StringDictionary.Count%2A>。</xref:System.Collections.Specialized.StringDictionary.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否`item`存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_40_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_40_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_40_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (string value);
    parameters:
    - id: value
      type: System.String
      description: "要查找中的值<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>包含的元素具有指定的值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.StringDictionary.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: StringDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.StringDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将字符串字典值复制到一维<xref:System.Array>实例的指定索引处。</xref:System.Array>"
  remarks: "CopyTo 将可强制转换的对象复制到<xref:System.Collections.DictionaryEntry?displayProperty=fullName>.</xref:System.Collections.DictionaryEntry?displayProperty=fullName> <xref:System.Collections.DictionaryEntry>包含键和值。</xref:System.Collections.DictionaryEntry>       复制到的<xref:System.Array>枚举数循环访问<xref:System.Collections.Specialized.StringDictionary>.</xref:System.Collections.Specialized.StringDictionary>相同顺序排序</xref:System.Array>的元素       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.StringDictionary.Count%2A>。</xref:System.Collections.Specialized.StringDictionary.Count%2A>"
  example:
  - "The following code example shows how a StringDictionary can be copied to an array.  \n  \n [!code-cpp[System.Collections.Specialized.StringDictionary.CopyTo#1](~/add/codesnippet/cpp/9e0b7952-2449-4de8-9ce1-_1.cpp)]\n [!code-cs[System.Collections.Specialized.StringDictionary.CopyTo#1](~/add/codesnippet/csharp/9e0b7952-2449-4de8-9ce1-_1.cs)]\n [!code-vb[System.Collections.Specialized.StringDictionary.CopyTo#1](~/add/codesnippet/visualbasic/9e0b7952-2449-4de8-9ce1-_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "一维<xref:System.Array>从复制的值的目标<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中复制开始处的数组的索引。"
  overload: System.Collections.Specialized.StringDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -中的元素数<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>大于从的可用空间<code>index</code>到末尾<code>array</code>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零下限的<code>array</code>。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Count
  id: Count
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Count
  nameWithType: StringDictionary.Count
  fullName: System.Collections.Specialized.StringDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取中的键/值对的数目<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/cpp/p-system.collections.spe_0_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/csharp/p-system.collections.spe_0_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/visualbasic/p-system.collections.spe_0_1.vb)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "在对键/值数<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。       检索此属性的值是一个 o （1） 操作。"
  overload: System.Collections.Specialized.StringDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: StringDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.StringDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回循环访问字符串字典的枚举。"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。       此方法为 o （1） 运算。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/cpp/m-system.collections.spe_35_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/csharp/m-system.collections.spe_35_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/visualbasic/m-system.collections.spe_35_1.vb)]"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>，它循环访问字符串字典。</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.StringDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: StringDictionary.IsSynchronized
  fullName: System.Collections.Specialized.StringDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否访问<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>是同步的 （线程安全）。"
  remarks: "A<xref:System.Collections.Specialized.StringDictionary>实例不同步。</xref:System.Collections.Specialized.StringDictionary> 派生的类可以提供的同步的版本<xref:System.Collections.Specialized.StringDictionary>使用<xref:System.Collections.Specialized.StringDictionary.SyncRoot%2A>属性。</xref:System.Collections.Specialized.StringDictionary.SyncRoot%2A> </xref:System.Collections.Specialized.StringDictionary>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.StringDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/cpp/p-system.collections.spe_13_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/csharp/p-system.collections.spe_13_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/visualbasic/p-system.collections.spe_13_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;></xref>是同步的 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.StringDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Item(System.String)
  id: Item(System.String)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Item(String)
  nameWithType: StringDictionary.Item(String)
  fullName: System.Collections.Specialized.StringDictionary.Item(String)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取或设置与指定键关联的值。"
  remarks: "键的处理方式不区分大小写;在使用之前对其进行转换为小写形式。       密钥不能为`null`，但值可以。 来区分`null`返回因为找不到指定的键和`null`返回指定键的值是因为`null`，使用<xref:System.Collections.Specialized.StringDictionary.ContainsKey%2A>方法来确定在列表中是否存在的项。</xref:System.Collections.Specialized.StringDictionary.ContainsKey%2A>       C# 语言使用关键字来定义而不是实现项属性的索引器。 Visual Basic 实现为默认属性，它提供相同的索引功能的项。       检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/cpp/p-system.collections.spe_17_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/csharp/p-system.collections.spe_17_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/visualbasic/p-system.collections.spe_17_1.vb)]"
  syntax:
    content: public virtual string this[string key] { get; set; }
    parameters:
    - id: key
      type: System.String
      description: "密钥要获取或设置其值。"
    return:
      type: System.String
      description: "与指定键关联的值。 如果找不到指定的键，则 Get 返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，并设置具有指定键创建一个新条目。"
  overload: System.Collections.Specialized.StringDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: StringDictionary.Keys
  fullName: System.Collections.Specialized.StringDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取集合中的键<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: "中的键的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回<xref:System.Collections.Specialized.StringDictionary.Values%2A>方法。</xref:System.Collections.Specialized.StringDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始<xref:System.Collections.Specialized.StringDictionary>.</xref:System.Collections.Specialized.StringDictionary>中的键</xref:System.Collections.ICollection></xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.Specialized.StringDictionary>继续才会反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.StringDictionary>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/cpp/p-system.collections.spe_4_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/csharp/p-system.collections.spe_4_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_Enumeration#1](~/add/codesnippet/visualbasic/p-system.collections.spe_4_1.vb)]"
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>提供中的键<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.StringDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Remove(System.String)
  id: Remove(System.String)
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Remove(String)
  nameWithType: StringDictionary.Remove(String)
  fullName: System.Collections.Specialized.StringDictionary.Remove(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "从字符串字典中移除具有指定键的项。"
  remarks: "如果<xref:System.Collections.Specialized.StringDictionary>不具有指定键，包含的元素<xref:System.Collections.Specialized.StringDictionary>保持不变。</xref:System.Collections.Specialized.StringDictionary> </xref:System.Collections.Specialized.StringDictionary> 不引发异常。       键的处理方式不区分大小写;然后使用它来查找要从字符串字典中移除的项，它将转换为小写形式。       此方法为 o （1） 运算。"
  example:
  - "The following code example demonstrates how to add and remove elements from a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_25_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_25_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_25_1.vb)]"
  syntax:
    content: public virtual void Remove (string key);
    parameters:
    - id: key
      type: System.String
      description: "要移除的项的键。"
  overload: System.Collections.Specialized.StringDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The key is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: StringDictionary.SyncRoot
  fullName: System.Collections.Specialized.StringDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取可以用于对访问进行同步的对象<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: "派生的类可以提供自己的同步的版本<xref:System.Collections.Specialized.StringDictionary>使用 SyncRoot 属性。</xref:System.Collections.Specialized.StringDictionary> 同步代码必须对执行操作的 SyncRoot <xref:System.Collections.Specialized.StringDictionary>，不是直接对<xref:System.Collections.Specialized.StringDictionary>.</xref:System.Collections.Specialized.StringDictionary> </xref:System.Collections.Specialized.StringDictionary> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.Specialized.StringDictionary>对象。</xref:System.Collections.Specialized.StringDictionary>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/cpp/p-system.collections.spe_16_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/csharp/p-system.collections.spe_16_1.cs)]\n [!code-vb[System.Collection.Specialized.StringDictionary#2](~/add/codesnippet/visualbasic/p-system.collections.spe_16_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>可用于同步对访问<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。</xref:System.Object>"
  overload: System.Collections.Specialized.StringDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.StringDictionary.Values
  id: Values
  parent: System.Collections.Specialized.StringDictionary
  langs:
  - csharp
  name: Values
  nameWithType: StringDictionary.Values
  fullName: System.Collections.Specialized.StringDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取集合中的值<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联键顺序相同<xref:System.Collections.ICollection>返回<xref:System.Collections.Specialized.StringDictionary.Keys%2A>方法。</xref:System.Collections.Specialized.StringDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始<xref:System.Collections.Specialized.StringDictionary>.</xref:System.Collections.Specialized.StringDictionary>中的值</xref:System.Collections.ICollection></xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.Specialized.StringDictionary>继续才会反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.StringDictionary>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.StringDictionary>.  \n  \n [!code-vb[System.Collection.Specialized.StringDictionary_Enumeration#2](~/add/codesnippet/visualbasic/p-system.collections.spe_18_1.vb)]\n [!code-cpp[System.Collection.Specialized.StringDictionary_Enumeration#2](~/add/codesnippet/cpp/p-system.collections.spe_18_1.cpp)]\n [!code-cs[System.Collection.Specialized.StringDictionary_Enumeration#2](~/add/codesnippet/csharp/p-system.collections.spe_18_1.cs)]"
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>提供中的值<xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.StringDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Collections.Specialized.StringDictionary.#ctor
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: StringDictionary()
  nameWithType: StringDictionary.StringDictionary()
  fullName: System.Collections.Specialized.StringDictionary.StringDictionary()
- uid: System.Collections.Specialized.StringDictionary.Add(System.String,System.String)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Add(String,String)
  nameWithType: StringDictionary.Add(String,String)
  fullName: System.Collections.Specialized.StringDictionary.Add(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.StringDictionary.Clear
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Clear()
  nameWithType: StringDictionary.Clear()
  fullName: System.Collections.Specialized.StringDictionary.Clear()
- uid: System.Collections.Specialized.StringDictionary.ContainsKey(System.String)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: ContainsKey(String)
  nameWithType: StringDictionary.ContainsKey(String)
  fullName: System.Collections.Specialized.StringDictionary.ContainsKey(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.StringDictionary.ContainsValue(System.String)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: ContainsValue(String)
  nameWithType: StringDictionary.ContainsValue(String)
  fullName: System.Collections.Specialized.StringDictionary.ContainsValue(String)
- uid: System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: StringDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.StringDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.StringDictionary.Count
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Count
  nameWithType: StringDictionary.Count
  fullName: System.Collections.Specialized.StringDictionary.Count
- uid: System.Collections.Specialized.StringDictionary.GetEnumerator
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: StringDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.StringDictionary.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.StringDictionary.IsSynchronized
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: StringDictionary.IsSynchronized
  fullName: System.Collections.Specialized.StringDictionary.IsSynchronized
- uid: System.Collections.Specialized.StringDictionary.Item(System.String)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Item(String)
  nameWithType: StringDictionary.Item(String)
  fullName: System.Collections.Specialized.StringDictionary.Item(String)
- uid: System.Collections.Specialized.StringDictionary.Keys
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Keys
  nameWithType: StringDictionary.Keys
  fullName: System.Collections.Specialized.StringDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.StringDictionary.Remove(System.String)
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Remove(String)
  nameWithType: StringDictionary.Remove(String)
  fullName: System.Collections.Specialized.StringDictionary.Remove(String)
- uid: System.Collections.Specialized.StringDictionary.SyncRoot
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: StringDictionary.SyncRoot
  fullName: System.Collections.Specialized.StringDictionary.SyncRoot
- uid: System.Collections.Specialized.StringDictionary.Values
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Values
  nameWithType: StringDictionary.Values
  fullName: System.Collections.Specialized.StringDictionary.Values
- uid: System.Collections.Specialized.StringDictionary.#ctor*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary.StringDictionary
- uid: System.Collections.Specialized.StringDictionary.Add*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Add
  nameWithType: StringDictionary.Add
- uid: System.Collections.Specialized.StringDictionary.Clear*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Clear
  nameWithType: StringDictionary.Clear
- uid: System.Collections.Specialized.StringDictionary.ContainsKey*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: ContainsKey
  nameWithType: StringDictionary.ContainsKey
- uid: System.Collections.Specialized.StringDictionary.ContainsValue*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: ContainsValue
  nameWithType: StringDictionary.ContainsValue
- uid: System.Collections.Specialized.StringDictionary.CopyTo*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: CopyTo
  nameWithType: StringDictionary.CopyTo
- uid: System.Collections.Specialized.StringDictionary.Count*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Count
  nameWithType: StringDictionary.Count
- uid: System.Collections.Specialized.StringDictionary.GetEnumerator*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: StringDictionary.GetEnumerator
- uid: System.Collections.Specialized.StringDictionary.IsSynchronized*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: StringDictionary.IsSynchronized
- uid: System.Collections.Specialized.StringDictionary.Item*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Item
  nameWithType: StringDictionary.Item
- uid: System.Collections.Specialized.StringDictionary.Keys*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Keys
  nameWithType: StringDictionary.Keys
- uid: System.Collections.Specialized.StringDictionary.Remove*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Remove
  nameWithType: StringDictionary.Remove
- uid: System.Collections.Specialized.StringDictionary.SyncRoot*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: StringDictionary.SyncRoot
- uid: System.Collections.Specialized.StringDictionary.Values*
  parent: System.Collections.Specialized.StringDictionary
  isExternal: false
  name: Values
  nameWithType: StringDictionary.Values
