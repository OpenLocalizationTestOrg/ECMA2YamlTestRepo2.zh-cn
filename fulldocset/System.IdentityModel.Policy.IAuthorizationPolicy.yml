### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Policy.IAuthorizationPolicy
  id: IAuthorizationPolicy
  children:
  - System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)
  - System.IdentityModel.Policy.IAuthorizationPolicy.Issuer
  langs:
  - csharp
  name: IAuthorizationPolicy
  nameWithType: IAuthorizationPolicy
  fullName: System.IdentityModel.Policy.IAuthorizationPolicy
  type: Interface
  summary: "定义一组授权用户，给定一组声明的规则。"
  remarks: "实现 IAuthorizationPolicy 接口，可添加或映射到另一个声明的一组。 授权策略检查声明的一组并添加基于当前的组的其他声明。 例如，授权策略可能评估包含出生日期的声明和添加断言用户是超过 21 岁的声明并添加到<xref:System.IdentityModel.Policy.EvaluationContext>。</xref:System.IdentityModel.Policy.EvaluationContext> Over21 声明       实现 IAuthorizationPolicy 接口的类进行授权用户，但它们可令<xref:System.ServiceModel.ServiceAuthorizationManager>类来执行此操作。</xref:System.ServiceModel.ServiceAuthorizationManager> <xref:System.ServiceModel.ServiceAuthorizationManager>调用<xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A>每个有效授权策略的方法。</xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> </xref:System.ServiceModel.ServiceAuthorizationManager> <xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A>方法确定是否应为用户，根据当前上下文中添加其他声明。</xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> 授权策略<xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A>方法可能会多次调用，如声明添加到<xref:System.IdentityModel.Policy.EvaluationContext>由其他授权策略。</xref:System.IdentityModel.Policy.EvaluationContext> </xref:System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate%2A> 当所有授权策略实际上都完时，<xref:System.ServiceModel.ServiceAuthorizationManager>类，使授权决策基于最终的声明集。</xref:System.ServiceModel.ServiceAuthorizationManager> <xref:System.ServiceModel.ServiceAuthorizationManager>类会创建<xref:System.IdentityModel.Policy.AuthorizationContext>包含反映这些授权决定的不可变声明集。</xref:System.IdentityModel.Policy.AuthorizationContext> </xref:System.ServiceModel.ServiceAuthorizationManager>"
  example:
  - >-
    [!code-cs[C_IAuthorizationPolicy#1](~/add/codesnippet/csharp/t-system.identitymodel.p_1_1.cs)]
     [!code-vb[C_IAuthorizationPolicy#1](~/add/codesnippet/visualbasic/t-system.identitymodel.p_1_1.vb)]
  syntax:
    content: 'public interface IAuthorizationPolicy : System.IdentityModel.Policy.IAuthorizationComponent'
  implements:
  - System.IdentityModel.Policy.IAuthorizationComponent
  platform:
  - net462
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)
  id: Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  langs:
  - csharp
  name: Evaluate(EvaluationContext,Object)
  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext,Object)
  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext,Object)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Policy
  summary: "评估用户是否符合此授权策略的要求。"
  remarks: "> [!NOTE]1> 的实施者<xref:System.IdentityModel.Policy.IAuthorizationPolicy>接口应该会多次调用不同的线程的计算方法。</xref:System.IdentityModel.Policy.IAuthorizationPolicy>       实现者<xref:System.IdentityModel.Policy.IAuthorizationPolicy>接口可以使用`state`参数评估方法的调用之间跟踪状态。</xref:System.IdentityModel.Policy.IAuthorizationPolicy> 如果评估方法的给定调用中设置的状态对象，则相同的对象实例传递给当前评估过程中的评估方法的每个后续调用。"
  example:
  - >-
    [!code-cs[C_IAuthorizationPolicy#2](~/add/codesnippet/csharp/b64090c9-1ef7-4f2c-956c-_1.cs)]
     [!code-vb[C_IAuthorizationPolicy#2](~/add/codesnippet/visualbasic/b64090c9-1ef7-4f2c-956c-_1.vb)]
  syntax:
    content: public bool Evaluate (System.IdentityModel.Policy.EvaluationContext evaluationContext, ref object state);
    parameters:
    - id: evaluationContext
      type: System.IdentityModel.Policy.EvaluationContext
      description: "<xref href=&quot;System.IdentityModel.Policy.EvaluationContext&quot;> </xref> ，其中包含授权策略所评估的声明集。"
    - id: state
      type: System.Object
      description: "A <xref:System.Object>，传递的引用，它表示此授权策略的自定义状态。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>到其他授权策略添加其他声明时，如果必须调用此授权策略的评估方法<code> evaluationContext </code>; 否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>到此授权策略不的需要任何其他评估。"
  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer
  id: Issuer
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  langs:
  - csharp
  name: Issuer
  nameWithType: IAuthorizationPolicy.Issuer
  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Policy
  summary: "获取一个表示授权策略颁发者的声明集。"
  syntax:
    content: public System.IdentityModel.Claims.ClaimSet Issuer { get; }
    return:
      type: System.IdentityModel.Claims.ClaimSet
      description: "A <xref href=&quot;System.IdentityModel.Claims.ClaimSet&quot;> </xref>表示的授权策略颁发者。"
  overload: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(System.IdentityModel.Policy.EvaluationContext,System.Object@)
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  isExternal: false
  name: Evaluate(EvaluationContext,Object)
  nameWithType: IAuthorizationPolicy.Evaluate(EvaluationContext,Object)
  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate(EvaluationContext,Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Policy.EvaluationContext
  parent: System.IdentityModel.Policy
  isExternal: false
  name: EvaluationContext
  nameWithType: EvaluationContext
  fullName: System.IdentityModel.Policy.EvaluationContext
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  isExternal: false
  name: Issuer
  nameWithType: IAuthorizationPolicy.Issuer
  fullName: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer
- uid: System.IdentityModel.Claims.ClaimSet
  parent: System.IdentityModel.Claims
  isExternal: false
  name: ClaimSet
  nameWithType: ClaimSet
  fullName: System.IdentityModel.Claims.ClaimSet
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate*
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  isExternal: false
  name: Evaluate
  nameWithType: IAuthorizationPolicy.Evaluate
- uid: System.IdentityModel.Policy.IAuthorizationPolicy.Issuer*
  parent: System.IdentityModel.Policy.IAuthorizationPolicy
  isExternal: false
  name: Issuer
  nameWithType: IAuthorizationPolicy.Issuer
