### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePointManager
  id: ServicePointManager
  children:
  - System.Net.ServicePointManager.CertificatePolicy
  - System.Net.ServicePointManager.CheckCertificateRevocationList
  - System.Net.ServicePointManager.DefaultConnectionLimit
  - System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  - System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  - System.Net.ServicePointManager.DnsRefreshTimeout
  - System.Net.ServicePointManager.EnableDnsRoundRobin
  - System.Net.ServicePointManager.EncryptionPolicy
  - System.Net.ServicePointManager.Expect100Continue
  - System.Net.ServicePointManager.FindServicePoint(System.Uri)
  - System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  - System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  - System.Net.ServicePointManager.MaxServicePointIdleTime
  - System.Net.ServicePointManager.MaxServicePoints
  - System.Net.ServicePointManager.ReusePort
  - System.Net.ServicePointManager.SecurityProtocol
  - System.Net.ServicePointManager.ServerCertificateValidationCallback
  - System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePointManager.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePointManager
  nameWithType: ServicePointManager
  fullName: System.Net.ServicePointManager
  type: Class
  summary: "管理的集合<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "ServicePointManager 是用于创建、 维护和删除<xref:System.Net.ServicePoint>类</xref:System.Net.ServicePoint>的实例的静态类       当应用程序请求对 Internet 资源统一资源标识符 (URI) 通过 ServicePointManager 对象的连接时，返回 ServicePointManager<xref:System.Net.ServicePoint>对象，其中包含的主机和方案通过 URI 标识的连接信息。</xref:System.Net.ServicePoint> 如果没有现有<xref:System.Net.ServicePoint>对象主机和方案，ServicePointManager 对象将返回现有<xref:System.Net.ServicePoint>对象; 否则，ServicePointManager 对象创建一个新<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>       .NET Framework 4.6 包括一个新的安全功能，将阻止不安全的密码和哈希算法的连接。 默认情况下，使用 TLS/SSL 通过例如 HttpClient、 HttpWebRequest、 FTPClient、 SmtpClient、 SslStream 等的 Api 和面向.NET Framework 4.6 的应用程序获得更安全行为。       开发人员可能想要选择退出此行为以便保持其现有 SSL3 服务或 TLS 带 RC4 服务与互操作性。 [这篇文章](https://support.microsoft.com/kb/3069494)说明如何修改你的代码，以便禁用新的行为。"
  example:
  - "The following code example creates a <xref:System.Net.ServicePoint> object for connections to the URI www.contoso.com.  \n  \n [!code-cs[Classic ServicePoint Example#1](~/add/codesnippet/csharp/t-system.net.servicepoin_1.cs)]\n [!code-cpp[Classic ServicePoint Example#1](~/add/codesnippet/cpp/t-system.net.servicepoin_1.cpp)]\n [!code-vb[Classic ServicePoint Example#1](~/add/codesnippet/visualbasic/t-system.net.servicepoin_1.vb)]"
  syntax:
    content: public class ServicePointManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CertificatePolicy
  id: CertificatePolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置服务器证书的策略。"
  remarks: "当 CertificatePolicy 属性设置为<xref:System.Net.ICertificatePolicy>接口对象<xref:System.Net.ServicePointManager>对象使用该实例而不是默认证书策略中定义的证书策略。</xref:System.Net.ServicePointManager> </xref:System.Net.ICertificatePolicy>       默认证书策略允许的有效证书和已过期的有效证书。"
  example:
  - "The following code example shows how to catch a certificate policy exception for a custom certificate policy. It assumes that the certificate policy object has been defined, that the Uniform Resource Identifier (URI) for the Web resource is contained in the variable `myUri`, and that there is a method named `ProcessResponse` that performs the work of the application.  \n  \n [!code-cpp[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/cpp/p-system.net.servicepoin_14_1.cpp)]\n [!code-cs[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/csharp/p-system.net.servicepoin_14_1.cs)]\n [!code-vb[Classic ServicePointManager.CertificatePolicy Example#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_14_1.vb)]"
  syntax:
    content: public static System.Net.ICertificatePolicy CertificatePolicy { get; set; }
    return:
      type: System.Net.ICertificatePolicy
      description: "实现的对象<xref href=&quot;System.Net.ICertificatePolicy&quot;></xref>接口。"
  overload: System.Net.ServicePointManager.CertificatePolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置<xref:System.Boolean>值，该值指示是否根据证书颁发机构吊销列表检查证书。</xref:System.Boolean>"
  remarks: "CheckCertificateRevocationList 时`true`，根据证书颁发机构吊销列表中，证书验证过程的一部分检查证书。 其默认值是`false`。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_13_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_13_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_13_1.cs)]"
  syntax:
    content: public static bool CheckCertificateRevocationList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果检查证书吊销列表;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.CheckCertificateRevocationList*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  id: DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置最大允许的并发连接数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "DefaultConnectionLimit 属性设置的默认最大并发连接数<xref:System.Net.ServicePointManager>对象将分配给<xref:System.Net.ServicePoint.ConnectionLimit%2A>属性在创建时<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.ConnectionLimit%2A> </xref:System.Net.ServicePointManager>       更改 DefaultConnectionLimit 属性不起现有<xref:System.Net.ServicePoint>对象; 它仅影响<xref:System.Net.ServicePoint>初始化在更改后的对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint> 如果尚未设置此属性的值，直接或通过配置，则该值默认为常量<xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>.</xref:System.Net.ServicePointManager.DefaultPersistentConnectionLimit>      1> [!NOTE] 1> DefaultConnectionLimit 属性对任何更改会影响 HTTP 1.0 和 HTTP 1.1 连接。 不能单独 alter HTTP 1.0 和 HTTP 1.1 协议的连接限制。 当使用在服务器环境 (ASP.NET) 中 DefaultConnectionLimit 默认为更多的连接，这就是 10。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_8_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_8_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_8_1.cs)]"
  syntax:
    content: public static int DefaultConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "最大允许的并发连接数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。 默认值为 2。 当应用作为 ASP.NET 主机运行时，不能通过配置文件更改此属性的值，如果 autoConfig 属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 但是，你可以更改的值以编程方式 autoConfig 属性时<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 当 AppDomain 加载时，一次，设置首选的值。"
  overload: System.Net.ServicePointManager.DefaultConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "DefaultConnectionLimit 小于或等于 0。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  id: DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "默认非持续性连接 (4) 上允许数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象连接到 HTTP/1.0 或更高版本的服务器。 此字段为常数，但在.NET Framework 2.0 中不再使用。"
  syntax:
    content: public const int DefaultNonPersistentConnectionLimit = 4;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  id: DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  type: Field
  assemblies:
  - System
  namespace: System.Net
  summary: "永久连接 (2) 上允许的默认数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象连接到 HTTP/1.1 或更高版本的服务器。 此字段为常量，用于初始化<> *1> 属性如果的值<> *1> 直接或通过配置尚未设置属性。"
  remarks: ''
  example:
  - "The following code example sets the <xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> property using this field.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/f-system.net.servicepoin_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/f-system.net.servicepoin_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/f-system.net.servicepoin_1.cs)]"
  syntax:
    content: public const int DefaultPersistentConnectionLimit = 2;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  id: DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置一个值，指示多长时间域名服务 (DNS) 解析都被视为有效。"
  remarks: ''
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_21_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_21_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_21_1.cs)]"
  syntax:
    content: public static int DnsRefreshTimeout { get; set; }
    return:
      type: System.Int32
      description: "超时值，以毫秒为单位。 值-1 指示超时期限无限。 默认值为 120,000 毫秒 （2 分钟）。"
  overload: System.Net.ServicePointManager.DnsRefreshTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  id: EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置一个值，该值指示域名服务 (DNS) 解析是否在多个适用的 Internet 协议 (IP) 地址之间轮流。"
  remarks: "与主机名关联多个 IP 地址时，DNS 解析通常返回仅为第一个 IP 地址。 如果将此属性设置为`true`，则后续的 DNS 解析将在特定主机的循环浏览所有可用的 IP 地址。 如果服务使用 DNS 为负载平衡服务器或服务器群集之间的机制，此选项非常有用。"
  example:
  - "The following code example sets this property.  \n  \n [!code-vb[System.Net.ServicePointWhidbey#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_17_1.vb)]\n [!code-cpp[System.Net.ServicePointWhidbey#1](~/add/codesnippet/cpp/p-system.net.servicepoin_17_1.cpp)]\n [!code-cs[System.Net.ServicePointWhidbey#1](~/add/codesnippet/csharp/p-system.net.servicepoin_17_1.cs)]"
  syntax:
    content: public static bool EnableDnsRoundRobin { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果 DNS 解析总是返回特定主机; 第一个 IP 地址否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.EnableDnsRoundRobin*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.EncryptionPolicy
  id: EncryptionPolicy
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取<xref href=&quot;System.Net.Security.EncryptionPolicy&quot;></xref>此<xref href=&quot;System.Net.ServicePointManager&quot;></xref>实例。"
  remarks: "如果在配置文件中未指定一个值，EncryptionPolicy 属性默认为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>.</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> 这应用于此的 SSL/TLS 会话<xref:System.Net.ServicePointManager>实例。</xref:System.Net.ServicePointManager>       Null 加密的使用时是必需的加密策略设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public static System.Net.Security.EncryptionPolicy EncryptionPolicy { get; }
    return:
      type: System.Net.Security.EncryptionPolicy
      description: "要用于此加密策略<xref href=&quot;System.Net.ServicePointManager&quot;></xref>实例。"
  overload: System.Net.ServicePointManager.EncryptionPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置<xref:System.Boolean>值，该值确定是否 100-继续使用行为。</xref:System.Boolean>"
  remarks: "当此属性设置为`true`、 100-继续使用行为。 客户端请求使用`PUT`和`POST`Expect100Continue 属性是否方法会将一个 Expect 标头添加到请求`true`和<xref:System.Net.HttpWebRequest.ContentLength%2A>属性是大于零或<xref:System.Net.HttpWebRequest.SendChunked%2A>属性为 true。</xref:System.Net.HttpWebRequest.SendChunked%2A> </xref:System.Net.HttpWebRequest.ContentLength%2A> 客户端将会收到一个 100-继续从要指示客户端应发送要发布的数据的服务器的响应。 此机制允许客户端以避免通过网络发送大量数据时的服务器，根据请求标头，想要拒绝请求。       例如，假定 Expect100Continue 属性是`false`。 当请求发送到服务器时，它包括数据。 如果在阅读后的请求标头，服务器需要身份验证，并且必须发送的 401 响应，客户端必须重新发送具有正确的身份验证标头的数据。       如果此属性为`true`，请求标头发送到服务器。 如果服务器不拒绝了请求，则将发送一个 100-继续响应信号可以传输数据。 如果如下所示前面的示例中，服务器需要身份验证，将它发送的 401 响应，客户端没有不必要地传输数据。       更改此属性的值不影响现有<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> 仅新增<xref:System.Net.ServicePoint>会影响在更改后创建的对象。</xref:System.Net.ServicePoint>       100-继续行为不使用的 HTTP 1.0 请求，即使此属性设置为`true`。       Expect 100-继续行为完全部分所述 IETF RFC 2616 10.1.1 一起提供。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_12_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_12_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_12_1.cs)]"
  syntax:
    content: public static bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要启用 100-继续行为。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  id: FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "查找现有<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象或创建一个新<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象来管理与指定的通信<xref:System.Uri>对象。</xref:System.Uri>"
  remarks: "FindServicePoint 方法返回<xref:System.Net.ServicePoint>与指定的 Internet 主机名关联的对象。</xref:System.Net.ServicePoint> 如果没有<xref:System.Net.ServicePoint>对象存在该主机<xref:System.Net.ServicePointManager>对象将创建一个。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address);
    parameters:
    - id: address
      type: System.Uri
      description: "<xref:System.Uri>要联系的 Internet 资源的对象。</xref:System.Uri>"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理请求的通信的对象。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定义的对象<xref:System.Net.ServicePointManager.MaxServicePoints*>已达到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  id: FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "查找现有<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象或创建一个新<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象来管理与指定的统一资源标识符 (URI) 的通信。"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>方法返回<xref:System.Net.ServicePoint>与指定的 Internet 主机名关联的对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 如果没有<xref:System.Net.ServicePoint>对象存在该主机<xref:System.Net.ServicePointManager>对象将创建一个。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example demonstrates calling this method to access a <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#7](~/add/codesnippet/cpp/2fec5056-1106-4a0b-b9b3-_1.cpp)]\n [!code-vb[System.Net.ServicePoint#7](~/add/codesnippet/visualbasic/2fec5056-1106-4a0b-b9b3-_1.vb)]\n [!code-cs[System.Net.ServicePoint#7](~/add/codesnippet/csharp/2fec5056-1106-4a0b-b9b3-_1.cs)]"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (string uriString, System.Net.IWebProxy proxy);
    parameters:
    - id: uriString
      type: System.String
      description: "要联系的 Internet 资源的 URI。"
    - id: proxy
      type: System.Net.IWebProxy
      description: "此请求的的代理数据。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理请求的通信的对象。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "在指定的 URI <code> uriString </code>无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定义的对象<xref:System.Net.ServicePointManager.MaxServicePoints*>已达到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  id: FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "查找现有<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象或创建一个新<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象来管理与指定的通信<xref:System.Uri>对象。</xref:System.Uri>"
  remarks: "<xref:System.Net.ServicePointManager.FindServicePoint%2A>方法返回<xref:System.Net.ServicePoint>与指定的 Internet 主机名关联的对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.FindServicePoint%2A> 如果没有<xref:System.Net.ServicePoint>对象存在该主机<xref:System.Net.ServicePointManager>对象将创建一个。</xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  syntax:
    content: public static System.Net.ServicePoint FindServicePoint (Uri address, System.Net.IWebProxy proxy);
    parameters:
    - id: address
      type: System.Uri
      description: "A<xref:System.Uri>对象，其中包含要联系的 Internet 资源的地址。</xref:System.Uri>"
    - id: proxy
      type: System.Net.IWebProxy
      description: "此请求的的代理数据。"
    return:
      type: System.Net.ServicePoint
      description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>管理请求的通信的对象。"
  overload: System.Net.ServicePointManager.FindServicePoint*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>address</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>中定义的对象<xref:System.Net.ServicePointManager.MaxServicePoints*>已达到。</xref:System.Net.ServicePointManager.MaxServicePoints*>"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  id: MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置的最大空闲时间<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "MaxServicePointIdleTime 属性设置的最大空闲时间<xref:System.Net.ServicePointManager>对象将分配给<xref:System.Net.ServicePoint.MaxIdleTime%2A>属性在创建时<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePointManager> 为此值的更改只会影响<xref:System.Net.ServicePoint>后更改的值初始化的对象。</xref:System.Net.ServicePoint>       后<xref:System.Net.ServicePoint>对象中指定的时间已处于空闲状态<xref:System.Net.ServicePoint.MaxIdleTime%2A>，它是符合垃圾回收的条件。</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint> A<xref:System.Net.ServicePoint>对象处于空闲状态时与关联的连接列表<xref:System.Net.ServicePoint>对象为空。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_5_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_5_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_5_1.cs)]"
  syntax:
    content: public static int MaxServicePointIdleTime { get; set; }
    return:
      type: System.Int32
      description: "最大空闲时间，以毫秒为单位的<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。 默认值是 100,000 毫秒 （100 秒）。"
  overload: System.Net.ServicePointManager.MaxServicePointIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePointIdleTime 是小于&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;或大于&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.MaxServicePoints
  id: MaxServicePoints
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置的最大数目<xref href=&quot;System.Net.ServicePoint&quot;></xref>任何时候保持的对象。"
  remarks: "当你减少数以下 MaxServicePoints 属性<xref:System.Net.ServicePoint>当前中是否存在，对象<xref:System.Net.ServicePointManager>删除<xref:System.Net.ServicePoint>具有最长空闲时间的对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint> 如果数<xref:System.Net.ServicePoint>连接为活动状态的对象是否大于 MaxServicePoints，值<xref:System.Net.ServicePointManager>对象删除<xref:System.Net.ServicePoint>对象，如其状态变成空闲。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager> </xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#8](~/add/codesnippet/cpp/p-system.net.servicepoin_10_1.cpp)]\n [!code-vb[System.Net.ServicePoint#8](~/add/codesnippet/visualbasic/p-system.net.servicepoin_10_1.vb)]\n [!code-cs[System.Net.ServicePoint#8](~/add/codesnippet/csharp/p-system.net.servicepoin_10_1.cs)]"
  syntax:
    content: public static int MaxServicePoints { get; set; }
    return:
      type: System.Int32
      description: "最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>要维护的对象。 默认值为 0，这意味着对的数量没有限制<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  overload: System.Net.ServicePointManager.MaxServicePoints*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxServicePoints 是小于 0 或大于&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ReusePort
  id: ReusePort
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "此属性值设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>导致来自 HttpWebRequest 使用本机套接字选项 SO_REUSE_UNICASTPORT 套接字上的所有出站 TCP 连接。 这会导致共享基础传出端口。 这是适用于大量传出连接都在短时间内，并且应用面临耗尽端口风险的方案。"
  remarks: "默认值为 `false`。"
  syntax:
    content: public static bool ReusePort { get; set; }
    return:
      type: System.Boolean
      description: "返回<xref:System.Boolean>.</xref:System.Boolean>"
  overload: System.Net.ServicePointManager.ReusePort*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SecurityProtocol
  id: SecurityProtocol
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置使用的安全协议<xref href=&quot;System.Net.ServicePoint&quot;></xref>管理的对象<xref href=&quot;System.Net.ServicePointManager&quot;></xref>对象。"
  remarks: "此属性选择要用于使用仅; 的安全超文本传输协议 (HTTPS) 方案的新连接的安全套接字层 (SSL) 或传输层安全 (TLS) 协议版本不更改现有连接。       请注意，此属性，目的列出没有默认值。 安全前景不断更改，并默认协议和保护级别随时间推移更改以避免已知漏洞的攻击。 默认值将因而异单台计算机配置，并且上已安装的软件，并且在其上应用了修补程序。       使用特定的保护级别，或假定默认情况下，使用给定的安全级别，应永远不会隐式依赖你的代码。 如果你的应用程序依赖于使用特定的安全级别，你必须显式指定该级别，然后检查以确保它在建立的连接上使用实际上是。 此外，你的代码应设计为可靠在遇到时也支持协议的更改，这种情况下更改通常使用进行很少预先通知以便降低新出现的威胁。       .NET Framework 4.6 包括一个新的安全功能，将阻止不安全的密码和哈希算法的连接。 默认情况下，使用 TLS/SSL 通过例如 HttpClient、 HttpWebRequest、 FTPClient、 SmtpClient、 SslStream 等的 Api 和面向.NET Framework 4.6 的应用程序获得更安全行为。       开发人员可能想要选择退出此行为以便保持其现有 SSL3 服务或 TLS 带 RC4 服务与互操作性。 [这篇文章](https://support.microsoft.com/kb/3069494)说明如何修改你的代码，以便禁用新的行为。"
  syntax:
    content: public static System.Net.SecurityProtocolType SecurityProtocol { get; set; }
    return:
      type: System.Net.SecurityProtocolType
      description: "中定义的值之一<xref href=&quot;System.Net.SecurityProtocolType&quot;></xref>枚举。"
  overload: System.Net.ServicePointManager.SecurityProtocol*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定要将此属性的值不是有效<xref href=&quot;System.Net.SecurityProtocolType&quot;></xref>枚举值。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  id: ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置用于验证服务器证书的回调。"
  remarks: "应用程序可以 ServerCertificateValidationCallback 属性设置为要用于客户端的服务器证书的自定义验证方法。 执行自定义验证时`sender`参数传递给<xref:System.Net.Security.RemoteCertificateValidationCallback>可以是主机字符串名称或对象派生自<xref:System.Net.WebRequest>(<xref:System.Net.HttpWebRequest>，例如) 具体取决于<xref:System.Net.ServicePointManager.CertificatePolicy%2A>属性。</xref:System.Net.ServicePointManager.CertificatePolicy%2A> </xref:System.Net.HttpWebRequest> </xref:System.Net.WebRequest> </xref:System.Net.Security.RemoteCertificateValidationCallback>       如果不使用自定义验证，与用于创建请求的主机名进行比较的证书名称。 例如，如果<xref:System.Net.WebRequest.Create%28System.String%29>传递参数的&quot;https://www.contoso.com/default.hmtl&quot;的默认行为是客户端检查证书针对 www.contoso.com。</xref:System.Net.WebRequest.Create%28System.String%29>"
  syntax:
    content: public static System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }
    return:
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;></xref>. 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "启用或禁用 keep-alive 选项对 TCP 连接。"
  remarks: "应用程序可以请求 TCP/IP 提供程序启用的 TCP 连接上的保持连接数据包使用。 默认为禁用了 TCP 连接上的保持连接数据包的使用。       默认设置 TCP 套接字时初始化到 2 小时内保持活动状态设置超时和保持活动状态的间隔为 1 秒。 `keepAliveTime`参数指定超时，以毫秒为单位，发送第一个 keep-alive 数据包之前没有活动。 `keepAliveInterval`参数指定的间隔，以毫秒为单位，之间时收到任何确认消息时发送连续 keep-alive 数据包。 保持活动状态的探测数不能更改，并设置为 10。       如果 TCP 连接删除 keep-alive，因此<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>套接字，返回的任何正在进行的调用，任何后续调用将失败并<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public static void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "如果设置为 true，然后 TCP keep-alive 选项对 TCP 连接将使用指定启用`keepAliveTime`和`keepAliveInterval`值。       如果设置为 false，然后 TCP keep-alive 选项被禁用，剩余的参数将被忽略。       默认值为 false。"
    - id: keepAliveTime
      type: System.Int32
      description: "指定超时，以毫秒为单位，发送第一个 keep-alive 数据包之前没有活动。       值必须大于 0。  如果传递的值小于或等于零<xref:System.ArgumentOutOfRangeException>引发。</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "如果接收不到任何确认消息发送连续 keep-alive 数据包时，请指定的间隔，以毫秒为单位，之间。       值必须大于 0。  如果传递的值小于或等于零<xref:System.ArgumentOutOfRangeException>引发。</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePointManager.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "为指定的值<code> keepAliveTime </code>或<code> keepAliveInterval </code>参数是否小于或等于 0。"
  platform:
  - net462
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "确定由此管理的服务点是否使用 Nagle 算法<xref href=&quot;System.Net.ServicePointManager&quot;></xref>对象。"
  remarks: "Nagle 算法用于通过缓冲的数据的小型数据包并将其传输作为单个数据包降低网络流量。 此过程也称为&quot;nagling&quot;;它使用广泛，因为它减少了传输数据包的数目，并降低了每个数据包的开销。       更改此属性的值不影响现有<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> 仅新服务创建的点在更改后会受到影响。       Nagle 算法完全述 IETF RFC 896。"
  example:
  - "The following code example sets this property.  \n  \n [!code-cpp[System.Net.ServicePoint#10](~/add/codesnippet/cpp/p-system.net.servicepoin_20_1.cpp)]\n [!code-vb[System.Net.ServicePoint#10](~/add/codesnippet/visualbasic/p-system.net.servicepoin_20_1.vb)]\n [!code-cs[System.Net.ServicePoint#10](~/add/codesnippet/csharp/p-system.net.servicepoin_20_1.cs)]"
  syntax:
    content: public static bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要使用 Nagle 算法;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePointManager.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.ServicePointManager.CertificatePolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
  fullName: System.Net.ServicePointManager.CertificatePolicy
- uid: System.Net.ICertificatePolicy
  parent: System.Net
  isExternal: false
  name: ICertificatePolicy
  nameWithType: ICertificatePolicy
  fullName: System.Net.ICertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
  fullName: System.Net.ServicePointManager.CheckCertificateRevocationList
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.ServicePointManager.DefaultConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultConnectionLimit
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultNonPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultNonPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultPersistentConnectionLimit
  nameWithType: ServicePointManager.DefaultPersistentConnectionLimit
  fullName: System.Net.ServicePointManager.DefaultPersistentConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
  fullName: System.Net.ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
  fullName: System.Net.ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
  fullName: System.Net.ServicePointManager.EncryptionPolicy
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
  fullName: System.Net.ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri)
  nameWithType: ServicePointManager.FindServicePoint(Uri)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri)
- uid: System.Net.ServicePoint
  parent: System.Net
  isExternal: false
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(String,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(String,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(String,IWebProxy)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.IWebProxy
  parent: System.Net
  isExternal: true
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint(Uri,IWebProxy)
  nameWithType: ServicePointManager.FindServicePoint(Uri,IWebProxy)
  fullName: System.Net.ServicePointManager.FindServicePoint(Uri,IWebProxy)
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
  fullName: System.Net.ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
  fullName: System.Net.ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
  fullName: System.Net.ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
  fullName: System.Net.ServicePointManager.SecurityProtocol
- uid: System.Net.SecurityProtocolType
  parent: System.Net
  isExternal: false
  name: SecurityProtocolType
  nameWithType: SecurityProtocolType
  fullName: System.Net.SecurityProtocolType
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
  fullName: System.Net.ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePointManager.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePointManager.UseNagleAlgorithm
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
  fullName: System.Net.ServicePointManager.UseNagleAlgorithm
- uid: System.Net.ServicePointManager.CertificatePolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CertificatePolicy
  nameWithType: ServicePointManager.CertificatePolicy
- uid: System.Net.ServicePointManager.CheckCertificateRevocationList*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: CheckCertificateRevocationList
  nameWithType: ServicePointManager.CheckCertificateRevocationList
- uid: System.Net.ServicePointManager.DefaultConnectionLimit*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DefaultConnectionLimit
  nameWithType: ServicePointManager.DefaultConnectionLimit
- uid: System.Net.ServicePointManager.DnsRefreshTimeout*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: DnsRefreshTimeout
  nameWithType: ServicePointManager.DnsRefreshTimeout
- uid: System.Net.ServicePointManager.EnableDnsRoundRobin*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EnableDnsRoundRobin
  nameWithType: ServicePointManager.EnableDnsRoundRobin
- uid: System.Net.ServicePointManager.EncryptionPolicy*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: EncryptionPolicy
  nameWithType: ServicePointManager.EncryptionPolicy
- uid: System.Net.ServicePointManager.Expect100Continue*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePointManager.Expect100Continue
- uid: System.Net.ServicePointManager.FindServicePoint*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: FindServicePoint
  nameWithType: ServicePointManager.FindServicePoint
- uid: System.Net.ServicePointManager.MaxServicePointIdleTime*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePointIdleTime
  nameWithType: ServicePointManager.MaxServicePointIdleTime
- uid: System.Net.ServicePointManager.MaxServicePoints*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: MaxServicePoints
  nameWithType: ServicePointManager.MaxServicePoints
- uid: System.Net.ServicePointManager.ReusePort*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ReusePort
  nameWithType: ServicePointManager.ReusePort
- uid: System.Net.ServicePointManager.SecurityProtocol*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SecurityProtocol
  nameWithType: ServicePointManager.SecurityProtocol
- uid: System.Net.ServicePointManager.ServerCertificateValidationCallback*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: ServerCertificateValidationCallback
  nameWithType: ServicePointManager.ServerCertificateValidationCallback
- uid: System.Net.ServicePointManager.SetTcpKeepAlive*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePointManager.SetTcpKeepAlive
- uid: System.Net.ServicePointManager.UseNagleAlgorithm*
  parent: System.Net.ServicePointManager
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePointManager.UseNagleAlgorithm
