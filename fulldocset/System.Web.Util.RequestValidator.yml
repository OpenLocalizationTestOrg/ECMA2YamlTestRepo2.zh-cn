### YamlMime:ManagedReference
items:
- uid: System.Web.Util.RequestValidator
  id: RequestValidator
  children:
  - System.Web.Util.RequestValidator.#ctor
  - System.Web.Util.RequestValidator.Current
  - System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  - System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  langs:
  - csharp
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
  type: Class
  summary: "定义自定义请求验证的基本方法。"
  remarks: "默认情况下，ASP.NET 不会验证请求，直到代码明确请求中请求一个值。 例如，ASP.NET 不会验证查询字符串的值之前的代码访问<xref:System.Web.HttpRequest.QueryString%2A>集合。</xref:System.Web.HttpRequest.QueryString%2A> 默认情况下，ASP.NET 还不会验证某些类型的请求数据，如窗体值、 cookie、 使用 HTTP 和的值已上载的文件的名称<xref:System.Web.HttpRequest.RawUrl%2A>属性。</xref:System.Web.HttpRequest.RawUrl%2A>       RequestValidator 类是一个基类，可以实现以提供自定义请求验证。 通过实现此类，你可以确定何时进行验证和哪种类型的请求数据执行验证。       默认情况下，ASP.NET 还提供了跨站点脚本 (XSS) 检查。 但是，你可以补充或替换由创建 XSS 的自定义实现在 ASP.NET 中提供的请求验证逻辑。 例如，你可以编写扫描 SQL 注入式攻击，除了检查 XSS 攻击的自定义请求验证实现。       若要创建自定义请求验证，你可以编写从 RequestValidator 基类派生的自定义类。 然后配置 ASP.NET 应用程序级 Web.config 文件中使用自定义请求验证程序。 在 App_Code 文件夹中，在已编译的类库中的 Bin 文件夹，或在已编译的类库位于 GAC 中，你可以放置自定义类。      1> [!NOTE]&1;> 可以为应用程序配置自定义请求验证的一种类型。 不能配置为各个虚拟路径或页的不同请求验证类型。"
  example:
  - "The following example shows how to create a custom request validator that allows only a specific string to be used for query-string values.  \n  \n [!code-cs[System.Web.Util.RequestValidator#1](~/add/codesnippet/csharp/t-system.web.util.reques_1.cs)]\n [!code-vb[System.Web.Util.RequestValidator#1](~/add/codesnippet/visualbasic/t-system.web.util.reques_1.vb)]  \n  \n The following example shows how to configure ASP.NET to use the custom validator in the Web.config file for an application.  \n  \n```  \n<system.web>  \n  <httpRuntime requestValidationType=\"CustomRequestValidation\" />  \n</system.web>  \n```"
  syntax:
    content: public class RequestValidator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.#ctor
  id: '#ctor'
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: System.Web.Util.RequestValidator.RequestValidator()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "初始化的新实例<xref href=&quot;System.Web.Util.RequestValidator&quot;></xref>类。"
  remarks: "<xref:System.Web.Util.RequestValidator>类具有一个默认构造函数。</xref:System.Web.Util.RequestValidator> 初始化类的新实例时，内部的方法从应用程序的配置信息中检索自定义验证详细信息。 配置详细信息包含在<xref:System.Web.Configuration.HttpRuntimeSection>部分。</xref:System.Web.Configuration.HttpRuntimeSection> 有关详细信息，请参阅[httpRuntime 元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)和<xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>属性。</xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A>       在初始化的单个实例期间<xref:System.Web.Util.RequestValidator>创建类，而对实例的引用中进行维护<xref:System.Web.Util.RequestValidator.Current%2A>属性。</xref:System.Web.Util.RequestValidator.Current%2A> </xref:System.Web.Util.RequestValidator> ASP.NET 不创建每个请求的新请求验证程序实例。 因此的自定义实现<xref:System.Web.Util.RequestValidator>类必须是线程安全。</xref:System.Web.Util.RequestValidator>"
  syntax:
    content: public RequestValidator ();
    parameters: []
  overload: System.Web.Util.RequestValidator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.Current
  id: Current
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: Current
  nameWithType: RequestValidator.Current
  fullName: System.Web.Util.RequestValidator.Current
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "获取或设置与当前的引用<xref href=&quot;System.Web.Util.RequestValidator&quot;></xref>将应用程序中使用的实例。"
  remarks: "当前的属性保留<xref:System.Web.Util.RequestValidator>类。</xref:System.Web.Util.RequestValidator>允许的单个实例的引用 如果不存在任何实例，创建一个新的键。 如果已存在的实例，则返回当前实例。       在初始化的单个实例期间<xref:System.Web.Util.RequestValidator>创建类，并且对实例的引用将可在当前的属性。</xref:System.Web.Util.RequestValidator> ASP.NET 不创建每个请求的新请求验证程序实例。 因此的自定义实现<xref:System.Web.Util.RequestValidator>类必须是线程安全。</xref:System.Web.Util.RequestValidator>      1> [!NOTE]&1;> 当前属性不是线程安全，而该属性设置对当前<xref:System.Web.Util.RequestValidator>类</xref:System.Web.Util.RequestValidator>的引用"
  syntax:
    content: public static System.Web.Util.RequestValidator Current { get; set; }
    return:
      type: System.Web.Util.RequestValidator
      description: "实例<xref href=&quot;System.Web.Util.RequestValidator&quot;></xref>类。"
  overload: System.Web.Util.RequestValidator.Current*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "该属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "提供调用受保护的公共方法<xref:System.Web.Util.RequestValidator.IsValidRequestString*>方法，以验证 HTTP 请求数据。</xref:System.Web.Util.RequestValidator.IsValidRequestString*>"
  remarks: "InvokeIsValidRequestString 方法提供对受保护的公共访问<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>方法。</xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> 这允许您创建的<xref:System.Web.Util.RequestValidator>类并调用<xref:System.Web.Util.RequestValidator.IsValidRequestString%2A>而无需从<xref:System.Web.Util.RequestValidator>类</xref:System.Web.Util.RequestValidator>继承的方法</xref:System.Web.Util.RequestValidator.IsValidRequestString%2A></xref:System.Web.Util.RequestValidator>的自定义包装类       有关请求验证的信息，请参阅<xref:System.Web.UnvalidatedRequestValues>。</xref:System.Web.UnvalidatedRequestValues>"
  syntax:
    content: public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "请求的 HTTP 上下文。"
    - id: value
      type: System.String
      description: "要验证的 HTTP 请求数据。"
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "一个表示正在验证的请求数据的源的枚举。 以下是为该枚举的可能值:-<xref uid=&quot;langword_csharp_QueryString&quot; name=&quot;QueryString&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Form &quot; name=&quot;Form &quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Cookies&quot; name=&quot;Cookies&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Files&quot; name=&quot;Files&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Path&quot; name=&quot;Path&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_PathInfo&quot; name=&quot;PathInfo&quot; href=&quot;&quot;></xref>      -   <xref uid=&quot;langword_csharp_Headers&quot; name=&quot;Headers&quot; href=&quot;&quot;></xref>"
    - id: collectionKey
      type: System.String
      description: "（可选）要验证的项请求集合中的键。 如果从集合获取要验证的数据，则使用此参数。 如果要验证的数据不是从集合中，此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: validationFailureIndex
      type: System.Int32
      description: "此方法返回时，指示请求集合中的有问题或无效文本的从零开始的起始点。 此参数传递时未经初始化。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果要验证的字符串不包含可能用于恶意脚本攻击; 中的未编码的字符否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: "验证一个字符串，包含 HTTP 请求数据。"
  remarks: "实现此方法可执行的请求数据的自定义验证。 IsValidRequestString 方法的基本行为就像的行为 ASP.NET 在内部实现危险字符串中跨站点脚本验证检查。 有关详细信息，请参阅[How To︰ 在 ASP.NET 防止跨站点脚本](http://go.microsoft.com/fwlink/?LinkID=178708)。       如果自定义验证逻辑将检测错误，则此方法应返回`false`并提供一个值在`validationFailureIndex`以指示导致错误的文本的起始点。 中的值`validationFailureIndex`必须为 0 或一个正整数。       在请求验证检查逻辑继续，如下所示:-<xref:System.Web.HttpRequest>类执行的传入数据的 null 字符删除检查。</xref:System.Web.HttpRequest>      -<xref:System.Web.HttpRequest>类调用 IsValidRequestString 方法 （该基方法的默认实现），或调用方法的派生的版本。</xref:System.Web.HttpRequest>      -如果 IsValidRequestString 方法返回`false`若要指示验证失败，ASP.NET 构造错误字符串 （如有必要），并引发<xref:System.Web.HttpRequestValidationException>异常。</xref:System.Web.HttpRequestValidationException>"
  syntax:
    content: protected virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "当前请求上下文。"
    - id: value
      type: System.String
      description: "要验证的 HTTP 请求数据。"
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "一个表示正在验证的请求数据的源的枚举。 枚举可能的值如下︰<xref uid=&quot;langword_csharp_QueryString&quot; name=&quot;QueryString&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Form &quot; name=&quot;Form &quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Cookies&quot; name=&quot;Cookies&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Files&quot; name=&quot;Files&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_RawUrl&quot; name=&quot;RawUrl&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Path&quot; name=&quot;Path&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_PathInfo&quot; name=&quot;PathInfo&quot; href=&quot;&quot;></xref><xref uid=&quot;langword_csharp_Headers&quot; name=&quot;Headers&quot; href=&quot;&quot;></xref>"
    - id: collectionKey
      type: System.String
      description: "要验证的项请求集合中的键。 此参数是可选的。 如果从集合获取要验证的数据，则使用此参数。 如果要验证的数据不是一个集合，来自`collectionKey`可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: validationFailureIndex
      type: System.Int32
      description: "此方法返回时，指示请求集合中的有问题或无效文本的从零开始的起始点。 此参数传递时未经初始化。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果要验证的字符串是有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Util.RequestValidator.IsValidRequestString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Web.Util.RequestValidator.#ctor
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: System.Web.Util.RequestValidator.RequestValidator()
- uid: System.Web.Util.RequestValidator.Current
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
  fullName: System.Web.Util.RequestValidator.Current
- uid: System.Web.Util.RequestValidator
  parent: System.Web.Util
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.InvokeIsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Util.RequestValidationSource
  parent: System.Web.Util
  isExternal: false
  name: RequestValidationSource
  nameWithType: RequestValidationSource
  fullName: System.Web.Util.RequestValidationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
  fullName: System.Web.Util.RequestValidator.IsValidRequestString(HttpContext,String,RequestValidationSource,String,Int32)
- uid: System.Web.Util.RequestValidator.#ctor*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator.RequestValidator
- uid: System.Web.Util.RequestValidator.Current*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString
  nameWithType: RequestValidator.InvokeIsValidRequestString
- uid: System.Web.Util.RequestValidator.IsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString
  nameWithType: RequestValidator.IsValidRequestString
