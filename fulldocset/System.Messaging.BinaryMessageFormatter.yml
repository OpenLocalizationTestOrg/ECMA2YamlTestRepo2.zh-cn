### YamlMime:ManagedReference
items:
- uid: System.Messaging.BinaryMessageFormatter
  id: BinaryMessageFormatter
  children:
  - System.Messaging.BinaryMessageFormatter.#ctor
  - System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)
  - System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.BinaryMessageFormatter.Clone
  - System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.BinaryMessageFormatter.TopObjectFormat
  - System.Messaging.BinaryMessageFormatter.TypeFormat
  - System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: BinaryMessageFormatter
  nameWithType: BinaryMessageFormatter
  fullName: System.Messaging.BinaryMessageFormatter
  type: Class
  summary: "序列化或反序列化的对象或连接到或从使用二进制格式的消息队列消息的正文的对象的整个图。"
  remarks: "BinaryMessageFormatter 是非常高效，可用于序列化大多数对象。 结果是非常紧凑且快速进行分析、 但不允许的松散耦合的消息传递作为<xref:System.Messaging.XmlMessageFormatter>未。</xref:System.Messaging.XmlMessageFormatter> 松耦合的意味着客户端和服务器独立可以发送和接收的类型版本。       当应用程序发送一条消息到使用的实例的队列<xref:System.Messaging.MessageQueue>类，格式化程序对象序列化为流，并将它插入到消息正文。</xref:System.Messaging.MessageQueue> 当从使用<xref:System.Messaging.MessageQueue>、 格式化程序反序列化消息数据<xref:System.Messaging.Message.Body%2A>的一种<xref:System.Messaging.Message>。</xref:System.Messaging.Message>属性</xref:System.Messaging.Message.Body%2A>插入</xref:System.Messaging.MessageQueue>队列中读取       BinaryMessageFormatter 提供更快吞吐量要高于<xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> 当需要纯速度而不是松散耦合的消息传递时，请使用 BinaryMessageFormatter。"
  example:
  - >-
    [!code-cpp[MessagingBinaryFormatter#1](~/add/codesnippet/cpp/t-system.messaging.binar_1.cpp)]
     [!code-cs[MessagingBinaryFormatter#1](~/add/codesnippet/csharp/t-system.messaging.binar_1.cs)]
     [!code-vb[MessagingBinaryFormatter#1](~/add/codesnippet/visualbasic/t-system.messaging.binar_1.vb)]
  syntax:
    content: 'public class BinaryMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: BinaryMessageFormatter()
  nameWithType: BinaryMessageFormatter.BinaryMessageFormatter()
  fullName: System.Messaging.BinaryMessageFormatter.BinaryMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.BinaryMessageFormatter&quot;></xref>而无需指定类型样式或顶级对象程序集样式的类。"
  remarks: "必须指定值<xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>属性 （用于定义关系图中的根对象的布局方式） 和<xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A>属性 （用于定义对象类型描述如何布局） 之前使用的实例<xref:System.Messaging.BinaryMessageFormatter>类进行序列化和发送消息。</xref:System.Messaging.BinaryMessageFormatter> </xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A> </xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>"
  syntax:
    content: public BinaryMessageFormatter ();
    parameters: []
  overload: System.Messaging.BinaryMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)
  id: '#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)'
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
  nameWithType: BinaryMessageFormatter.BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
  fullName: System.Messaging.BinaryMessageFormatter.BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.BinaryMessageFormatter&quot;></xref>类，同时指定根对象和类型说明的格式。"
  syntax:
    content: public BinaryMessageFormatter (System.Runtime.Serialization.Formatters.FormatterAssemblyStyle topObjectFormat, System.Runtime.Serialization.Formatters.FormatterTypeStyle typeFormat);
    parameters:
    - id: topObjectFormat
      type: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
      description: "确定关系图的顶级 （根） 对象中的序列化流的布局方式。"
    - id: typeFormat
      type: System.Runtime.Serialization.Formatters.FormatterTypeStyle
      description: "确定类型说明中的序列化流的布局方式。"
  overload: System.Messaging.BinaryMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: BinaryMessageFormatter.CanRead(Message)
  fullName: System.Messaging.BinaryMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "确定格式化程序是否可以反序列化消息的内容。"
  remarks: "CanRead 返回`false`如果消息正文不是一个二进制对象。       在接收计算机上，CanRead 返回`true`如果本地存在类的程序集，要反序列化。 程序集必须在全局程序集缓存中，找到或链接到应用程序 （例如，如果该对象表示的自定义类）。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>检查。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果二进制消息格式化程序可以反序列化消息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.BinaryMessageFormatter.CanRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: BinaryMessageFormatter.Clone()
  fullName: System.Messaging.BinaryMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "创建的实例<xref href=&quot;System.Messaging.BinaryMessageFormatter&quot;></xref>类其读/写属性 （的根对象和类型描述格式） 都与当前相同<xref href=&quot;System.Messaging.BinaryMessageFormatter&quot;> </xref>。"
  remarks: "此方法创建一份格式化程序，并初始化所有其属性设置为此<xref:System.Messaging.BinaryMessageFormatter>。</xref:System.Messaging.BinaryMessageFormatter>的值 用于可伸缩性，但不保证读取或写入线程安全性。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "其属性与此相同一个对象<xref href=&quot;System.Messaging.BinaryMessageFormatter&quot;> </xref>，但其元数据并不指定它为格式化程序类实例。"
  overload: System.Messaging.BinaryMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: BinaryMessageFormatter.Read(Message)
  fullName: System.Messaging.BinaryMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从给定的消息读取内容并创建包含反序列化的消息的对象。"
  remarks: "> [!IMPORTANT]1> 调用此方法不受信任的数据会带来安全风险。 调用此方法仅受信任的数据。 有关详细信息，请参阅[不受信任的数据安全风险](http://go.microsoft.com/fwlink/?LinkId=330378)。       消息的正文必须采用二进制格式，并且必须使用相同的序列化程序进行反序列化形式，最初序列化的消息。 如果正文表示自定义类，该类的程序集必须位于本地。"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>，采用二进制格式，以便反序列化。"
    return:
      type: System.Object
      description: "反序列化的消息。"
  overload: System.Messaging.BinaryMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "消息的<xref:System.Messaging.Message.BodyType*>属性不指示二进制对象。</xref:System.Messaging.Message.BodyType*>"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.TopObjectFormat
  id: TopObjectFormat
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: TopObjectFormat
  nameWithType: BinaryMessageFormatter.TopObjectFormat
  fullName: System.Messaging.BinaryMessageFormatter.TopObjectFormat
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取或设置一个值，定义关系图的顶级 （根） 对象关于查找和加载其程序集中反序列化。"
  remarks: "目前，你应该接受默认值， `AssemblyStyle`。"
  syntax:
    content: public System.Runtime.Serialization.Formatters.FormatterAssemblyStyle TopObjectFormat { get; set; }
    return:
      type: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
      description: "之一<xref href=&quot;System.Runtime.Serialization.Formatters.FormatterAssemblyStyle&quot;></xref>定义反序列化行为的值。"
  overload: System.Messaging.BinaryMessageFormatter.TopObjectFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.TypeFormat
  id: TypeFormat
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: TypeFormat
  nameWithType: BinaryMessageFormatter.TypeFormat
  fullName: System.Messaging.BinaryMessageFormatter.TypeFormat
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取或设置一个值，定义如何类型说明的布局中的序列化流。"
  remarks: "目前，你应该接受默认值， `TypesWhenNeeded`。"
  syntax:
    content: public System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat { get; set; }
    return:
      type: System.Runtime.Serialization.Formatters.FormatterTypeStyle
      description: "A <xref href=&quot;System.Runtime.Serialization.Formatters.FormatterTypeStyle&quot;> </xref> ，它定义类型说明格式。"
  overload: System.Messaging.BinaryMessageFormatter.TypeFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.BinaryMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: BinaryMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.BinaryMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "对象序列化为消息的正文。"
  remarks: "顶级对象格式和类型格式无需指定要写入队列，因为它们必须在读取时。 <xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>和<xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A>仅在反序列化消息时，格式化程序使用属性。</xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A> </xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>       <xref:System.Messaging.BinaryMessageFormatter>可以序列化大多数对象，但结果不松散耦合。</xref:System.Messaging.BinaryMessageFormatter> 但是，它是 compact，因此格式化程序是有效的大型对象。"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>其<xref:System.Messaging.Message.Body*>属性将包含序列化的对象。</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "要进行序列化到消息正文的对象。"
  overload: System.Messaging.BinaryMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.BinaryMessageFormatter.#ctor
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: BinaryMessageFormatter()
  nameWithType: BinaryMessageFormatter.BinaryMessageFormatter()
  fullName: System.Messaging.BinaryMessageFormatter.BinaryMessageFormatter()
- uid: System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
  nameWithType: BinaryMessageFormatter.BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
  fullName: System.Messaging.BinaryMessageFormatter.BinaryMessageFormatter(FormatterAssemblyStyle,FormatterTypeStyle)
- uid: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
  parent: System.Runtime.Serialization.Formatters
  isExternal: false
  name: FormatterAssemblyStyle
  nameWithType: FormatterAssemblyStyle
  fullName: System.Runtime.Serialization.Formatters.FormatterAssemblyStyle
- uid: System.Runtime.Serialization.Formatters.FormatterTypeStyle
  parent: System.Runtime.Serialization.Formatters
  isExternal: false
  name: FormatterTypeStyle
  nameWithType: FormatterTypeStyle
  fullName: System.Runtime.Serialization.Formatters.FormatterTypeStyle
- uid: System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: BinaryMessageFormatter.CanRead(Message)
  fullName: System.Messaging.BinaryMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.BinaryMessageFormatter.Clone
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: BinaryMessageFormatter.Clone()
  fullName: System.Messaging.BinaryMessageFormatter.Clone()
- uid: System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: BinaryMessageFormatter.Read(Message)
  fullName: System.Messaging.BinaryMessageFormatter.Read(Message)
- uid: System.Messaging.BinaryMessageFormatter.TopObjectFormat
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: TopObjectFormat
  nameWithType: BinaryMessageFormatter.TopObjectFormat
  fullName: System.Messaging.BinaryMessageFormatter.TopObjectFormat
- uid: System.Messaging.BinaryMessageFormatter.TypeFormat
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: TypeFormat
  nameWithType: BinaryMessageFormatter.TypeFormat
  fullName: System.Messaging.BinaryMessageFormatter.TypeFormat
- uid: System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: BinaryMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.BinaryMessageFormatter.Write(Message,Object)
- uid: System.Messaging.BinaryMessageFormatter.#ctor*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: BinaryMessageFormatter
  nameWithType: BinaryMessageFormatter.BinaryMessageFormatter
- uid: System.Messaging.BinaryMessageFormatter.CanRead*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: BinaryMessageFormatter.CanRead
- uid: System.Messaging.BinaryMessageFormatter.Clone*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: BinaryMessageFormatter.Clone
- uid: System.Messaging.BinaryMessageFormatter.Read*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Read
  nameWithType: BinaryMessageFormatter.Read
- uid: System.Messaging.BinaryMessageFormatter.TopObjectFormat*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: TopObjectFormat
  nameWithType: BinaryMessageFormatter.TopObjectFormat
- uid: System.Messaging.BinaryMessageFormatter.TypeFormat*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: TypeFormat
  nameWithType: BinaryMessageFormatter.TypeFormat
- uid: System.Messaging.BinaryMessageFormatter.Write*
  parent: System.Messaging.BinaryMessageFormatter
  isExternal: false
  name: Write
  nameWithType: BinaryMessageFormatter.Write
