### YamlMime:ManagedReference
items:
- uid: System.Net.Security.SslStream
  id: SslStream
  children:
  - System.Net.Security.SslStream.#ctor(System.IO.Stream)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  - System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  - System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  - System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Security.SslStream.CanRead
  - System.Net.Security.SslStream.CanSeek
  - System.Net.Security.SslStream.CanTimeout
  - System.Net.Security.SslStream.CanWrite
  - System.Net.Security.SslStream.CheckCertRevocationStatus
  - System.Net.Security.SslStream.CipherAlgorithm
  - System.Net.Security.SslStream.CipherStrength
  - System.Net.Security.SslStream.Dispose(System.Boolean)
  - System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  - System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  - System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  - System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  - System.Net.Security.SslStream.Flush
  - System.Net.Security.SslStream.HashAlgorithm
  - System.Net.Security.SslStream.HashStrength
  - System.Net.Security.SslStream.IsAuthenticated
  - System.Net.Security.SslStream.IsEncrypted
  - System.Net.Security.SslStream.IsMutuallyAuthenticated
  - System.Net.Security.SslStream.IsServer
  - System.Net.Security.SslStream.IsSigned
  - System.Net.Security.SslStream.KeyExchangeAlgorithm
  - System.Net.Security.SslStream.KeyExchangeStrength
  - System.Net.Security.SslStream.Length
  - System.Net.Security.SslStream.LocalCertificate
  - System.Net.Security.SslStream.Position
  - System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.ReadTimeout
  - System.Net.Security.SslStream.RemoteCertificate
  - System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.SslStream.SetLength(System.Int64)
  - System.Net.Security.SslStream.SslProtocol
  - System.Net.Security.SslStream.TransportContext
  - System.Net.Security.SslStream.Write(System.Byte[])
  - System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.SslStream.WriteTimeout
  langs:
  - csharp
  name: SslStream
  nameWithType: SslStream
  fullName: System.Net.Security.SslStream
  type: Class
  summary: "提供用于使用安全套接字层 (SSL) 安全协议进行身份验证服务器和 （可选） 客户端的客户端服务器通信流。"
  remarks: "SSL 协议帮助提供保密性和完整性检查传输使用 SslStream 的消息。 当客户端和服务器之间传输敏感信息时，应使用 SSL 连接，如提供的 SslStream。 使用 SslStream 可帮助防止任何人读取和在网络上传输时被篡改的信息。       SslStream 实例将使用在创建 SslStream 时提供的流的数据传输。 提供此基础流，必须指定是否关闭 SslStream 也将关闭基础流的选项。 通常情况下，用于 SslStream 类<xref:System.Net.Sockets.TcpClient>和<xref:System.Net.Sockets.TcpListener>类。</xref:System.Net.Sockets.TcpListener> </xref:System.Net.Sockets.TcpClient> <xref:System.Net.Sockets.TcpClient.GetStream%2A>方法提供了<xref:System.Net.Sockets.NetworkStream>适用于 SslStream 类。</xref:System.Net.Sockets.NetworkStream> </xref:System.Net.Sockets.TcpClient.GetStream%2A>       在创建后 SslStream，服务器和 （可选） 客户端必须进行身份验证。 服务器必须提供一个 X509 证书建立的标识的概念，并可以请求，客户端也会这样。 必须使用 SslStream 信息在传输之前执行身份验证。 客户端启动身份验证使用同步<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>方法，身份验证完成之前阻止，或异步<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>方法，不会阻止等待身份验证完成。</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> 服务器启动身份验证使用同步<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>或异步<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> 客户端和服务器必须启动身份验证。       安全支持提供程序 (SSPI) 通道提供程序由处理身份验证。 客户端有机会通过指定控制的服务器的证书验证<xref:System.Net.Security.RemoteCertificateValidationCallback>委托创建 SslStream 时。</xref:System.Net.Security.RemoteCertificateValidationCallback> 服务器还可以通过提供控制验证<xref:System.Net.Security.RemoteCertificateValidationCallback>委派。</xref:System.Net.Security.RemoteCertificateValidationCallback> 由委托引用的方法包括远程方的证书和 SSPI 验证证书时遇到任何错误。 请注意，是否服务器指定一个委托，该委托的方法都会调用无论是否在服务器请求客户端身份验证。 如果服务器没有请求客户端身份验证，服务器的委托方法接收 null 证书和证书错误的空数组。       如果服务器需要客户端身份验证，客户端必须指定一个或多个证书进行身份验证。 在客户端有多个证书，客户端可以提供<xref:System.Net.Security.LocalCertificateSelectionCallback>委托来选择正确的证书进行服务器。</xref:System.Net.Security.LocalCertificateSelectionCallback> 客户端的证书必须位于当前用户的&quot;My&quot;证书存储区。 不支持通过证书的客户端身份验证<xref:System.Security.Authentication.SslProtocols>(SSL 版本 2) 协议。</xref:System.Security.Authentication.SslProtocols>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，和 SslStream 已不再使用。</xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。       如果身份验证过程，也称为 SSL 握手，成功，则建立服务器 （和 （可选） 客户端） 的标识，而 SslStream 可以使用由客户端和服务器，以交换消息。 之前发送或接收信息，客户端和服务器应检查的安全服务和 SslStream 以确定是否协议、 算法和优势选择满足他们的完整性和保密性要求由提供的级别。 如果当前设置不能满足需求，应关闭流。 你可以检查 SslStream 使用提供的安全服务<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性。</xref:System.Net.Security.SslStream.IsSigned%2A> </xref:System.Net.Security.SslStream.IsEncrypted%2A> 下表显示报告用于身份验证、 加密和签名数据的加密设置的元素。      |元素 |成员 |  |-------------|-------------|  |用于进行身份验证服务器和客户端 （可选） 的安全协议。 |<xref:System.Net.Security.SslStream.SslProtocol%2A>属性和关联的<xref:System.Security.Authentication.SslProtocols>枚举。 |  |密钥交换算法。 |<xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A>属性和关联的<xref:System.Security.Authentication.ExchangeAlgorithmType>枚举。 |  |消息完整性算法。 |<xref:System.Net.Security.SslStream.HashAlgorithm%2A>属性和关联的<xref:System.Security.Authentication.HashAlgorithmType>枚举。 |  |消息保密性算法。 |<xref:System.Net.Security.SslStream.CipherAlgorithm%2A>属性和关联的<xref:System.Security.Authentication.CipherAlgorithmType>枚举。 |  |所选算法的优势。 |<xref:System.Net.Security.SslStream.KeyExchangeStrength%2A>， <xref:System.Net.Security.SslStream.HashStrength%2A>，和<xref:System.Net.Security.SslStream.CipherStrength%2A>属性。 |      身份验证成功后，你可以将数据发送使用同步<xref:System.Net.Security.SslStream.Write%2A>或异步<xref:System.Net.Security.SslStream.BeginWrite%2A>方法。</xref:System.Net.Security.SslStream.BeginWrite%2A> </xref:System.Net.Security.SslStream.Write%2A> </xref:System.Net.Security.SslStream.CipherStrength%2A> </xref:System.Net.Security.SslStream.HashStrength%2A> </xref:System.Net.Security.SslStream.KeyExchangeStrength%2A> </xref:System.Security.Authentication.CipherAlgorithmType> </xref:System.Net.Security.SslStream.CipherAlgorithm%2A> </xref:System.Security.Authentication.HashAlgorithmType> </xref:System.Net.Security.SslStream.HashAlgorithm%2A> </xref:System.Security.Authentication.ExchangeAlgorithmType> </xref:System.Net.Security.SslStream.KeyExchangeAlgorithm%2A> </xref:System.Security.Authentication.SslProtocols> </xref:System.Net.Security.SslStream.SslProtocol%2A> 你可以接收的数据使用同步<xref:System.Net.Security.SslStream.Read%2A>或异步<xref:System.Net.Security.SslStream.BeginRead%2A>方法。</xref:System.Net.Security.SslStream.BeginRead%2A> </xref:System.Net.Security.SslStream.Read%2A>       如果指定给<xref:System.Net.Security.SslStream.%23ctor%2A>基础流应保持打开状态，你将负责完成后关闭该流使用它。</xref:System.Net.Security.SslStream.%23ctor%2A>      1> [!NOTE]&1;> 与普通用户的凭据运行的应用程序创建 SslStream 对象，如果应用程序将无法访问证书安装在本地计算机存储区中，除非权限已显式提供给用户若要这样做。       SslStream 假定以及任何其他超时<xref:System.IO.IOException>一个从内部流的引发时将被视为致命由其调用方。</xref:System.IO.IOException> 超时将返回垃圾回收后重用 SslStream 实例。 应用程序应<xref:System.IO.Stream.Close%2A>SslStream 和在这些情况下异常引发。</xref:System.IO.Stream.Close%2A>       .NET Framework 4.6 包括一个新的安全功能，将阻止不安全的密码和哈希算法的连接。 默认情况下，使用 TLS/SSL 通过例如 HttpClient、 HttpWebRequest、 FTPClient、 SmtpClient、 SslStream 等的 Api 和面向.NET Framework 4.6 的应用程序获得更安全行为。       开发人员可能想要选择退出此行为以便保持其现有 SSL3 服务或 TLS 带 RC4 服务与互操作性。 [这篇文章](https://support.microsoft.com/kb/3069494)说明如何修改你的代码，以便禁用新的行为。       .NET Framework 4.6.3 添加新的重载的方法的身份验证不指定 TLS 版本，但改为使用 TLS 版本定义中的系统默认值为 SslStreams [SCHANNEL](https://msdn.microsoft.com/library/windows/desktop/aa380123.aspx)。 作为一种方法能够随着时间推移，TLS 版本最佳做法更改为更高版本修改的默认值在应用中使用这些方法而无需重新生成并重新部署你的应用程序。"
  example:
  - "The following code example demonstrates creating an <xref:System.Net.Sockets.TcpListener> that uses the SslStream class to communicate with clients.  \n  \n [!code-cpp[NclSslServerSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_1.cpp)]\n [!code-cs[NclSslServerSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_1.cs)]  \n  \n The following code example demonstrates creating a <xref:System.Net.Sockets.TcpClient> that uses the SslStream class to communicate with a server.  \n  \n [!code-cpp[NclSslClientSync#0](~/add/codesnippet/cpp/t-system.net.security.ss_2.cpp)]\n [!code-cs[NclSslClientSync#0](~/add/codesnippet/csharp/t-system.net.security.ss_2.cs)]"
  syntax:
    content: 'public class SslStream : System.Net.Security.AuthenticatedStream'
  inheritance:
  - System.IO.Stream
  - System.Net.Security.AuthenticatedStream
  implements: []
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.SslStream&quot;></xref>类使用的指定<xref:System.IO.Stream>。</xref:System.IO.Stream>"
  remarks: "如果在配置文件中为 encryptionpolicy，未指定值<xref:System.Net.Security.EncryptionPolicy>默认为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>为<xref:System.Net.Security.SslStream>构造的实例。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> </xref:System.Net.Security.EncryptionPolicy>       Null 加密的使用时是必需的加密策略设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public SslStream (System.IO.Stream innerStream);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>不可读。       -或-<code>innerStream</code>不是可写。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.SslStream&quot;></xref>类使用指定<xref:System.IO.Stream>和流封闭行为。</xref:System.IO.Stream>"
  remarks: "当指定`true`为`leaveStreamOpen`参数，关闭<xref:System.Net.Security.SslStream>不起任何作用`innerStream`流式传输; 您必须显式关闭`innerStream`不再需要它。</xref:System.Net.Security.SslStream>       如果在配置文件中为 encryptionpolicy，未指定值<xref:System.Net.Security.EncryptionPolicy>默认为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>为<xref:System.Net.Security.SslStream>构造的实例。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> </xref:System.Net.Security.EncryptionPolicy>       Null 加密的使用时是必需的加密策略设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  example:
  - "The following code example demonstrates calling this constructor.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "一个布尔值，该值指示的闭包行为<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream> 此参数指示是否内部流处于打开状态。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>不可读。       -或-<code>innerStream</code>不是可写。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.SslStream&quot;></xref>类使用指定<xref:System.IO.Stream>、 流闭包行为和证书验证委托。</xref:System.IO.Stream>"
  remarks: "当指定`true`为`leaveStreamOpen`参数，关闭<xref:System.Net.Security.SslStream>不起任何作用`innerStream`流式传输; 您必须显式关闭`innerStream`不再需要它。</xref:System.Net.Security.SslStream>       `userCertificateValidationCallback`委托的`certificateErrors`参数中包含的任何返回的通道安全支持提供程序接口 (SSPI) 的 Windows 错误代码。 由调用的方法的返回值`userCertificateValidationCallback`委托确定身份验证是否成功。       安全协议和加密算法包已选择时`userCertificateValidationCallback`调用委托的方法。 该方法可用于确定所选的加密算法和优势是否能够满足你的应用程序。 如果不是，该方法应返回`false`以防止<xref:System.Net.Security.SslStream>从正在创建。</xref:System.Net.Security.SslStream>       如果在配置文件中为 encryptionpolicy，未指定值<xref:System.Net.Security.EncryptionPolicy>默认为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>为<xref:System.Net.Security.SslStream>构造的实例。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> </xref:System.Net.Security.EncryptionPolicy>       Null 加密的使用时是必需的加密策略设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>      1> [!NOTE]&1;> 的 Framework 缓存 SSL 会话，因为它们创建并尝试尽可能重用为新请求，缓存的会话。 当尝试重复使用的 SSL 会话，框架将使用的第一个元素<xref:System.Net.HttpWebRequest.ClientCertificates%2A>（如果没有一个），或尝试重用匿名会话，如果<xref:System.Net.HttpWebRequest.ClientCertificates%2A>为空。</xref:System.Net.HttpWebRequest.ClientCertificates%2A> </xref:System.Net.HttpWebRequest.ClientCertificates%2A>      1> [!NOTE] 1> SSL 版本 2 协议中不支持客户端证书。"
  example:
  - "The following code example creates an <xref:System.Net.Security.SslStream> and initiates the client portion of the authentication.  \n  \n [!code-cpp[NclSslClientSync#4](~/add/codesnippet/cpp/9eaa69b2-6619-41cf-8f97-_1.cpp)]\n [!code-cs[NclSslClientSync#4](~/add/codesnippet/csharp/9eaa69b2-6619-41cf-8f97-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "一个布尔值，该值指示的闭包行为<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream> 此参数指示是否内部流处于打开状态。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>委托负责验证远程方提供的证书。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>不可读。       -或-<code>innerStream</code>不是可写。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.SslStream&quot;></xref>类使用指定<xref:System.IO.Stream>，闭包行为、 证书验证委托和证书选择委托流式传输。</xref:System.IO.Stream>"
  remarks: "当指定`true`为`leaveStreamOpen`参数，关闭<xref:System.Net.Security.SslStream>不起任何作用`innerStream`流式传输; 您必须显式关闭`innerStream`不再需要它。</xref:System.Net.Security.SslStream>       `userCertificateValidationCallback`委托的`certificateErrors`参数中包含的任何返回的通道安全支持提供程序接口 (SSPI) 的 Windows 错误代码。 由调用的方法的返回值`userCertificateValidationCallback`委托确定身份验证是否成功。       安全协议和加密算法包已选择时`userCertificateValidationCallback`调用委托的方法。 该方法可用于确定所选的加密算法和优势是否能够满足你的应用程序。 如果不是，该方法应返回`false`以防止<xref:System.Net.Security.SslStream>从正在创建。</xref:System.Net.Security.SslStream>       `userCertificateSelectionCallback`你的应用程序具有多个证书，并动态必须选择一个证书时，委托很有用。 &quot;MY&quot;存储中的证书将传递到由委托调用的方法。       如果在配置文件中为 encryptionpolicy，未指定值<xref:System.Net.Security.EncryptionPolicy>默认为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>为<xref:System.Net.Security.SslStream>构造的实例。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName> </xref:System.Net.Security.EncryptionPolicy>       Null 加密的使用时是必需的加密策略设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>      1> [!NOTE]&1;> 的 Framework 缓存 SSL 会话，因为它们创建并尝试尽可能重用为新请求，缓存的会话。 当尝试重复使用的 SSL 会话，框架将使用 P:System.Net.HttpWebRequest.ClientCertificates （如果存在），第一个元素或尝试重用匿名会话时为空。"
  example:
  - "The following code example demonstrates calling this constructor. This example is part of a larger example provided for the <xref:System.Net.Security.SslStream> class.  \n  \n [!code-cpp[NclSslClientAsync#6](~/add/codesnippet/cpp/dc8fc9af-8c2a-4c30-be77-_1.cpp)]\n [!code-cs[NclSslClientAsync#6](~/add/codesnippet/csharp/dc8fc9af-8c2a-4c30-be77-_1.cs)]"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "一个布尔值，该值指示的闭包行为<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream> 此参数指示是否内部流处于打开状态。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>委托负责验证远程方提供的证书。"
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;> </xref>委托负责选择用于身份验证的证书。"
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>不可读。       -或-<code>innerStream</code>不是可写。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  id: '#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)'
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.SslStream&quot;></xref>类使用指定<xref:System.IO.Stream></xref:System.IO.Stream>"
  remarks: "时，Null 加密的使用是必需`encryptionPolicy`参数设置为<xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>。</xref:System.Net.Security.EncryptionPolicy?displayProperty=fullName>"
  syntax:
    content: public SslStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen, System.Net.Security.RemoteCertificateValidationCallback userCertificateValidationCallback, System.Net.Security.LocalCertificateSelectionCallback userCertificateSelectionCallback, System.Net.Security.EncryptionPolicy encryptionPolicy);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "一个布尔值，该值指示的闭包行为<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.SslStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream> 此参数指示是否内部流处于打开状态。"
    - id: userCertificateValidationCallback
      type: System.Net.Security.RemoteCertificateValidationCallback
      description: "A <xref href=&quot;System.Net.Security.RemoteCertificateValidationCallback&quot;> </xref>委托负责验证远程方提供的证书。"
    - id: userCertificateSelectionCallback
      type: System.Net.Security.LocalCertificateSelectionCallback
      description: "A <xref href=&quot;System.Net.Security.LocalCertificateSelectionCallback&quot;> </xref>委托负责选择用于身份验证的证书。"
    - id: encryptionPolicy
      type: System.Net.Security.EncryptionPolicy
      description: "The <xref href=&quot;System.Net.Security.EncryptionPolicy&quot;></xref> to use."
  overload: System.Net.Security.SslStream.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>innerStream</code>不可读。       -或-<code>innerStream</code>不是可写。       -或-<code>encryptionPolicy</code>无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  id: AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端进行身份验证服务器和 （可选） 中的客户端-服务器连接的客户端调用。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 任何客户端证书身份验证中不使用。 不会在身份验证过程检查证书吊销列表。 为指定的值`targetHost`上服务器的证书的名称必须匹配。       身份验证成功后，你必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-使用此服务器身份验证<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端进行身份验证服务器和 （可选） 中的客户端-服务器连接的客户端调用。 身份验证过程使用指定的证书集合和 SSL 协议。"
  remarks: "身份验证成功后，你必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。      1> [!NOTE] 1> SSL 版本 2 协议中不支持客户端证书。"
  syntax:
    content: public virtual void AuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "将共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>包含客户端证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
  overload: System.Net.Security.SslStream.AuthenticateAsClient*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  id: AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端进行身份验证服务器和 （可选） 中作为异步操作的客户端-服务器连接的客户端调用。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 任何客户端证书身份验证中不使用。 不会在身份验证过程检查证书吊销列表。 为指定的值`targetHost`上服务器的证书的名称必须匹配。       身份验证成功后，你必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost);
    parameters:
    - id: targetHost
      type: System.String
      description: "共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
    return:
      type: System.Threading.Tasks.Task
      description: "返回<xref:System.Threading.Tasks.Task>表示异步操作的任务对象。</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-使用此服务器身份验证<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端进行身份验证服务器和 （可选） 中作为异步操作的客户端-服务器连接的客户端调用。 身份验证过程使用指定的证书集合和 SSL 协议。"
  remarks: "身份验证成功后，你必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。      1> [!NOTE] 1> SSL 版本 2 协议中不支持客户端证书。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: targetHost
      type: System.String
      description: "将共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>包含客户端证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
    return:
      type: System.Threading.Tasks.Task
      description: "返回<xref:System.Threading.Tasks.Task>表示异步操作的任务对象。</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器进行身份验证服务器和 （可选） 中使用指定的证书的客户端-服务器连接的客户端调用。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 不会在身份验证过程检查证书吊销列表。 客户端不需要提供身份验证证书。       此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法重载。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "使用服务器进行身份验证的证书。"
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-客户端身份验证使用此<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServer*>方法不支持 Windows 95、 Windows 98 或 Windows Millennium。</xref:System.Net.Security.SslStream.AuthenticateAsServer*>"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器进行身份验证服务器和 （可选） 中使用指定的证书、 要求和安全协议的客户端-服务器连接的客户端调用。"
  remarks: "此方法阻止，直至该操作完成。 若要防止在操作完成之前一直阻止，使用之一<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法重载。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual void AuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509 证书用于验证服务器。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否客户端要求进行身份验证证书。</xref:System.Boolean> 请注意这是仅请求-如果不提供服务器仍然接受连接请求的证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
  overload: System.Net.Security.SslStream.AuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>不是有效<xref:System.Security.Authentication.SslProtocols>值。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-客户端身份验证使用此<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServer*>方法不支持 Windows 95、 Windows 98 或 Windows Millennium。</xref:System.Net.Security.SslStream.AuthenticateAsServer*>"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器进行身份验证服务器和 （可选） 中作为异步操作使用指定的证书的客户端-服务器连接的客户端调用。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 不会在身份验证过程检查证书吊销列表。 客户端不需要提供身份验证证书。       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "使用服务器进行身份验证的证书。"
    return:
      type: System.Threading.Tasks.Task
      description: "返回<xref:System.Threading.Tasks.Task>表示异步操作的任务对象。</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-客户端身份验证使用此<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*>方法不支持 Windows 95、 Windows 98 或 Windows Millennium。</xref:System.Net.Security.SslStream.AuthenticateAsServerAsync*>"
  platform:
  - net462
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  id: AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器进行身份验证服务器和 （可选） 中作为异步操作使用指定的证书、 要求和安全协议的客户端-服务器连接的客户端调用。"
  remarks: "如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509 证书用于验证服务器。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否客户端要求进行身份验证证书。</xref:System.Boolean> 请注意这是仅请求-如果不提供服务器仍然接受连接请求的证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
    return:
      type: System.Threading.Tasks.Task
      description: "返回<xref:System.Threading.Tasks.Task>表示异步操作的任务对象。</xref:System.Threading.Tasks.Task>"
  overload: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端开始一个异步操作以验证服务器和 （可选） 客户端调用。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 任何客户端证书身份验证中不使用。 不会在身份验证过程检查证书吊销列表。       为指定的值`targetHost`上服务器的证书的名称必须匹配。       必须通过调用完成异步身份验证操作<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>方法。</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> 通常情况下，通过调用该方法`asyncCallback`委托。       在操作完成时，此方法不会阻止。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>方法重载。</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/add/includes/ajax-current-ext-md.md)如果你收到<xref:System.Security.Authentication.AuthenticationException>，则此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用身份验证完成时要调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-使用此服务器身份验证<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由客户端开始一个异步操作以验证服务器和 （可选） 使用指定的证书和安全协议的客户端调用。"
  remarks: "为指定的值`targetHost`上服务器的证书的名称必须匹配。       必须通过调用完成异步身份验证操作<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>方法。</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> 通常情况下，通过调用该方法`asyncCallback`委托。       在操作完成时，此方法不会阻止。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>方法重载。</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/add/includes/ajax-current-ext-md.md)如果你收到<xref:System.Security.Authentication.AuthenticationException>，则此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。      1> [!NOTE] 1> SSL 版本 2 协议中不支持客户端证书。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsClient (string targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: targetHost
      type: System.String
      description: "共享此服务器的名称<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
    - id: clientCertificates
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509CertificateCollection&quot;> </xref>包含客户端证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用身份验证完成时要调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetHost</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>不是有效<xref:System.Security.Authentication.SslProtocols>值。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-使用此服务器身份验证<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器以便开始一个异步操作以验证客户端和 （可选） 中的客户端-服务器连接的服务器。"
  remarks: "此方法进行身份验证使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols> 不会在身份验证过程检查证书吊销列表。 客户端不需要提供身份验证证书。       必须通过调用完成异步身份验证操作<xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A>方法。</xref:System.Net.Security.SslStream.EndAuthenticateAsClient%2A> 通常情况下，通过调用该方法`asyncCallback`委托。       在操作完成时，此方法不会阻止。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>方法重载。</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/add/includes/ajax-current-ext-md.md)如果你收到<xref:System.Security.Authentication.AuthenticationException>，则此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509 证书用于验证服务器。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用身份验证完成时要调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，该值指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-客户端身份验证使用此<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>方法不支持 Windows 95、 Windows 98 或 Windows Millennium。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  id: BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "由服务器以便开始一个异步操作以进行身份验证服务器以及 （可选） 使用指定的证书、 要求和安全协议的客户端调用。"
  remarks: "必须通过调用完成异步身份验证操作<xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.EndAuthenticateAsServer%2A> 通常情况下，通过调用该方法`asyncCallback`委托。       在操作完成时，此方法不会阻止。 若要阻止该操作完成之前，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>方法重载。</xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>       有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/add/includes/ajax-current-ext-md.md)如果你收到<xref:System.Security.Authentication.AuthenticationException>，则此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。"
  syntax:
    content: public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, bool clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, bool checkCertificateRevocation, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: serverCertificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "X509 证书用于验证服务器。"
    - id: clientCertificateRequired
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否客户端要求进行身份验证证书。</xref:System.Boolean> 请注意这是仅请求-如果不提供服务器仍然接受连接请求的证书。"
    - id: enabledSslProtocols
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
    - id: checkCertificateRevocation
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指定是否在身份验证过程检查证书吊销列表。</xref:System.Boolean>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用身份验证完成时要调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>serverCertificate</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>enabledSslProtocols</code>不是有效<xref:System.Security.Authentication.SslProtocols>值。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发生身份验证。       -或-使用此服务器身份验证<xref href=&quot;System.Net.Security.SslStream&quot;></xref>之前已尝试进行。       -或者-身份验证已在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>方法不支持 Windows 95、 Windows 98 或 Windows Millennium。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "开始异步读的操作从流中读取数据并将它存储在指定的数组。"
  remarks: "如果启用了加密和签名，读取的操作从基础流中读取数据、 检查的数据的完整性和/或对其进行解密。 异步读的操作必须由调用完成<xref:System.Net.Security.SslStream.EndRead%2A>方法。</xref:System.Net.Security.SslStream.EndRead%2A> 通常情况下，通过调用该方法`asyncCallback`委托。       在操作完成时，此方法不会阻止。 若要阻止该操作完成之前，请使用<xref:System.Net.Security.SslStream.Read%2A>方法。</xref:System.Net.Security.SslStream.Read%2A>       有关使用异步编程模型的详细信息，请参阅[异步调用同步方法](~/add/includes/ajax-current-ext-md.md)<xref:System.Net.Security.SslStream>类不支持多个同时进行的读取操作。</xref:System.Net.Security.SslStream>       你已成功通过身份验证之前，不能调用此方法。 进行身份验证的调用一个<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates starting an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#8](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_1.cpp)]\n [!code-cs[NclSslClientAsync#8](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_1.cs)]  \n  \n [!code-cpp[NclSslClientAsync#4](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_2.cpp)]\n [!code-cs[NclSslClientAsync#4](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_2.cs)]  \n  \n The following method is called when the read completes.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/97989688-3a5b-49ee-9639-_3.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/97989688-3a5b-49ee-9639-_3.cs)]"
  syntax:
    content: public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>数组，用于接收字节从流中读取。</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "中的从零开始的位置`buffer`从此处开始存储读取的数据从该流。"
    - id: count
      type: System.Int32
      description: "最大要从流中读取的字节数。"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用要在读取的操作已完成时调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关读取操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;的长度<code>buffer</code>。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "读取的操作失败。       -或-加密正在使用，但无法对数据解密。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "已存在正在进行的读取的操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "开始异步写操作写入<xref:System.Byte>从指定的缓冲区到流的 s。</xref:System.Byte>"
  remarks: ''
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cs[NclSslServerAsync#5](~/add/codesnippet/csharp/7192cc61-a256-4249-aafa-_1.cs)]\n [!code-cpp[NclSslServerAsync#5](~/add/codesnippet/cpp/7192cc61-a256-4249-aafa-_1.cpp)]"
  syntax:
    content: public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>提供要写入到流的字节的数组。</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "中的从零开始的位置`buffer`从此处开始读取要写入到流的字节。"
    - id: count
      type: System.Int32
      description: "<xref:System.Int32>值，该值指定要从其中进行读取的字节数`buffer`。</xref:System.Int32>"
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>引用写入操作完成时要调用的方法的委托。</xref:System.AsyncCallback>"
    - id: asyncState
      type: System.Object
      description: "用户定义的对象，其中包含有关写入操作的信息。 此对象传递给`asyncCallback`委托操作完成时。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象，该值指示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.BeginWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;的长度<code>buffer</code>。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "写入操作失败。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "已存在正在进行的写入操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanRead
  id: CanRead
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否可读基础流。</xref:System.Boolean>"
  remarks: "如果发生了成功的身份验证，此属性返回通过调用返回的值<xref:System.IO.Stream.CanRead%2A>对基础流。</xref:System.IO.Stream.CanRead%2A>       基础流是在创建<xref:System.Net.Security.SslStream>类</xref:System.Net.Security.SslStream>的实例时指定"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_14_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_14_1.cs)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已进行身份验证且基础流可读，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否可查找的基础流。</xref:System.Boolean>"
  remarks: "请不要尝试设置的位置<xref:System.Net.Security.SslStream>对象或其基础流。</xref:System.Net.Security.SslStream>       基础流是在创建<xref:System.Net.Security.SslStream>类</xref:System.Net.Security.SslStream>的实例时指定"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "此属性始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示基础流是否支持超时。</xref:System.Boolean>"
  remarks: "此属性返回通过调用返回的值<xref:System.IO.Stream.CanTimeout%2A>对基础流。</xref:System.IO.Stream.CanTimeout%2A>       基础流是在创建<xref:System.Net.Security.SslStream>类</xref:System.Net.Security.SslStream>的实例时指定"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_8_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_8_1.cs)]"
  syntax:
    content: public override bool CanTimeout { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果基础流支持超时，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.CanTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否可写基础流。</xref:System.Boolean>"
  remarks: "如果发生了成功的身份验证，此属性返回通过调用返回的值<xref:System.IO.Stream.CanWrite%2A>对基础流。</xref:System.IO.Stream.CanWrite%2A>       基础流是在创建<xref:System.Net.Security.SslStream>类</xref:System.Net.Security.SslStream>的实例时指定"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_17_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_17_1.cs)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已进行身份验证，而且基础流可写;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  id: CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否在证书验证过程检查证书吊销列表。</xref:System.Boolean>"
  remarks: "证书吊销列表包含已吊销由颁发者颁发的证书。 在列表中检查产生负面影响性能，但可以提高应用程序安全性。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#5](~/add/codesnippet/cpp/p-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslServerSync#5](~/add/codesnippet/csharp/p-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public virtual bool CheckCertRevocationStatus { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果检查证书吊销列表;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.CheckCertRevocationStatus*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherAlgorithm
  id: CipherAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取一个值，标识使用的批量加密算法<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
  remarks: "值为<xref:System.Security.Authentication.CipherAlgorithmType>CipherAlgorithm 属性要求时<xref:System.Net.Security.EncryptionPolicy>枚举值用于构造<xref:System.Net.Security.SslStream>实例。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.EncryptionPolicy> </xref:System.Security.Authentication.CipherAlgorithmType>       [!INCLUDE[winxpsvr](~/add/includes/winxpsvr-md.md)]和[!INCLUDE[winxp](~/add/includes/winxp-md.md)]不支持<xref:System.Security.Authentication.CipherAlgorithmType>值。</xref:System.Security.Authentication.CipherAlgorithmType> 因此，即使<xref:System.Security.Authentication.CipherAlgorithmType>值用于构造的<xref:System.Net.Security.SslStream>实例，<xref:System.Net.Security.EncryptionPolicy>属性将为<xref:System.Security.Authentication.CipherAlgorithmType>.</xref:System.Security.Authentication.CipherAlgorithmType> </xref:System.Net.Security.EncryptionPolicy> </xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.CipherAlgorithmType> <xref:System.Security.Authentication.CipherAlgorithmType>Windows Vista 及更高版本，才返回值。</xref:System.Security.Authentication.CipherAlgorithmType>"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_10_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_10_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.CipherAlgorithmType CipherAlgorithm { get; }
    return:
      type: System.Security.Authentication.CipherAlgorithmType
      description: "A<xref:System.Security.Authentication.CipherAlgorithmType>值。</xref:System.Security.Authentication.CipherAlgorithmType>"
  overload: System.Net.Security.SslStream.CipherAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在完成身份验证过程或身份验证过程失败之前，已访问 CipherAlgorithm 属性。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.CipherStrength
  id: CipherStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取一个值，标识使用的加密算法的强度<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
  remarks: "身份验证之前，此属性的值为零。       此属性将返回以下值之一:-0-40-56-80-128-168 192-256"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_6_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_6_1.cs)]"
  syntax:
    content: public virtual int CipherStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，该值以位为单位指定该算法的强度。</xref:System.Int32>"
  overload: System.Net.Security.SslStream.CipherStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "释放由非托管的资源<xref href=&quot;System.Net.Security.SslStream&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.Security.SslStream>引用。</xref:System.Net.Security.SslStream> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Net.Security.SslStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  id: EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "结束到<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>以前调用启动的挂起的异步服务器身份验证操作"
  remarks: "如果该操作未完成，此方法阻止，直至它执行。 当身份验证成功时，您必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。       若要以同步方式执行此操作，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>通过<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>.</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>调用返回的实例</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndAuthenticateAsClient*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>未创建通过调用<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer*>。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有挂起的服务器身份验证才能完成。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  id: EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "结束到<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>。</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>以前调用启动的挂起的异步客户端身份验证操作"
  remarks: "如果该操作未完成，此方法阻止，直至它执行。 当身份验证成功时，您必须检查<xref:System.Net.Security.SslStream.IsEncrypted%2A>和<xref:System.Net.Security.SslStream.IsSigned%2A>属性，以确定由<xref:System.Net.Security.SslStream>.</xref:System.Net.Security.SslStream>使用哪些安全服务</xref:System.Net.Security.SslStream.IsSigned%2A></xref:System.Net.Security.SslStream.IsEncrypted%2A> 检查<xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>属性以确定是否发生了相互身份验证。</xref:System.Net.Security.SslStream.IsMutuallyAuthenticated%2A>       如果身份验证失败，你收到<xref:System.Security.Authentication.AuthenticationException>，并且此<xref:System.Net.Security.SslStream>已不再使用。</xref:System.Net.Security.SslStream> </xref:System.Security.Authentication.AuthenticationException> 您应关闭此对象，并删除对它的所有引用，以便它可以通过垃圾回收器收集。       若要以同步方式执行此操作，请使用之一<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>方法。</xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>"
  syntax:
    content: public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>通过<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>.</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>调用返回的实例</xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndAuthenticateAsServer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>未创建通过调用<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient*>。"
  - type: System.Security.Authentication.AuthenticationException
    commentId: T:System.Security.Authentication.AuthenticationException
    description: "身份验证失败，此对象处于不可用状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有挂起的客户端身份验证才能完成。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  id: EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "结束异步读取的操作开始使用<xref:System.Net.Security.SslStream.BeginRead*>.</xref:System.Net.Security.SslStream.BeginRead*>的以前调用"
  remarks: "如果该操作未完成，此方法阻止，直至它执行。       若要以同步方式执行此操作，使用<xref:System.Net.Security.SslStream.Read%2A>方法。</xref:System.Net.Security.SslStream.Read%2A>       你已成功通过身份验证之前，不能调用此方法。 进行身份验证的调用一个<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous read operation.  \n  \n [!code-cpp[NclSslClientAsync#5](~/add/codesnippet/cpp/m-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslClientAsync#5](~/add/codesnippet/csharp/m-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override int EndRead (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>返回通过调用实例<xref:System.Net.Security.SslStream.BeginRead*></xref:System.Net.Security.SslStream.BeginRead*></xref:System.IAsyncResult>"
    return:
      type: System.Int32
      description: "A<xref:System.Int32>从基础流中读取指定的字节数的值。</xref:System.Int32>"
  overload: System.Net.Security.SslStream.EndRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>未创建通过调用<xref:System.Net.Security.SslStream.BeginRead*>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "读取的操作失败。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  id: EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "结束异步写操作入门<xref:System.Net.Security.SslStream.BeginWrite*>.</xref:System.Net.Security.SslStream.BeginWrite*>的以前调用"
  remarks: "如果该操作未完成，此方法阻止，直至它执行。       应用程序不能调用此方法，直到你已成功通过身份验证。 若要进行身份验证，调用之一<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       若要以同步方式执行此操作，使用<xref:System.Net.Security.SslStream.Write%2A>方法。</xref:System.Net.Security.SslStream.Write%2A>"
  example:
  - "The following code example demonstrates ending an asynchronous write operation.  \n  \n [!code-cs[NclSslServerAsync#4](~/add/codesnippet/csharp/m-system.net.security.ss_1_1.cs)]\n [!code-cpp[NclSslServerAsync#4](~/add/codesnippet/cpp/m-system.net.security.ss_1_1.cpp)]"
  syntax:
    content: public override void EndWrite (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>返回通过调用实例<xref:System.Net.Security.SslStream.BeginWrite*></xref:System.Net.Security.SslStream.BeginWrite*></xref:System.IAsyncResult>"
  overload: System.Net.Security.SslStream.EndWrite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>asyncResult</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>asyncResult</code>未创建通过调用<xref:System.Net.Security.SslStream.BeginWrite*>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "写入操作失败。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Flush
  id: Flush
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "使所有缓冲的数据都写入基础设备。"
  remarks: "此方法调用<xref:System.IO.Stream.Flush%2A>对基础流。</xref:System.IO.Stream.Flush%2A>"
  example:
  - "The following code example demonstrates calling this method.  \n  \n [!code-cpp[NclSslClientSync#5](~/add/codesnippet/cpp/m-system.net.security.ss_4_1.cpp)]\n [!code-cs[NclSslClientSync#5](~/add/codesnippet/csharp/m-system.net.security.ss_4_1.cs)]"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Net.Security.SslStream.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashAlgorithm
  id: HashAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取用于生成消息身份验证代码 (Mac) 算法。"
  remarks: "消息验证算法可生成消息哈希和签名用于检测篡改或伪造。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_9_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_9_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.HashAlgorithmType HashAlgorithm { get; }
    return:
      type: System.Security.Authentication.HashAlgorithmType
      description: "A<xref:System.Security.Authentication.HashAlgorithmType>值。</xref:System.Security.Authentication.HashAlgorithmType>"
  overload: System.Net.Security.SslStream.HashAlgorithm*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在完成身份验证过程或身份验证过程失败之前，已访问的 HashAlgorithm 属性。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.HashStrength
  id: HashStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取一个值，标识的此实例所使用的哈希算法的强度。"
  remarks: "身份验证之前，此属性的值为零。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public virtual int HashStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，该值指定的强度<xref:System.Security.Authentication.HashAlgorithmType>算法，以位为单位。</xref:System.Security.Authentication.HashAlgorithmType> </xref:System.Int32> 有效值为 128 或 160。"
  overload: System.Net.Security.SslStream.HashStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示身份验证是否成功。</xref:System.Boolean>"
  remarks: "客户端进行身份验证通过调用<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A> 服务器进行身份验证通过调用<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果发生了成功的身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否这<xref href=&quot;System.Net.Security.SslStream&quot;></xref>使用数据加密。</xref:System.Boolean>"
  remarks: "加密有助于保护的数据的隐私，即它可帮助确保，在传输过程中的数据时，它不能破译由第三方。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_0_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_0_1.cs)]"
  syntax:
    content: public override bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果正在通过网络传输之前加密和解密数据在它到达远程终结点;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否已验证服务器和客户端。</xref:System.Boolean>"
  remarks: "服务器想客户端提供一个证书进行身份验证时，将服务器指定相互身份验证。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_11_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_11_1.cs)]"
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果服务器已经过身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsServer
  id: IsServer
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示由此是否使用连接的本地端<xref href=&quot;System.Net.Security.SslStream&quot;></xref>与服务器进行身份验证。</xref:System.Boolean>"
  remarks: "如果身份验证失败，或者没有出现，则此属性返回`false`。       若要与服务器进行身份验证，调用<xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>或<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_13_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_13_1.cs)]"
  syntax:
    content: public override bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功，本地终结点进行身份验证作为经过身份验证的连接; 的服务器端否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否使用此流发送的数据进行签名。</xref:System.Boolean>"
  remarks: "数据签名有助于保护数据的完整性，即它可以帮助收件人确定是否数据已被篡改在传输过程中。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclSslServerSync#4](~/add/codesnippet/cpp/p-system.net.security.ss_19_1.cpp)]\n [!code-cs[NclSslServerSync#4](~/add/codesnippet/csharp/p-system.net.security.ss_19_1.cs)]"
  syntax:
    content: public override bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据在传输; 前已签名否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.SslStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  id: KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取密钥交换算法由此<xref href=&quot;System.Net.Security.SslStream&quot;> </xref>。"
  remarks: "此属性的值是<xref:System.Security.Authentication.ExchangeAlgorithmType>之前进行身份验证。</xref:System.Security.Authentication.ExchangeAlgorithmType>       密钥交换算法可保护用来生成共享的密钥的信息。"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_16_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_16_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.ExchangeAlgorithmType KeyExchangeAlgorithm { get; }
    return:
      type: System.Security.Authentication.ExchangeAlgorithmType
      description: "<xref:System.Security.Authentication.ExchangeAlgorithmType>值。</xref:System.Security.Authentication.ExchangeAlgorithmType>"
  overload: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  id: KeyExchangeStrength
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取一个值，标识的此实例所使用的密钥交换算法的强度。"
  remarks: "身份验证之前，此属性的值为零。       通常情况下，此属性的值是以下之一:-512 768-1024年 2048年"
  example:
  - "The following code example displays the cryptography settings for the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_5_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_5_1.cs)]"
  syntax:
    content: public virtual int KeyExchangeStrength { get; }
    return:
      type: System.Int32
      description: "<xref:System.Int32>值，该值指定的强度<xref:System.Security.Authentication.ExchangeAlgorithmType>算法，以位为单位。</xref:System.Security.Authentication.ExchangeAlgorithmType> </xref:System.Int32>"
  overload: System.Net.Security.SslStream.KeyExchangeStrength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Length
  id: Length
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取基础流的长度。"
  remarks: "此属性返回通过调用返回的值<xref:System.IO.Stream.Length%2A>对基础流。</xref:System.IO.Stream.Length%2A> 如果基础流是不可查找的此方法通常会引发异常。 基础流的运行时类型确定引发的异常的运行时类型。"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.</xref:System.Int64>       基础流的长度。"
  overload: System.Net.Security.SslStream.Length*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "获取此属性的值时，不支持的基础流是<xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.LocalCertificate
  id: LocalCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取用于进行身份验证的本地终结点的证书。"
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_1_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_1_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate LocalCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "一个表示进行身份验证提供的证书的 x509 证书对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不提供的任何证书。"
  overload: System.Net.Security.SslStream.LocalCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "身份验证失败或后未发生。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Position
  id: Position
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取或设置基础流中的当前位置。"
  remarks: "此属性返回通过调用返回的值<xref:System.IO.Stream.Position%2A>对基础流。</xref:System.IO.Stream.Position%2A> 如果基础流是不可查找的此方法通常会引发异常。 基础流的运行时类型确定引发的异常的运行时类型。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "A <xref:System.Int64>.</xref:System.Int64>       基础流中当前位置。"
  overload: System.Net.Security.SslStream.Position*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不支持设置此属性。       -或-基础流时不支持获取此属性的值<xref href=&quot;System.Net.Sockets.NetworkStream&quot;> </xref>。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "从该流中读取数据并将其存储在指定的数组。"
  remarks: "该方法读取的最多`count`字节从流并将它们存储在`buffer`开始`offset`。 无法执行多个同时进行的读取的操作。       你已成功通过身份验证之前，不能调用此方法。 进行身份验证的调用一个<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       若要以异步方式执行此操作，使用<xref:System.Net.Security.SslStream.BeginRead%2A>方法。</xref:System.Net.Security.SslStream.BeginRead%2A>"
  example:
  - "The following code example demonstrates reading from an <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslClientSync#6](~/add/codesnippet/cpp/m-system.net.security.ss_2_1.cpp)]\n [!code-cs[NclSslClientSync#6](~/add/codesnippet/csharp/m-system.net.security.ss_2_1.cs)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>数组，用于接收字节从此流中读取。</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A<xref:System.Int32>包含中的从零开始的位置`buffer`从此处开始存储读取的数据从该流。</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A<xref:System.Int32>包含要从此流中读取的字节的最大数目。</xref:System.Int32>"
    return:
      type: System.Int32
      description: "A<xref:System.Int32>值，该值指定读取的字节数。</xref:System.Int32> 如果没有要读取没有更多数据，则返回 0。"
  overload: System.Net.Security.SslStream.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;的长度<code>buffer</code>。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "读取的操作失败。 如果存在以确定失败的原因，请检查内部异常。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "已存在正在进行的读取的操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取或设置读取的操作等待数据的时间量。"
  remarks: "此属性返回通过调用返回的值<xref:System.IO.Stream.ReadTimeout%2A>对基础流。</xref:System.IO.Stream.ReadTimeout%2A> 当设置此属性，<xref:System.IO.Stream.ReadTimeout%2A>对基础流的值设置为指定的值。</xref:System.IO.Stream.ReadTimeout%2A>       如果基础流已<xref:System.Net.Sockets.NetworkStream>，ReadTimeout 以毫秒为单位，并且设置为<xref:System.Threading.Timeout.Infinite>默认情况下，这样一来，读取操作就不会超时。</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_18_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_18_1.cs)]"
  syntax:
    content: public override int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>，它指定的同步读取操作失败之前经过的时间量。</xref:System.Int32>"
  overload: System.Net.Security.SslStream.ReadTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.RemoteCertificate
  id: RemoteCertificate
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取用于进行身份验证的远程终结点的证书。"
  remarks: ''
  example:
  - "The following code example demonstrates displaying the certificate returned by this property.  \n  \n [!code-cpp[NclSslServerSync#6](~/add/codesnippet/cpp/p-system.net.security.ss_15_1.cpp)]\n [!code-cs[NclSslServerSync#6](~/add/codesnippet/csharp/p-system.net.security.ss_15_1.cs)]"
  syntax:
    content: public virtual System.Security.Cryptography.X509Certificates.X509Certificate RemoteCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "一个表示进行身份验证提供的证书的 x509 证书对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不提供的任何证书。"
  overload: System.Net.Security.SslStream.RemoteCertificate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "身份验证失败或后未发生。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "引发一种<xref:System.NotSupportedException>。</xref:System.NotSupportedException>"
  remarks: "请勿调用此方法。 它继承的但不是支持<xref:System.Net.Security.SslStream>类。</xref:System.Net.Security.SslStream>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "将忽略此值。"
    - id: origin
      type: System.IO.SeekOrigin
      description: "将忽略此值。"
    return:
      type: System.Int64
      description: "总是引发一种<xref:System.NotSupportedException>。</xref:System.NotSupportedException>"
  overload: System.Net.Security.SslStream.Seek*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不支持查找<xref href=&quot;System.Net.Security.SslStream&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "设置基础流的长度。"
  remarks: "此方法调用<xref:System.IO.Stream.SetLength%2A?displayProperty=fullName>时，指定对基础流这<xref:System.Net.Security.SslStream>已创建。</xref:System.Net.Security.SslStream> </xref:System.IO.Stream.SetLength%2A?displayProperty=fullName>"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "<xref:System.Int64>值，该值指定流的长度。</xref:System.Int64>"
  overload: System.Net.Security.SslStream.SetLength*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.SslProtocol
  id: SslProtocol
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取一个值，该值指示使用此连接进行身份验证的安全协议。"
  remarks: "指定的受支持的安全协议时<xref:System.Net.Security.SslStream>创建。</xref:System.Net.Security.SslStream> 如果没有安全协议已传递给构造函数中，使用<xref:System.Security.Authentication.SslProtocols>.</xref:System.Security.Authentication.SslProtocols>创建实例 根据客户端和服务器支持的协议，用于身份验证的实际协议处于选中状态。"
  example:
  - "The following example displays the security properties of the specified stream.  \n  \n [!code-cpp[NclSslServerSync#3](~/add/codesnippet/cpp/p-system.net.security.ss_7_1.cpp)]\n [!code-cs[NclSslServerSync#3](~/add/codesnippet/csharp/p-system.net.security.ss_7_1.cs)]"
  syntax:
    content: public virtual System.Security.Authentication.SslProtocols SslProtocol { get; }
    return:
      type: System.Security.Authentication.SslProtocols
      description: "<xref:System.Security.Authentication.SslProtocols>值，该值表示用于身份验证的协议。</xref:System.Security.Authentication.SslProtocols>"
  overload: System.Net.Security.SslStream.SslProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.TransportContext
  id: TransportContext
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Net.TransportContext>用于使用扩展的保护的身份验证。</xref:System.Net.TransportContext>"
  syntax:
    content: public System.Net.TransportContext TransportContext { get; }
    return:
      type: System.Net.TransportContext
      description: "<xref:System.Net.TransportContext>对象，其中包含用于扩展保护的通道绑定令牌 (CBT)。</xref:System.Net.TransportContext>"
  overload: System.Net.Security.SslStream.TransportContext*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  id: Write(System.Byte[])
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "将指定的数据写入该流。"
  remarks: "当在操作完成时，将阻止此方法。 若要防止阻塞操作完成时，使用<xref:System.Net.Security.SslStream.BeginWrite%2A>方法。</xref:System.Net.Security.SslStream.BeginWrite%2A>       你已成功通过身份验证之前，不能调用此方法。 进行身份验证的调用一个<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       <xref:System.Net.Security.SslStream>类不支持多个同时进行的写入操作。</xref:System.Net.Security.SslStream>"
  example:
  - "The following code example demonstrates writing to an authenticated <xref:System.Net.Security.SslStream>.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/m-system.net.security.ss_3_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/m-system.net.security.ss_3_1.cs)]"
  syntax:
    content: public void Write (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>提供写入流中的字节的数组。</xref:System.Byte>"
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "写入操作失败。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "已存在正在进行的写入操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "写入指定的数<xref:System.Byte>对基础流使用指定的缓冲区和偏移量的 s。</xref:System.Byte>"
  remarks: "当在操作完成时，将阻止此方法。 若要防止在操作完成的操作完成后，使用<xref:System.Net.Security.SslStream.BeginWrite%2A>方法。</xref:System.Net.Security.SslStream.BeginWrite%2A>       你已成功通过身份验证之前，不能调用此方法。 进行身份验证的调用一个<xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>，或<xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A>， <xref:System.Net.Security.SslStream.AuthenticateAsServer%2A>，<xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A>方法。</xref:System.Net.Security.SslStream.BeginAuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.AuthenticateAsServer%2A> </xref:System.Net.Security.SslStream.BeginAuthenticateAsClient%2A> </xref:System.Net.Security.SslStream.AuthenticateAsClient%2A>       <xref:System.Net.Security.SslStream>类不支持多个同时进行的写入操作。</xref:System.Net.Security.SslStream>"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "A<xref:System.Byte>提供写入流中的字节的数组。</xref:System.Byte>"
    - id: offset
      type: System.Int32
      description: "A<xref:System.Int32>包含中的从零开始的位置`buffer`从此处开始读取要写入到流的字节。</xref:System.Int32>"
    - id: count
      type: System.Int32
      description: "A <xref:System.Int32>，其中包含要读取的字节数`buffer`。</xref:System.Int32>"
  overload: System.Net.Security.SslStream.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>     <code>&lt;</code>     <code>0</code>.       <code>-or-</code><code>offset</code>&gt;的长度<code>buffer</code>。       -or-       <code>offset</code> + count &gt; the length of <code>buffer</code>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "写入操作失败。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "已存在正在进行的写入操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "此对象已关闭。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不发生身份验证。"
  platform:
  - net462
- uid: System.Net.Security.SslStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.SslStream
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取或设置等待数据写入操作的时间量。"
  remarks: "此属性返回通过调用返回的值<xref:System.IO.Stream.WriteTimeout%2A>对基础流。</xref:System.IO.Stream.WriteTimeout%2A> 对于集合运算指定的值设置<xref:System.IO.Stream.WriteTimeout%2A>对基础流的值。</xref:System.IO.Stream.WriteTimeout%2A>       如果基础流已<xref:System.Net.Sockets.NetworkStream>，WriteTimeout 以毫秒为单位，并且设置为<xref:System.Threading.Timeout.Infinite>默认情况下，因此，编写操作就不会超时。</xref:System.Threading.Timeout.Infinite> </xref:System.Net.Sockets.NetworkStream>"
  example:
  - "The following code example demonstrates setting the value of this property.  \n  \n [!code-cpp[NclSslServerSync#1](~/add/codesnippet/cpp/p-system.net.security.ss_12_1.cpp)]\n [!code-cs[NclSslServerSync#1](~/add/codesnippet/csharp/p-system.net.security.ss_12_1.cs)]"
  syntax:
    content: public override int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>，它指定的同步写入操作失败之前经过的时间量。</xref:System.Int32>"
  overload: System.Net.Security.SslStream.WriteTimeout*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: System.Net.Security.AuthenticatedStream
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Authentication.AuthenticationException
  parent: System.Security.Authentication
  isExternal: false
  name: AuthenticationException
  nameWithType: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream)
  nameWithType: SslStream.SslStream(Stream)
  fullName: System.Net.Security.SslStream.SslStream(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean)
  nameWithType: SslStream.SslStream(Stream,Boolean)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback)
- uid: System.Net.Security.RemoteCertificateValidationCallback
  parent: System.Net.Security
  isExternal: false
  name: RemoteCertificateValidationCallback
  nameWithType: RemoteCertificateValidationCallback
  fullName: System.Net.Security.RemoteCertificateValidationCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback)
- uid: System.Net.Security.LocalCertificateSelectionCallback
  parent: System.Net.Security
  isExternal: false
  name: LocalCertificateSelectionCallback
  nameWithType: LocalCertificateSelectionCallback
  fullName: System.Net.Security.LocalCertificateSelectionCallback
- uid: System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  nameWithType: SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
  fullName: System.Net.Security.SslStream.SslStream(Stream,Boolean,RemoteCertificateValidationCallback,LocalCertificateSelectionCallback,EncryptionPolicy)
- uid: System.Net.Security.EncryptionPolicy
  parent: System.Net.Security
  isExternal: false
  name: EncryptionPolicy
  nameWithType: EncryptionPolicy
  fullName: System.Net.Security.EncryptionPolicy
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String)
  nameWithType: SslStream.AuthenticateAsClient(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Security.Authentication.SslProtocols
  parent: System.Security.Authentication
  isExternal: true
  name: SslProtocols
  nameWithType: SslProtocols
  fullName: System.Security.Authentication.SslProtocols
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String)
  nameWithType: SslStream.AuthenticateAsClientAsync(String)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsClientAsync(String,X509CertificateCollection,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate)
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate)
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  nameWithType: SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
  fullName: System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate,Boolean,SslProtocols,Boolean)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsClient(String,X509CertificateCollection,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  nameWithType: SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate,Boolean,SslProtocols,Boolean,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginRead(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Security.SslStream.BeginWrite(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Security.SslStream.CanRead
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
  fullName: System.Net.Security.SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
  fullName: System.Net.Security.SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
  fullName: System.Net.Security.SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
  fullName: System.Net.Security.SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
  fullName: System.Net.Security.SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
  fullName: System.Net.Security.SslStream.CipherAlgorithm
- uid: System.Security.Authentication.CipherAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: CipherAlgorithmType
  nameWithType: CipherAlgorithmType
  fullName: System.Security.Authentication.CipherAlgorithmType
- uid: System.Net.Security.SslStream.CipherStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
  fullName: System.Net.Security.SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose(System.Boolean)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SslStream.Dispose(Boolean)
  fullName: System.Net.Security.SslStream.Dispose(Boolean)
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsClient(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsClient(IAsyncResult)
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer(IAsyncResult)
  nameWithType: SslStream.EndAuthenticateAsServer(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndAuthenticateAsServer(IAsyncResult)
- uid: System.Net.Security.SslStream.EndRead(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead(IAsyncResult)
  nameWithType: SslStream.EndRead(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndRead(IAsyncResult)
- uid: System.Net.Security.SslStream.EndWrite(System.IAsyncResult)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite(IAsyncResult)
  nameWithType: SslStream.EndWrite(IAsyncResult)
  fullName: System.Net.Security.SslStream.EndWrite(IAsyncResult)
- uid: System.Net.Security.SslStream.Flush
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush()
  nameWithType: SslStream.Flush()
  fullName: System.Net.Security.SslStream.Flush()
- uid: System.Net.Security.SslStream.HashAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
  fullName: System.Net.Security.SslStream.HashAlgorithm
- uid: System.Security.Authentication.HashAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: HashAlgorithmType
  nameWithType: HashAlgorithmType
  fullName: System.Security.Authentication.HashAlgorithmType
- uid: System.Net.Security.SslStream.HashStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
  fullName: System.Net.Security.SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
  fullName: System.Net.Security.SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
  fullName: System.Net.Security.SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
  fullName: System.Net.Security.SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
  fullName: System.Net.Security.SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
  fullName: System.Net.Security.SslStream.KeyExchangeAlgorithm
- uid: System.Security.Authentication.ExchangeAlgorithmType
  parent: System.Security.Authentication
  isExternal: true
  name: ExchangeAlgorithmType
  nameWithType: ExchangeAlgorithmType
  fullName: System.Security.Authentication.ExchangeAlgorithmType
- uid: System.Net.Security.SslStream.KeyExchangeStrength
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
  fullName: System.Net.Security.SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
  fullName: System.Net.Security.SslStream.Length
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Security.SslStream.LocalCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
  fullName: System.Net.Security.SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
  fullName: System.Net.Security.SslStream.Position
- uid: System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: SslStream.Read(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Read(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.ReadTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
  fullName: System.Net.Security.SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
  fullName: System.Net.Security.SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: SslStream.Seek(Int64,SeekOrigin)
  fullName: System.Net.Security.SslStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Net.Security.SslStream.SetLength(System.Int64)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: SslStream.SetLength(Int64)
  fullName: System.Net.Security.SslStream.SetLength(Int64)
- uid: System.Net.Security.SslStream.SslProtocol
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
  fullName: System.Net.Security.SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
  fullName: System.Net.Security.SslStream.TransportContext
- uid: System.Net.TransportContext
  parent: System.Net
  isExternal: true
  name: TransportContext
  nameWithType: TransportContext
  fullName: System.Net.TransportContext
- uid: System.Net.Security.SslStream.Write(System.Byte[])
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[])
  nameWithType: SslStream.Write(Byte[])
  fullName: System.Net.Security.SslStream.Write(Byte[])
- uid: System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: SslStream.Write(Byte[],Int32,Int32)
  fullName: System.Net.Security.SslStream.Write(Byte[],Int32,Int32)
- uid: System.Net.Security.SslStream.WriteTimeout
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
  fullName: System.Net.Security.SslStream.WriteTimeout
- uid: System.Net.Security.SslStream.#ctor*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslStream
  nameWithType: SslStream.SslStream
- uid: System.Net.Security.SslStream.AuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClient
  nameWithType: SslStream.AuthenticateAsClient
- uid: System.Net.Security.SslStream.AuthenticateAsClientAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsClientAsync
  nameWithType: SslStream.AuthenticateAsClientAsync
- uid: System.Net.Security.SslStream.AuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServer
  nameWithType: SslStream.AuthenticateAsServer
- uid: System.Net.Security.SslStream.AuthenticateAsServerAsync*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: AuthenticateAsServerAsync
  nameWithType: SslStream.AuthenticateAsServerAsync
- uid: System.Net.Security.SslStream.BeginAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsClient
  nameWithType: SslStream.BeginAuthenticateAsClient
- uid: System.Net.Security.SslStream.BeginAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginAuthenticateAsServer
  nameWithType: SslStream.BeginAuthenticateAsServer
- uid: System.Net.Security.SslStream.BeginRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginRead
  nameWithType: SslStream.BeginRead
- uid: System.Net.Security.SslStream.BeginWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: BeginWrite
  nameWithType: SslStream.BeginWrite
- uid: System.Net.Security.SslStream.CanRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanRead
  nameWithType: SslStream.CanRead
- uid: System.Net.Security.SslStream.CanSeek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanSeek
  nameWithType: SslStream.CanSeek
- uid: System.Net.Security.SslStream.CanTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanTimeout
  nameWithType: SslStream.CanTimeout
- uid: System.Net.Security.SslStream.CanWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CanWrite
  nameWithType: SslStream.CanWrite
- uid: System.Net.Security.SslStream.CheckCertRevocationStatus*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CheckCertRevocationStatus
  nameWithType: SslStream.CheckCertRevocationStatus
- uid: System.Net.Security.SslStream.CipherAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherAlgorithm
  nameWithType: SslStream.CipherAlgorithm
- uid: System.Net.Security.SslStream.CipherStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: CipherStrength
  nameWithType: SslStream.CipherStrength
- uid: System.Net.Security.SslStream.Dispose*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Dispose
  nameWithType: SslStream.Dispose
- uid: System.Net.Security.SslStream.EndAuthenticateAsClient*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsClient
  nameWithType: SslStream.EndAuthenticateAsClient
- uid: System.Net.Security.SslStream.EndAuthenticateAsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndAuthenticateAsServer
  nameWithType: SslStream.EndAuthenticateAsServer
- uid: System.Net.Security.SslStream.EndRead*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndRead
  nameWithType: SslStream.EndRead
- uid: System.Net.Security.SslStream.EndWrite*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: EndWrite
  nameWithType: SslStream.EndWrite
- uid: System.Net.Security.SslStream.Flush*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Flush
  nameWithType: SslStream.Flush
- uid: System.Net.Security.SslStream.HashAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashAlgorithm
  nameWithType: SslStream.HashAlgorithm
- uid: System.Net.Security.SslStream.HashStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: HashStrength
  nameWithType: SslStream.HashStrength
- uid: System.Net.Security.SslStream.IsAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: SslStream.IsAuthenticated
- uid: System.Net.Security.SslStream.IsEncrypted*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsEncrypted
  nameWithType: SslStream.IsEncrypted
- uid: System.Net.Security.SslStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: SslStream.IsMutuallyAuthenticated
- uid: System.Net.Security.SslStream.IsServer*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsServer
  nameWithType: SslStream.IsServer
- uid: System.Net.Security.SslStream.IsSigned*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: IsSigned
  nameWithType: SslStream.IsSigned
- uid: System.Net.Security.SslStream.KeyExchangeAlgorithm*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeAlgorithm
  nameWithType: SslStream.KeyExchangeAlgorithm
- uid: System.Net.Security.SslStream.KeyExchangeStrength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: KeyExchangeStrength
  nameWithType: SslStream.KeyExchangeStrength
- uid: System.Net.Security.SslStream.Length*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Length
  nameWithType: SslStream.Length
- uid: System.Net.Security.SslStream.LocalCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: LocalCertificate
  nameWithType: SslStream.LocalCertificate
- uid: System.Net.Security.SslStream.Position*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Position
  nameWithType: SslStream.Position
- uid: System.Net.Security.SslStream.Read*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Read
  nameWithType: SslStream.Read
- uid: System.Net.Security.SslStream.ReadTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: ReadTimeout
  nameWithType: SslStream.ReadTimeout
- uid: System.Net.Security.SslStream.RemoteCertificate*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: RemoteCertificate
  nameWithType: SslStream.RemoteCertificate
- uid: System.Net.Security.SslStream.Seek*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Seek
  nameWithType: SslStream.Seek
- uid: System.Net.Security.SslStream.SetLength*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SetLength
  nameWithType: SslStream.SetLength
- uid: System.Net.Security.SslStream.SslProtocol*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: SslProtocol
  nameWithType: SslStream.SslProtocol
- uid: System.Net.Security.SslStream.TransportContext*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: TransportContext
  nameWithType: SslStream.TransportContext
- uid: System.Net.Security.SslStream.Write*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: Write
  nameWithType: SslStream.Write
- uid: System.Net.Security.SslStream.WriteTimeout*
  parent: System.Net.Security.SslStream
  isExternal: false
  name: WriteTimeout
  nameWithType: SslStream.WriteTimeout
