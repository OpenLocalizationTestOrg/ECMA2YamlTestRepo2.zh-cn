### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RijndaelManagedTransform
  id: RijndaelManagedTransform
  children:
  - System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  - System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  - System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.RijndaelManagedTransform.Clear
  - System.Security.Cryptography.RijndaelManagedTransform.Dispose
  - System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  - System.Security.Cryptography.RijndaelManagedTransform.Reset
  - System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: RijndaelManagedTransform
  nameWithType: RijndaelManagedTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform
  type: Class
  summary: "执行加密转换的数据，使用 Rijndael 算法。 此类不能被继承。"
  remarks: "> [!NOTE]1> 不建议使用此类。 更好的做法是使用<xref:System.Security.Cryptography.RijndaelManaged>与<xref:System.Security.Cryptography.CryptoStream>对象。</xref:System.Security.Cryptography.CryptoStream> </xref:System.Security.Cryptography.RijndaelManaged> <xref:System.Security.Cryptography.CryptoStream>对象处理通过直接使用 RijndaelManagedTransform 时可能发生的填充问题。</xref:System.Security.Cryptography.CryptoStream> 有关示例，请参阅<xref:System.Security.Cryptography.RijndaelManaged>类。</xref:System.Security.Cryptography.RijndaelManaged>       同时<xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>和<xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A>方法返回使用当前的密钥信息初始化 RijndaelManagedTransform 类的实例<xref:System.Security.Cryptography.RijndaelManaged>对象。</xref:System.Security.Cryptography.RijndaelManaged> </xref:System.Security.Cryptography.RijndaelManaged.CreateDecryptor%2A> </xref:System.Security.Cryptography.RijndaelManaged.CreateEncryptor%2A>  若要加密或解密数据，使用 Rijndael 算法，将传递到这些方法返回的 RijndaelManagedTransform 对象<xref:System.Security.Cryptography.CryptoStream>对象。</xref:System.Security.Cryptography.CryptoStream>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RijndaelManagedTransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取块的大小。"
  syntax:
    content: public int BlockSizeValue { get; }
    return:
      type: System.Int32
      description: "以字节为单位的数据块大小。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取一个值，该值指示是否可以重复使用当前转换。"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取一个值，该值指示是否可以转换多个块。"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以转换多个块;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  id: Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "释放使用的所有资源<xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;></xref>类。"
  remarks: "此方法是对<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>类</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>的简单调用       调用`Dispose`允许使用的资源<xref:System.Security.Cryptography.RijndaelManagedTransform>可以重新分配用于其他目的。</xref:System.Security.Cryptography.RijndaelManagedTransform> 有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;></xref>类。"
  remarks: "调用`Dispose`在完成使用<xref:System.Security.Cryptography.RijndaelManagedTransform>.</xref:System.Security.Cryptography.RijndaelManagedTransform>时 `Dispose`方法使<xref:System.Security.Cryptography.RijndaelManagedTransform>中不可用状态。</xref:System.Security.Cryptography.RijndaelManagedTransform> 在调用`Dispose`，必须释放对所有引用<xref:System.Security.Cryptography.RijndaelManagedTransform>以便垃圾回收器才能回收的内存，<xref:System.Security.Cryptography.RijndaelManagedTransform>占用。</xref:System.Security.Cryptography.RijndaelManagedTransform> </xref:System.Security.Cryptography.RijndaelManagedTransform>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用`Dispose`在发布到<xref:System.Security.Cryptography.RijndaelManagedTransform>。</xref:System.Security.Cryptography.RijndaelManagedTransform>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Security.Cryptography.RijndaelManagedTransform>对象的`Finalize`方法。</xref:System.Security.Cryptography.RijndaelManagedTransform>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取输入的块大小。"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "输入数据块的大小以字节为单位。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取输出块大小。"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "输出数据块的大小以字节为单位。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  id: Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "重置的内部状态<xref href=&quot;System.Security.Cryptography.RijndaelManagedTransform&quot;></xref>以便它可再次执行不同的加密或解密。"
  remarks: "调用<xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>.</xref:System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock%2A>时将自动调用 Reset 方法 重置方法不被调用时，例如，加密输入的数据是乱码，无法解密。 在这种情况下，引发异常，则不会调用重置。 你可以选择手动在这种情况下调用重置方法。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算输入的字节数组的指定区域转换并将生成的转换复制到输出字节数组的指定区域。"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "要对其执行操作的输入。"
    - id: inputOffset
      type: System.Int32
      description: "偏移量输入的字节数组中开始使用中的数据。"
    - id: inputCount
      type: System.Int32
      description: "要用作数据的输入的字节数组中的字节数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "要将数据写入的输出。"
    - id: outputOffset
      type: System.Int32
      description: "为输出字节数组开始写入从数据偏移量。"
    return:
      type: System.Int32
      description: "写入的字节数。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "输入缓冲区的长度小于输入的偏移量和输入的计数的总和。       -的值<code> inputCount </code>参数是否小于或等于 0。       -的值<code> inputCount </code>参数的长度大于<code> inputBuffer </code>参数。       -的长度<code> inputCount </code>参数不是均匀设计按输入的块大小。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> inputOffset </code>参数是负数。"
  platform:
  - net462
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算指定的字节数组的指定区域转换。"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "要对其执行操作的输入。"
    - id: inputOffset
      type: System.Int32
      description: "偏移量开始使用中的数据的字节数组。"
    - id: inputCount
      type: System.Int32
      description: "要用作数据的字节数组中的字节数。"
    return:
      type: System.Byte[]
      description: "计算所得的转换。"
  overload: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "值<code> inputCount </code>参数小于 0。       -的值<code> inputCount </code>参数是的长度大于<code> inputBuffer </code>参数。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> inputOffset </code>参数是负数。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "长度<code> inputCount </code>参数不是均匀设计按输入的块大小。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
  fullName: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear()
  nameWithType: RijndaelManagedTransform.Clear()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Clear()
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose()
  nameWithType: RijndaelManagedTransform.Dispose()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Dispose()
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
  fullName: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset()
  nameWithType: RijndaelManagedTransform.Reset()
  fullName: System.Security.Cryptography.RijndaelManagedTransform.Reset()
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.RijndaelManagedTransform.BlockSizeValue*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: BlockSizeValue
  nameWithType: RijndaelManagedTransform.BlockSizeValue
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanReuseTransform*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: RijndaelManagedTransform.CanReuseTransform
- uid: System.Security.Cryptography.RijndaelManagedTransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: RijndaelManagedTransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.RijndaelManagedTransform.Clear*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Clear
  nameWithType: RijndaelManagedTransform.Clear
- uid: System.Security.Cryptography.RijndaelManagedTransform.Dispose*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Dispose
  nameWithType: RijndaelManagedTransform.Dispose
- uid: System.Security.Cryptography.RijndaelManagedTransform.InputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: InputBlockSize
  nameWithType: RijndaelManagedTransform.InputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.OutputBlockSize*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: RijndaelManagedTransform.OutputBlockSize
- uid: System.Security.Cryptography.RijndaelManagedTransform.Reset*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: Reset
  nameWithType: RijndaelManagedTransform.Reset
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformBlock
  nameWithType: RijndaelManagedTransform.TransformBlock
- uid: System.Security.Cryptography.RijndaelManagedTransform.TransformFinalBlock*
  parent: System.Security.Cryptography.RijndaelManagedTransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: RijndaelManagedTransform.TransformFinalBlock
