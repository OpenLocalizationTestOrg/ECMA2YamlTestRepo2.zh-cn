### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.MenuItem
  id: MenuItem
  children:
  - System.Windows.Forms.MenuItem.#ctor
  - System.Windows.Forms.MenuItem.#ctor(System.String)
  - System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)
  - System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])
  - System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)
  - System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])
  - System.Windows.Forms.MenuItem.BarBreak
  - System.Windows.Forms.MenuItem.Break
  - System.Windows.Forms.MenuItem.Checked
  - System.Windows.Forms.MenuItem.Click
  - System.Windows.Forms.MenuItem.CloneMenu
  - System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)
  - System.Windows.Forms.MenuItem.DefaultItem
  - System.Windows.Forms.MenuItem.Dispose(System.Boolean)
  - System.Windows.Forms.MenuItem.DrawItem
  - System.Windows.Forms.MenuItem.Enabled
  - System.Windows.Forms.MenuItem.Index
  - System.Windows.Forms.MenuItem.IsParent
  - System.Windows.Forms.MenuItem.MdiList
  - System.Windows.Forms.MenuItem.MeasureItem
  - System.Windows.Forms.MenuItem.MenuID
  - System.Windows.Forms.MenuItem.MergeMenu
  - System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)
  - System.Windows.Forms.MenuItem.MergeOrder
  - System.Windows.Forms.MenuItem.MergeType
  - System.Windows.Forms.MenuItem.Mnemonic
  - System.Windows.Forms.MenuItem.OnClick(System.EventArgs)
  - System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)
  - System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)
  - System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)
  - System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)
  - System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)
  - System.Windows.Forms.MenuItem.OwnerDraw
  - System.Windows.Forms.MenuItem.Parent
  - System.Windows.Forms.MenuItem.PerformClick
  - System.Windows.Forms.MenuItem.PerformSelect
  - System.Windows.Forms.MenuItem.Popup
  - System.Windows.Forms.MenuItem.RadioCheck
  - System.Windows.Forms.MenuItem.Select
  - System.Windows.Forms.MenuItem.Shortcut
  - System.Windows.Forms.MenuItem.ShowShortcut
  - System.Windows.Forms.MenuItem.Text
  - System.Windows.Forms.MenuItem.ToString
  - System.Windows.Forms.MenuItem.Visible
  langs:
  - csharp
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem
  type: Class
  summary: "表示在中显示的单个项<xref href=&quot;System.Windows.Forms.MainMenu&quot;></xref>或<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref>。 尽管<xref href=&quot;System.Windows.Forms.ToolStripMenuItem&quot;></xref>替换并添加了功能到以前的版本 MenuItem 控件中，MenuItem 以备向后兼容性和将来使用你选择保留。"
  remarks: "在菜单项显示的顺序，你必须将其添加到<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> 若要创建子菜单，您可以添加到的 MenuItem 对象<xref:System.Windows.Forms.Menu.MenuItems%2A>父菜单项的属性。</xref:System.Windows.Forms.Menu.MenuItems%2A>       MenuItem 类提供使你能够配置的外观和功能的菜单项的属性。 若要显示的菜单项旁边的复选标记，请使用<xref:System.Windows.Forms.MenuItem.Checked%2A>属性。</xref:System.Windows.Forms.MenuItem.Checked%2A> 可以使用此功能来确定的互相排斥的菜单项列表中选择的菜单项。 例如，如果你有一组用于设置中文本的颜色的菜单项<xref:System.Windows.Forms.TextBox>控件，你可以使用<xref:System.Windows.Forms.MenuItem.Checked%2A>属性来标识当前选定的颜色。</xref:System.Windows.Forms.MenuItem.Checked%2A> </xref:System.Windows.Forms.TextBox> <xref:System.Windows.Forms.MenuItem.Shortcut%2A>属性可以用于定义某一键盘组合可以按下选择的菜单项。</xref:System.Windows.Forms.MenuItem.Shortcut%2A>       对于多文档界面 (MDI) 应用程序中显示的 MenuItem 对象，你可以使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法合并的菜单 MDI 父对于为其的子窗体上来创建合并的菜单结构。</xref:System.Windows.Forms.MenuItem.MergeMenu%2A> 因为 MenuItem 不能重复使用在多个位置在同一时间，如在<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>，你可以使用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>方法以在另一个位置中创建一份用于 MenuItem。</xref:System.Windows.Forms.MenuItem.CloneMenu%2A> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu>       <xref:System.Windows.Forms.MenuItem.Popup>事件可用于执行任务，请在显示菜单之前。</xref:System.Windows.Forms.MenuItem.Popup> 例如，你可以创建的事件处理程序以显示或隐藏菜单项在你的代码的状态上基于此事件。 <xref:System.Windows.Forms.MenuItem.Select>事件可用于执行任务，例如当用户将鼠标指针放在菜单项的应用程序的菜单项提供详细的帮助。</xref:System.Windows.Forms.MenuItem.Select>"
  example:
  - "The following code example creates a menu structure for a form. The example code adds a MenuItem to represent the top-level menu item, adds a submenu item to it for selecting a font size, and then adds two submenu items to that menu item that represent large and small font choices in an application. The example requires that there is a <xref:System.Windows.Forms.MainMenu> object named `mainMenu1` and four MenuItem objects named `menuItem1`, `menuItem2`, `menuItem3`, and `menuItem4`.  \n  \n [!code-cpp[Classic Menu Example#1](~/add/codesnippet/cpp/t-system.windows.forms.m_8_1.cpp)]\n [!code-cs[Classic Menu Example#1](~/add/codesnippet/csharp/t-system.windows.forms.m_8_1.cs)]\n [!code-vb[Classic Menu Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.m_8_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Click")]

      [System.ComponentModel.DefaultProperty("Text")]

      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.ToolboxItem(false)]

      public class MenuItem : System.Windows.Forms.Menu
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Windows.Forms.Menu
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.CreateMenuHandle
  - System.Windows.Forms.Menu.FindHandle
  - System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  - System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  - System.Windows.Forms.Menu.FindShortcut
  - System.Windows.Forms.Menu.GetContextMenu
  - System.Windows.Forms.Menu.GetMainMenu
  - System.Windows.Forms.Menu.Handle
  - System.Windows.Forms.Menu.MdiListItem
  - System.Windows.Forms.Menu.MenuItems
  - System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.Name
  - System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  - System.Windows.Forms.Menu.Tag
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem()
  nameWithType: MenuItem.MenuItem()
  fullName: System.Windows.Forms.MenuItem.MenuItem()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>带空标题。"
  remarks: "一旦你创建<xref:System.Windows.Forms.MenuItem>使用此构造函数，可以使用的属性和方法的<xref:System.Windows.Forms.MenuItem>类，以指定的外观和行为你<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem></xref:System.Windows.Forms.MenuItem></xref:System.Windows.Forms.MenuItem>空白"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> using this version of the constructor.  \n  \n [!code-vb[Classic MenuItem.MenuItem Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_13_1.vb)]\n [!code-cpp[Classic MenuItem.MenuItem Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_13_1.cpp)]\n [!code-cs[Classic MenuItem.MenuItem Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_13_1.cs)]"
  syntax:
    content: public MenuItem ();
    parameters: []
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem(String)
  nameWithType: MenuItem.MenuItem(String)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新实例<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>用指定标题菜单项的类。"
  remarks: "当你具有的菜单项指定标题`text`参数，你还可以指定访问密钥由前放置一个.字符的字符，用作访问密钥。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。       设置`text`参数&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> that specifies the caption of the menu item at the time it is constructed.  \n  \n [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_1_1.cpp)]\n [!code-cs[Classic MenuItem.MenuItem1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_1_1.cs)]\n [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_1_1.vb)]"
  syntax:
    content: public MenuItem (string text);
    parameters:
    - id: text
      type: System.String
      description: "菜单项标题。"
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)
  id: '#ctor(System.String,System.EventHandler)'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem(String,EventHandler)
  nameWithType: MenuItem.MenuItem(String,EventHandler)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,EventHandler)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化具有指定的标题和事件处理程序的类的新实例<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;></xref>的菜单项的事件。"
  remarks: "当你具有的菜单项指定标题`text`参数，你还可以指定访问键通过将.字符用作访问密钥之前。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。       设置`text`参数&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。       此外，你可以使用此构造函数指定一个委托，可将处理<xref:System.Windows.Forms.MenuItem.Click>正在创建的菜单项的事件。</xref:System.Windows.Forms.MenuItem.Click> <xref:System.EventHandler>传递给此构造函数必须将配置为调用的事件处理程序可以处理<xref:System.Windows.Forms.MenuItem.Click>事件。</xref:System.Windows.Forms.MenuItem.Click> </xref:System.EventHandler> 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> object with a specified caption and an <xref:System.EventHandler> delegate connected to an event handler that will handle the <xref:System.Windows.Forms.MenuItem.Click> event for the menu item.  \n  \n [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_4_1.cpp)]\n [!code-cs[Classic MenuItem.MenuItem2 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_4_1.cs)]\n [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_4_1.vb)]"
  syntax:
    content: public MenuItem (string text, EventHandler onClick);
    parameters:
    - id: text
      type: System.String
      description: "菜单项标题。"
    - id: onClick
      type: System.EventHandler
      description: "<xref:System.EventHandler>用于处理<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;></xref>此菜单项的事件。</xref:System.EventHandler>"
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])
  id: '#ctor(System.String,System.Windows.Forms.MenuItem[])'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem(String,MenuItem[])
  nameWithType: MenuItem.MenuItem(String,MenuItem[])
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,MenuItem[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化具有指定标题的类的新实例和为菜单项定义的子菜单项的数组。"
  remarks: "当你具有的菜单项指定标题`text`参数，你还可以指定访问键通过将.字符用作访问密钥之前。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。       设置`text`参数&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。       `items`参数使你可以分配来定义该菜单项的子菜单的菜单项的数组。 数组中的每个项还可以分配给它的菜单项的数组。 这使你可以创建完整的菜单结构并将它们分配到的菜单项的构造函数。       有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates an object with a specified caption, an event handler connected to a method that will handle the event each menu item in an array of submenu items.  \n  \n [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/add/codesnippet/cpp/cfa20f10-2c8a-466e-a0e8-_1.cpp)]\n [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/add/codesnippet/visualbasic/cfa20f10-2c8a-466e-a0e8-_1.vb)]\n [!code-cs[Classic MenuItem.MenuItem4 Example#1](~/add/codesnippet/csharp/cfa20f10-2c8a-466e-a0e8-_1.cs)]"
  syntax:
    content: public MenuItem (string text, System.Windows.Forms.MenuItem[] items);
    parameters:
    - id: text
      type: System.String
      description: "菜单项标题。"
    - id: items
      type: System.Windows.Forms.MenuItem[]
      description: "数组<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>包含此菜单项的子菜单项的对象。"
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)
  id: '#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem(String,EventHandler,Shortcut)
  nameWithType: MenuItem.MenuItem(String,EventHandler,Shortcut)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,EventHandler,Shortcut)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化具有指定的标题、 事件处理程序和关联的快捷方式菜单项的键的类的新实例。"
  remarks: "当你具有的菜单项指定标题`text`参数，你还可以指定访问键通过将.字符用作访问密钥之前。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。 此构造函数还可以指定除了提供键盘导航的访问密钥的快捷键。 键盘快捷方式，可以指定可用来激活该菜单项的键的组合。       设置`text`参数&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。       此外，你可以使用此构造函数指定一个委托，可将处理<xref:System.Windows.Forms.MenuItem.Click>正在创建的菜单项的事件。</xref:System.Windows.Forms.MenuItem.Click> <xref:System.EventHandler>传递给此构造函数必须将配置为调用的事件处理程序可以处理<xref:System.Windows.Forms.MenuItem.Click>事件。</xref:System.Windows.Forms.MenuItem.Click> </xref:System.EventHandler> 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates an object with a specified caption, shortcut key, and an event handler connected to a method that will handle the event for the menu item.  \n  \n [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/add/codesnippet/cpp/feb14794-39b6-433b-90a5-_1.cpp)]\n [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/add/codesnippet/visualbasic/feb14794-39b6-433b-90a5-_1.vb)]\n [!code-cs[Classic MenuItem.MenuItem3 Example#1](~/add/codesnippet/csharp/feb14794-39b6-433b-90a5-_1.cs)]"
  syntax:
    content: public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);
    parameters:
    - id: text
      type: System.String
      description: "菜单项标题。"
    - id: onClick
      type: System.EventHandler
      description: "<xref:System.EventHandler>用于处理<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;></xref>此菜单项的事件。</xref:System.EventHandler>"
    - id: shortcut
      type: System.Windows.Forms.Shortcut
      description: "之一<xref href=&quot;System.Windows.Forms.Shortcut&quot;></xref>值。"
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])
  id: '#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])'
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
  nameWithType: MenuItem.MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
  fullName: System.Windows.Forms.MenuItem.MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新实例<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>类用指定标题; 定义的事件处理程序<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;> </xref>， <xref href=&quot;System.Windows.Forms.MenuItem.Select&quot;> </xref>和<xref href=&quot;System.Windows.Forms.MenuItem.Popup&quot;></xref>事件; 的快捷键; 合并类型; 和菜单项为指定的顺序。"
  remarks: "当你具有的菜单项指定标题`text`参数，你还可以指定访问键通过将.字符用作访问密钥之前。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。       设置`text`参数&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。       `items`参数使你可以分配来定义该菜单项的子菜单的菜单项的数组。 数组中的每个项还可以分配给它的菜单项的数组。 这使你可以创建完整的菜单结构并将它们分配到的菜单项的构造函数。       `mergeType`和`mergeOrder`参数允许你确定此菜单项与另一个菜单合并的菜单项时的行为。 你为根据的值的指定`mergeType`参数，你可以添加、 删除、 替换或合并的菜单项和与它合并的菜单及其子菜单项。 `mergeOrder`参数确定正在创建的菜单项在菜单合并时的放置位置。       此外，你可以使用此构造函数创建<xref:System.Windows.Forms.MenuItem>并将其连接到在代码中将处理菜单项的单击事件处理程序。</xref:System.Windows.Forms.MenuItem> <xref:System.EventHandler>将传入此构造函数应配置为调用的事件处理程序可以处理<xref:System.Windows.Forms.MenuItem.Click>事件。</xref:System.Windows.Forms.MenuItem.Click> </xref:System.EventHandler> 通过使用此构造函数版本，还可以连接<xref:System.Windows.Forms.MenuItem.Popup>和<xref:System.Windows.Forms.MenuItem.Select>事件，以确定何时选择此菜单项。</xref:System.Windows.Forms.MenuItem.Select> </xref:System.Windows.Forms.MenuItem.Popup> 这些事件可用于任务，例如确定显示子菜单项旁边的复选标记或用于启用或禁用菜单项基于应用程序的状态。 <xref:System.Windows.Forms.MenuItem.Select>和<xref:System.Windows.Forms.MenuItem.Click>将仅对引发事件<xref:System.Windows.Forms.MenuItem>对象不父菜单项。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem.Click> </xref:System.Windows.Forms.MenuItem.Select> 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates a menu item that has a caption and shortcut key. The menu item also has event handlers defined for the <xref:System.Windows.Forms.MenuItem.Popup>, <xref:System.Windows.Forms.MenuItem.Click>, and <xref:System.Windows.Forms.MenuItem.Select> events. If this menu item is merged, it will add the menu item to the menu with the merge order of zero.  \n  \n [!code-cs[Classic MenuItem.MenuItem5 Example#1](~/add/codesnippet/csharp/a423d634-c30f-4d0b-905e-_1.cs)]\n [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/add/codesnippet/cpp/a423d634-c30f-4d0b-905e-_1.cpp)]\n [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/add/codesnippet/visualbasic/a423d634-c30f-4d0b-905e-_1.vb)]"
  syntax:
    content: public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);
    parameters:
    - id: mergeType
      type: System.Windows.Forms.MenuMerge
      description: "之一<xref href=&quot;System.Windows.Forms.MenuMerge&quot;></xref>值。"
    - id: mergeOrder
      type: System.Int32
      description: "此菜单项将需要在合并的菜单中的相对位置。"
    - id: shortcut
      type: System.Windows.Forms.Shortcut
      description: "之一<xref href=&quot;System.Windows.Forms.Shortcut&quot;></xref>值。"
    - id: text
      type: System.String
      description: "菜单项标题。"
    - id: onClick
      type: System.EventHandler
      description: "<xref:System.EventHandler>用于处理<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;></xref>此菜单项的事件。</xref:System.EventHandler>"
    - id: onPopup
      type: System.EventHandler
      description: "<xref:System.EventHandler>用于处理<xref href=&quot;System.Windows.Forms.MenuItem.Popup&quot;></xref>此菜单项的事件。</xref:System.EventHandler>"
    - id: onSelect
      type: System.EventHandler
      description: "<xref:System.EventHandler>用于处理<xref href=&quot;System.Windows.Forms.MenuItem.Select&quot;></xref>此菜单项的事件。</xref:System.EventHandler>"
    - id: items
      type: System.Windows.Forms.MenuItem[]
      description: "数组<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>包含此菜单项的子菜单项的对象。"
  overload: System.Windows.Forms.MenuItem.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.BarBreak
  id: BarBreak
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: BarBreak
  nameWithType: MenuItem.BarBreak
  fullName: System.Windows.Forms.MenuItem.BarBreak
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>放置到新行上 (对于菜单项添加到<xref href=&quot;System.Windows.Forms.MainMenu&quot;></xref>对象) 或新列中 (子菜单项或菜单项显示在<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref>)。"
  remarks: "你可以使用 BarBreak 属性创建菜单每个菜单项旁边相互而不是水平放置在垂直列表。 此属性还可用于创建包含多个行的顶级菜单项的菜单栏。       此属性不同于<xref:System.Windows.Forms.MenuItem.Break%2A>，其属性中的每个菜单项的左边缘显示一个栏<xref:System.Windows.Forms.MenuItem.Break%2A>属性设置为`true`。</xref:System.Windows.Forms.MenuItem.Break%2A> </xref:System.Windows.Forms.MenuItem.Break%2A> 在菜单项不是顶级菜单项时，将仅显示栏。"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> with two submenu items. The two submenu items are displayed horizontally instead of vertically using the BarBreak property.  \n  \n [!code-cs[Classic MenuItem.BarBreak Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_7_1.cs)]\n [!code-cpp[Classic MenuItem.BarBreak Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_7_1.cpp)]\n [!code-vb[Classic MenuItem.BarBreak Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_7_1.vb)]"
  syntax:
    content: public bool BarBreak { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项被放置新行上或在新的列;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果菜单项会保留在其默认位置。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.BarBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Break
  id: Break
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Break
  nameWithType: MenuItem.Break
  fullName: System.Windows.Forms.MenuItem.Break
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示是否将项放在新行上 (对于菜单项添加到<xref href=&quot;System.Windows.Forms.MainMenu&quot;></xref>对象) 或新列中 (菜单项或子菜单项显示在<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref>)。"
  remarks: "你可以使用中断属性创建菜单每个菜单彼此而不是水平放置在垂直列表。 此属性还可用于创建包含多个行的顶级菜单项的菜单栏。"
  example:
  - "The following code example creates a menu with two top-level menu items on the top row and one menu item on the bottom row.  \n  \n [!code-cs[Classic MenuItem.Break Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_31_1.cs)]\n [!code-vb[Classic MenuItem.Break Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_31_1.vb)]\n [!code-cpp[Classic MenuItem.Break Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_31_1.cpp)]"
  syntax:
    content: public bool Break { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项被放置新行上或在新的列;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果菜单项会保留在其默认位置。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Break*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Checked
  id: Checked
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Checked
  nameWithType: MenuItem.Checked
  fullName: System.Windows.Forms.MenuItem.Checked
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项的文本的旁边是否显示复选标记。"
  remarks: "可用于检查的属性在与其他菜单中的菜单项的组合提供应用程序的状态。 例如，可以在一组项来标识要为应用程序中的文本显示的字体大小的菜单项上放置一个复选标记。 已选中的属性还可用于标识一组互斥菜单项中的所选的菜单项。      1> [!NOTE]&1;> 此属性不能设置为`true`顶级菜单项。"
  example:
  - "The following code example uses the Checked property to provide the state in an application. In this example, a group of menu items are used to specify the color for the text in a <xref:System.Windows.Forms.TextBox> control. The event handler provided is used by the <xref:System.Windows.Forms.MenuItem.Click> event of three menu items. Each menu item specifies a text color, `menuItemRed` (Red), `menuItemGreen` (Green), or `menuItemBlue` (Blue). The event handler determines which menu item was clicked, places a checkmark to the selected menu item, and changes the text color of the form's <xref:System.Windows.Forms.TextBox> control. The example requires that the <xref:System.Drawing> namespace has been added to the form that this code is placed in. The example also requires that a <xref:System.Windows.Forms.TextBox> has been added to the form that this example code is located in that is named `textBox1`.  \n  \n [!code-cpp[Classic MenuItem.Checked Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_32_1.cpp)]\n [!code-cs[Classic MenuItem.Checked Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_32_1.cs)]\n [!code-vb[Classic MenuItem.Checked Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_32_1.vb)]"
  syntax:
    content: public bool Checked { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果没有一个菜单项; 旁边的复选标记否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Checked*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>是顶级菜单或具有子级。"
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Click
  id: Click
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Click
  nameWithType: MenuItem.Click
  fullName: System.Windows.Forms.MenuItem.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当单击或选择菜单项使用快捷键或访问键定义的菜单项时发生。"
  remarks: "Click 事件发生时这<xref:System.Windows.Forms.MenuItem>单击用户。</xref:System.Windows.Forms.MenuItem> 此事件还会发生如果用户选择菜单项使用键盘，按 Enter 键。 如果访问密钥它也会发生或快捷方式并按下键<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>与该键关联 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 如果<xref:System.Windows.Forms.Menu.MenuItems%2A>属性<xref:System.Windows.Forms.MenuItem>包含任何项，则不会引发此事件。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MenuItems%2A> 适用于父菜单项不引发此事件。"
  example:
  - "The following code example demonstrates how to use the Click event to perform tasks when a <xref:System.Windows.Forms.MenuItem> is clicked. The example creates a <xref:System.Windows.Forms.MainMenu> called `mainMenu1` and adds two <xref:System.Windows.Forms.MenuItem> objects, `topMenuItem` (`File`) and `menuItem1` (`Open`). It then connects the `Click` event to the `menuItem1_Click` event handler. When the user clicks the `Open` menu item, an <xref:System.Windows.Forms.OpenFileDialog> is initialized and displayed. The example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[MenuItemClick#1](~/add/codesnippet/csharp/e-system.windows.forms.m_15_1.cs)]\n [!code-cpp[MenuItemClick#1](~/add/codesnippet/cpp/e-system.windows.forms.m_15_1.cpp)]\n [!code-vb[MenuItemClick#1](~/add/codesnippet/visualbasic/e-system.windows.forms.m_15_1.vb)]"
  syntax:
    content: public event EventHandler Click;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.CloneMenu
  id: CloneMenu
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: CloneMenu()
  nameWithType: MenuItem.CloneMenu()
  fullName: System.Windows.Forms.MenuItem.CloneMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "创建一份当前<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  remarks: "<xref:System.Windows.Forms.MenuItem>除非您获得一份<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>不在多个位置中使用对象</xref:System.Windows.Forms.MenuItem> 你可以调用此方法以创建一份在中使用此菜单项<xref:System.Windows.Forms.ContextMenu>， <xref:System.Windows.Forms.MainMenu>，或其他<xref:System.Windows.Forms.MenuItem>应用程序中。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.ContextMenu> 当克隆菜单项时，原始的菜单项中指定任何事件处理程序将继续在菜单项的克隆版本中正常工作。 例如，如果你创建<xref:System.Windows.Forms.MenuItem>和连接其<xref:System.Windows.Forms.MenuItem.Click>事件的事件处理程序。</xref:System.Windows.Forms.MenuItem.Click> </xref:System.Windows.Forms.MenuItem> 当克隆菜单项时，克隆的菜单项将调用相同的事件处理程序。"
  example:
  - "The following code example clones a <xref:System.Windows.Forms.MenuItem> and displays it in a <xref:System.Windows.Forms.ContextMenu>. The example requires that a <xref:System.Windows.Forms.MenuItem> exists in a <xref:System.Windows.Forms.MainMenu> on a form with the name of `menuItem1` and that a <xref:System.Windows.Forms.ContextMenu> object named `contextMenu1` also exists on the form.  \n  \n [!code-cs[Classic MenuItem.CloneMenu Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_17_1.cs)]\n [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_17_1.cpp)]\n [!code-vb[Classic MenuItem.CloneMenu Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_17_1.vb)]"
  syntax:
    content: public virtual System.Windows.Forms.MenuItem CloneMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.MenuItem
      description: "A <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，表示重复的菜单项。"
  overload: System.Windows.Forms.MenuItem.CloneMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)
  id: CloneMenu(System.Windows.Forms.MenuItem)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: CloneMenu(MenuItem)
  nameWithType: MenuItem.CloneMenu(MenuItem)
  fullName: System.Windows.Forms.MenuItem.CloneMenu(MenuItem)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "创建一份指定<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  remarks: "调用此方法以创建你已在你的应用程序中创建的快捷菜单或另一个菜单结构中使用的菜单项的副本。 此版本的<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>允许你指定特定<xref:System.Windows.Forms.MenuItem>复制而不是调用方法的菜单项。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem.CloneMenu%2A> 你可以使用此方法以初始化新<xref:System.Windows.Forms.MenuItem>对象与另一个<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>一份</xref:System.Windows.Forms.MenuItem> 当克隆菜单项时，原始的菜单项中指定任何事件处理程序将继续在菜单项的克隆版本中正常工作。 例如，如果你创建<xref:System.Windows.Forms.MenuItem>和连接其<xref:System.Windows.Forms.MenuItem.Click>事件的事件处理程序。</xref:System.Windows.Forms.MenuItem.Click> </xref:System.Windows.Forms.MenuItem> 当克隆菜单项时，克隆的菜单项将调用相同的事件处理程序。"
  example:
  - "The following code example initializes a new <xref:System.Windows.Forms.MenuItem> with a copy of an existing <xref:System.Windows.Forms.MenuItem> that is used in a <xref:System.Windows.Forms.MainMenu> on a form. The code then adds the cloned <xref:System.Windows.Forms.MenuItem> to a <xref:System.Windows.Forms.ContextMenu> on the form. This example requires that a <xref:System.Windows.Forms.MenuItem> is already created and named `menuItem1` and that a <xref:System.Windows.Forms.ContextMenu> control has been created and named `contextMenu1`.  \n  \n [!code-cs[Classic MenuItem.CloneMenu1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_14_1.cs)]\n [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_14_1.cpp)]\n [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_14_1.vb)]"
  syntax:
    content: protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);
    parameters:
    - id: itemSrc
      type: System.Windows.Forms.MenuItem
      description: "<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，表示要复制的菜单项。"
  overload: System.Windows.Forms.MenuItem.CloneMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.DefaultItem
  id: DefaultItem
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: DefaultItem
  nameWithType: MenuItem.DefaultItem
  fullName: System.Windows.Forms.MenuItem.DefaultItem
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项是否为默认菜单项。"
  remarks: "菜单默认菜单项为粗体。 当用户双击子菜单包含默认项、 选择默认项目时，和子菜单已关闭。 你可以使用 DefaultItem 属性以指示，预期为菜单或快捷菜单中的默认操作。"
  example:
  - "The following code example creates a menu item with two submenu items. The example sets `menuItem2` as the default menu item using the DefaultItem property.  \n  \n [!code-cs[Classic MenuItem.DefaultItem Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_5_1.cs)]\n [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_5_1.cpp)]\n [!code-vb[Classic MenuItem.DefaultItem Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_5_1.vb)]"
  syntax:
    content: public bool DefaultItem { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项是菜单; 中的默认项否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.DefaultItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MenuItem.Dispose(Boolean)
  fullName: System.Windows.Forms.MenuItem.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "使用的资源 （内存除外） 释放<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  remarks: "在完成使用<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>时调用的 Dispose Dispose 方法离开<xref:System.Windows.Forms.MenuItem>中不可用状态。</xref:System.Windows.Forms.MenuItem> 调用 Dispose 后，必须释放对所有引用<xref:System.Windows.Forms.MenuItem>以便可以通过垃圾回收回收其占用的内存。</xref:System.Windows.Forms.MenuItem>      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.Windows.Forms.MenuItem>。</xref:System.Windows.Forms.MenuItem>最后一个引用之前 否则为资源<xref:System.Windows.Forms.MenuItem>是使用不会被释放之前垃圾集合调用<xref:System.Windows.Forms.MenuItem>对象的析构函数。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Windows.Forms.MenuItem.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.DrawItem
  id: DrawItem
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: DrawItem
  nameWithType: MenuItem.DrawItem
  fullName: System.Windows.Forms.MenuItem.DrawItem
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "发生时<xref:System.Windows.Forms.MenuItem.OwnerDraw*>的菜单项的属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>和发出请求以绘制菜单项。</xref:System.Windows.Forms.MenuItem.OwnerDraw*>"
  remarks: "<xref:System.Windows.Forms.DrawItemEventArgs>传递给 DrawItem 事件处理程序自变量提供<xref:System.Drawing.Graphics>使您可以执行绘制和图面上的菜单项的其他图形操作的对象。</xref:System.Drawing.Graphics> </xref:System.Windows.Forms.DrawItemEventArgs> 此事件处理程序可用于创建自定义菜单可满足你的应用程序的需求。 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to handle the DrawItem event. This example draws a menu item using a <xref:System.Drawing.Brush> and a <xref:System.Drawing.Font>, and then draws a <xref:System.Drawing.Rectangle> around the menu item. The drawing is performed through the <xref:System.Drawing.Graphics> object, which is passed to the event handler in the <xref:System.Windows.Forms.DrawItemEventArgs> parameter. This example requires that you have initialized the <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> property for the item to `true`. For the C# example, add the following code in the form's constructor, after `InitializeComponent`, to hook up the event:  \n  \n `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  \n  \n [!code-cs[OwnerDraw example#1](~/add/codesnippet/csharp/e-system.windows.forms.m_10_1.cs)]\n [!code-cpp[OwnerDraw example#1](~/add/codesnippet/cpp/e-system.windows.forms.m_10_1.cpp)]\n [!code-vb[OwnerDraw example#1](~/add/codesnippet/visualbasic/e-system.windows.forms.m_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.DrawItemEventHandler DrawItem;
    return:
      type: System.Windows.Forms.DrawItemEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Enabled
  id: Enabled
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Enabled
  nameWithType: MenuItem.Enabled
  fullName: System.Windows.Forms.MenuItem.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项是否启用。"
  remarks: "A <xref:System.Windows.Forms.MenuItem>，它是以灰色的颜色来指示其状态显示已禁用。</xref:System.Windows.Forms.MenuItem> 当禁用父菜单项时，不会显示所有子菜单项。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.MenuItem.Popup> event to determine whether <xref:System.Windows.Forms.MenuItem> objects that provide support for cut, copy, and delete operations are enabled before the menu they are displayed in is shown. The example determines if `textBox1`, a <xref:System.Windows.Forms.TextBox> control on the form, is enabled, has input focus, and has text selected before enabling the <xref:System.Windows.Forms.MenuItem> objects. This example requires that three <xref:System.Windows.Forms.MenuItem> objects are created named `menuCut`, `menuCopy`, and `menuDelete` have been created.  \n  \n [!code-cs[MenuItem.Popup#1](~/add/codesnippet/csharp/p-system.windows.forms.m_23_1.cs)]\n [!code-cpp[MenuItem.Popup#1](~/add/codesnippet/cpp/p-system.windows.forms.m_23_1.cpp)]\n [!code-vb[MenuItem.Popup#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_23_1.vb)]"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了菜单项;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Index
  id: Index
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Index
  nameWithType: MenuItem.Index
  fullName: System.Windows.Forms.MenuItem.Index
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项在其父菜单中的位置。"
  remarks: "此属性提供其父菜单的菜单项集合中的菜单项的索引的位置。 此属性可用于重新定位到其菜单内的不同位置的菜单项。 你还可以使用此属性，在创建时<xref:System.Windows.Forms.MenuItem>在创建时指定它的菜单结构中的位置。</xref:System.Windows.Forms.MenuItem>"
  example:
  - "The following code example switches the position of two menu items in a menu. The following code example requires that two <xref:System.Windows.Forms.MenuItem> objects are created named `menuItem1` and `menuItem2`. The `menuItem1` menu item moves down one position in the menu, while `menuItem2` moves up one position.  \n  \n [!code-cpp[Classic MenuItem.Index Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_27_1.cpp)]\n [!code-cs[Classic MenuItem.Index Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_27_1.cs)]\n [!code-vb[Classic MenuItem.Index Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_27_1.vb)]"
  syntax:
    content: public int Index { get; set; }
    return:
      type: System.Int32
      description: "从零开始的索引表示的菜单项在其父菜单中的位置。"
  overload: System.Windows.Forms.MenuItem.Index*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所赋的值小于零或大于项的计数。"
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.IsParent
  id: IsParent
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: IsParent
  nameWithType: MenuItem.IsParent
  fullName: System.Windows.Forms.MenuItem.IsParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示菜单项是否包含子菜单项。"
  remarks: "你可以使用此属性与<xref:System.Windows.Forms.MenuItem.Parent%2A>属性在代码中通过整个菜单结构中进行导航。</xref:System.Windows.Forms.MenuItem.Parent%2A>"
  example:
  - "The following code example determines whether there are any submenus associated with a <xref:System.Windows.Forms.MenuItem> named `menuItem1`. If any submenus exist, it disables them by setting the <xref:System.Windows.Forms.MenuItem.Enabled%2A> property to `false`. The example requires that there is a <xref:System.Windows.Forms.MenuItem> created named `menuItem1`.  \n  \n [!code-cs[Classic MenuItem.IsParent Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_17_1.cs)]\n [!code-cpp[Classic MenuItem.IsParent Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_17_1.cpp)]\n [!code-vb[Classic MenuItem.IsParent Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_17_1.vb)]"
  syntax:
    content: public override bool IsParent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项包含子菜单项;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果菜单是独立菜单项。"
  overload: System.Windows.Forms.MenuItem.IsParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MdiList
  id: MdiList
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MdiList
  nameWithType: MenuItem.MdiList
  fullName: System.Windows.Forms.MenuItem.MdiList
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示在关联窗体内显示的多文档界面 (MDI) 子窗口的列表将填充菜单项。"
  remarks: "选中菜单项时要显示 MDI 子窗口列表，列表显示为子菜单的菜单项。 仅定义为 MDI 子窗体的窗体窗口列表中显示。 只有九个子窗口可以显示一次。 如果有多个九个显示的子窗口，&quot;更多 Windows...&quot;菜单项显示在窗口列表的末尾。 单击此菜单项显示一个包含的完整列表的当前处于活动状态的子窗口的对话框。"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> that is used to display the list of currently open MDI child forms in an MDI form.  \n  \n [!code-cs[Classic MenuItem.MdiList Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_41_1.cs)]\n [!code-cpp[Classic MenuItem.MdiList Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_41_1.cpp)]\n [!code-vb[Classic MenuItem.MdiList Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_41_1.vb)]"
  syntax:
    content: public bool MdiList { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此菜单项; 中显示的 MDI 子窗口列表否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.MdiList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MeasureItem
  id: MeasureItem
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MeasureItem
  nameWithType: MenuItem.MeasureItem
  fullName: System.Windows.Forms.MenuItem.MeasureItem
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当需要绘制之前知道菜单项的大小的菜单时发生。"
  remarks: "引发此事件的顺序，您必须拥有<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>的菜单项的属性设置为`true`。</xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> 绘制所有者描述的菜单允许的菜单项的大小绘制指定之前，将引发此事件。 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MeasureItem event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.MenuItem> named `MenuItem1`. Then ensure that the event handler is associated with the MeasureItem event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#499](~/add/codesnippet/csharp/e-system.windows.forms.m_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#499](~/add/codesnippet/visualbasic/e-system.windows.forms.m_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;
    return:
      type: System.Windows.Forms.MeasureItemEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MenuID
  id: MenuID
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MenuID
  nameWithType: MenuItem.MenuID
  fullName: System.Windows.Forms.MenuItem.MenuID
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示此菜单项的 Windows 标识符。"
  syntax:
    content: protected int MenuID { get; }
    return:
      type: System.Int32
      description: "此菜单项的 Windows 标识符。"
  overload: System.Windows.Forms.MenuItem.MenuID*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MergeMenu
  id: MergeMenu
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MergeMenu()
  nameWithType: MenuItem.MergeMenu()
  fullName: System.Windows.Forms.MenuItem.MergeMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "合并这<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>与另一个<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，并返回结果合并<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  remarks: "当调用此版本的 MergeMenu，<xref:System.Windows.Forms.MenuItem>返回是当前菜单项可以合并使用而不会影响当前项的功能的另一菜单项的副本。</xref:System.Windows.Forms.MenuItem> 此版本的 MergeMenu 方法是类似于调用<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>不包含任何参数的方法。</xref:System.Windows.Forms.MenuItem.CloneMenu%2A>"
  syntax:
    content: public virtual System.Windows.Forms.MenuItem MergeMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.MenuItem
      description: "A <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，表示合并的菜单项。"
  overload: System.Windows.Forms.MenuItem.MergeMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)
  id: MergeMenu(System.Windows.Forms.MenuItem)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MergeMenu(MenuItem)
  nameWithType: MenuItem.MergeMenu(MenuItem)
  fullName: System.Windows.Forms.MenuItem.MergeMenu(MenuItem)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将与此菜单项的另一个菜单项合并。"
  remarks: "菜单项合并的菜单项的值根据<xref:System.Windows.Forms.MenuItem.MergeType%2A>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>属性。</xref:System.Windows.Forms.MenuItem.MergeOrder%2A> </xref:System.Windows.Forms.MenuItem.MergeType%2A> 此版本的<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法可以合并两个<xref:System.Windows.Forms.MenuItem>为单个菜单对象 （和它们的子菜单）。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem.MergeMenu%2A> 当多文档界面 (MDI) 父窗体和子菜单时，将自动处理菜单合并。 你可以使用此版本的方法以合并两个<xref:System.Windows.Forms.MenuItem>对象 （和及其子菜单项），它位于<xref:System.Windows.Forms.MainMenu>单个菜单内一种<xref:System.Windows.Forms.ContextMenu>。</xref:System.Windows.Forms.ContextMenu>控制</xref:System.Windows.Forms.MainMenu></xref:System.Windows.Forms.MenuItem> 例如，你可以调用此版本的<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>方法来合并到单个<xref:System.Windows.Forms.MenuItem>，可以然后要添加到由和显示一种<xref:System.Windows.Forms.ContextMenu>。</xref:System.Windows.Forms.ContextMenu></xref:System.Windows.Forms.MenuItem>文件和编辑菜单的菜单项</xref:System.Windows.Forms.MenuItem.MergeMenu%2A>"
  example:
  - "The following code example uses this version of the <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> method to create a copy of a <xref:System.Windows.Forms.MenuItem> and merge it with another. The merged <xref:System.Windows.Forms.MenuItem> is then added to a <xref:System.Windows.Forms.ContextMenu> control. This example requires that there are two menu items called `menuItem1` and `menuItem2` that contain submenu items within them and a <xref:System.Windows.Forms.ContextMenu> named `contextMenu1` to display the menu items. `menuItem1` and `menuItem2` have different menu items contained within them. After the call to <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> is made, a consolidated menu is created.  \n  \n [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_12_1.vb)]\n [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.m_12_1.cpp)]\n [!code-cs[Classic MenuItem.MergeMenu1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.m_12_1.cs)]"
  syntax:
    content: public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);
    parameters:
    - id: itemSrc
      type: System.Windows.Forms.MenuItem
      description: "A <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，它指定要与此合并的菜单项。"
  overload: System.Windows.Forms.MenuItem.MergeMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MergeOrder
  id: MergeOrder
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MergeOrder
  nameWithType: MenuItem.MergeOrder
  fullName: System.Windows.Forms.MenuItem.MergeOrder
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值与另一个合并时，指示菜单项的相对位置。"
  remarks: "菜单项的合并顺序指定如果菜单结构，将需要此菜单项的相对位置<xref:System.Windows.Forms.MenuItem>包含在与另一个合并。</xref:System.Windows.Forms.MenuItem>"
  example:
  - "The following code example demonstrates using the MergeOrder property to control the way a merged menu is displayed. This is a complete example, ready to run once you add it to your project.  \n  \n [!code-cs[System.Windows.Forms.MenuItemMergeOrder#1](~/add/codesnippet/csharp/p-system.windows.forms.m_47_1.cs)]\n [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/add/codesnippet/cpp/p-system.windows.forms.m_47_1.cpp)]\n [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_47_1.vb)]"
  syntax:
    content: public int MergeOrder { get; set; }
    return:
      type: System.Int32
      description: "表示此菜单项的合并顺序位置的从零开始的索引。 默认值为 0。"
  overload: System.Windows.Forms.MenuItem.MergeOrder*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.MergeType
  id: MergeType
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: MergeType
  nameWithType: MenuItem.MergeType
  fullName: System.Windows.Forms.MenuItem.MergeType
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，指示此菜单项的行为与另一个合并其菜单时。"
  remarks: "菜单项的合并类型指示菜单项时它具有要合并的另一菜单项的合并顺序相同的行为方式。 合并的菜单可用于创建基于两个或多个现有菜单合并的菜单。"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MenuItem> with the MergeType and <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> specified so that the menu item is added to the merged menu at first position.  \n  \n [!code-cpp[Classic MenuItem.MergeType Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_8_1.cpp)]\n [!code-cs[Classic MenuItem.MergeType Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_8_1.cs)]\n [!code-vb[Classic MenuItem.MergeType Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_8_1.vb)]"
  syntax:
    content: public System.Windows.Forms.MenuMerge MergeType { get; set; }
    return:
      type: System.Windows.Forms.MenuMerge
      description: "A <xref href=&quot;System.Windows.Forms.MenuMerge&quot;> </xref>值，该值表示菜单项的合并类型。"
  overload: System.Windows.Forms.MenuItem.MergeType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "所赋的值不是之一<xref href=&quot;System.Windows.Forms.MenuMerge&quot;></xref>值。"
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Mnemonic
  id: Mnemonic
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Mnemonic
  nameWithType: MenuItem.Mnemonic
  fullName: System.Windows.Forms.MenuItem.Mnemonic
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示与此菜单项关联的助记键字符。"
  remarks: "助记键字符后的文本中<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem> & 号字符 （&） 的第一个字符 此属性将不会返回助记键，如果两个 & 符它们放在一起使用 & 符的文本中显示 and 符<xref:System.Windows.Forms.MenuItem>而不是定义助记键字符。</xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: public char Mnemonic { get; }
    return:
      type: System.Char
      description: "一个表示与此菜单项关联的助记键字符的字符。 如果没有助记键字符指定文本中返回 NUL 字符 （ASCII 值 0） <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Mnemonic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnClick(System.EventArgs)
  id: OnClick(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnClick(EventArgs)
  nameWithType: MenuItem.OnClick(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnClick(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.Click&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.MenuItem.Click> event to perform tasks when a <xref:System.Windows.Forms.MenuItem> is clicked. The example creates a <xref:System.Windows.Forms.MainMenu> called `mainMenu1` and adds two <xref:System.Windows.Forms.MenuItem> objects, `topMenuItem` (`File`) and `menuItem1` (`Open`). It then connects the `Click` event to the `menuItem1_Click` event handler. When the user clicks the `Open` menu item, an <xref:System.Windows.Forms.OpenFileDialog> is initialized and displayed. The example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[MenuItemClick#1](~/add/codesnippet/csharp/m-system.windows.forms.m_3_1.cs)]\n [!code-cpp[MenuItemClick#1](~/add/codesnippet/cpp/m-system.windows.forms.m_3_1.cpp)]\n [!code-vb[MenuItemClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_3_1.vb)]"
  syntax:
    content: protected virtual void OnClick (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Forms.MenuItem.OnClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)
  id: OnDrawItem(System.Windows.Forms.DrawItemEventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnDrawItem(DrawItemEventArgs)
  nameWithType: MenuItem.OnDrawItem(DrawItemEventArgs)
  fullName: System.Windows.Forms.MenuItem.OnDrawItem(DrawItemEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.DrawItem&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.DrawItemEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.DrawItemEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.Forms.MenuItem.OnDrawItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)
  id: OnInitMenuPopup(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnInitMenuPopup(EventArgs)
  nameWithType: MenuItem.OnInitMenuPopup(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnInitMenuPopup(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.Popup&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnInitMenuPopup (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Forms.MenuItem.OnInitMenuPopup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)
  id: OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnMeasureItem(MeasureItemEventArgs)
  nameWithType: MenuItem.OnMeasureItem(MeasureItemEventArgs)
  fullName: System.Windows.Forms.MenuItem.OnMeasureItem(MeasureItemEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.MeasureItem&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Forms.MeasureItemEventArgs
      description: "A <xref href=&quot;System.Windows.Forms.MeasureItemEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.Forms.MenuItem.OnMeasureItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)
  id: OnPopup(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnPopup(EventArgs)
  nameWithType: MenuItem.OnPopup(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnPopup(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.Popup&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.MenuItem.Popup> event to determine whether <xref:System.Windows.Forms.MenuItem> objects that provide support for cut, copy, and delete operations are enabled before the menu they are displayed in is shown. The example determines if `textBox1`, a <xref:System.Windows.Forms.TextBox> control on the form, is enabled, has input focus, and has text selected before enabling the <xref:System.Windows.Forms.MenuItem> objects. This example requires that three <xref:System.Windows.Forms.MenuItem> objects are created named `menuCut`, `menuCopy`, and `menuDelete` have been created.  \n  \n [!code-cs[MenuItem.Popup#1](~/add/codesnippet/csharp/m-system.windows.forms.m_25_1.cs)]\n [!code-cpp[MenuItem.Popup#1](~/add/codesnippet/cpp/m-system.windows.forms.m_25_1.cpp)]\n [!code-vb[MenuItem.Popup#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_25_1.vb)]"
  syntax:
    content: protected virtual void OnPopup (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Forms.MenuItem.OnPopup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)
  id: OnSelect(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OnSelect(EventArgs)
  nameWithType: MenuItem.OnSelect(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnSelect(EventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.Select&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.MenuItem.Select> event of the <xref:System.Windows.Forms.MenuItem> class to assign help text to a <xref:System.Windows.Forms.StatusBarPanel> of a <xref:System.Windows.Forms.StatusBar> control. This example requires that <xref:System.Windows.Forms.MenuItem> objects named `menuOpen`, `menuSave`, and `menuExit` are added to a <xref:System.Windows.Forms.MainMenu> control on a form. The example also requires that a <xref:System.Windows.Forms.StatusBar> control, named `statusBar1` has been added to the form. The <xref:System.Windows.Forms.StatusBar> control should contain a <xref:System.Windows.Forms.StatusBarPanel>.  \n  \n [!code-vb[MenuItem.Select#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_19_1.vb)]\n [!code-cs[MenuItem.Select#1](~/add/codesnippet/csharp/m-system.windows.forms.m_19_1.cs)]\n [!code-cpp[MenuItem.Select#1](~/add/codesnippet/cpp/m-system.windows.forms.m_19_1.cpp)]"
  syntax:
    content: protected virtual void OnSelect (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Forms.MenuItem.OnSelect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.OwnerDraw
  id: OwnerDraw
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: OwnerDraw
  nameWithType: MenuItem.OwnerDraw
  fullName: System.Windows.Forms.MenuItem.OwnerDraw
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值是由你提供的代码绘制菜单项还是由 Windows 绘制菜单项。"
  remarks: "当 OwnerDraw 属性设置为`true`，你需要处理的菜单项的所有绘制。 此功能可用于创建你自己的专用菜单显示。"
  example:
  - "The following code example demonstrates a menu with an owner-drawn menu item. This example set the OwnerDraw property and uses the `AddHandler` statement and the `AddressOf` operator to designate a delegate to handle the <xref:System.Windows.Forms.MenuItem.DrawItem> event. To run the example, paste it in a form that imports the <xref:System>, <xref:System.Windows.Forms>, and <xref:System.Drawing> namespaces. Call `InitializeMenu` from the form's constructor or `Load` method.  \n  \n [!code-cs[System.Windows.Forms.MenuItemOwnerDraw#1](~/add/codesnippet/csharp/p-system.windows.forms.m_22_1.cs)]\n [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/add/codesnippet/cpp/p-system.windows.forms.m_22_1.cpp)]\n [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_22_1.vb)]"
  syntax:
    content: public bool OwnerDraw { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果使用的代码; 绘制菜单项<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果由 Windows 绘制菜单项。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.OwnerDraw*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Parent
  id: Parent
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Parent
  nameWithType: MenuItem.Parent
  fullName: System.Windows.Forms.MenuItem.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示包含此菜单项的菜单。"
  remarks: "你可以使用此属性来获取<xref:System.Windows.Forms.Menu>对于子菜单的对象。</xref:System.Windows.Forms.Menu> 你可以强制转换<xref:System.Windows.Forms.Menu>为<xref:System.Windows.Forms.MenuItem>对象操作它。</xref:System.Windows.Forms.MenuItem>此属性返回的对象</xref:System.Windows.Forms.Menu>"
  example:
  - "In this example, you create a main menu and a top-level menu item, `menuItem1` (`File`). You also create two menu items, `menuItem2` (`New`) and `menuItem3` (`Open`), and add them to the menu item list of `menuItem1`. Then you check to see if `menuItem3` has got a parent menu, which is true, and display the information of this parent menu in message box. This example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[ParentMenu#1](~/add/codesnippet/csharp/p-system.windows.forms.m_25_1.cs)]\n [!code-cpp[ParentMenu#1](~/add/codesnippet/cpp/p-system.windows.forms.m_25_1.cpp)]\n [!code-vb[ParentMenu#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_25_1.vb)]"
  syntax:
    content: public System.Windows.Forms.Menu Parent { get; }
    return:
      type: System.Windows.Forms.Menu
      description: "A <xref href=&quot;System.Windows.Forms.Menu&quot;> </xref> ，表示包含此菜单项的菜单。"
  overload: System.Windows.Forms.MenuItem.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.PerformClick
  id: PerformClick
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: PerformClick()
  nameWithType: MenuItem.PerformClick()
  fullName: System.Windows.Forms.MenuItem.PerformClick()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "生成<xref href=&quot;System.Windows.Forms.Control.Click&quot;></xref>事件<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>，模拟用户的单击。"
  remarks: "可以使用此菜单可以激活菜单项通过代码，而无需任何事件信息。 例如，如果你想要激活基于你的应用程序中发生的操作的菜单项，你可以调用 PerformClick 方法以联系该<xref:System.Windows.Forms.MenuItem>。</xref:System.Windows.Forms.MenuItem>"
  example:
  - "In this example you programmatically click a menu item by using the `PerformClick` method. First, you create a main menu (`mainMenu1`) and add to it two menu items, `menuItem1` (`File`) and `menuItem2` (`Edit`). You also use the <xref:System.Windows.Forms.MenuItem.Click> event to send data to the event handler when a menu item is clicked. Then you use the `PerformClick` method to click the `File` menu item. When you start the application, the `File` menu item is activated, and a message box that contains the text \"The File menu is clicked.\" appears on the screen. The example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cpp[PerformClick#1](~/add/codesnippet/cpp/m-system.windows.forms.m_0_1.cpp)]\n [!code-cs[PerformClick#1](~/add/codesnippet/csharp/m-system.windows.forms.m_0_1.cs)]\n [!code-vb[PerformClick#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_0_1.vb)]"
  syntax:
    content: public void PerformClick ();
    parameters: []
  overload: System.Windows.Forms.MenuItem.PerformClick*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.PerformSelect
  id: PerformSelect
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: PerformSelect()
  nameWithType: MenuItem.PerformSelect()
  fullName: System.Windows.Forms.MenuItem.PerformSelect()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.MenuItem.Select&quot;></xref>此菜单项的事件。"
  remarks: "此方法允许您以引发<xref:System.Windows.Forms.MenuItem.Select>而无需将任何事件信息传递给事件处理程序的事件。</xref:System.Windows.Forms.MenuItem.Select>"
  example:
  - "In this example you programmatically select a menu item by using the `PerformSelect` method. First, you create a main menu (`mainMenu1`) and add to it two menu items, `menuItem1` (`File`) and `menuItem2` (`Edit`). You also use the <xref:System.Windows.Forms.MenuItem.Select> event to send data to the event handler when a menu item is selected. Then you use the `PerformSelect` method to select the `File` menu item. When you start the application, the `File` menu item is selected, and a message box that contains the text \"The File menu is selected.\" appears on the screen. The example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cpp[PerformSelect#1](~/add/codesnippet/cpp/m-system.windows.forms.m_16_1.cpp)]\n [!code-cs[PerformSelect#1](~/add/codesnippet/csharp/m-system.windows.forms.m_16_1.cs)]\n [!code-vb[PerformSelect#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_16_1.vb)]"
  syntax:
    content: public virtual void PerformSelect ();
    parameters: []
  overload: System.Windows.Forms.MenuItem.PerformSelect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Popup
  id: Popup
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Popup
  nameWithType: MenuItem.Popup
  fullName: System.Windows.Forms.MenuItem.Popup
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "显示的菜单项的菜单项的列表之前发生。"
  remarks: "如果菜单项包含子菜单项以显示仅发生此事件。 此事件处理程序可用于添加、 删除、 启用、 禁用、 检查，或取消选中基于你的应用程序的状态之前所显示的菜单项。 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use the Popup event to determine whether <xref:System.Windows.Forms.MenuItem> objects that provide support for cut, copy, and delete operations are enabled before the menu they are displayed in is shown. The example determines if `textBox1`, a <xref:System.Windows.Forms.TextBox> control on the form, is enabled, has input focus, and has text selected before enabling the <xref:System.Windows.Forms.MenuItem> objects. This example requires that three <xref:System.Windows.Forms.MenuItem> objects are created named `menuCut`, `menuCopy`, and `menuDelete` have been created.  \n  \n [!code-cs[MenuItem.Popup#1](~/add/codesnippet/csharp/e-system.windows.forms.m_8_1.cs)]\n [!code-cpp[MenuItem.Popup#1](~/add/codesnippet/cpp/e-system.windows.forms.m_8_1.cpp)]\n [!code-vb[MenuItem.Popup#1](~/add/codesnippet/visualbasic/e-system.windows.forms.m_8_1.vb)]"
  syntax:
    content: public event EventHandler Popup;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.RadioCheck
  id: RadioCheck
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: RadioCheck
  nameWithType: MenuItem.RadioCheck
  fullName: System.Windows.Forms.MenuItem.RadioCheck
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>，如果选中，将显示一个单选按钮，而不是一个复选标记。"
  remarks: "选中标记并不一定表示一组菜单项的互斥状态。 此属性可用于向用户指示菜单项的复选标记是互斥的。"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.MenuItem.Checked%2A> property to change the state of an application. In the example, a group of menu items are provided that are used to specify the color for the text in an <xref:System.Windows.Forms.TextBox> control. In the example, the event handler provided is used by the <xref:System.Windows.Forms.MenuItem.Click> event of the three menu items. Each menu item specifies a color, `menuItemRed`, `menuItemGreen`, or `menuItemBlue`. The event handler determines which menu item was clicked, places a checkmark to the selected menu item, and changes the text color of the form's <xref:System.Windows.Forms.TextBox> control, named `textBox1`. The example also uses the RadioCheck property to demonstrate how a radio-button check is used to show menu items that are mutually exclusive. This example requires that the <xref:System.Drawing?displayProperty=fullName> namespace has been added to the form that contains this code.  \n  \n [!code-cs[Classic MenuItem.RadioCheck Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_14_1.cs)]\n [!code-vb[Classic MenuItem.RadioCheck Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_14_1.vb)]\n [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_14_1.cpp)]"
  syntax:
    content: public bool RadioCheck { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果要使用而不是一个复选标记; 单选按钮<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>是否选中菜单项时要显示标准的复选标记。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.RadioCheck*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Select
  id: Select
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Select
  nameWithType: MenuItem.Select
  fullName: System.Windows.Forms.MenuItem.Select
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户将指针放在菜单项时发生。"
  remarks: "通常，用户将鼠标指针放在菜单项时，将引发此事件。 用户突出显示菜单项使用键盘，使用箭头键滚动到的菜单项时，也可以引发该事件。 此事件可用于显示有关应用程序的状态栏中该菜单项的详细的帮助字符串。 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 如果<xref:System.Windows.Forms.Menu.MenuItems%2A>属性<xref:System.Windows.Forms.MenuItem>包含任何项，则不会引发此事件。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MenuItems%2A> 适用于父菜单项不引发此事件。"
  example:
  - "The following code example demonstrates how to use the Select event of the <xref:System.Windows.Forms.MenuItem> class to assign help text to a <xref:System.Windows.Forms.StatusBarPanel> of a <xref:System.Windows.Forms.StatusBar> control. This example requires that <xref:System.Windows.Forms.MenuItem> objects named `menuOpen`, `menuSave`, and `menuExit` are added to a <xref:System.Windows.Forms.MainMenu> control on a form. The example also requires that a <xref:System.Windows.Forms.StatusBar> control, named `statusBar1` has been added to the form. The <xref:System.Windows.Forms.StatusBar> control should contain a <xref:System.Windows.Forms.StatusBarPanel>.  \n  \n [!code-vb[MenuItem.Select#1](~/add/codesnippet/visualbasic/e-system.windows.forms.m_0_1.vb)]\n [!code-cs[MenuItem.Select#1](~/add/codesnippet/csharp/e-system.windows.forms.m_0_1.cs)]\n [!code-cpp[MenuItem.Select#1](~/add/codesnippet/cpp/e-system.windows.forms.m_0_1.cpp)]"
  syntax:
    content: public event EventHandler Select;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Shortcut
  id: Shortcut
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Shortcut
  nameWithType: MenuItem.Shortcut
  fullName: System.Windows.Forms.MenuItem.Shortcut
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示与菜单项关联的快捷键。"
  remarks: "键盘快捷方式提供菜单系统中，并提供对你的应用程序为这些用户不具有到鼠标或其他指针设备的访问权限的键盘访问，用户经常激活的方法使用菜单项。"
  example:
  - "The following code example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example requires that a <xref:System.Windows.Forms.MenuItem> has been created that is named `menuItem1`.  \n  \n [!code-cs[Classic MenuItem.Text Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_39_1.cs)]\n [!code-cpp[Classic MenuItem.Text Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_39_1.cpp)]\n [!code-vb[Classic MenuItem.Text Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_39_1.vb)]"
  syntax:
    content: public System.Windows.Forms.Shortcut Shortcut { get; set; }
    return:
      type: System.Windows.Forms.Shortcut
      description: "之一<xref href=&quot;System.Windows.Forms.Shortcut&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_Shortcut.None&quot; name=&quot;Shortcut.None&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Shortcut*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "所赋的值不是之一<xref href=&quot;System.Windows.Forms.Shortcut&quot;></xref>值。"
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.ShowShortcut
  id: ShowShortcut
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: ShowShortcut
  nameWithType: MenuItem.ShowShortcut
  fullName: System.Windows.Forms.MenuItem.ShowShortcut
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示与菜单项关联的快捷键是否显示菜单项标题的旁边。"
  remarks: "此属性可用于提供用户隐藏快捷方式菜单中的选项来节省菜单空间或隐藏显示的快捷键。"
  example:
  - "The following code example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example requires that a <xref:System.Windows.Forms.MenuItem> has been created that is named `menuItem1`.  \n  \n [!code-cs[Classic MenuItem.Text Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_30_1.cs)]\n [!code-cpp[Classic MenuItem.Text Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_30_1.cpp)]\n [!code-vb[Classic MenuItem.Text Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_30_1.vb)]"
  syntax:
    content: public bool ShowShortcut { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项标题; 的旁边显示的快捷键组合<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果快捷组合键是不会显示。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.ShowShortcut*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Text
  id: Text
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Text
  nameWithType: MenuItem.Text
  fullName: System.Windows.Forms.MenuItem.Text
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项的标题。"
  remarks: "为菜单项指定标题时，你还可以通过将.字符用作访问密钥之前指定的访问密钥。 例如，若要为访问键指定&quot;文件&quot;中的&quot;F&quot;，你将指定为该菜单项标题&quot;1 & 文件&quot;。 可以使用此功能可供你菜单的键盘导航。       此属性设置为&quot;`-`&quot;会导致菜单项显示为分隔符 （一条横线），而不是标准菜单项。"
  example:
  - "The following code example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example requires that a <xref:System.Windows.Forms.MenuItem> has been created that is named `menuItem1`.  \n  \n [!code-cs[Classic MenuItem.Text Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_56_1.cs)]\n [!code-cpp[Classic MenuItem.Text Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_56_1.cpp)]\n [!code-vb[Classic MenuItem.Text Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_56_1.vb)]"
  syntax:
    content: public string Text { get; set; }
    return:
      type: System.String
      description: "菜单项文本标题。"
  overload: System.Windows.Forms.MenuItem.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.ToString
  id: ToString
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: ToString()
  nameWithType: MenuItem.ToString()
  fullName: System.Windows.Forms.MenuItem.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "返回一个字符串，表示<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，表示当前<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。 该字符串包含类型和<xref:System.Windows.Forms.MenuItem.Text*>的控件属性。</xref:System.Windows.Forms.MenuItem.Text*>"
  overload: System.Windows.Forms.MenuItem.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.MenuItem.Visible
  id: Visible
  parent: System.Windows.Forms.MenuItem
  langs:
  - csharp
  name: Visible
  nameWithType: MenuItem.Visible
  fullName: System.Windows.Forms.MenuItem.Visible
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示菜单项是否可见。"
  remarks: "此属性可用于修改而无需合并菜单或禁用菜单的菜单结构。 例如，如果你想要隐藏完成从你的应用程序的菜单的功能的一部分，您可以隐藏它们从用户通过将此属性设置为`false`。"
  example:
  - "The following code example creates a menu item, sets the caption, assigns a shortcut key, makes the menu item visible, and shows the shortcut key display for the menu item. The example requires that a <xref:System.Windows.Forms.MenuItem> has been created that is named `menuItem1`.  \n  \n [!code-cs[Classic MenuItem.Text Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_51_1.cs)]\n [!code-cpp[Classic MenuItem.Text Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_51_1.cpp)]\n [!code-vb[Classic MenuItem.Text Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_51_1.vb)]"
  syntax:
    content: public bool Visible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果菜单项将成为可见菜单; 上否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.MenuItem.Visible*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Forms.Menu
  isExternal: false
  name: System.Windows.Forms.Menu
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Windows.Forms.MenuItem.#ctor
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem()
  nameWithType: MenuItem.MenuItem()
  fullName: System.Windows.Forms.MenuItem.MenuItem()
- uid: System.Windows.Forms.MenuItem.#ctor(System.String)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem(String)
  nameWithType: MenuItem.MenuItem(String)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem(String,EventHandler)
  nameWithType: MenuItem.MenuItem(String,EventHandler)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,EventHandler)
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem(String,MenuItem[])
  nameWithType: MenuItem.MenuItem(String,MenuItem[])
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,MenuItem[])
- uid: System.Windows.Forms.MenuItem[]
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem[]
  spec.csharp:
  - uid: System.Windows.Forms.MenuItem
    name: MenuItem
    nameWithType: MenuItem
    fullName: MenuItem[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem(String,EventHandler,Shortcut)
  nameWithType: MenuItem.MenuItem(String,EventHandler,Shortcut)
  fullName: System.Windows.Forms.MenuItem.MenuItem(String,EventHandler,Shortcut)
- uid: System.Windows.Forms.Shortcut
  parent: System.Windows.Forms
  isExternal: false
  name: Shortcut
  nameWithType: Shortcut
  fullName: System.Windows.Forms.Shortcut
- uid: System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
  nameWithType: MenuItem.MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
  fullName: System.Windows.Forms.MenuItem.MenuItem(MenuMerge,Int32,Shortcut,String,EventHandler,EventHandler,EventHandler,MenuItem[])
- uid: System.Windows.Forms.MenuMerge
  parent: System.Windows.Forms
  isExternal: false
  name: MenuMerge
  nameWithType: MenuMerge
  fullName: System.Windows.Forms.MenuMerge
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.MenuItem.BarBreak
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: BarBreak
  nameWithType: MenuItem.BarBreak
  fullName: System.Windows.Forms.MenuItem.BarBreak
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.MenuItem.Break
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Break
  nameWithType: MenuItem.Break
  fullName: System.Windows.Forms.MenuItem.Break
- uid: System.Windows.Forms.MenuItem.Checked
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Checked
  nameWithType: MenuItem.Checked
  fullName: System.Windows.Forms.MenuItem.Checked
- uid: System.Windows.Forms.MenuItem.Click
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Click
  nameWithType: MenuItem.Click
  fullName: System.Windows.Forms.MenuItem.Click
- uid: System.Windows.Forms.MenuItem.CloneMenu
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: CloneMenu()
  nameWithType: MenuItem.CloneMenu()
  fullName: System.Windows.Forms.MenuItem.CloneMenu()
- uid: System.Windows.Forms.MenuItem
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem
- uid: System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: CloneMenu(MenuItem)
  nameWithType: MenuItem.CloneMenu(MenuItem)
  fullName: System.Windows.Forms.MenuItem.CloneMenu(MenuItem)
- uid: System.Windows.Forms.MenuItem.DefaultItem
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: DefaultItem
  nameWithType: MenuItem.DefaultItem
  fullName: System.Windows.Forms.MenuItem.DefaultItem
- uid: System.Windows.Forms.MenuItem.Dispose(System.Boolean)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MenuItem.Dispose(Boolean)
  fullName: System.Windows.Forms.MenuItem.Dispose(Boolean)
- uid: System.Windows.Forms.MenuItem.DrawItem
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: DrawItem
  nameWithType: MenuItem.DrawItem
  fullName: System.Windows.Forms.MenuItem.DrawItem
- uid: System.Windows.Forms.DrawItemEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: DrawItemEventHandler
  nameWithType: DrawItemEventHandler
  fullName: System.Windows.Forms.DrawItemEventHandler
- uid: System.Windows.Forms.MenuItem.Enabled
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Enabled
  nameWithType: MenuItem.Enabled
  fullName: System.Windows.Forms.MenuItem.Enabled
- uid: System.Windows.Forms.MenuItem.Index
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Index
  nameWithType: MenuItem.Index
  fullName: System.Windows.Forms.MenuItem.Index
- uid: System.Windows.Forms.MenuItem.IsParent
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: IsParent
  nameWithType: MenuItem.IsParent
  fullName: System.Windows.Forms.MenuItem.IsParent
- uid: System.Windows.Forms.MenuItem.MdiList
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MdiList
  nameWithType: MenuItem.MdiList
  fullName: System.Windows.Forms.MenuItem.MdiList
- uid: System.Windows.Forms.MenuItem.MeasureItem
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MeasureItem
  nameWithType: MenuItem.MeasureItem
  fullName: System.Windows.Forms.MenuItem.MeasureItem
- uid: System.Windows.Forms.MeasureItemEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: MeasureItemEventHandler
  nameWithType: MeasureItemEventHandler
  fullName: System.Windows.Forms.MeasureItemEventHandler
- uid: System.Windows.Forms.MenuItem.MenuID
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuID
  nameWithType: MenuItem.MenuID
  fullName: System.Windows.Forms.MenuItem.MenuID
- uid: System.Windows.Forms.MenuItem.MergeMenu
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeMenu()
  nameWithType: MenuItem.MergeMenu()
  fullName: System.Windows.Forms.MenuItem.MergeMenu()
- uid: System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeMenu(MenuItem)
  nameWithType: MenuItem.MergeMenu(MenuItem)
  fullName: System.Windows.Forms.MenuItem.MergeMenu(MenuItem)
- uid: System.Windows.Forms.MenuItem.MergeOrder
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeOrder
  nameWithType: MenuItem.MergeOrder
  fullName: System.Windows.Forms.MenuItem.MergeOrder
- uid: System.Windows.Forms.MenuItem.MergeType
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeType
  nameWithType: MenuItem.MergeType
  fullName: System.Windows.Forms.MenuItem.MergeType
- uid: System.Windows.Forms.MenuItem.Mnemonic
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Mnemonic
  nameWithType: MenuItem.Mnemonic
  fullName: System.Windows.Forms.MenuItem.Mnemonic
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Windows.Forms.MenuItem.OnClick(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnClick(EventArgs)
  nameWithType: MenuItem.OnClick(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnClick(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnDrawItem(DrawItemEventArgs)
  nameWithType: MenuItem.OnDrawItem(DrawItemEventArgs)
  fullName: System.Windows.Forms.MenuItem.OnDrawItem(DrawItemEventArgs)
- uid: System.Windows.Forms.DrawItemEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: DrawItemEventArgs
  nameWithType: DrawItemEventArgs
  fullName: System.Windows.Forms.DrawItemEventArgs
- uid: System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnInitMenuPopup(EventArgs)
  nameWithType: MenuItem.OnInitMenuPopup(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnInitMenuPopup(EventArgs)
- uid: System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnMeasureItem(MeasureItemEventArgs)
  nameWithType: MenuItem.OnMeasureItem(MeasureItemEventArgs)
  fullName: System.Windows.Forms.MenuItem.OnMeasureItem(MeasureItemEventArgs)
- uid: System.Windows.Forms.MeasureItemEventArgs
  parent: System.Windows.Forms
  isExternal: false
  name: MeasureItemEventArgs
  nameWithType: MeasureItemEventArgs
  fullName: System.Windows.Forms.MeasureItemEventArgs
- uid: System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnPopup(EventArgs)
  nameWithType: MenuItem.OnPopup(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnPopup(EventArgs)
- uid: System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnSelect(EventArgs)
  nameWithType: MenuItem.OnSelect(EventArgs)
  fullName: System.Windows.Forms.MenuItem.OnSelect(EventArgs)
- uid: System.Windows.Forms.MenuItem.OwnerDraw
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OwnerDraw
  nameWithType: MenuItem.OwnerDraw
  fullName: System.Windows.Forms.MenuItem.OwnerDraw
- uid: System.Windows.Forms.MenuItem.Parent
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Parent
  nameWithType: MenuItem.Parent
  fullName: System.Windows.Forms.MenuItem.Parent
- uid: System.Windows.Forms.MenuItem.PerformClick
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: PerformClick()
  nameWithType: MenuItem.PerformClick()
  fullName: System.Windows.Forms.MenuItem.PerformClick()
- uid: System.Windows.Forms.MenuItem.PerformSelect
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: PerformSelect()
  nameWithType: MenuItem.PerformSelect()
  fullName: System.Windows.Forms.MenuItem.PerformSelect()
- uid: System.Windows.Forms.MenuItem.Popup
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Popup
  nameWithType: MenuItem.Popup
  fullName: System.Windows.Forms.MenuItem.Popup
- uid: System.Windows.Forms.MenuItem.RadioCheck
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: RadioCheck
  nameWithType: MenuItem.RadioCheck
  fullName: System.Windows.Forms.MenuItem.RadioCheck
- uid: System.Windows.Forms.MenuItem.Select
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Select
  nameWithType: MenuItem.Select
  fullName: System.Windows.Forms.MenuItem.Select
- uid: System.Windows.Forms.MenuItem.Shortcut
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Shortcut
  nameWithType: MenuItem.Shortcut
  fullName: System.Windows.Forms.MenuItem.Shortcut
- uid: System.Windows.Forms.MenuItem.ShowShortcut
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: ShowShortcut
  nameWithType: MenuItem.ShowShortcut
  fullName: System.Windows.Forms.MenuItem.ShowShortcut
- uid: System.Windows.Forms.MenuItem.Text
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Text
  nameWithType: MenuItem.Text
  fullName: System.Windows.Forms.MenuItem.Text
- uid: System.Windows.Forms.MenuItem.ToString
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: ToString()
  nameWithType: MenuItem.ToString()
  fullName: System.Windows.Forms.MenuItem.ToString()
- uid: System.Windows.Forms.MenuItem.Visible
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Visible
  nameWithType: MenuItem.Visible
  fullName: System.Windows.Forms.MenuItem.Visible
- uid: System.Windows.Forms.MenuItem.#ctor*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem.MenuItem
- uid: System.Windows.Forms.MenuItem.BarBreak*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: BarBreak
  nameWithType: MenuItem.BarBreak
- uid: System.Windows.Forms.MenuItem.Break*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Break
  nameWithType: MenuItem.Break
- uid: System.Windows.Forms.MenuItem.Checked*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Checked
  nameWithType: MenuItem.Checked
- uid: System.Windows.Forms.MenuItem.CloneMenu*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: CloneMenu
  nameWithType: MenuItem.CloneMenu
- uid: System.Windows.Forms.MenuItem.DefaultItem*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: DefaultItem
  nameWithType: MenuItem.DefaultItem
- uid: System.Windows.Forms.MenuItem.Dispose*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Dispose
  nameWithType: MenuItem.Dispose
- uid: System.Windows.Forms.MenuItem.Enabled*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Enabled
  nameWithType: MenuItem.Enabled
- uid: System.Windows.Forms.MenuItem.Index*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Index
  nameWithType: MenuItem.Index
- uid: System.Windows.Forms.MenuItem.IsParent*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: IsParent
  nameWithType: MenuItem.IsParent
- uid: System.Windows.Forms.MenuItem.MdiList*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MdiList
  nameWithType: MenuItem.MdiList
- uid: System.Windows.Forms.MenuItem.MenuID*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MenuID
  nameWithType: MenuItem.MenuID
- uid: System.Windows.Forms.MenuItem.MergeMenu*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeMenu
  nameWithType: MenuItem.MergeMenu
- uid: System.Windows.Forms.MenuItem.MergeOrder*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeOrder
  nameWithType: MenuItem.MergeOrder
- uid: System.Windows.Forms.MenuItem.MergeType*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: MergeType
  nameWithType: MenuItem.MergeType
- uid: System.Windows.Forms.MenuItem.Mnemonic*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Mnemonic
  nameWithType: MenuItem.Mnemonic
- uid: System.Windows.Forms.MenuItem.OnClick*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnClick
  nameWithType: MenuItem.OnClick
- uid: System.Windows.Forms.MenuItem.OnDrawItem*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnDrawItem
  nameWithType: MenuItem.OnDrawItem
- uid: System.Windows.Forms.MenuItem.OnInitMenuPopup*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnInitMenuPopup
  nameWithType: MenuItem.OnInitMenuPopup
- uid: System.Windows.Forms.MenuItem.OnMeasureItem*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnMeasureItem
  nameWithType: MenuItem.OnMeasureItem
- uid: System.Windows.Forms.MenuItem.OnPopup*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnPopup
  nameWithType: MenuItem.OnPopup
- uid: System.Windows.Forms.MenuItem.OnSelect*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OnSelect
  nameWithType: MenuItem.OnSelect
- uid: System.Windows.Forms.MenuItem.OwnerDraw*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: OwnerDraw
  nameWithType: MenuItem.OwnerDraw
- uid: System.Windows.Forms.MenuItem.Parent*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Parent
  nameWithType: MenuItem.Parent
- uid: System.Windows.Forms.MenuItem.PerformClick*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: PerformClick
  nameWithType: MenuItem.PerformClick
- uid: System.Windows.Forms.MenuItem.PerformSelect*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: PerformSelect
  nameWithType: MenuItem.PerformSelect
- uid: System.Windows.Forms.MenuItem.RadioCheck*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: RadioCheck
  nameWithType: MenuItem.RadioCheck
- uid: System.Windows.Forms.MenuItem.Shortcut*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Shortcut
  nameWithType: MenuItem.Shortcut
- uid: System.Windows.Forms.MenuItem.ShowShortcut*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: ShowShortcut
  nameWithType: MenuItem.ShowShortcut
- uid: System.Windows.Forms.MenuItem.Text*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Text
  nameWithType: MenuItem.Text
- uid: System.Windows.Forms.MenuItem.ToString*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: ToString
  nameWithType: MenuItem.ToString
- uid: System.Windows.Forms.MenuItem.Visible*
  parent: System.Windows.Forms.MenuItem
  isExternal: false
  name: Visible
  nameWithType: MenuItem.Visible
