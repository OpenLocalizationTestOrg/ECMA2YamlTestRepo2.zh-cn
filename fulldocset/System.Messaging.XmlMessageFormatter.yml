### YamlMime:ManagedReference
items:
- uid: System.Messaging.XmlMessageFormatter
  id: XmlMessageFormatter
  children:
  - System.Messaging.XmlMessageFormatter.#ctor
  - System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  - System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  - System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.Clone
  - System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.XmlMessageFormatter.TargetTypeNames
  - System.Messaging.XmlMessageFormatter.TargetTypes
  - System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter
  fullName: System.Messaging.XmlMessageFormatter
  type: Class
  summary: "序列化和反序列化对象到或从使用基于 XSD 架构定义的 XML 格式的消息的正文。"
  remarks: "XmlMessageFormatter 是默认的格式化程序的实例<xref:System.Messaging.MessageQueue>用于序列化消息写入队列。</xref:System.Messaging.MessageQueue> 当创建实例时<xref:System.Messaging.MessageQueue>，为你创建的 XmlMessageFormatter 实例并将其与<xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue>关联</xref:System.Messaging.MessageQueue> 你可以通过在代码中创建它并将其分配给<xref:System.Messaging.MessageQueue.Formatter%2A>你<xref:System.Messaging.MessageQueue>.</xref:System.Messaging.MessageQueue>属性</xref:System.Messaging.MessageQueue.Formatter%2A>指定不同的格式化程序       可以使用队列的默认 XmlMessageFormatter 实例要写入队列，但它不能用于从队列读取，直到你设置<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>上格式化程序的属性。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 你可以设置一个或两个这些值在默认格式化程序实例中，也可以创建格式化程序的新实例，并自动设置的值，通过将它们作为自变量传递到相应<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数。</xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>       指定时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时而不是读取的时，减少发生错误的可能性，在检查的类型存在。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>要求每个项都必须是完全限定，指定其程序集名称。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 这样，格式化程序来解释消息正文。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       这两个属性只有一个需要从队列中读取时设置，但也可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于你的应用程序。 如果消息正文包含其架构不匹配任何这两个属性的数组中的类型的类型，在读取消息时，将引发异常。       XmlMessageFormatter 是松散耦合的基于 XML 的消息传递的一个关键组件。 XSD.exe 实用工具使用 XML 格式用于生成 XML 架构，例如在使用该实用程序来序列化应用程序使用的类。 此类必须具有默认构造函数。       使用的格式再次以相反的过程时实用程序生成基于架构的类你分发用于描述类数据。 使用该实用程序和它所生成的 XML 架构，可避免重新分发.dll 文件，每次你的类的实现已更改后，在重新编译的类。 只要架构不会更改客户端或服务器上，在任意一侧的其他更改不影响其他。"
  example:
  - "The following code example includes three pieces of code: a server component, an order class, and client code. The order class can be used by the XSD.exe utility to generate schema that the server recognizes within incoming messages. The schema is an XML formatted file that describes the \"shape\" of the class. This schema can then be used on the client side to generate a client-specific order class that shares the same schema as the server class.  \n  \n The following code example represents a server component that receives orders through a message queue. The body of the message should be an order object whose schema matches the Order.cs class below. The server process or application deserializes the order.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#1](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_1.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#1](~/add/codesnippet/cpp/t-system.messaging.xmlme_1.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#1](~/add/codesnippet/csharp/t-system.messaging.xmlme_1.cs)]  \n  \n The following code example represents the order class that provides a schema for the order objects that the application on the server receives and deserializes.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#2](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_2.vb)]\n [!code-cs[Classic XmlMessageFormatter Example#2](~/add/codesnippet/csharp/t-system.messaging.xmlme_2.cs)]\n [!code-cpp[Classic XmlMessageFormatter Example#2](~/add/codesnippet/cpp/t-system.messaging.xmlme_2.cpp)]  \n  \n Any client application that interacts with the application on the server must send messages to the server by serializing information in a locally defined order class into the message body. The locally defined order class must have the same schema as the server-defined order class into which the application on the server will attempt to deserialize the message body. The XSD.exe utility lets the manager of the application on the server create and distribute the schema the client must use to serialize messages going to the server.  \n  \n When the manager of the client application receives the schema for the order class, the XSD.exe utility is used again to generate a client-specific order class from the schema. It is this class that is used in the client code example below, not the server's order class (the XSD.exe utility causes the schema-generated class to have the same name as the original class). This new order class is used to serialize the order into the message body.  \n  \n The following code example is the client-side processing, used to serialize an order and send the information associated with the order to a queue. The code associates Item, Quantity, and Address information with elements of the schema that were generated for the Order.cs class by the XSD.exe utility. An order is sent to the Orders queue on the local computer.  \n  \n [!code-vb[Classic XmlMessageFormatter Example#3](~/add/codesnippet/visualbasic/t-system.messaging.xmlme_3.vb)]\n [!code-cpp[Classic XmlMessageFormatter Example#3](~/add/codesnippet/cpp/t-system.messaging.xmlme_3.cpp)]\n [!code-cs[Classic XmlMessageFormatter Example#3](~/add/codesnippet/csharp/t-system.messaging.xmlme_3.cs)]  \n  \n After the schema is generated from the order class on the server, you can modify the class. Unless the schema changes, you do not need to redistribute the schema. After you have distributed the schema and generated a client-side order class, that client class can also be modified independently of the server's order class, as long as the schema itself is not modified. The two classes have become loosely coupled."
  syntax:
    content: 'public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>类，而无需目标类型集。"
  remarks: "此重载构造函数最常时使用写入到队列，如在写入时，目标类型不需要。       若要使用的实例从队列中读取一条消息<xref:System.Messaging.XmlMessageFormatter>使用此构造函数创建的你必须设置<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性，以便格式化程序知道要尝试反序列化的类型。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter>       当你创建一个新<xref:System.Messaging.MessageQueue>，默认<xref:System.Messaging.XmlMessageFormatter>创建实例，而无需设置目标类型。</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue> 使用此构造函数创建的格式化程序，必须设置为该格式化程序实例的目标类型，如果你想要从队列中读取。"
  syntax:
    content: public XmlMessageFormatter ();
    parameters: []
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  id: '#ctor(System.String[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>类，将传入的 （完全限定） 字符串值数组形式的目标类型设置。"
  remarks: "从队列中读取时，最经常使用与目标类型参数的构造函数。 在编写时，不需要指定目标类型。       此重载<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数集<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>属性中传递的数组值`targetTypeNames`参数。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 设置此属性使<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>实例读取消息包含对象的给定类型。</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 这样，格式化程序来解释消息正文。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       这两个属性只有一个需要从队列中读取时设置，但也可以同时设置。 类型集是从两个属性的组合的集。 其中一个才能使用是特定于你的应用程序。 如果消息正文包含其架构不匹配任何这两个属性的数组中的类型的类型，则将在读取时引发异常。"
  example:
  - >-
    [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/m-system.messaging.xmlme_1.cpp)]
     [!code-cs[Message.Body#1](~/add/codesnippet/csharp/m-system.messaging.xmlme_1.cs)]
     [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/m-system.messaging.xmlme_1.vb)]
  syntax:
    content: public XmlMessageFormatter (string[] targetTypeNames);
    parameters:
    - id: targetTypeNames
      type: System.String[]
      description: "类型的数组<xref:System.String>用于指定将从提供的消息格式化程序反序列化的可能类型集。</xref:System.String> 这些值必须是完全限定，例如，&quot;MyNamespace.MyOrders，MyOrdersAssemblyName&quot;。"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  id: '#ctor(System.Type[])'
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>类，将作为数组的对象类型传递中的目标类型设置。"
  remarks: "从队列中读取时，最经常使用与目标类型参数的构造函数。 在编写时，不需要指定目标类型。       此重载<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数集<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性中传递的数组值`targetTypes`参数。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 设置此属性使<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>实例读取包含给定类型的对象的消息。</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.MessageQueue>       同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 这样，格式化程序来解释消息正文。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       这两个属性只有一个需要从队列中读取时设置，但也可以同时设置。 类型集是从两个属性的组合的集。 其中一个才能使用是特定于你的应用程序。 如果消息正文包含其架构不匹配任何这两个属性的数组中的类型的类型，则将在读取时引发异常。       指定时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时而不是读取的时，减少发生错误的可能性，在检查的类型存在。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>要求每个项都必须是完全限定，指定其程序集名称。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。       使用时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>，你可以添加每个对象 (例如， `MyClass`) 到下面的 C# 代码所示的方式的列表。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>      ```   TargetTypes = new Type[]{typeof(MyClass)}   ```"
  syntax:
    content: public XmlMessageFormatter (Type[] targetTypes);
    parameters:
    - id: targetTypes
      type: System.Type[]
      description: "类型的数组<xref:System.Type>用于指定将从提供的消息格式化程序反序列化的可能类型集。</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>targetTypes</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "确定格式化程序是否可以反序列化消息。"
  remarks: "当调用 CanRead 时，格式化程序将尝试确定消息的内容是否可以反序列化的内容。 消息正文中的类型由数组中具有相同的架构类型之一时，格式化程序可以仅反序列消息<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> CanRead 返回`false`下列两种情况下:-消息的格式不使用<xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter>      的消息正文架构不在中列出的内容相比<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序哪些类型的对象必须能够进行反序列化。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 如果从列表中，缺少任何类型的消息中找到，CanRead 返回`false`。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>检查。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 XML 格式化程序可以反序列化消息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.XmlMessageFormatter.CanRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "既不<> *1> 也不<> *1> 设置属性。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "创建的实例<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>类其读/写属性 （目标类型的集） 是否与当前相同<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>实例。"
  remarks: "此方法创建一份格式化程序，并初始化所有其属性设置为此值<xref:System.Messaging.XmlMessageFormatter>对象。</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "其属性与此相同一个对象<xref href=&quot;System.Messaging.XmlMessageFormatter&quot;></xref>实例，但其元数据并不指定它为格式化程序类实例。"
  overload: System.Messaging.XmlMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从给定的消息读取内容并创建包含反序列化的消息的对象。"
  remarks: "同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 可以反序列化消息之前必须设置这些属性之一。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       目标类型无需指定才能写入队列。"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>，采用 XML 格式，以便反序列化。"
    return:
      type: System.Object
      description: "反序列化的消息。"
  overload: System.Messaging.XmlMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "既不<> *1> 也不<> *1> 设置属性。       -或-在消息正文中序列化的实例不符合的任何架构中的类型由表示<> *1> 和<> *1> 属性。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  id: TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "指定的一套可能将由从提供的消息格式化程序反序列化的类型。"
  remarks: "这两个 TargetTypeNames 和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性通知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 这样，格式化程序来解释消息正文。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       这两个属性只有一个需要从队列中读取时设置，但也可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于你的应用程序。 如果消息正文包含其架构不匹配任何这两个属性的数组中的类型的类型，在读取消息时，将引发异常。       TargetTypeNames 要求每个项都必须是完全限定，指定其程序集名称。 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。       的目标类型是仅在从队列中读取时需要。 TargetTypeNames 和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性不需要设置要写入队列。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>"
  syntax:
    content: public string[] TargetTypeNames { get; set; }
    return:
      type: System.String[]
      description: "类型的数组<xref:System.String>，它指定要从消息正文反序列化时读取消息的对象的类型。</xref:System.String>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "TargetTypeNames 属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  id: TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "指定的一套可能将由从提供的消息格式化程序反序列化的类型。"
  remarks: "同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>并 TargetTypes 属性告知格式化程序要尝试在反序列化消息时要匹配的架构。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 这样，格式化程序来解释消息正文。       在消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当读取消息使用的<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建相对应的标识的架构类型的对象，并读取消息正文到它。</xref:System.Messaging.MessageQueue.Receive%2A>       这两个属性只有一个需要从队列中读取时设置，但也可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于你的应用程序。 如果消息正文包含其架构不匹配任何这两个属性的数组中的类型的类型，在读取消息时，将引发异常。       的目标类型是仅在从队列中读取时需要。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和 TargetTypes 属性不需要设置要写入队列。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       当指定 TargetTypes 而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时而不是读取的时，减少发生错误的可能性，在检查的类型存在。</xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       在使用 TargetTypes，你可以添加每个对象 (例如， `MyClass`) 到的列表中的 C# 代码所示的方式`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`。"
  example:
  - "The following code example sends and receives a message that contains an order to and from a queue.  \n  \n [!code-cpp[Message.Body#1](~/add/codesnippet/cpp/p-system.messaging.xmlme_1.cpp)]\n [!code-cs[Message.Body#1](~/add/codesnippet/csharp/p-system.messaging.xmlme_1.cs)]\n [!code-vb[Message.Body#1](~/add/codesnippet/visualbasic/p-system.messaging.xmlme_1.vb)]"
  syntax:
    content: public Type[] TargetTypes { get; set; }
    return:
      type: System.Type[]
      description: "类型的数组<xref:System.Type>，它指定要从消息正文反序列化时读取消息的对象的类型。</xref:System.Type>"
  overload: System.Messaging.XmlMessageFormatter.TargetTypes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "TargetTypes 属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "对象序列化为消息的正文。"
  remarks: "目标类型不需要指定要写入队列，因为它们必须在读取时。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>仅在反序列化消息时，格式化程序使用的属性。</xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> </xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>       <xref:System.Messaging.XmlMessageFormatter>利用<xref:System.Xml.Serialization.XmlSerializer>类，该类定义可序列化内容。</xref:System.Xml.Serialization.XmlSerializer> </xref:System.Messaging.XmlMessageFormatter> 仅公共字段和公共属性，可以进行序列化。 结构、 具有数组和结构的数组的结构是所有可序列化，只要它们不使用 SOAP 协议使用的编码的样式。"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>其<xref:System.Messaging.Message.Body*>属性将包含序列化的对象。</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "<xref:System.Object>要序列化到消息正文。</xref:System.Object>"
  overload: System.Messaging.XmlMessageFormatter.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>obj</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.XmlMessageFormatter.#ctor
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter()
  nameWithType: XmlMessageFormatter.XmlMessageFormatter()
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter()
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.String[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(String[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(String[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.#ctor(System.Type[])
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter(Type[])
  nameWithType: XmlMessageFormatter.XmlMessageFormatter(Type[])
  fullName: System.Messaging.XmlMessageFormatter.XmlMessageFormatter(Type[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: XmlMessageFormatter.CanRead(Message)
  fullName: System.Messaging.XmlMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.XmlMessageFormatter.Clone
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: XmlMessageFormatter.Clone()
  fullName: System.Messaging.XmlMessageFormatter.Clone()
- uid: System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: XmlMessageFormatter.Read(Message)
  fullName: System.Messaging.XmlMessageFormatter.Read(Message)
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
  fullName: System.Messaging.XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
  fullName: System.Messaging.XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: XmlMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.XmlMessageFormatter.Write(Message,Object)
- uid: System.Messaging.XmlMessageFormatter.#ctor*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: XmlMessageFormatter
  nameWithType: XmlMessageFormatter.XmlMessageFormatter
- uid: System.Messaging.XmlMessageFormatter.CanRead*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: XmlMessageFormatter.CanRead
- uid: System.Messaging.XmlMessageFormatter.Clone*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: XmlMessageFormatter.Clone
- uid: System.Messaging.XmlMessageFormatter.Read*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Read
  nameWithType: XmlMessageFormatter.Read
- uid: System.Messaging.XmlMessageFormatter.TargetTypeNames*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypeNames
  nameWithType: XmlMessageFormatter.TargetTypeNames
- uid: System.Messaging.XmlMessageFormatter.TargetTypes*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: TargetTypes
  nameWithType: XmlMessageFormatter.TargetTypes
- uid: System.Messaging.XmlMessageFormatter.Write*
  parent: System.Messaging.XmlMessageFormatter
  isExternal: false
  name: Write
  nameWithType: XmlMessageFormatter.Write
