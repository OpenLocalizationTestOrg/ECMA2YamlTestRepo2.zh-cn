### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlAttribute
  id: XmlAttribute
  children:
  - System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  - System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.BaseURI
  - System.Xml.XmlAttribute.CloneNode(System.Boolean)
  - System.Xml.XmlAttribute.InnerText
  - System.Xml.XmlAttribute.InnerXml
  - System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.LocalName
  - System.Xml.XmlAttribute.Name
  - System.Xml.XmlAttribute.NamespaceURI
  - System.Xml.XmlAttribute.NodeType
  - System.Xml.XmlAttribute.OwnerDocument
  - System.Xml.XmlAttribute.OwnerElement
  - System.Xml.XmlAttribute.ParentNode
  - System.Xml.XmlAttribute.Prefix
  - System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlAttribute.SchemaInfo
  - System.Xml.XmlAttribute.Specified
  - System.Xml.XmlAttribute.Value
  - System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  name: XmlAttribute
  nameWithType: XmlAttribute
  fullName: System.Xml.XmlAttribute
  type: Class
  summary: "表示属性。 文档类型定义 (DTD) 或架构中定义的属性的有效值和默认值。"
  remarks: "属性可与元素关联。 使用<xref:System.Xml.XmlAttribute.OwnerElement%2A>属性来获取<xref:System.Xml.XmlElement>属性所属。</xref:System.Xml.XmlElement> </xref:System.Xml.XmlAttribute.OwnerElement%2A>       `XmlElement`类具有多种方法可用于访问属性节点 (<xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName>， <xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName>， <xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName>，依次类推)。</xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName> </xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName> </xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName> 此外，你可以调用<xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName>属性，它返回<xref:System.Xml.XmlAttributeCollection>允许你从集合中访问属性按名称或索引。</xref:System.Xml.XmlAttributeCollection> </xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XmlAttribute : System.Xml.XmlNode'
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements: []
  inheritedMembers:
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.Clone
  - System.Xml.XmlNode.CreateNavigator
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.IsReadOnly
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.SelectNodes(System.String)
  - System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.SelectSingleNode(System.String)
  - System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Xml.XmlNode.System#ICloneable#Clone
  platform:
  - net462
- uid: System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  id: '#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)'
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: XmlAttribute(String,String,String,XmlDocument)
  nameWithType: XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  fullName: System.Xml.XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新实例<xref href=&quot;System.Xml.XmlAttribute&quot;></xref>类。"
  remarks: "不要实例化<xref:System.Xml.XmlAttribute>直接; 相反，使用方法，如<xref:System.Xml.XmlDocument.CreateAttribute%2A>.</xref:System.Xml.XmlDocument.CreateAttribute%2A> </xref:System.Xml.XmlAttribute>"
  syntax:
    content: protected XmlAttribute (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);
    parameters:
    - id: prefix
      type: System.String
      description: "命名空间前缀。"
    - id: localName
      type: System.String
      description: "属性的本地名称。"
    - id: namespaceURI
      type: System.String
      description: "命名空间统一资源标识符 (URI)。"
    - id: doc
      type: System.Xml.XmlDocument
      description: "父 XML 文档。"
  overload: System.Xml.XmlAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  id: AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: AppendChild(XmlNode)
  nameWithType: XmlAttribute.AppendChild(XmlNode)
  fullName: System.Xml.XmlAttribute.AppendChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将指定的节点添加到此节点的子节点列表的末尾。"
  remarks: "如果`newChild`是已在树中，则将先删除。       如果插入的节点已创建从另一个文档，则可以使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>将节点导入到当前文档。</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> 然后，导入的节点可以插入到当前文档中。"
  example:
  - For an example of the AppendChild method, see the <xref:System.Xml.XmlNode.AppendChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The <xref href=&quot;System.Xml.XmlNode&quot;></xref> to add."
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>添加。"
  overload: System.Xml.XmlAttribute.AppendChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此节点是不允许子的类型的节点的类型<code> newChild </code>节点。       <code> newChild </code>是此节点的祖先。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>已创建从比创建此节点的一个不同的文档。       此节点是只读的。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.BaseURI
  id: BaseURI
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
  fullName: System.Xml.XmlAttribute.BaseURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取节点基统一资源标识符 (URI)。"
  remarks: "联网的 XML 文档的聚合使用各种 World Wide Web Consortium (W3C) 标准包含机制的数据块组成，因此包含来自不同位置的节点。 `BaseURI`告诉这些节点来自何处。       有关其他信息`BaseURI`以及如何其行为与其他节点类型，请参阅<xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>.</xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>       此属性是 Microsoft 扩展到文档对象模型 (DOM)。"
  example:
  - "The following example displays information on the attribute node, including its base URI.  \n  \n [!code-cpp[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_7_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_7_1.vb)]\n [!code-cs[Classic WebData XmlAttribute.BaseURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_7_1.cs)]  \n  \n The sample uses the file, `baseuri.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlAttribute.BaseURI Example#2](~/add/codesnippet/xml/p-system.xml.xmlattribut_7_2.xml)]"
  syntax:
    content: public override string BaseURI { get; }
    return:
      type: System.String
      description: "从位置其加载节点，则为 String.Empty 如果节点没有基 URI。 属性节点具有作为其所有者元素相同的基 URI。 如果属性节点不具有所有者元素中， <xref uid=&quot;langword_csharp_BaseURI&quot; name=&quot;BaseURI&quot; href=&quot;&quot;> </xref>返回 String.Empty。"
  overload: System.Xml.XmlAttribute.BaseURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: CloneNode(Boolean)
  nameWithType: XmlAttribute.CloneNode(Boolean)
  fullName: System.Xml.XmlAttribute.CloneNode(Boolean)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "创建此节点的副本。"
  remarks: "此方法可作为节点的复制构造函数。 克隆的节点具有没有父级 (<xref:System.Xml.XmlAttribute.ParentNode%2A>返回`null`)。</xref:System.Xml.XmlAttribute.ParentNode%2A>       克隆未指定的属性返回指定的属性 (<xref:System.Xml.XmlAttribute.Specified%2A>返回`true`)。</xref:System.Xml.XmlAttribute.Specified%2A>"
  example:
  - "The following example uses `CloneNode` to add an attribute to two different element nodes.  \n  \n [!code-cpp[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/cpp/m-system.xml.xmlattribut_1_1.cpp)]\n [!code-cs[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/csharp/m-system.xml.xmlattribut_1_1.cs)]\n [!code-vb[Classic WebData XmlAttribute.CloneNode Example#1](~/add/codesnippet/visualbasic/m-system.xml.xmlattribut_1_1.vb)]  \n  \n The example uses the file, `2elems.xml`, as input.  \n  \n [!code-xml[Classic WebData XmlAttribute.CloneNode Example#2](~/add/codesnippet/xml/m-system.xml.xmlattribut_1_2.xml)]"
  syntax:
    content: public override System.Xml.XmlNode CloneNode (bool deep);
    parameters:
    - id: deep
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>递归地克隆指定节点; 下的子树<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>克隆节点本身"
    return:
      type: System.Xml.XmlNode
      description: "重复节点。"
  overload: System.Xml.XmlAttribute.CloneNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InnerText
  id: InnerText
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InnerText
  nameWithType: XmlAttribute.InnerText
  fullName: System.Xml.XmlAttribute.InnerText
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "设置节点及其所有子级的串连的值。"
  remarks: "设置此属性将给定字符串的已分析内容替换所有子级。       此属性是 Microsoft 扩展到文档对象模型 (DOM)。"
  syntax:
    content: public override string InnerText { set; }
    return:
      type: System.String
      description: "节点及其所有子级的串连的值。 对于属性节点，此属性具有相同的功能<xref:System.Xml.XmlAttribute.Value*>属性。</xref:System.Xml.XmlAttribute.Value*>"
  overload: System.Xml.XmlAttribute.InnerText*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InnerXml
  id: InnerXml
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
  fullName: System.Xml.XmlAttribute.InnerXml
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "设置属性的值。"
  remarks: "此属性是 Microsoft 扩展到文档对象模型 (DOM)。"
  syntax:
    content: public override string InnerXml { set; }
    return:
      type: System.String
      description: "特性值。"
  overload: System.Xml.XmlAttribute.InnerXml*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "将指定的 XML，当设置此属性不是格式良好。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertAfter(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将指定的节点插入紧跟在指定的引用节点之后。"
  remarks: "如果`refChild`是`null`，插入`newChild`的子节点列表的开头。 如果`newChild`是<xref:System.Xml.XmlDocumentFragment>对象及其子节点，相同顺序之后插入`refChild`。</xref:System.Xml.XmlDocumentFragment> 如果`newChild`是已在树中，则将先删除。       如果插入的节点已创建从另一个文档，则可以使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>将节点导入到当前文档。</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> 然后，导入的节点可以插入到当前文档中。       此方法是 Microsoft 扩展到文档对象模型 (DOM)。"
  example:
  - For an example of the InsertAfter method see the <xref:System.Xml.XmlNode.InsertAfter%2A> method.
  syntax:
    content: public override System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>插入。"
    - id: refChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>即引用节点。 `newChild`后放置`refChild`。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>插入。"
  overload: System.Xml.XmlAttribute.InsertAfter*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此节点是不允许子的类型的节点的类型<code> newChild </code>节点。       <code> newChild </code>是此节点的祖先。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>已创建从比创建此节点的一个不同的文档。       <code> refChild </code>不是此节点的子级。       此节点是只读的。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  id: InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertBefore(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将立即在指定的引用节点之前指定的节点插入。"
  remarks: "如果`refChild`是`null`，插入`newChild`的子节点列表的末尾。 如果`newChild`是<xref:System.Xml.XmlDocumentFragment>对象及其子节点的相同顺序插入之前`refChild`。</xref:System.Xml.XmlDocumentFragment> 如果`newChild`是已在树中，则将先删除。       如果插入的节点已创建从另一个文档，则可以使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>将节点导入到当前文档。</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> 然后，导入的节点可以插入到当前文档中。"
  example:
  - For an example of the InsertBefore method, see the <xref:System.Xml.XmlNode.InsertBefore%2A> method.
  syntax:
    content: public override System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>插入。"
    - id: refChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>即引用节点。 `newChild`放置在该节点之前。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>插入。"
  overload: System.Xml.XmlAttribute.InsertBefore*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前节点是不允许子的类型的节点的类型<code> newChild </code>节点。       <code> newChild </code>是此节点的祖先。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>已创建从比创建此节点的一个不同的文档。       <code> refChild </code>不是此节点的子级。       此节点是只读的。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.LocalName
  id: LocalName
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: LocalName
  nameWithType: XmlAttribute.LocalName
  fullName: System.Xml.XmlAttribute.LocalName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取节点的本地名称。"
  remarks: "如果节点没有前缀， `LocalName` <xref:System.Xml.XmlAttribute.Name%2A>.</xref:System.Xml.XmlAttribute.Name%2A>相同"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_3_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_3_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_3_1.vb)]"
  syntax:
    content: public override string LocalName { get; }
    return:
      type: System.String
      description: "移除了前缀的属性节点的名称。 在下面的示例&lt;本书 bk:genre = novel&gt;、 <xref uid=&quot;langword_csharp_LocalName&quot; name=&quot;LocalName&quot; href=&quot;&quot;> </xref>的属性是<xref uid=&quot;langword_csharp_genre&quot; name=&quot;genre&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlAttribute.LocalName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Name
  id: Name
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Name
  nameWithType: XmlAttribute.Name
  fullName: System.Xml.XmlAttribute.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取节点的限定的名称。"
  remarks: ''
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_8_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_8_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.Name Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_8_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "属性节点的限定的名称。"
  overload: System.Xml.XmlAttribute.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
  fullName: System.Xml.XmlAttribute.NamespaceURI
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取此节点的 URI 的命名空间。"
  remarks: "从附加到的元素，属性不会继承其命名空间。 如果属性不显式指定命名空间，被视为命名空间 URI String.Empty。"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_1_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_1_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_1_1.vb)]"
  syntax:
    content: public override string NamespaceURI { get; }
    return:
      type: System.String
      description: "命名空间的此节点的 URI。 如果该属性未显式指定命名空间，则此属性返回 String.Empty。"
  overload: System.Xml.XmlAttribute.NamespaceURI*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.NodeType
  id: NodeType
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: NodeType
  nameWithType: XmlAttribute.NodeType
  fullName: System.Xml.XmlAttribute.NodeType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取当前节点的类型。"
  syntax:
    content: public override System.Xml.XmlNodeType NodeType { get; }
    return:
      type: System.Xml.XmlNodeType
      description: "节点类型的<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>节点是 XmlNodeType.Attribute。"
  overload: System.Xml.XmlAttribute.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
  fullName: System.Xml.XmlAttribute.OwnerDocument
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取<xref href=&quot;System.Xml.XmlDocument&quot;></xref>此节点所属。"
  remarks: ''
  example:
  - "The following example creates an attribute and displays its `OwnerDocument`.  \n  \n [!code-cs[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_2_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_2_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.OwnerDocument Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_2_1.vb)]"
  syntax:
    content: public override System.Xml.XmlDocument OwnerDocument { get; }
    return:
      type: System.Xml.XmlDocument
      description: "此节点属于一个 XML 文档。"
  overload: System.Xml.XmlAttribute.OwnerDocument*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.OwnerElement
  id: OwnerElement
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
  fullName: System.Xml.XmlAttribute.OwnerElement
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取<xref href=&quot;System.Xml.XmlElement&quot;></xref>属性所属。"
  remarks: ''
  example:
  - "The following example creates an attribute and displays the `OwnerElement` of the attribute.  \n  \n [!code-cs[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_4_1.cs)]\n [!code-vb[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_4_1.vb)]\n [!code-cpp[Classic WebData XmlAttribute.OwnerElement Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_4_1.cpp)]"
  syntax:
    content: public virtual System.Xml.XmlElement OwnerElement { get; }
    return:
      type: System.Xml.XmlElement
      description: "<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>属性属于或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有此特性的一部分<xref uid=&quot;langword_csharp_XmlElement&quot; name=&quot;XmlElement&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlAttribute.OwnerElement*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.ParentNode
  id: ParentNode
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
  fullName: System.Xml.XmlAttribute.ParentNode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取节点的父级。 有关<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>节点，此属性始终返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  remarks: "使用<xref:System.Xml.XmlAttribute.OwnerElement%2A>属性来获取<xref:System.Xml.XmlElement>属性所属。</xref:System.Xml.XmlElement> </xref:System.Xml.XmlAttribute.OwnerElement%2A>"
  syntax:
    content: public override System.Xml.XmlNode ParentNode { get; }
    return:
      type: System.Xml.XmlNode
      description: "有关<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>节点，此属性始终返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlAttribute.ParentNode*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Prefix
  id: Prefix
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Prefix
  nameWithType: XmlAttribute.Prefix
  fullName: System.Xml.XmlAttribute.Prefix
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取或设置该节点的命名空间前缀。"
  remarks: "更改属性的前缀不会更改其命名空间 URI，因为更改的属性具有默认值已知的前缀不创建具有默认值和原始前缀新属性。"
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_9_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_9_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_9_1.vb)]"
  syntax:
    content: public override string Prefix { get; set; }
    return:
      type: System.String
      description: "该节点的命名空间前缀。 如果没有前缀，此属性返回 String.Empty。"
  overload: System.Xml.XmlAttribute.Prefix*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "此节点是只读的。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "指定的前缀包含无效字符。       指定的前缀格式不正确。       此节点的 namespaceuri <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       指定的前缀为&quot;xml&quot;，而此节点的 namespaceURI 与&quot;http://www.w3.org/XML/1998/namespace&quot;不同。       此节点是一个属性，指定的前缀为&quot;xmlns&quot;，而此节点的 namespaceURI 不同于&quot;http://www.w3.org/2000/xmlns/&quot;。       此节点是一个特性，且该节点的 qualifiedName&quot;xmlns&quot;[命名空间]。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  id: PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: PrependChild(XmlNode)
  nameWithType: XmlAttribute.PrependChild(XmlNode)
  fullName: System.Xml.XmlAttribute.PrependChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将指定的节点添加到此节点的子节点列表的开头。"
  remarks: "如果`newChild`是已在树中，则将先删除。       如果插入的节点已创建从另一个文档，则可以使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>将节点导入到当前文档。</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> 然后，导入的节点可以插入到当前文档中。       此方法是 Microsoft 扩展到文档对象模型 (DOM)。"
  example:
  - For an example of the PrependChild method, see the <xref:System.Xml.XmlNode.PrependChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "The <xref href=&quot;System.Xml.XmlNode&quot;></xref> to add. 如果它是<xref href=&quot;System.Xml.XmlDocumentFragment&quot;> </xref>，文档片段的全部内容移至该节点的子列表。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>添加。"
  overload: System.Xml.XmlAttribute.PrependChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此节点是不允许子的类型的节点的类型<code> newChild </code>节点。       <code> newChild </code>是此节点的祖先。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>已创建从比创建此节点的一个不同的文档。       此节点是只读的。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  id: RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: RemoveChild(XmlNode)
  nameWithType: XmlAttribute.RemoveChild(XmlNode)
  fullName: System.Xml.XmlAttribute.RemoveChild(XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "删除指定的子节点。"
  remarks: ''
  example:
  - For an example of the RemoveChild method, see the <xref:System.Xml.XmlNode.RemoveChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);
    parameters:
    - id: oldChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>删除。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>删除。"
  overload: System.Xml.XmlAttribute.RemoveChild*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> oldChild </code>不是此节点的子级。 或者，此节点是只读的。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  id: ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "替换指定与指定的新子节点的子节点。"
  remarks: "如果`newChild`是已在树中，则将先删除。       如果`newChild`创建从另一个文档，你可以使用<xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>将节点导入到当前文档。</xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName>"
  example:
  - For an example of the ReplaceChild method, see the <xref:System.Xml.XmlNode.ReplaceChild%2A> method.
  syntax:
    content: public override System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);
    parameters:
    - id: newChild
      type: System.Xml.XmlNode
      description: "新的子<xref href=&quot;System.Xml.XmlNode&quot;> </xref>。"
    - id: oldChild
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>替换。"
    return:
      type: System.Xml.XmlNode
      description: "<xref href=&quot;System.Xml.XmlNode&quot;> </xref>替换。"
  overload: System.Xml.XmlAttribute.ReplaceChild*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此节点是不允许子的类型的节点的类型<code> newChild </code>节点。       <code> newChild </code>是此节点的祖先。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> newChild </code>已创建从比创建此节点的一个不同的文档。       此节点是只读的。       <code> oldChild </code>不是此节点的子级。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.SchemaInfo
  id: SchemaInfo
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
  fullName: System.Xml.XmlAttribute.SchemaInfo
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取后的架构验证的信息集已分配给此节点作为架构验证结果。"
  remarks: "验证此节点时设置的 SchemaInfo 属性。"
  syntax:
    content: public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref>包含后的架构验证的信息集的此节点。"
  overload: System.Xml.XmlAttribute.SchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Specified
  id: Specified
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Specified
  nameWithType: XmlAttribute.Specified
  fullName: System.Xml.XmlAttribute.Specified
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取一个值，该值指示是否已显式设置的属性值。"
  remarks: "实现都负责此属性，而不是用户。 如果用户更改 （即使它具有相同的值的默认/固定值结束） 属性的值，然后指定的标志就会自动转为`true`。 若要重新指定为 DTD 中的默认/固定值的属性，则用户必须删除该属性。 然后，实现使新的属性可指定设置为与`false`并且默认/固定值 （如果存在）。       总之︰ 1。  如果属性在文档中，有一个分配的值`Specified`是`true`，和的值是所赋的值。      2.  如果该属性在文档中不具有任何分配的值且中 DTD，具有默认/固定值的`Specified`是`false`，和值是在 DTD 中的默认/固定值。      3.  否则，该属性不出现在文档的结构模型中。"
  syntax:
    content: public virtual bool Specified { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此属性已显式提供原始实例文档; 中的值，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 值为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>指示属性的值来自 DTD。"
  overload: System.Xml.XmlAttribute.Specified*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.Value
  id: Value
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: Value
  nameWithType: XmlAttribute.Value
  fullName: System.Xml.XmlAttribute.Value
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "获取或设置节点的值。"
  remarks: ''
  example:
  - "The following example displays information on each of the nodes in the attribute collection.  \n  \n [!code-cs[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/csharp/p-system.xml.xmlattribut_6_1.cs)]\n [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/cpp/p-system.xml.xmlattribut_6_1.cpp)]\n [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example#1](~/add/codesnippet/visualbasic/p-system.xml.xmlattribut_6_1.vb)]"
  syntax:
    content: public override string Value { get; set; }
    return:
      type: System.String
      description: "返回的值取决于<xref:System.Xml.XmlNode.NodeType*>的节点。</xref:System.Xml.XmlNode.NodeType*> 有关<xref uid=&quot;langword_csharp_XmlAttribute&quot; name=&quot;XmlAttribute&quot; href=&quot;&quot;></xref>节点，此属性是属性的值。"
  overload: System.Xml.XmlAttribute.Value*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "节点是只读的且调用设置操作。"
  platform:
  - net462
- uid: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlAttribute.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteContentTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将节点的所有子级都保存到指定的<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "此方法是 Microsoft 扩展到文档对象模型 (DOM)。 它在功能上等效于<xref:System.Xml.XmlAttribute.InnerXml%2A>属性。</xref:System.Xml.XmlAttribute.InnerXml%2A>"
  syntax:
    content: public override void WriteContentTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>到想要保存。"
  overload: System.Xml.XmlAttribute.WriteContentTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  langs:
  - csharp
  name: WriteTo(XmlWriter)
  nameWithType: XmlAttribute.WriteTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteTo(XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将节点保存到指定<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>"
  remarks: "此方法是 Microsoft 扩展到文档对象模型 (DOM)。 它在功能上等效于<xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName>属性。</xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName>"
  syntax:
    content: public override void WriteTo (System.Xml.XmlWriter w);
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "<xref uid=&quot;langword_csharp_XmlWriter&quot; name=&quot;XmlWriter&quot; href=&quot;&quot;> </xref>到想要保存。"
  overload: System.Xml.XmlAttribute.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.XmlNode
  isExternal: false
  name: System.Xml.XmlNode
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: XmlAttribute(String,String,String,XmlDocument)
  nameWithType: XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
  fullName: System.Xml.XmlAttribute.XmlAttribute(String,String,String,XmlDocument)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: AppendChild(XmlNode)
  nameWithType: XmlAttribute.AppendChild(XmlNode)
  fullName: System.Xml.XmlAttribute.AppendChild(XmlNode)
- uid: System.Xml.XmlAttribute.BaseURI
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
  fullName: System.Xml.XmlAttribute.BaseURI
- uid: System.Xml.XmlAttribute.CloneNode(System.Boolean)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: CloneNode(Boolean)
  nameWithType: XmlAttribute.CloneNode(Boolean)
  fullName: System.Xml.XmlAttribute.CloneNode(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlAttribute.InnerText
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerText
  nameWithType: XmlAttribute.InnerText
  fullName: System.Xml.XmlAttribute.InnerText
- uid: System.Xml.XmlAttribute.InnerXml
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
  fullName: System.Xml.XmlAttribute.InnerXml
- uid: System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertAfter(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertAfter(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertAfter(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertBefore(XmlNode,XmlNode)
  nameWithType: XmlAttribute.InsertBefore(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.InsertBefore(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.LocalName
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: LocalName
  nameWithType: XmlAttribute.LocalName
  fullName: System.Xml.XmlAttribute.LocalName
- uid: System.Xml.XmlAttribute.Name
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Name
  nameWithType: XmlAttribute.Name
  fullName: System.Xml.XmlAttribute.Name
- uid: System.Xml.XmlAttribute.NamespaceURI
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
  fullName: System.Xml.XmlAttribute.NamespaceURI
- uid: System.Xml.XmlAttribute.NodeType
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NodeType
  nameWithType: XmlAttribute.NodeType
  fullName: System.Xml.XmlAttribute.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: true
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.XmlAttribute.OwnerDocument
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
  fullName: System.Xml.XmlAttribute.OwnerDocument
- uid: System.Xml.XmlAttribute.OwnerElement
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
  fullName: System.Xml.XmlAttribute.OwnerElement
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  nameWithType: XmlElement
  fullName: System.Xml.XmlElement
- uid: System.Xml.XmlAttribute.ParentNode
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
  fullName: System.Xml.XmlAttribute.ParentNode
- uid: System.Xml.XmlAttribute.Prefix
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Prefix
  nameWithType: XmlAttribute.Prefix
  fullName: System.Xml.XmlAttribute.Prefix
- uid: System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: PrependChild(XmlNode)
  nameWithType: XmlAttribute.PrependChild(XmlNode)
  fullName: System.Xml.XmlAttribute.PrependChild(XmlNode)
- uid: System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: RemoveChild(XmlNode)
  nameWithType: XmlAttribute.RemoveChild(XmlNode)
  fullName: System.Xml.XmlAttribute.RemoveChild(XmlNode)
- uid: System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ReplaceChild(XmlNode,XmlNode)
  nameWithType: XmlAttribute.ReplaceChild(XmlNode,XmlNode)
  fullName: System.Xml.XmlAttribute.ReplaceChild(XmlNode,XmlNode)
- uid: System.Xml.XmlAttribute.SchemaInfo
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
  fullName: System.Xml.XmlAttribute.SchemaInfo
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.XmlAttribute.Specified
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Specified
  nameWithType: XmlAttribute.Specified
  fullName: System.Xml.XmlAttribute.Specified
- uid: System.Xml.XmlAttribute.Value
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Value
  nameWithType: XmlAttribute.Value
  fullName: System.Xml.XmlAttribute.Value
- uid: System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteContentTo(XmlWriter)
  nameWithType: XmlAttribute.WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteTo(XmlWriter)
  nameWithType: XmlAttribute.WriteTo(XmlWriter)
  fullName: System.Xml.XmlAttribute.WriteTo(XmlWriter)
- uid: System.Xml.XmlAttribute.#ctor*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: XmlAttribute
  nameWithType: XmlAttribute.XmlAttribute
- uid: System.Xml.XmlAttribute.AppendChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: AppendChild
  nameWithType: XmlAttribute.AppendChild
- uid: System.Xml.XmlAttribute.BaseURI*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: BaseURI
  nameWithType: XmlAttribute.BaseURI
- uid: System.Xml.XmlAttribute.CloneNode*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: CloneNode
  nameWithType: XmlAttribute.CloneNode
- uid: System.Xml.XmlAttribute.InnerText*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerText
  nameWithType: XmlAttribute.InnerText
- uid: System.Xml.XmlAttribute.InnerXml*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InnerXml
  nameWithType: XmlAttribute.InnerXml
- uid: System.Xml.XmlAttribute.InsertAfter*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertAfter
  nameWithType: XmlAttribute.InsertAfter
- uid: System.Xml.XmlAttribute.InsertBefore*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: InsertBefore
  nameWithType: XmlAttribute.InsertBefore
- uid: System.Xml.XmlAttribute.LocalName*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: LocalName
  nameWithType: XmlAttribute.LocalName
- uid: System.Xml.XmlAttribute.Name*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Name
  nameWithType: XmlAttribute.Name
- uid: System.Xml.XmlAttribute.NamespaceURI*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NamespaceURI
  nameWithType: XmlAttribute.NamespaceURI
- uid: System.Xml.XmlAttribute.NodeType*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: NodeType
  nameWithType: XmlAttribute.NodeType
- uid: System.Xml.XmlAttribute.OwnerDocument*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerDocument
  nameWithType: XmlAttribute.OwnerDocument
- uid: System.Xml.XmlAttribute.OwnerElement*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: OwnerElement
  nameWithType: XmlAttribute.OwnerElement
- uid: System.Xml.XmlAttribute.ParentNode*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ParentNode
  nameWithType: XmlAttribute.ParentNode
- uid: System.Xml.XmlAttribute.Prefix*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Prefix
  nameWithType: XmlAttribute.Prefix
- uid: System.Xml.XmlAttribute.PrependChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: PrependChild
  nameWithType: XmlAttribute.PrependChild
- uid: System.Xml.XmlAttribute.RemoveChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: RemoveChild
  nameWithType: XmlAttribute.RemoveChild
- uid: System.Xml.XmlAttribute.ReplaceChild*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: ReplaceChild
  nameWithType: XmlAttribute.ReplaceChild
- uid: System.Xml.XmlAttribute.SchemaInfo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: SchemaInfo
  nameWithType: XmlAttribute.SchemaInfo
- uid: System.Xml.XmlAttribute.Specified*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Specified
  nameWithType: XmlAttribute.Specified
- uid: System.Xml.XmlAttribute.Value*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: Value
  nameWithType: XmlAttribute.Value
- uid: System.Xml.XmlAttribute.WriteContentTo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteContentTo
  nameWithType: XmlAttribute.WriteContentTo
- uid: System.Xml.XmlAttribute.WriteTo*
  parent: System.Xml.XmlAttribute
  isExternal: false
  name: WriteTo
  nameWithType: XmlAttribute.WriteTo
