### YamlMime:ManagedReference
items:
- uid: System.CharEnumerator
  id: CharEnumerator
  children:
  - System.CharEnumerator.Clone
  - System.CharEnumerator.Current
  - System.CharEnumerator.Dispose
  - System.CharEnumerator.MoveNext
  - System.CharEnumerator.Reset
  - System.CharEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: CharEnumerator
  nameWithType: CharEnumerator
  fullName: System.CharEnumerator
  type: Class
  summary: "支持遍历<xref:System.String>对象和读取其各个字符。</xref:System.String> 此类不能被继承。"
  remarks: "CharEnumerator 提供对中的引用的字符的只读访问权限<xref:System.String>对象。</xref:System.String> 例如，`foreach`语句的 Microsoft Visual Basic 和 C# 的编程语言，它循环访问集合的元素，检索从 CharEnumerator<xref:System.String>以循环访问该对象中的字符的对象。</xref:System.String>       CharEnumerator 没有公共构造函数。 而应调用<xref:System.String>对象的<xref:System.String.GetEnumerator%2A>方法来获取初始化后将引用字符串 CharEnumerator。</xref:System.String.GetEnumerator%2A> </xref:System.String>       CharEnumerator 保持到字符串中字符的内部索引 CharEnumerator 引用。 引用字符串内的字符时，索引的状态是无效的; 当它引用字符串中的字符位置逻辑上第一个字符之前或之后的最后一个字符和有效。 索引函数将初始化为逻辑上之前的第一个字符的位置，并设置到的位置后的最后一个字符迭代完成后。 如果你尝试访问该字符，该索引无效时，将引发异常。       <xref:System.CharEnumerator.MoveNext%2A>方法索引递增&1;，因此反过来访问的第一个和后续字符。</xref:System.CharEnumerator.MoveNext%2A> <xref:System.CharEnumerator.Reset%2A>方法设置为逻辑上之前的第一个字符的位置的索引。</xref:System.CharEnumerator.Reset%2A> <xref:System.CharEnumerator.Current%2A>属性检索当前引用的索引的字符。</xref:System.CharEnumerator.Current%2A> <xref:System.CharEnumerator.Clone%2A>方法会创建一份 CharEnumerator。</xref:System.CharEnumerator.Clone%2A>      1> [!NOTE]&1;> CharEnumerator 跨一个或多个线程的多个独立实例可以有权访问<xref:System.String>.</xref:System.String>的单个实例 实现此类是为了支持<xref:System.Collections.IEnumerator>接口。</xref:System.Collections.IEnumerator> 有关使用枚举器的详细信息，请参阅<xref:System.Collections.IEnumerator>主题。</xref:System.Collections.IEnumerator>"
  example:
  - "The following example uses the CharEnumerator class to enumerate the individual characters in a string. It instantiates a CharEnumerator object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/t-system.charenumerator_1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/t-system.charenumerator_1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/t-system.charenumerator_1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/t-system.charenumerator_2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/t-system.charenumerator_2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/t-system.charenumerator_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator<char>
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerator<System.Char>
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.CharEnumerator.Clone
  id: Clone
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "创建一份当前<xref href=&quot;System.CharEnumerator&quot;></xref>对象。"
  remarks: "返回值是此实例的副本<xref:System.CharEnumerator>及其当前状态。</xref:System.CharEnumerator> 这可用于循环访问时保存状态<xref:System.String>对象。</xref:System.String>       例如，假设你的应用程序使用<xref:System.CharEnumerator>来循环访问一种<xref:System.String>。</xref:System.String>中每个字符</xref:System.CharEnumerator>的原始实例 当遇到某些唯一字符时，你的应用程序将暂停处理，并调用克隆方法。 实际上，这将保存<xref:System.CharEnumerator><xref:System.String>.</xref:System.String>中的对象的索引</xref:System.CharEnumerator>       你的应用程序使用克隆导航到的另一部分`String`执行一些辅助处理。 此导航的副作用是位置的克隆会失去对跟踪的处理停止时所在。 但是，辅助处理完成后，则你的应用程序将放弃克隆并使用原始<xref:System.CharEnumerator>实例继续处理<xref:System.String>原始处理停止的位置。</xref:System.String> </xref:System.CharEnumerator>      1> [!NOTE]&1;> 实现此方法是为了支持<xref:System.ICloneable>接口。</xref:System.ICloneable>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref:System.Object>，它是一份当前<xref href=&quot;System.CharEnumerator&quot;></xref>对象。</xref:System.Object>"
  overload: System.CharEnumerator.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Current
  id: Current
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "此枚举的字符串中获取当前引用的字符<xref href=&quot;System.CharEnumerator&quot;></xref>对象。"
  remarks: "<xref:System.CharEnumerator>类维护的枚举字符串的内部索引和当前的属性返回由索引当前引用的字符。</xref:System.CharEnumerator> 仅当此索引有效; 时，才应调用此属性否则，会引发异常。       该索引无效始终为空字符串 (&quot;&quot;)。 该索引无效也后<xref:System.String.GetEnumerator%2A?displayProperty=fullName>或<xref:System.CharEnumerator.Reset%2A>调用方法。</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A?displayProperty=fullName> 任一方法调用后，调用<xref:System.CharEnumerator.MoveNext%2A>方法调整到枚举字符串中的第一个字符的索引。</xref:System.CharEnumerator.MoveNext%2A> 此索引是否有效每当<xref:System.CharEnumerator.MoveNext%2A>方法返回`true`。</xref:System.CharEnumerator.MoveNext%2A>       当前不会移动索引，并对当前连续调用返回之前的相同字符<xref:System.CharEnumerator.MoveNext%2A>， <xref:System.CharEnumerator.Reset%2A>，或<xref:System.String.GetEnumerator%2A?displayProperty=fullName>称为。</xref:System.String.GetEnumerator%2A?displayProperty=fullName> </xref:System.CharEnumerator.Reset%2A> </xref:System.CharEnumerator.MoveNext%2A>"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the Current property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/p-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/p-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/p-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/p-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/p-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/p-system.charenumerator._2.vb)]"
  syntax:
    content: public char Current { get; }
    return:
      type: System.Char
      description: "当前引用此的 Unicode 字符<xref href=&quot;System.CharEnumerator&quot;></xref>对象。"
  overload: System.CharEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "该索引无效;也就是说，它是第一个之前或之后枚举字符串的最后一个字符。"
  platform:
  - net462
- uid: System.CharEnumerator.Dispose
  id: Dispose
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.CharEnumerator&quot;></xref>类。"
  remarks: "在完成使用<xref:System.CharEnumerator>.</xref:System.CharEnumerator>时调用的 Dispose Dispose 方法离开<xref:System.CharEnumerator>中不可用状态。</xref:System.CharEnumerator> 调用 Dispose 后，必须释放对所有引用<xref:System.CharEnumerator>以便垃圾回收器才能回收的内存，<xref:System.CharEnumerator>占用。</xref:System.CharEnumerator> </xref:System.CharEnumerator>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.CharEnumerator>。</xref:System.CharEnumerator>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.CharEnumerator>对象的`Finalize`方法。</xref:System.CharEnumerator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.CharEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.MoveNext
  id: MoveNext
  parent: System.CharEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "递增当前的内部索引<xref href=&quot;System.CharEnumerator&quot;></xref>枚举字符串的下一个字符的对象。"
  remarks: "<xref:System.CharEnumerator>类维护的枚举字符串的内部索引和 MoveNext 方法索引递增&1;。</xref:System.CharEnumerator> 在调用后调用 MoveNext<xref:System.String.GetEnumerator%2A>或<xref:System.CharEnumerator.Reset%2A>递增到第一个字符中的枚举字符串的当前字符位置。</xref:System.CharEnumerator.Reset%2A> </xref:System.String.GetEnumerator%2A> 检查返回的值是否`true`以确定当前字符位置是否有效。       如果索引已超出枚举字符串的最后一个字符，不会更改索引和`false`返回。       请注意，如果枚举的字符串为空 (&quot;&quot;)，则状态的<xref:System.CharEnumerator>始终无效。</xref:System.CharEnumerator> 这是因为的内部索引<xref:System.CharEnumerator>最初之前枚举字符串的第一个字符，因此无效。</xref:System.CharEnumerator> MoveNext 逻辑上也是无效的枚举字符串的最后一个 （不存在） 字符之后设置的索引。"
  example:
  - "The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string. It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=fullName> method, moves from one character to the next by calling the MoveNext method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.  \n  \n [!code-cs[System.CharEnumerator.Class#1](~/add/codesnippet/csharp/m-system.charenumerator._1.cs)]\n [!code-cpp[System.CharEnumerator.Class#1](~/add/codesnippet/cpp/m-system.charenumerator._1.cpp)]\n [!code-vb[System.CharEnumerator.Class#1](~/add/codesnippet/visualbasic/m-system.charenumerator._1.vb)]  \n  \n Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.  \n  \n [!code-cs[System.CharEnumerator.Class#2](~/add/codesnippet/csharp/m-system.charenumerator._2.cs)]\n [!code-cpp[System.CharEnumerator.Class#2](~/add/codesnippet/cpp/m-system.charenumerator._2.cpp)]\n [!code-vb[System.CharEnumerator.Class#2](~/add/codesnippet/visualbasic/m-system.charenumerator._2.vb)]"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功递增索引和枚举的字符串; 内否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.CharEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.Reset
  id: Reset
  parent: System.CharEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化为以逻辑方式之前枚举字符串的第一个字符的位置的索引。"
  remarks: "<xref:System.CharEnumerator>类维护的枚举字符串的内部索引和重置方法设置为无效状态的索引。</xref:System.CharEnumerator>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.CharEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.CharEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "此枚举的字符串中获取当前引用的字符<xref href=&quot;System.CharEnumerator&quot;></xref>对象。 有关此成员的说明，请参阅&lt;xref:System.Collections.IEnumerator.Current%2A?displayProperty=fullName&gt;。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.CharEnumerator>实例被强制转换为<xref:System.Collections.IEnumerator>接口。</xref:System.Collections.IEnumerator> </xref:System.CharEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "当前引用此的装箱的 Unicode 字符<xref href=&quot;System.CharEnumerator&quot;></xref>对象。"
  overload: System.CharEnumerator.System#Collections#IEnumerator#Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "枚举尚未开始。       -或者-枚举已经终止。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.CharEnumerator.Clone
  parent: System.CharEnumerator
  isExternal: false
  name: Clone()
  nameWithType: CharEnumerator.Clone()
  fullName: System.CharEnumerator.Clone()
- uid: System.CharEnumerator.Current
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
  fullName: System.CharEnumerator.Current
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.CharEnumerator.Dispose
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: CharEnumerator.Dispose()
  fullName: System.CharEnumerator.Dispose()
- uid: System.CharEnumerator.MoveNext
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: CharEnumerator.MoveNext()
  fullName: System.CharEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.CharEnumerator.Reset
  parent: System.CharEnumerator
  isExternal: false
  name: Reset()
  nameWithType: CharEnumerator.Reset()
  fullName: System.CharEnumerator.Reset()
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
  fullName: System.CharEnumerator.System.Collections.IEnumerator.Current
- uid: System.CharEnumerator.Clone*
  parent: System.CharEnumerator
  isExternal: false
  name: Clone
  nameWithType: CharEnumerator.Clone
- uid: System.CharEnumerator.Current*
  parent: System.CharEnumerator
  isExternal: false
  name: Current
  nameWithType: CharEnumerator.Current
- uid: System.CharEnumerator.Dispose*
  parent: System.CharEnumerator
  isExternal: false
  name: Dispose
  nameWithType: CharEnumerator.Dispose
- uid: System.CharEnumerator.MoveNext*
  parent: System.CharEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: CharEnumerator.MoveNext
- uid: System.CharEnumerator.Reset*
  parent: System.CharEnumerator
  isExternal: false
  name: Reset
  nameWithType: CharEnumerator.Reset
- uid: System.CharEnumerator.System#Collections#IEnumerator#Current*
  parent: System.CharEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: CharEnumerator.System.Collections.IEnumerator.Current
