### YamlMime:ManagedReference
items:
- uid: System.Messaging.IMessageFormatter
  id: IMessageFormatter
  children:
  - System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.IMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: IMessageFormatter
  nameWithType: IMessageFormatter
  fullName: System.Messaging.IMessageFormatter
  type: Interface
  summary: "序列化或反序列化消息队列消息的正文中的对象。"
  remarks: "当应用程序发送一条消息到使用的实例的队列<xref:System.Messaging.MessageQueue>类，格式化程序 （它可以是任何类的实例） 的对象序列化为流，并将它插入到消息正文。</xref:System.Messaging.MessageQueue> 当从使用<xref:System.Messaging.MessageQueue>、 格式化程序反序列化消息数据<xref:System.Messaging.Message.Body%2A>的一种<xref:System.Messaging.Message>。</xref:System.Messaging.Message>属性</xref:System.Messaging.Message.Body%2A>插入</xref:System.Messaging.MessageQueue>队列中读取       <xref:System.Messaging.BinaryMessageFormatter>并<xref:System.Messaging.ActiveXMessageFormatter>提供更快吞吐量要高于<xref:System.Messaging.XmlMessageFormatter>.</xref:System.Messaging.XmlMessageFormatter> </xref:System.Messaging.ActiveXMessageFormatter></xref:System.Messaging.BinaryMessageFormatter> <xref:System.Messaging.ActiveXMessageFormatter>允许与 Visual Basic 6.0 消息队列应用程序的互操作性。</xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.XmlMessageFormatter>是松散耦合，这意味着服务器和客户端可以发送和接收独立的类型版本。</xref:System.Messaging.XmlMessageFormatter>"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))]

      public interface IMessageFormatter : ICloneable
  implements:
  - System.ICloneable
  platform:
  - net462
- uid: System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.IMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: IMessageFormatter.CanRead(Message)
  fullName: System.Messaging.IMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "类中实现时，确定格式化程序是否可以反序列化消息的内容。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>检查。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果格式化程序可以反序列化消息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.IMessageFormatter.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.IMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.IMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: IMessageFormatter.Read(Message)
  fullName: System.Messaging.IMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "类中实现时，从给定的消息读取内容并创建包含邮件中的数据的对象。"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>进行反序列化。"
    return:
      type: System.Object
      description: "反序列化的消息。"
  overload: System.Messaging.IMessageFormatter.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.IMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: IMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.IMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "类中实现时，将对象序列化到消息的正文中。"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>将包含序列化的对象。"
    - id: obj
      type: System.Object
      description: "要插入到消息中序列化的对象。"
  overload: System.Messaging.IMessageFormatter.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: IMessageFormatter.CanRead(Message)
  fullName: System.Messaging.IMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.IMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: IMessageFormatter.Read(Message)
  fullName: System.Messaging.IMessageFormatter.Read(Message)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: IMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.IMessageFormatter.Write(Message,Object)
- uid: System.Messaging.IMessageFormatter.CanRead*
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: IMessageFormatter.CanRead
- uid: System.Messaging.IMessageFormatter.Read*
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: Read
  nameWithType: IMessageFormatter.Read
- uid: System.Messaging.IMessageFormatter.Write*
  parent: System.Messaging.IMessageFormatter
  isExternal: false
  name: Write
  nameWithType: IMessageFormatter.Write
