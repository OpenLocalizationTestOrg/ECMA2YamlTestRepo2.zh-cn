### YamlMime:ManagedReference
items:
- uid: System.ActivationContext
  id: ActivationContext
  children:
  - System.ActivationContext.ApplicationManifestBytes
  - System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity)
  - System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity,System.String[])
  - System.ActivationContext.DeploymentManifestBytes
  - System.ActivationContext.Dispose
  - System.ActivationContext.Finalize
  - System.ActivationContext.Form
  - System.ActivationContext.Identity
  - System.ActivationContext.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
  type: Class
  summary: "标识当前应用程序的激活上下文。 此类不能被继承。"
  remarks: "ActivationContext 类包含<xref:System.ApplicationIdentity>并提供对应用程序清单的仅限内部使用的访问。</xref:System.ApplicationIdentity> 激活上下文用于在基于清单的激活过程中设置域策略并提供基于应用程序的安全模型。 有关详细信息，请参阅<xref:System.Security.Policy.ApplicationSecurityManager>类。</xref:System.Security.Policy.ApplicationSecurityManager>      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  example:
  - "The following code example demonstrates the use of an ActivationContext object to obtain the <xref:System.ApplicationIdentity> for a manifest-based application. For correct results, execute this code example as a manifest-based application.  \n  \n [!code-vb[System.ActivationContext#1](~/add/codesnippet/visualbasic/t-system.activationcontext_1.vb)]\n [!code-cs[System.ActivationContext#1](~/add/codesnippet/csharp/t-system.activationcontext_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class ActivationContext : IDisposable, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ActivationContext.ApplicationManifestBytes
  id: ApplicationManifestBytes
  parent: System.ActivationContext
  langs:
  - csharp
  name: ApplicationManifestBytes
  nameWithType: ActivationContext.ApplicationManifestBytes
  fullName: System.ActivationContext.ApplicationManifestBytes
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取当前应用程序的 ClickOnce 应用程序清单。"
  remarks: "如果激活上下文是<xref:System.ActivationContext.ContextForm>，这意味着应用程序未安装在 ClickOnce 存储中，部署清单读取临时下载文件夹。</xref:System.ActivationContext.ContextForm> 如果激活上下文是<xref:System.ActivationContext.ContextForm>，这意味着应用程序安装在 ClickOnce 应用商店，部署清单从读取 ClickOnce 应用商店。</xref:System.ActivationContext.ContextForm> 有关部署清单的详细信息，请参阅[ClickOnce 部署清单](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public byte[] ApplicationManifestBytes { get; }
    return:
      type: System.Byte[]
      description: "字节数组，其中包含与此关联的应用程序的 ClickOnce 应用程序清单<xref href=&quot;System.ActivationContext&quot;> </xref>。"
  overload: System.ActivationContext.ApplicationManifestBytes*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity)
  id: CreatePartialActivationContext(System.ApplicationIdentity)
  parent: System.ActivationContext
  langs:
  - csharp
  name: CreatePartialActivationContext(ApplicationIdentity)
  nameWithType: ActivationContext.CreatePartialActivationContext(ApplicationIdentity)
  fullName: System.ActivationContext.CreatePartialActivationContext(ApplicationIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.ActivationContext&quot;></xref>类使用指定的应用程序标识。"
  remarks: "CreatePartialActivationContext 方法调用内部的构造函数，以创建新的激活上下文。 实现<xref:System.ActivationContext>.NET Framework 2.0 版中的类专用于应用程序是未在存储中完全安装或未完全包含在一个文件夹。</xref:System.ActivationContext> 此方法提供公共构造函数提供完整的激活上下文的更高版本的向后兼容的性。"
  syntax:
    content: public static ActivationContext CreatePartialActivationContext (ApplicationIdentity identity);
    parameters:
    - id: identity
      type: System.ApplicationIdentity
      description: "用于标识应用程序的对象。"
    return:
      type: System.ActivationContext
      description: "具有指定的应用程序标识的对象。"
  overload: System.ActivationContext.CreatePartialActivationContext*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中指定任何部署或应用程序标识<code> identity </code>。"
  platform:
  - net462
- uid: System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity,System.String[])
  id: CreatePartialActivationContext(System.ApplicationIdentity,System.String[])
  parent: System.ActivationContext
  langs:
  - csharp
  name: CreatePartialActivationContext(ApplicationIdentity,String[])
  nameWithType: ActivationContext.CreatePartialActivationContext(ApplicationIdentity,String[])
  fullName: System.ActivationContext.CreatePartialActivationContext(ApplicationIdentity,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.ActivationContext&quot;></xref>类使用指定的应用程序标识和清单的路径的数组。"
  remarks: "CreatePartialActivationContext 方法调用内部的构造函数，以创建新的激活上下文。 实现<xref:System.ActivationContext>.NET Framework 2.0 版中的类专用于应用程序是未在存储中完全安装或未完全包含在一个文件夹。</xref:System.ActivationContext> 此方法提供公共构造函数提供完整的激活上下文的更高版本的向后兼容的性。"
  syntax:
    content: public static ActivationContext CreatePartialActivationContext (ApplicationIdentity identity, string[] manifestPaths);
    parameters:
    - id: identity
      type: System.ApplicationIdentity
      description: "用于标识应用程序的对象。"
    - id: manifestPaths
      type: System.String[]
      description: "应用程序的清单路径的字符串数组。"
    return:
      type: System.ActivationContext
      description: "具有指定的应用程序标识和清单的路径的数组的对象。"
  overload: System.ActivationContext.CreatePartialActivationContext*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>manifestPaths</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中指定任何部署或应用程序标识<code> identity </code>。       - <code> identity </code>在清单中的标识不匹配。       - <code> identity </code>不具有相同数量的组件与清单的路径。"
  platform:
  - net462
- uid: System.ActivationContext.DeploymentManifestBytes
  id: DeploymentManifestBytes
  parent: System.ActivationContext
  langs:
  - csharp
  name: DeploymentManifestBytes
  nameWithType: ActivationContext.DeploymentManifestBytes
  fullName: System.ActivationContext.DeploymentManifestBytes
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取当前应用程序的 ClickOnce 部署清单。"
  remarks: "如果激活上下文是<xref:System.ActivationContext.ContextForm>，这意味着应用程序未安装在 ClickOnce 存储中，部署清单读取临时下载文件夹。</xref:System.ActivationContext.ContextForm> 如果激活上下文是<xref:System.ActivationContext.ContextForm>，这意味着应用程序安装在 ClickOnce 应用商店，部署清单从读取 ClickOnce 应用商店。</xref:System.ActivationContext.ContextForm> 有关部署清单的详细信息，请参阅[ClickOnce 部署清单](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public byte[] DeploymentManifestBytes { get; }
    return:
      type: System.Byte[]
      description: "字节数组，其中包含与此关联的应用程序的 ClickOnce 部署清单<xref href=&quot;System.ActivationContext&quot;> </xref>。"
  overload: System.ActivationContext.DeploymentManifestBytes*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.Dispose
  id: Dispose
  parent: System.ActivationContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: ActivationContext.Dispose()
  fullName: System.ActivationContext.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "释放使用的所有资源<xref href=&quot;System.ActivationContext&quot;> </xref>。"
  remarks: "在完成使用<xref:System.ActivationContext>.</xref:System.ActivationContext>时调用的 Dispose Dispose 方法离开<xref:System.ActivationContext>中不可用状态。</xref:System.ActivationContext> 调用 Dispose 后，必须释放对所有引用<xref:System.ActivationContext>以便垃圾回收器才能回收的内存，<xref:System.ActivationContext>占用。</xref:System.ActivationContext> </xref:System.ActivationContext> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.ActivationContext>。</xref:System.ActivationContext>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.ActivationContext>对象的`Finalize`方法。</xref:System.ActivationContext>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ActivationContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.Finalize
  id: Finalize
  parent: System.ActivationContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: ActivationContext.Finalize()
  fullName: System.ActivationContext.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "使<xref href=&quot;System.ActivationContext&quot;></xref>对象尝试释放资源并执行其他清理操作之前<xref href=&quot;System.ActivationContext&quot;></xref>通过垃圾回收回收。"
  syntax:
    content: ~ActivationContext ();
    parameters: []
  overload: System.ActivationContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.Form
  id: Form
  parent: System.ActivationContext
  langs:
  - csharp
  name: Form
  nameWithType: ActivationContext.Form
  fullName: System.ActivationContext.Form
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取当前应用程序的窗体或存储上下文。"
  remarks: "基于清单的应用程序可能未安装 ClickOnce 存储中。 不在存储中，如清单激活的应用程序执行中的应用程序[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]，归类为<xref:System.ActivationContext.ContextForm>.</xref:System.ActivationContext.ContextForm> 应用程序存储中包含归类为<xref:System.ActivationContext.ContextForm>.</xref:System.ActivationContext.ContextForm>"
  syntax:
    content: public ActivationContext.ContextForm Form { get; }
    return:
      type: System.ActivationContext.ContextForm
      description: "枚举值之一。"
  overload: System.ActivationContext.Form*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.Identity
  id: Identity
  parent: System.ActivationContext
  langs:
  - csharp
  name: Identity
  nameWithType: ActivationContext.Identity
  fullName: System.ActivationContext.Identity
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取当前应用程序的应用程序标识。"
  remarks: "<xref:System.ApplicationIdentity>唯一标识应用程序由其完整名称和位置。</xref:System.ApplicationIdentity>"
  example:
  - "The following code example demonstrates the use of an <xref:System.ActivationContext> object to obtain the <xref:System.ApplicationIdentity> for a manifest-based application. This code example is part of a larger example provided for the <xref:System.ActivationContext> class.  \n  \n [!code-vb[System.ActivationContext#2](~/add/codesnippet/visualbasic/p-system.activationconte_1.vb)]\n [!code-cs[System.ActivationContext#2](~/add/codesnippet/csharp/p-system.activationconte_1.cs)]"
  syntax:
    content: public ApplicationIdentity Identity { get; }
    return:
      type: System.ApplicationIdentity
      description: "<xref href=&quot;System.ApplicationIdentity&quot;> </xref>标识当前应用程序的对象。"
  overload: System.ActivationContext.Identity*
  exceptions: []
  platform:
  - net462
- uid: System.ActivationContext.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.ActivationContext
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "填充<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>序列化目标对象所需的数据。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "要填充数据的对象。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "此序列化结构。"
  overload: System.ActivationContext.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ActivationContext.ApplicationManifestBytes
  parent: System.ActivationContext
  isExternal: false
  name: ApplicationManifestBytes
  nameWithType: ActivationContext.ApplicationManifestBytes
  fullName: System.ActivationContext.ApplicationManifestBytes
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity)
  parent: System.ActivationContext
  isExternal: false
  name: CreatePartialActivationContext(ApplicationIdentity)
  nameWithType: ActivationContext.CreatePartialActivationContext(ApplicationIdentity)
  fullName: System.ActivationContext.CreatePartialActivationContext(ApplicationIdentity)
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.ApplicationIdentity
  parent: System
  isExternal: false
  name: ApplicationIdentity
  nameWithType: ApplicationIdentity
  fullName: System.ApplicationIdentity
- uid: System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity,System.String[])
  parent: System.ActivationContext
  isExternal: false
  name: CreatePartialActivationContext(ApplicationIdentity,String[])
  nameWithType: ActivationContext.CreatePartialActivationContext(ApplicationIdentity,String[])
  fullName: System.ActivationContext.CreatePartialActivationContext(ApplicationIdentity,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ActivationContext.DeploymentManifestBytes
  parent: System.ActivationContext
  isExternal: false
  name: DeploymentManifestBytes
  nameWithType: ActivationContext.DeploymentManifestBytes
  fullName: System.ActivationContext.DeploymentManifestBytes
- uid: System.ActivationContext.Dispose
  parent: System.ActivationContext
  isExternal: false
  name: Dispose()
  nameWithType: ActivationContext.Dispose()
  fullName: System.ActivationContext.Dispose()
- uid: System.ActivationContext.Finalize
  parent: System.ActivationContext
  isExternal: false
  name: Finalize()
  nameWithType: ActivationContext.Finalize()
  fullName: System.ActivationContext.Finalize()
- uid: System.ActivationContext.Form
  parent: System.ActivationContext
  isExternal: false
  name: Form
  nameWithType: ActivationContext.Form
  fullName: System.ActivationContext.Form
- uid: System.ActivationContext.ContextForm
  parent: System
  isExternal: false
  name: ActivationContext+ContextForm
  nameWithType: ActivationContext+ContextForm
  fullName: System.ActivationContext+ContextForm
- uid: System.ActivationContext.Identity
  parent: System.ActivationContext
  isExternal: false
  name: Identity
  nameWithType: ActivationContext.Identity
  fullName: System.ActivationContext.Identity
- uid: System.ActivationContext.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.ActivationContext
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.ActivationContext.ApplicationManifestBytes*
  parent: System.ActivationContext
  isExternal: false
  name: ApplicationManifestBytes
  nameWithType: ActivationContext.ApplicationManifestBytes
- uid: System.ActivationContext.CreatePartialActivationContext*
  parent: System.ActivationContext
  isExternal: false
  name: CreatePartialActivationContext
  nameWithType: ActivationContext.CreatePartialActivationContext
- uid: System.ActivationContext.DeploymentManifestBytes*
  parent: System.ActivationContext
  isExternal: false
  name: DeploymentManifestBytes
  nameWithType: ActivationContext.DeploymentManifestBytes
- uid: System.ActivationContext.Dispose*
  parent: System.ActivationContext
  isExternal: false
  name: Dispose
  nameWithType: ActivationContext.Dispose
- uid: System.ActivationContext.Finalize*
  parent: System.ActivationContext
  isExternal: false
  name: Finalize
  nameWithType: ActivationContext.Finalize
- uid: System.ActivationContext.Form*
  parent: System.ActivationContext
  isExternal: false
  name: Form
  nameWithType: ActivationContext.Form
- uid: System.ActivationContext.Identity*
  parent: System.ActivationContext
  isExternal: false
  name: Identity
  nameWithType: ActivationContext.Identity
- uid: System.ActivationContext.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.ActivationContext
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData
