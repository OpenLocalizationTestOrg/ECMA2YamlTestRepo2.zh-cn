### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.IInvokeProvider
  id: IInvokeProvider
  children:
  - System.Windows.Automation.Provider.IInvokeProvider.Invoke
  langs:
  - csharp
  name: IInvokeProvider
  nameWithType: IInvokeProvider
  fullName: System.Windows.Automation.Provider.IInvokeProvider
  type: Interface
  summary: "公开方法和属性，以支持 UI 自动化客户端访问的启动或执行单个明确操作并且不维护状态激活时的控件。"
  remarks: "实现 UI 自动化提供程序必须支持上<xref:System.Windows.Automation.InvokePattern>控件模式。</xref:System.Windows.Automation.InvokePattern>       如果不通过另一个控件模式提供程序公开同一行为，则控件实现 IInvokeProvider。 例如，如果<xref:System.Windows.Automation.InvokePattern.Invoke%2A>控件上的方法执行相同的操作<xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A>或<xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A>方法，该控件不应实现 IInvokeProvider。</xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> </xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> </xref:System.Windows.Automation.InvokePattern.Invoke%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface IInvokeProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  id: Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  langs:
  - csharp
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "发送请求以激活控件并启动其单一、 明确的操作。"
  remarks: "调用是一个异步调用，必须立即返回而不阻止。      1> [!NOTE]&1;> 这一点尤为重要，因为控件的直接或间接启动模式对话框时调用。 直到模式对话框关闭，则引发该事件的任何 UI 自动化客户端将保持阻止状态。       调用引发<xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>事件。</xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> 如果可能，在控件完成其关联的操作后，应引发事件。       <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>在服务 Invoke 请求在以下方案之前，应引发:-不可能或实际等待操作完成。</xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>      -此操作需要用户交互。      -此操作很耗时，而且会导致调用的客户端阻塞相当长的时间。"
  example:
  - "The following example implements the Invoke method on the MouseDown event handler of a control. Assume that `providerControl` is a member variable that was initialized when the class was constructed.  \n  \n [!code-cs[UIAProvider_snip#106](~/add/codesnippet/csharp/UIAProvider/Invoker.cs#106)]"
  syntax:
    content: public void Invoke ();
    parameters: []
  overload: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  exceptions:
  - type: System.Windows.Automation.ElementNotEnabledException
    commentId: T:System.Windows.Automation.ElementNotEnabledException
    description: "如果不启用该控件。"
  platform:
  - net462
references:
- uid: System.Windows.Automation.ElementNotEnabledException
  parent: System.Windows.Automation
  isExternal: false
  name: ElementNotEnabledException
  nameWithType: ElementNotEnabledException
  fullName: System.Windows.Automation.ElementNotEnabledException
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke()
  nameWithType: IInvokeProvider.Invoke()
  fullName: System.Windows.Automation.Provider.IInvokeProvider.Invoke()
- uid: System.Windows.Automation.Provider.IInvokeProvider.Invoke*
  parent: System.Windows.Automation.Provider.IInvokeProvider
  isExternal: false
  name: Invoke
  nameWithType: IInvokeProvider.Invoke
