### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DSA
  id: DSA
  children:
  - System.Security.Cryptography.DSA.#ctor
  - System.Security.Cryptography.DSA.Create
  - System.Security.Cryptography.DSA.Create(System.String)
  - System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  - System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  - System.Security.Cryptography.DSA.FromXmlString(System.String)
  - System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
  type: Class
  summary: "表示的数字签名算法 (DSA) 中的所有实现必须从中都继承的抽象基类。"
  remarks: "可以使用 DSA 类和派生的类创建的数字签名来帮助保护你的数据的完整性。  <xref:System.Security.Cryptography.DSACryptoServiceProvider>提供此类的实现</xref:System.Security.Cryptography.DSACryptoServiceProvider>       若要使用的公钥系统以数字方式签署一条消息，发送方将先于该消息以创建消息摘要应用哈希函数。 发件人然后使用以创建发件人的个人签名发件人的私钥加密此消息摘要。 在收到消息和签名，接收方使用发件人的公钥来恢复消息摘要解密签名，并使用发件人使用的同一个哈希算法对消息进行哈希处理。 如果接收方计算完全匹配的消息摘要消息摘要收到来自发件人，接收方可以假定该消息在传输过程中未被更改。 请注意通过任何人都可以验证签名，这是因为发件人的公钥为常见的知识。       较新的非对称算法都可用。 请考虑使用<xref:System.Security.Cryptography.RSA>类、<xref:System.Security.Cryptography.ECDsa>类或<xref:System.Security.Cryptography.ECDiffieHellman>类而不是 DSA 类。</xref:System.Security.Cryptography.ECDiffieHellman> </xref:System.Security.Cryptography.ECDsa> </xref:System.Security.Cryptography.RSA> DSA 仅用于与旧的应用程序和数据的兼容性。       此算法支持密钥长度为 512 位至 1024 位的 64 位的增量。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DSA : System.Security.Cryptography.AsymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>类。"
  syntax:
    content: protected DSA ();
    parameters: []
  overload: System.Security.Cryptography.DSA.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create
  id: Create
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建用于执行非对称算法的默认加密对象。"
  syntax:
    content: public static System.Security.Cryptography.DSA Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DSA
      description: "用于执行非对称算法的加密对象。"
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建用于执行非对称算法的指定加密对象。"
  remarks: "有关<xref:System.Security.Cryptography.DSA>，使用名称 System.Security.Cryptography.DSA。</xref:System.Security.Cryptography.DSA>"
  syntax:
    content: public static System.Security.Cryptography.DSA Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "特定实现的名称<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>使用。"
    return:
      type: System.Security.Cryptography.DSA
      description: "用于执行非对称算法的加密对象。"
  overload: System.Security.Cryptography.DSA.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  id: CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，将创建<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>指定数据的签名。"
  syntax:
    content: public abstract byte[] CreateSignature (byte[] rgbHash);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "要进行签名的数据。"
    return:
      type: System.Byte[]
      description: "指定数据的数字签名。"
  overload: System.Security.Cryptography.DSA.CreateSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，将导出<xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>。"
  syntax:
    content: public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包含专用参数;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Security.Cryptography.DSAParameters
      description: "参数<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.ExportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "重新构造<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>通过 XML 字符串的对象。"
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "用于重新构造的 XML 字符串<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>对象。"
  overload: System.Security.Cryptography.DSA.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>xmlString</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "格式<code> xmlString </code>参数无效。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，使用指定的哈希算法计算指定二进制流的哈希值。"
  syntax:
    content: protected virtual byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "哈希二进制流。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要用于数据进行哈希算法。"
    return:
      type: System.Byte[]
      description: "经过哈希处理的数据。"
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "派生的类必须重写此方法。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，使用指定的哈希算法计算字节数组的指定部分的哈希值。"
  syntax:
    content: protected virtual byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要进行哈希处理的数据。"
    - id: offset
      type: System.Int32
      description: "中的第一个字节的索引`data`要进行哈希处理。"
    - id: count
      type: System.Int32
      description: "哈希处理的字节数。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要用于数据进行哈希算法。"
    return:
      type: System.Byte[]
      description: "经过哈希处理的数据。"
  overload: System.Security.Cryptography.DSA.HashData*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "派生的类必须重写此方法。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  id: ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，导入指定<xref href=&quot;System.Security.Cryptography.DSAParameters&quot;> </xref>。"
  syntax:
    content: public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);
    parameters:
    - id: parameters
      type: System.Security.Cryptography.DSAParameters
      description: "参数<xref href=&quot;System.Security.Cryptography.DSA&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.ImportParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算指定的字节数组，使用指定的哈希算法的哈希值并签名生成的哈希值。"
  syntax:
    content: public byte[] SignData (byte[] data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "为其计算哈希的输入的数据。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要用于创建哈希值的哈希算法。"
    return:
      type: System.Byte[]
      description: "指定数据的 DSA 签名。"
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算指定的流使用指定的哈希算法的哈希值并签名生成的哈希值。"
  syntax:
    content: public virtual byte[] SignData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "为其计算哈希的输入的流。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要用于创建哈希值的哈希算法。"
    return:
      type: System.Byte[]
      description: "指定数据的 DSA 签名。"
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算的一部分使用指定的哈希算法的指定的字节数组的哈希值并签名生成的哈希值。"
  syntax:
    content: public virtual byte[] SignData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "为其计算哈希的输入的数据。"
    - id: offset
      type: System.Int32
      description: "偏移量处开始使用数据的数组。"
    - id: count
      type: System.Int32
      description: "要用作数据的数组中的字节数。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要用于创建哈希值的哈希算法。"
    return:
      type: System.Byte[]
      description: "指定数据的 DSA 签名。"
  overload: System.Security.Cryptography.DSA.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于零。       -或-<code>count</code>小于零。       - <code>offset</code>  + <code>count</code> – 1 导致超出上限的索引<code>data</code>。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建并返回的 XML 字符串表示形式当前<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>对象。"
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包含专用参数;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "当前的 XML 字符串编码<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>对象。"
  overload: System.Security.Cryptography.DSA.ToXmlString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "来验证数字签名是否有效计算指定的数据使用指定的哈希值的哈希算法和将其与提供的签名进行比较。"
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "已签名的数据。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名数据。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "用于创建数据哈希值的哈希算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数字签名是否有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "验证数字签名是否通过计算指定的哈希值有效流使用指定的哈希算法和将其与提供的签名进行比较。"
  syntax:
    content: public virtual bool VerifyData (System.IO.Stream data, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "已签名的数据。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名数据。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "用于创建数据哈希值的哈希算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数字签名是否有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "验证数字签名是否通过计算中的一个字节一部分的数据的哈希值有效数组使用指定的哈希算法和将其与提供的签名进行比较。"
  syntax:
    content: public virtual bool VerifyData (byte[] data, int offset, int count, byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "已签名的数据。"
    - id: offset
      type: System.Int32
      description: "开始用于计算哈希的起始索引。"
    - id: count
      type: System.Int32
      description: "哈希处理的字节数。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名数据。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "用于创建数据哈希值的哈希算法。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数字签名是否有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>hashAlgorithm</code>.<xref:System.Security.Cryptography.HashAlgorithmName.Name*> 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于零。       -或-<code>count</code>小于零。       - <code>offset</code>  + <code>count</code> – 1 导致超出上限的索引<code>data</code>。"
  platform:
  - net462
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  id: VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  langs:
  - csharp
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，验证<xref href=&quot;System.Security.Cryptography.DSA&quot;></xref>指定数据的签名。"
  syntax:
    content: public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);
    parameters:
    - id: rgbHash
      type: System.Byte[]
      description: "使用数据的哈希签名`rgbSignature`。"
    - id: rgbSignature
      type: System.Byte[]
      description: "有关验证的签名`rgbData`。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> rgbSignature </code>上使用指定的哈希算法和密钥计算的签名匹配<code> rgbHash </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DSA.VerifySignature*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.DSA.#ctor
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA()
  nameWithType: DSA.DSA()
  fullName: System.Security.Cryptography.DSA.DSA()
- uid: System.Security.Cryptography.DSA.Create
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create()
  nameWithType: DSA.Create()
  fullName: System.Security.Cryptography.DSA.Create()
- uid: System.Security.Cryptography.DSA
  parent: System.Security.Cryptography
  isExternal: false
  name: DSA
  nameWithType: DSA
  fullName: System.Security.Cryptography.DSA
- uid: System.Security.Cryptography.DSA.Create(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create(String)
  nameWithType: DSA.Create(String)
  fullName: System.Security.Cryptography.DSA.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DSA.CreateSignature(System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature(Byte[])
  nameWithType: DSA.CreateSignature(Byte[])
  fullName: System.Security.Cryptography.DSA.CreateSignature(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DSA.ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters(Boolean)
  nameWithType: DSA.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.DSA.ExportParameters(Boolean)
- uid: System.Security.Cryptography.DSAParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: DSAParameters
  nameWithType: DSAParameters
  fullName: System.Security.Cryptography.DSAParameters
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DSA.FromXmlString(System.String)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString(String)
  nameWithType: DSA.FromXmlString(String)
  fullName: System.Security.Cryptography.DSA.FromXmlString(String)
- uid: System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: DSA.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Stream,HashAlgorithmName)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters(DSAParameters)
  nameWithType: DSA.ImportParameters(DSAParameters)
  fullName: System.Security.Cryptography.DSA.ImportParameters(DSAParameters)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Stream,HashAlgorithmName)
  nameWithType: DSA.SignData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Stream,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.SignData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: DSA.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.DSA.ToXmlString(Boolean)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Stream,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Stream,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  nameWithType: DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
  fullName: System.Security.Cryptography.DSA.VerifyData(Byte[],Int32,Int32,Byte[],HashAlgorithmName)
- uid: System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature(Byte[],Byte[])
  nameWithType: DSA.VerifySignature(Byte[],Byte[])
  fullName: System.Security.Cryptography.DSA.VerifySignature(Byte[],Byte[])
- uid: System.Security.Cryptography.DSA.#ctor*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: DSA
  nameWithType: DSA.DSA
- uid: System.Security.Cryptography.DSA.Create*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: Create
  nameWithType: DSA.Create
- uid: System.Security.Cryptography.DSA.CreateSignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: CreateSignature
  nameWithType: DSA.CreateSignature
- uid: System.Security.Cryptography.DSA.ExportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ExportParameters
  nameWithType: DSA.ExportParameters
- uid: System.Security.Cryptography.DSA.FromXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: FromXmlString
  nameWithType: DSA.FromXmlString
- uid: System.Security.Cryptography.DSA.HashData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: HashData
  nameWithType: DSA.HashData
- uid: System.Security.Cryptography.DSA.ImportParameters*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ImportParameters
  nameWithType: DSA.ImportParameters
- uid: System.Security.Cryptography.DSA.SignData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: SignData
  nameWithType: DSA.SignData
- uid: System.Security.Cryptography.DSA.ToXmlString*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: ToXmlString
  nameWithType: DSA.ToXmlString
- uid: System.Security.Cryptography.DSA.VerifyData*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifyData
  nameWithType: DSA.VerifyData
- uid: System.Security.Cryptography.DSA.VerifySignature*
  parent: System.Security.Cryptography.DSA
  isExternal: false
  name: VerifySignature
  nameWithType: DSA.VerifySignature
