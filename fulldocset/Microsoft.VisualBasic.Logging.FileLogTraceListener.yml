### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener
  id: FileLogTraceListener
  children:
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  - Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  langs:
  - csharp
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener
  type: Class
  summary: "提供一个简单的侦听器的日志记录将输出定向到文件。"
  remarks: "FileLogTraceListener 类提供了自动的维护功能存档日志文件，根据需要在每天或每个应用程序上。 此自动存档功能可帮助减少开发人员和管理员的维护责任。       可以将 FileLogTraceListener 的实例添加到<xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName>或<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName>集合将从日志记录到文本文件的输出重定向。</xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=fullName> </xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=fullName> 此类的实例还可以添加到`My.Application.Log`或`My.Log`（对于 Web 应用程序） 中[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]应用程序。 有关详细信息，请参阅[演练︰ 更改其中 My.Application.Log 写入信息](~/add/includes/ajax-current-ext-md.md)`.`此类的主要功能如下︰ 1。  *存档功能*。 按照基本名称和日期，以及要将日志文件与日志的后续版本区分开来的数字，此类由生成的日志文件进行命名。 基于根据需要创建新的日志文件。           文件名称的显式格式是`baseName`[-`dateStamp`] [-`version`].log，其中:-`baseName`一部分是基本的日志名称，指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>          -`dateStamp`一部分采用格式&quot;YYYY-月-日&quot;，它将显示当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption><xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>          -如果多个日志文件需要具有相同`baseName`和`dateStamp`、`version`部件，一个正`Integer`，添加到的文件名称。      2.  *多个类实例*。 如果 FileLogTraceListener 类的实例写入到正在使用的文件:-如果它正在由另一个实例中相同的进程的 FileLogTraceListener 类的类都将共享文件。          -类创建一个新的日志文件，如果文件正由另一个进程使用下一个可用名称。      3.  *线程安全*。 FileLogTraceListener 类是线程安全的。 这允许你安全地将消息写入到日志从多个线程不使用锁。       **日志文件位置**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性采用<xref:Microsoft.VisualBasic.Logging.LogFileLocation>枚举来指定要写入到日志文件的典型目录之一。</xref:Microsoft.VisualBasic.Logging.LogFileLocation> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>      -若要将日志写入到另一个位置，设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>到该位置的属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>       **日志文件名称**-日志文件基名称由指定<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>      -当前日志文件名称可以从读取<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 文件系统中，它被派生自多个其他属性和日志的当前状态。       **日志维护**-用于创建新的日志文件的最小频率由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 当值是<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>或<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>，新的日志文件将创建在至少一次，每个每天或每周，并且日期戳将合并到<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>      日志文件-最大大小 （以字节为单位） 由<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 如果日志文件大小超过此大小，写入到日志中的其他消息是已放弃和，具体取决于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性，将引发异常。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>属性确定多少可用空间 （以字节为单位） 必须可用。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 这有助于确保 FileLogTraceListener 类不会用尽所有可用磁盘空间。 使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性指定的日志的行为时，有写入小于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>可用字节。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>       **日志文件输出设置**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>属性指定是否基础流应自动刷新后每次写入到日志文件。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>属性指定是否将消息追加到当前的日志文件中，如果允许，或将它们写入到新的日志文件。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定要用于分隔日志消息中的字段的字符串。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>属性指定要在创建新的日志文件时使用的编码。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>       **日志文件输出**-<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法将消息写入日志文件。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 这些方法检查<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性，以及任何现有日志具有相同基名称来确定是否应创建新的日志。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法刷新当前在日志文件的输出缓冲区中的任何消息。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>      -<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法关闭该日志文件，以便它可以由其他进程。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>       **启用输出**必须启用跟踪或调试才能使用跟踪侦听器。 下面的语法是特定的编译器。 如果使用 C# 以外的编译器或[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]，请参阅你的编译器的文档。      -若要启用调试 C# 中，添加`/d:DEBUG`到编译器命令行编译代码，或可以添加时的标志`#define DEBUG`到你的文件的顶部。 在[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]，添加`/d:DEBUG=True`到编译器命令行的标志。      -若要启用 C# 中的跟踪，添加`/d:TRACE`到编译器命令行编译代码，或添加时的标志`#define TRACE`到你的文件的顶部。 在[!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)]，添加`/d:TRACE=True`到编译器命令行的标志。       若要设置您的侦听器的级别，请编辑你的应用程序的配置文件。 在此文件中，可以添加侦听器、 将其类型设置和其参数，删除的侦听器，或清除以前由应用程序设置的所有侦听器。 配置文件应类似下面的示例格式化。       对于此示例正常运行，你必须提供完全限定程序集名称。 有关如何获取完全限定程序集名称的信息，请参阅[程序集名称](~/add/includes/ajax-current-ext-md.md)。      ```   <configuration>       <system.diagnostics>           <sharedListeners>               <add name=&quot;FileLog&quot;                   type=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener,                          Microsoft.VisualBasic, Version=8.0.0.0,                          Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,                          processorArchitecture=MSIL&quot;                    initializeData=&quot;FileLogWriter&quot;/>           </sharedListeners>       </system.diagnostics>   </configuration>   ```"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class FileLogTraceListener : System.Diagnostics.TraceListener
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Diagnostics.TraceListener
  implements: []
  inheritedMembers:
  - System.Diagnostics.TraceListener.Attributes
  - System.Diagnostics.TraceListener.Dispose
  - System.Diagnostics.TraceListener.Fail(System.String)
  - System.Diagnostics.TraceListener.Fail(System.String,System.String)
  - System.Diagnostics.TraceListener.Filter
  - System.Diagnostics.TraceListener.IndentLevel
  - System.Diagnostics.TraceListener.IndentSize
  - System.Diagnostics.TraceListener.IsThreadSafe
  - System.Diagnostics.TraceListener.Name
  - System.Diagnostics.TraceListener.NeedIndent
  - System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)
  - System.Diagnostics.TraceListener.TraceOutputOptions
  - System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)
  - System.Diagnostics.TraceListener.Write(System.Object)
  - System.Diagnostics.TraceListener.Write(System.Object,System.String)
  - System.Diagnostics.TraceListener.Write(System.String,System.String)
  - System.Diagnostics.TraceListener.WriteIndent
  - System.Diagnostics.TraceListener.WriteLine(System.Object)
  - System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)
  - System.Diagnostics.TraceListener.WriteLine(System.String,System.String)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "初始化的新实例<xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;></xref>类具有默认名称。"
  remarks: "此方法设置的实例名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类 FileLogTraceListener。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       你可以访问通过实例名称<xref:System.Diagnostics.TraceListener.Name%2A>属性。</xref:System.Diagnostics.TraceListener.Name%2A>"
  syntax:
    content: public FileLogTraceListener ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "初始化的新实例<xref href=&quot;Microsoft.VisualBasic.Logging.FileLogTraceListener&quot;></xref>类具有提供的名称。"
  remarks: "此方法设置的实例名称<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类到`name`。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>       你可以访问认为的实例名称<xref:System.Diagnostics.TraceListener.Name%2A>属性。</xref:System.Diagnostics.TraceListener.Name%2A>"
  syntax:
    content: public FileLogTraceListener (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 实例对象的名称。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  id: Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "确定是否将输出追加到当前文件或写入新文件。"
  remarks: "当追加属性是`False`，则输出写入到新文件。 当该属性是`True`，将输出追加到当前的文件，除非:-输出文件被另一个进程锁定。 将合并到的版本号在此情况下，创建一个新的日志文件<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>      -当前文件大小大于什么<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>属性允许。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 在此情况下，其他消息是已放弃和，具体取决于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性，将引发异常。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>      -现有的文件名称是根据指定的日志创建计划过期<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 在这种情况下，将创建新的日志文件和日期戳将合并到<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>名称。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>"
  syntax:
    content: public bool Append { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>与<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> ，该值指示输出将追加到当前的文件中，和<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref> ，该值指示输出写入新文件。 默认设置为此属性是<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  id: AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "指示日志文件流写入刷新缓冲区。"
  remarks: "`False`设置 AutoFlush 属性提供了大多数应用程序的最佳性能，因为它是一次写入到日志文件的多个消息更加高效。 你可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>以刷新当前在日志文件中的任何消息的方法的输出缓冲区。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 你还可以使用<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法，在关闭日志文件之前隐式刷新流。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>"
  syntax:
    content: public bool AutoFlush { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>与<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> ，该值指示流将刷新后每次写入; 否则为日志条目都是缓冲并更高效地编写。 默认设置为此属性是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  id: BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置日志文件中，用于创建日志文件的完整名称的基名称。"
  remarks: "The BaseFileName property determines the base name for the log files that the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> class writes to.  \n  \n The <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the BaseFileName property.  \n  \n-   The `dateStamp` part has the format \"YYYY-MM-DD\", and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is set to <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string BaseFileName { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 日志文件基名称。 默认值为应用程序的产品名称。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  id: Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "关闭当前的日志文件的基础流并释放与当前的流关联的任何资源。"
  remarks: "你不必显式调用关闭的方法，因为<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类管理基础流。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  id: CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置日志文件目录时<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*>属性设置为<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;> </xref>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*>"
  remarks: "当设置 CustomLocation 属性时，它还将设置<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>到<xref:Microsoft.VisualBasic.Logging.LogFileLocation>。</xref:Microsoft.VisualBasic.Logging.LogFileLocation>属性</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>       如果无法解析该目录，CustomLocation 属性将引发异常。"
  syntax:
    content: public string CustomLocation { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>这是日志文件目录的名称。 此属性的默认设置是应用程序数据的用户的目录。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  id: Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置用于分隔日志消息中的字段的分隔符。"
  remarks: "分隔符属性可以更改默认分隔符。"
  syntax:
    content: public string Delimiter { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>它是用于日志消息中的字段的分隔符。 此属性的默认设置是制表符。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  id: DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "确定要执行的操作时写入日志文件，并且没有较少可用磁盘空间超过指定值<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*>"
  remarks: "当 DiskSpaceExhaustedBehavior 属性设置为<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>，日志消息以无提示方式将被丢弃，如果保留的磁盘空间不足。</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption> 这是默认行为，并且它可以防止简单应用程序失败的磁盘空间不足时。       更可靠的应用程序可以将 DiskSpaceExhaustedBehavior 属性设置为<xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>，并添加`Try...Catch`周围的所有代码都将写入日志块</xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption>"
  syntax:
    content: public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;></xref>. 确定要执行的操作时尝试写入日志文件，并且没有较少可用磁盘空间超过指定值<> *1> 属性，或如果日志文件大小大于什么<> *1> 属性允许。 默认值是<xref href=&quot;Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "关闭基础流，还可以释放托管的资源。"
  remarks: "当`disposing`参数是`True`，此方法释放由任何托管对象持有的全部资源此<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>引用。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 此方法调用`Dispose`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>释放托管和非托管资源;<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>仅释放非托管资源。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  id: Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置创建新的日志文件时要使用的编码。"
  remarks: "将文本追加到现有日志文件，而不是编码的编码属性指定使用该文件的编码。"
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>这时要使用的编码创建一个新日志文件。</xref:System.Text.Encoding> 此属性的默认值为<xref:System.Text.UTF8Encoding>。</xref:System.Text.UTF8Encoding>"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  id: Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "刷新基础流写入当前日志文件。"
  remarks: "Flush 方法用于将所有缓冲的数据写入到当前的日志文件。"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  id: FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取当前日志文件的完整名称。"
  remarks: "The FullLogFileName property gives the current full log-file name. It is generated according to the log path, the base name, the date, and a number to distinguish it from different versions of the log. New log files are created on an as-needed basis.  \n  \n The explicit form of the full log-file name is `path`\\\\`baseName`[-`dateStamp`][-`iteration`].log, where:  \n  \n-   The `path` part is determined by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> property and, if that property value is set to <xref:Microsoft.VisualBasic.Logging.LogFileLocation>, the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> property.  \n  \n-   The `baseName` part is the fundamental log name, specified by the <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> property.  \n  \n-   The `dateStamp` part has the format YYYY-MM-DD, and it is shown when <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> is <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> or <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>.  \n  \n-   If more than one log file is needed with the same `baseName` and `dateStamp`, the `iteration` part, a positive `Integer`, is added to the file name."
  syntax:
    content: public string FullLogFileName { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>这是当前的日志文件的完整名称。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取跟踪侦听器支持的自定义 XML 配置特性。"
  remarks: "<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可以用于控制<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>实例的行为的 XML 配置文件中使用</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>自定义属性 使用任何其他属性会导致配置异常。"
  syntax:
    content: protected override string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含此侦听器可识别的 XML 配置特性的数组。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  id: IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "指示应在输出中包含的日志记录计算机的主机名。"
  remarks: "使用属性来配置的行为<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A>方法。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public bool IncludeHostName { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. 使用<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果主机标识符应包括; 否则使用<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  id: Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置日志文件位置。"
  remarks: "Use the Location property to set the log path to one of the predefined paths, determined by the <xref:Microsoft.VisualBasic.Logging.LogFileLocation> enumeration values.  \n  \n|**Location value**|**Path**|  \n|------------------------|--------------|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data that is shared among all users, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\All Users\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come from the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the executable file that started the application.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path for the application data of a user, with the format:<br /><br /> `BasePath`\\\\`CompanyName`\\\\`ProductName`\\\\`ProductVersion`<br /><br /> A typical value for `BasePath` is:<br /><br /> C:\\Documents and Settings\\\\`username`\\Application Data<br /><br /> The values of `CompanyName`, `ProductName`, and `ProductVersion` come form the assembly.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|The path of the current system's temporary folder.|  \n|<xref:Microsoft.VisualBasic.Logging.LogFileLocation>|If the string specified by <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> is not empty, then use it as the path; otherwise use the path for the application data of a user.|"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileLocation
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;></xref>这是日志文件的位置。 默认值是<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileLocation&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  id: LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "确定要在日志文件的名称中包含的日期。"
  remarks: "分配之一<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>给 LogFileCreationSchedule 属性，以指定要在日志文件的名称中包含的日期的枚举值。</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>       日期的格式是 YYYY。 有关格式的日志文件名称的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>      |**LogFileCreationSchedule 值**|**日志文件名称中的日期**|  |---------------------------------------|-----------------------------------|  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|在日志文件名称中包括的当前日期。 |  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|不要在日志文件名称中包括日期。 |  |<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption>|在日志文件名称中包括当前周的第一天。</xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> </xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption><br /><br /> 在星期六开始执行一周。 |"
  syntax:
    content: public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }
    return:
      type: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
      description: "<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;></xref>. 这指示要在日志文件名称中包含的日期。 默认值是<xref href=&quot;Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  id: MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置日志文件中，允许的最大大小，以字节为单位。"
  remarks: "使用此属性来确保日志文件执行不增长得太大。       如果日志文件大小 （以字节为单位） 大于此属性的值然后当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类尝试将消息写入到日志中，消息被丢弃，则故障将是无提示或异常引发根据的值<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 否则，消息写入到日志中，如果 （以字节为单位） 的可用磁盘空间量小于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>"
  syntax:
    content: public long MaxFileSize { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 这是最大允许的日志文件大小，以字节为单位。 默认值为 5000000。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "当此属性设置为一个值小于 1000年。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  id: ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "获取或设置的可用磁盘空间量以字节为单位，有必要在消息可写入到日志文件之前。"
  remarks: "使用此属性来确保，日志文件不能完全填充该磁盘。       如果的可用磁盘空间量 （以字节为单位） 小于此属性的值然后当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类尝试将消息写入到日志中，消息被丢弃，则故障将是无提示或异常引发根据的值<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>属性。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 否则，消息写入到日志中，如果日志文件大小 （以字节为单位） 大于<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>.</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A>"
  syntax:
    content: public long ReserveDiskSpace { get; set; }
    return:
      type: System.Int64
      description: "<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>. 这是必需的可用磁盘空间量。 默认值为 10000000。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "当此属性设置为小于 0 的值。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "写入跟踪信息、 数据对象和事件信息写入输出文件或流。"
  remarks: "此方法︰ 1。  设置输出的数据和上下文信息的格式。      2.  如有必要，请创建一个新的日志文件。      3.  将信息写入日志文件。       创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       下表列出的输出字段中显示的顺序。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      |**字段**|**输出条件**|**说明**|  |---------------|--------------------------|---------------------|  |`source`|始终 |值`name`。 |  |`severity`|始终 |枚举值名称`eventType`。 |  |`id`|始终 |字符串表示形式`id`。 |  |`message`|始终 |字符串表示形式`data`。 |  |`callStack`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。 |  |`CorrelationID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`DateTime`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.DateTime%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.Callstack%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ProcessID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.ProcessId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ThreadID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`Timestamp`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.Timestamp%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。 |计算机的名称。 |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>对象，其中包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。"
    - id: source
      type: System.String
      description: "调用此方法的跟踪源的名称。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "之一<xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>枚举值。"
    - id: id
      type: System.Int32
      description: "事件的数值标识符。"
    - id: data
      type: System.Object
      description: "要发出的跟踪数据。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  id: TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "写入跟踪信息、 数据对象和事件信息写入输出文件或流的数组。"
  remarks: "此方法︰ 1。  格式化输出，2 的数据和上下文信息。  创建新的日志文件，如有必要，3。  将信息写入日志文件。       创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       此表列出的输出字段中显示的顺序。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      |**字段**|**输出条件**|**说明**|  |---------------|--------------------------|---------------------|  |`source`|始终 |值`name`。 |  |`severity`|始终 |枚举值名称`eventType`。 |  |`id`|始终 |字符串表示形式`id`。 |  |`message`|始终 |包含的字符串表示形式中每个元素的字符串`data`，每个分隔通过<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>。 |  |`callStack`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。 |  |`CorrelationID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`DateTime`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.DateTime%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.Callstack%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 字符串转换为使用固定区域性。 |  |`ProcessID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.ProcessId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ThreadID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`Timestamp`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.Timestamp%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。 |计算机的名称。 |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object[] data);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>对象，其中包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。"
    - id: source
      type: System.String
      description: "调用此方法跟踪源的名称。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "之一<xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>枚举值。"
    - id: id
      type: System.Int32
      description: "事件的数值标识符。"
    - id: data
      type: System.Object[]
      description: "要作为数据发出的对象数组。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "写入跟踪信息、 消息和事件信息写入输出文件或流。"
  remarks: "此方法︰ 1。  设置输出的数据和上下文信息的格式。      2.  如有必要，请创建一个新的日志文件。      3.  将信息写入日志文件。       创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       此表列出它们的出现顺序的输出字段。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，且后跟行结束符。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      |**字段**|**输出条件**|**说明**|  |---------------|--------------------------|---------------------|  |`source`|始终。 |值`name`。 |  |`severity`|始终。 |枚举值名称`eventType`。 |  |`id`|始终。 |字符串表示形式`id`。 |  |`message`|始终。 |值`message`。 |  |`callStack`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。 |  |`CorrelationID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`DateTime`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.DateTime%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.Callstack%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ProcessID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.ProcessId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ThreadID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`Timestamp`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.Timestamp%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。 |计算机的名称。 |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>对象，其中包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。"
    - id: source
      type: System.String
      description: "调用此方法的跟踪源的名称。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "之一<xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>枚举值。"
    - id: id
      type: System.Int32
      description: "事件的数值标识符。"
    - id: message
      type: System.String
      description: "要写入的消息。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  id: TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "写入跟踪信息、 格式化的对象和事件信息写入输出文件或流的数组。"
  remarks: "此方法︰ 1。  设置输出的数据和上下文信息的格式。      2.  如有必要创建一个新的一个新的日志文件。      3.  将信息写入日志文件。       创建新的日志文件的详细信息，请参阅<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>       此表列出它们的出现顺序的输出字段。 由字符串分隔字段，<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定，并且后跟行结束符。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>      |**字段**|**输出条件**|**说明**|  |---------------|--------------------------|---------------------|  |`source`|始终 |值`name`。 |  |`severity`|始终 |枚举值名称`eventType`。 |  |`id`|始终 |字符串表示形式`id`。 |  |`message`|始终 |中的数据`args`使用格式化`format`字符串和使用固定区域性的字符串转换。 |  |`callStack`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.Callstack%2A>属性`eventCache`。 |  |`CorrelationID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`DateTime`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.DateTime%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.DateTime%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.Callstack%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ProcessID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.ProcessId%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.ProcessId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`ThreadID`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |<xref:System.Diagnostics.TraceEventCache.ThreadId%2A>属性`eventCache`。 |  |`Timestamp`|当<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性中设置<xref:System.Diagnostics.TraceOptions>标志。 |字符串表示形式<xref:System.Diagnostics.TraceEventCache.Timestamp%2A>属性`eventCache`。</xref:System.Diagnostics.TraceEventCache.Timestamp%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> </xref:System.Diagnostics.TraceEventCache.ThreadId%2A>  </xref:System.Diagnostics.TraceOptions></xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 字符串转换为使用固定区域性。 |  |`HostName`|当<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>属性是`True`。 |计算机的名称。 |</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A>"
  syntax:
    content: public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, object[] args);
    parameters:
    - id: eventCache
      type: System.Diagnostics.TraceEventCache
      description: "A <xref href=&quot;System.Diagnostics.TraceEventCache&quot;> </xref>对象，其中包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。"
    - id: source
      type: System.String
      description: "调用此方法的跟踪源的名称。"
    - id: eventType
      type: System.Diagnostics.TraceEventType
      description: "之一<xref href=&quot;System.Diagnostics.TraceEventType&quot;></xref>枚举值。"
    - id: id
      type: System.Int32
      description: "事件的数值标识符。"
    - id: format
      type: System.String
      description: "包含零个或多个格式项，对应于中的对象的格式字符串`args`数组。"
    - id: args
      type: System.Object[]
      description: "<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>数组，其中包含零个或多个要格式化的对象。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  id: Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "将逐字消息写入磁盘，而无需任何其他上下文信息。"
  remarks: "Write 方法写入日志文件，而不进行任何其他上下文信息的特定消息。       使用其中一个<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public override void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 要写入的自定义消息。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Logging
  summary: "将逐字消息写入磁盘后, 跟当前行终止符，而无需任何其他上下文信息。"
  remarks: "WriteLine 方法将写入日志文件，而不进行任何其他上下文信息的特定消息。       使用其中一个<xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。</xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>"
  syntax:
    content: public override void WriteLine (string message);
    parameters:
    - id: message
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 要写入的自定义消息。"
  overload: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.TraceListener
  isExternal: false
  name: System.Diagnostics.TraceListener
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener()
  nameWithType: FileLogTraceListener.FileLogTraceListener()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener(String)
  nameWithType: FileLogTraceListener.FileLogTraceListener(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FileLogTraceListener(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close()
  nameWithType: FileLogTraceListener.Close()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: DiskSpaceExhaustedOption
  nameWithType: DiskSpaceExhaustedOption
  fullName: Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: FileLogTraceListener.Dispose(Boolean)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(Boolean)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush()
  nameWithType: FileLogTraceListener.Flush()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush()
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: FileLogTraceListener.GetSupportedAttributes()
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.LogFileLocation
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileLocation
  nameWithType: LogFileLocation
  fullName: Microsoft.VisualBasic.Logging.LogFileLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
  parent: Microsoft.VisualBasic.Logging
  isExternal: false
  name: LogFileCreationScheduleOption
  nameWithType: LogFileCreationScheduleOption
  fullName: Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object)
- uid: System.Diagnostics.TraceEventCache
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventCache
  nameWithType: TraceEventCache
  fullName: System.Diagnostics.TraceEventCache
- uid: System.Diagnostics.TraceEventType
  parent: System.Diagnostics
  isExternal: false
  name: TraceEventType
  nameWithType: TraceEventType
  fullName: System.Diagnostics.TraceEventType
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  nameWithType: FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(TraceEventCache,String,TraceEventType,Int32,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  nameWithType: FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(TraceEventCache,String,TraceEventType,Int32,String,Object[])
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write(String)
  nameWithType: FileLogTraceListener.Write(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine(String)
  nameWithType: FileLogTraceListener.WriteLine(String)
  fullName: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(String)
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FileLogTraceListener
  nameWithType: FileLogTraceListener.FileLogTraceListener
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Append*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Append
  nameWithType: FileLogTraceListener.Append
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: AutoFlush
  nameWithType: FileLogTraceListener.AutoFlush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: BaseFileName
  nameWithType: FileLogTraceListener.BaseFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Close*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Close
  nameWithType: FileLogTraceListener.Close
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: CustomLocation
  nameWithType: FileLogTraceListener.CustomLocation
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Delimiter
  nameWithType: FileLogTraceListener.Delimiter
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: DiskSpaceExhaustedBehavior
  nameWithType: FileLogTraceListener.DiskSpaceExhaustedBehavior
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Dispose
  nameWithType: FileLogTraceListener.Dispose
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Encoding
  nameWithType: FileLogTraceListener.Encoding
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Flush
  nameWithType: FileLogTraceListener.Flush
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: FullLogFileName
  nameWithType: FileLogTraceListener.FullLogFileName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: FileLogTraceListener.GetSupportedAttributes
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: IncludeHostName
  nameWithType: FileLogTraceListener.IncludeHostName
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Location*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Location
  nameWithType: FileLogTraceListener.Location
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: LogFileCreationSchedule
  nameWithType: FileLogTraceListener.LogFileCreationSchedule
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: MaxFileSize
  nameWithType: FileLogTraceListener.MaxFileSize
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: ReserveDiskSpace
  nameWithType: FileLogTraceListener.ReserveDiskSpace
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceData
  nameWithType: FileLogTraceListener.TraceData
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: TraceEvent
  nameWithType: FileLogTraceListener.TraceEvent
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.Write*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: Write
  nameWithType: FileLogTraceListener.Write
- uid: Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine*
  parent: Microsoft.VisualBasic.Logging.FileLogTraceListener
  isExternal: false
  name: WriteLine
  nameWithType: FileLogTraceListener.WriteLine
