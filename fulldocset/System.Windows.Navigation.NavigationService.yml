### YamlMime:ManagedReference
items:
- uid: System.Windows.Navigation.NavigationService
  id: NavigationService
  children:
  - System.Windows.Navigation.NavigationService.AddBackEntry(System.Windows.Navigation.CustomContentState)
  - System.Windows.Navigation.NavigationService.CanGoBack
  - System.Windows.Navigation.NavigationService.CanGoForward
  - System.Windows.Navigation.NavigationService.Content
  - System.Windows.Navigation.NavigationService.CurrentSource
  - System.Windows.Navigation.NavigationService.FragmentNavigation
  - System.Windows.Navigation.NavigationService.GetNavigationService(System.Windows.DependencyObject)
  - System.Windows.Navigation.NavigationService.GoBack
  - System.Windows.Navigation.NavigationService.GoForward
  - System.Windows.Navigation.NavigationService.LoadCompleted
  - System.Windows.Navigation.NavigationService.Navigate(System.Object)
  - System.Windows.Navigation.NavigationService.Navigate(System.Uri)
  - System.Windows.Navigation.NavigationService.Navigate(System.Object,System.Object)
  - System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object)
  - System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object,System.Boolean)
  - System.Windows.Navigation.NavigationService.Navigated
  - System.Windows.Navigation.NavigationService.Navigating
  - System.Windows.Navigation.NavigationService.NavigationFailed
  - System.Windows.Navigation.NavigationService.NavigationProgress
  - System.Windows.Navigation.NavigationService.NavigationStopped
  - System.Windows.Navigation.NavigationService.Refresh
  - System.Windows.Navigation.NavigationService.RemoveBackEntry
  - System.Windows.Navigation.NavigationService.Source
  - System.Windows.Navigation.NavigationService.StopLoading
  langs:
  - csharp
  name: NavigationService
  nameWithType: NavigationService
  fullName: System.Windows.Navigation.NavigationService
  type: Class
  summary: "包含方法、 属性和事件，以支持导航。"
  remarks: "NavigationService 封装能够下载的浏览器样式导航的上下文中的内容。       内容可以是任何类型的[!INCLUDE[TLA2#tla_winfx](~/add/includes/tla2sharptla-winfx-md.md)]对象和[!INCLUDE[TLA#tla_html](~/add/includes/tlasharptla-html-md.md)]文件。 一般情况下，但是，页面是首选的作为导航的包内容的方法时 (请参阅<xref:System.Windows.Controls.Page>)。</xref:System.Windows.Controls.Page>       通过提供对象的实例并调用的重载的情况下，内容可以导航到<xref:System.Windows.Navigation.NavigationService.Navigate%2A>接受对象的方法:- <xref:System.Windows.Navigation.NavigationService.Navigate%28System.Object%29?displayProperty=fullName>-<xref:System.Windows.Navigation.NavigationService.Navigate%28System.Object%2CSystem.Object%29?displayProperty=fullName>或者，内容可以是导航到通过传递相对或绝对[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]之一<xref:System.Windows.Navigation.NavigationService.Navigate%2A>接受的方法重载[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]:- <xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%29?displayProperty=fullName>- <xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%2CSystem.Object%29?displayProperty=fullName>-<xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%2CSystem.Object%2CSystem.Boolean%29?displayProperty=fullName>当内容通过定位[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]，NavigationService 将返回包含内容的对象。</xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%2CSystem.Object%2CSystem.Boolean%29?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%2CSystem.Object%29?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%28System.Uri%29?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%28System.Object%2CSystem.Object%29?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%28System.Object%29?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%2A>       导航的生存期可以跟踪通过以下事件:- <xref:System.Windows.Navigation.NavigationService.Navigating>- <xref:System.Windows.Navigation.NavigationService.Navigated>- <xref:System.Windows.Navigation.NavigationService.NavigationProgress>- <xref:System.Windows.Navigation.NavigationService.NavigationFailed>- <xref:System.Windows.Navigation.NavigationService.NavigationStopped>- <xref:System.Windows.Navigation.NavigationService.LoadCompleted>- <xref:System.Windows.Navigation.NavigationService.FragmentNavigation>.</xref:System.Windows.Navigation.NavigationService.FragmentNavigation> </xref:System.Windows.Navigation.NavigationService.LoadCompleted> </xref:System.Windows.Navigation.NavigationService.NavigationStopped> </xref:System.Windows.Navigation.NavigationService.NavigationFailed> </xref:System.Windows.Navigation.NavigationService.NavigationProgress> </xref:System.Windows.Navigation.NavigationService.Navigated> </xref:System.Windows.Navigation.NavigationService.Navigating>       并非所有事件都引发发生导航; 每次（取消、 已停止，或失败），将由导航发生 （内容或内容片段） 和如何完成导航的类型确定的一套引发的事件。       下图说明了会引发这些事件的序列︰![页面导航流程图](~/add/media/navigationoverviewfigure11.png &quot;页面导航流程图&quot;)NavigationService 期间或之后导航，提供有关，其中包括导航目标的内容的信息[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的导航到的内容 (<xref:System.Windows.Navigation.NavigationService.Source%2A>)，则[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]当前内容的 (<xref:System.Windows.Navigation.NavigationService.CurrentSource%2A>)，并包含导航到的内容的对象 (<xref:System.Windows.Navigation.NavigationService.Content%2A>)。</xref:System.Windows.Navigation.NavigationService.Content%2A> </xref:System.Windows.Navigation.NavigationService.CurrentSource%2A> </xref:System.Windows.Navigation.NavigationService.Source%2A>       导航到内容，NavigationService 导航历史记录中记录为条目的导航。 添加一个条目后退导航历史记录，新导航时，通过调用<xref:System.Windows.Navigation.NavigationService.Navigate%2A>方法，或通过导航到前进导航历史记录中的项通过调用<xref:System.Windows.Navigation.NavigationService.GoForward%2A>.</xref:System.Windows.Navigation.NavigationService.GoForward%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%2A> 条目被添加到前进导航历史记录通过导航到条目后退导航历史记录，通过调用<xref:System.Windows.Navigation.NavigationService.GoBack%2A>.</xref:System.Windows.Navigation.NavigationService.GoBack%2A> <xref:System.Windows.Navigation.NavigationService.CanGoBack%2A>和<xref:System.Windows.Navigation.NavigationService.CanGoForward%2A>报告是否存在条目后退和前进导航历史记录，分别。</xref:System.Windows.Navigation.NavigationService.CanGoForward%2A></xref:System.Windows.Navigation.NavigationService.CanGoBack%2A> 此外，可以通过调用<xref:System.Windows.Navigation.NavigationService.RemoveBackEntry%2A>.</xref:System.Windows.Navigation.NavigationService.RemoveBackEntry%2A>删除后退导航历史记录中的最新条目       默认情况下，NavigationService 不存储导航历史记录中的内容对象的实例。 相反，NavigationService 创建内容的对象的新实例使用导航历史记录导航到每个时间。 此行为旨在时较大数字和大片的内容要导航到避免过多的内存消耗。 因此，内容的状态将不会保留从一个导航到下一步。 但是，[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]提供几种方法，使您可以导航历史记录中存储的一条的一段内容的状态。       使用<xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A>，您还可以保留多个集的单个页面实例的状态。</xref:System.Windows.Navigation.NavigationService.AddBackEntry%2A>       NavigationService 是`sealed`类，并因此，不能实例化; 相反，NavigationService 由导航器用于启用导航。 在[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]，有两个导航器︰ <xref:System.Windows.Navigation.NavigationWindow> <xref:System.Windows.Controls.Frame>。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       您可以看到，[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]使用[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]作为导航器，以提供集成的用户体验。 以物理方式，但[!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)]实际使用<xref:System.Windows.Navigation.NavigationWindow>像导航;<xref:System.Windows.Application.MainWindow%2A>属性[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]中运行[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]将返回到引用<xref:System.Windows.Navigation.NavigationWindow>，以及由该导航历史记录<xref:System.Windows.Navigation.NavigationWindow>由导航历史记录与集成[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]通过以下方式:-当通过调用导航到内容<xref:System.Windows.Navigation.NavigationService.Navigate%2A>， <xref:System.Windows.Navigation.NavigationService.GoBack%2A>，和<xref:System.Windows.Navigation.NavigationService.GoForward%2A>中[!INCLUDE[TLA2#tla_xbap](~/add/includes/ajax-current-ext-md.md)]相关导航历史记录条目也将添加到[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]导航历史记录。</xref:System.Windows.Navigation.NavigationService.GoForward%2A> </xref:System.Windows.Navigation.NavigationService.GoBack%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%2A> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Application.MainWindow%2A> </xref:System.Windows.Navigation.NavigationWindow>      -如果中的条目[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]导航[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]选择，[!INCLUDE[TLA2#tla_ie7](~/add/includes/tla2sharptla-ie7-md.md)]引起 NavigationService 以向后导航，或者将转发到与这些条目相关联的内容。      1> [!NOTE]&1;><xref:System.Windows.Controls.Frame>可以提供自己的导航历史记录，或使用导航历史记录导航器，用于托管它。</xref:System.Windows.Controls.Frame> 如果<xref:System.Windows.Controls.Frame>提供其自己导航历史记录中，它可以显示其自身导航[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]浏览导航历史记录; 中的条目这些条目不会添加到主机导航器导航历史记录 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>， [!INCLUDE[TLA2#tla_iegeneric](~/add/includes/tla2sharptla-iegeneric-md.md)])，因此，无法导航到从导航栏上[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]每个 (请参阅<xref:System.Windows.Controls.Frame.JournalOwnership%2A>)。</xref:System.Windows.Controls.Frame.JournalOwnership%2A> </xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Controls.Frame>"
  syntax:
    content: public sealed class NavigationService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.AddBackEntry(System.Windows.Navigation.CustomContentState)
  id: AddBackEntry(System.Windows.Navigation.CustomContentState)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: AddBackEntry(CustomContentState)
  nameWithType: NavigationService.AddBackEntry(CustomContentState)
  fullName: System.Windows.Navigation.NavigationService.AddBackEntry(CustomContentState)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "添加一个条目后退导航历史记录包含<xref href=&quot;System.Windows.Navigation.CustomContentState&quot;></xref>对象。"
  remarks: "AddBackEntry， <xref:System.Windows.Navigation.CustomContentState>，和<xref:System.Windows.Navigation.IProvideCustomContentState>来帮助记住多个集的当前内容的状态。</xref:System.Windows.Navigation.IProvideCustomContentState> </xref:System.Windows.Navigation.CustomContentState>"
  syntax:
    content: public void AddBackEntry (System.Windows.Navigation.CustomContentState state);
    parameters:
    - id: state
      type: System.Windows.Navigation.CustomContentState
      description: "A <xref href=&quot;System.Windows.Navigation.CustomContentState&quot;> </xref>表示特定部分内容与关联的应用程序定义的状态的对象。"
  overload: System.Windows.Navigation.NavigationService.AddBackEntry*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>state</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，和一个<xref href=&quot;System.Windows.Navigation.CustomContentState&quot;></xref>对象没有返回从<xref:System.Windows.Navigation.IProvideCustomContentState.GetContentState*>。"
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.CanGoBack
  id: CanGoBack
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: CanGoBack
  nameWithType: NavigationService.CanGoBack
  fullName: System.Windows.Navigation.NavigationService.CanGoBack
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取一个值，该值指示后退导航历史记录中是否具有至少一个条目。"
  remarks: "若要确定后退导航历史记录中是否存在至少一个条目的 CanGoBack。 此属性应检查，然后再调<xref:System.Windows.Navigation.NavigationService.GoBack%2A>; 如果<xref:System.Windows.Navigation.NavigationService.GoBack%2A>称为和后退导航历史记录中不存在项<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Windows.Navigation.NavigationService.GoBack%2A> </xref:System.Windows.Navigation.NavigationService.GoBack%2A>      1> [!NOTE]&1;>，如果导航历史记录共享的多个导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>)、 最新条目后退导航历史记录可能已添加通过<xref:System.Windows.Navigation.NavigationService>当前导航器。</xref:System.Windows.Navigation.NavigationService> </xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>"
  syntax:
    content: public bool CanGoBack { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在后退导航历史记录; 没有至少一个条目否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.CanGoBack*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.CanGoForward
  id: CanGoForward
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: CanGoForward
  nameWithType: NavigationService.CanGoForward
  fullName: System.Windows.Navigation.NavigationService.CanGoForward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取一个值，该值指示前进导航历史记录中是否具有至少一个条目。"
  remarks: "若要确定前进导航历史记录中是否存在至少一个条目的 CanGoForward。 此属性应检查，然后再调<xref:System.Windows.Navigation.NavigationService.GoForward%2A>; 如果<xref:System.Windows.Navigation.NavigationService.GoForward%2A>称为和前进导航历史记录中不存在项<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Windows.Navigation.NavigationService.GoForward%2A> </xref:System.Windows.Navigation.NavigationService.GoForward%2A>"
  syntax:
    content: public bool CanGoForward { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果中前进导航历史记录; 没有至少一个条目否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.CanGoForward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Content
  id: Content
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Content
  nameWithType: NavigationService.Content
  fullName: System.Windows.Navigation.NavigationService.Content
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取或设置对包含当前内容的对象的引用。"
  remarks: "内容可以设置两种方法之一:-直接，通过将它设置为对对象的引用。      -间接方法，通过调用<xref:System.Windows.Navigation.NavigationService.Navigate%2A>， <xref:System.Windows.Navigation.NavigationService.GoBack%2A>，或<xref:System.Windows.Navigation.NavigationService.GoForward%2A>。</xref:System.Windows.Navigation.NavigationService.GoForward%2A> </xref:System.Windows.Navigation.NavigationService.GoBack%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%2A>       设置<xref:System.Windows.Navigation.NavigationService>启动新导航; 由于导航是异步的内容不会返回一个值，如果它在设置之后立即对其进行检查。</xref:System.Windows.Navigation.NavigationService>"
  syntax:
    content: public object Content { get; set; }
    return:
      type: System.Object
      description: "一个对象，它包含当前的内容对象的引用。"
  overload: System.Windows.Navigation.NavigationService.Content*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.CurrentSource
  id: CurrentSource
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: CurrentSource
  nameWithType: NavigationService.CurrentSource
  fullName: System.Windows.Navigation.NavigationService.CurrentSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]最后导航到的内容。"
  remarks: "CurrentSource 属性的值不会更改之前导航到另一个[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]已成功完成。       可以仅片段使用设置 CurrentSource [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  syntax:
    content: public Uri CurrentSource { get; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>最后导航到，如果通过导航到的内容[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Uri>"
  overload: System.Windows.Navigation.NavigationService.CurrentSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.FragmentNavigation
  id: FragmentNavigation
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: FragmentNavigation
  nameWithType: NavigationService.FragmentNavigation
  fullName: System.Windows.Navigation.NavigationService.FragmentNavigation
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "导航到内容片段开始时发生，这会立即发生，如果所需的片段中的当前内容，或源之后[!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)]内容已加载，如果所需的片段位于不同的内容。"
  remarks: "By default, a content fragment is content that is contained by a named <xref:System.Windows.UIElement>, which is a <xref:System.Windows.UIElement> whose <xref:System.Windows.FrameworkElement.Name%2A> attribute is set, eg:  \n  \n```  \n<TextBlock Name=\"FragmentName\">...</TextBlock>  \n```  \n  \n You navigate to a [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] fragment by providing a [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] with a suffix in the following format:  \n  \n \\#*FragmentName*  \n  \n The following shows an example of a [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] that refers to a content fragment:  \n  \n `http://www.microsoft.com/targetpage.xaml#FragmentName`  \n  \n After the source page loads (after <xref:System.Windows.Navigation.NavigationService.LoadCompleted> event is raised), fragment navigation begins and the <xref:System.Windows.Navigation.NavigationService> attempts to locate the [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)] fragment. If the [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)] fragment is found, <xref:System.Windows.Navigation.NavigationService> instructs the content navigator  (<xref:System.Windows.Navigation.NavigationWindow>, <xref:System.Windows.Controls.Frame>) to show the fragment. If you need to change this behavior, you can handle FragmentNavigation to provide your own fragment navigation behavior. FragmentNavigation is passed a <xref:System.Windows.Navigation.FragmentNavigationEventArgs> parameter which exposes properties that are useful for this purpose, including:  \n  \n-   The navigator that owns this navigation service (<xref:System.Windows.Navigation.NavigationWindow>, <xref:System.Windows.Controls.Frame>).  \n  \n-   The fragment name.  \n  \n You can handle FragmentNavigation to override the default [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] fragment implementation with your own custom implementation. If you do so, you need to set <xref:System.Windows.Navigation.FragmentNavigationEventArgs.Handled%2A> to `true`; otherwise, the default [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)] fragment processing behavior is applied.  \n  \n You should avoid directly initiating navigation from within a FragmentNavigation event handler. Since FragmentNavigation is raised during an existing navigation, initiating a new navigation from a FragmentNavigation event handler creates a nested navigation that can cause the <xref:System.ExecutionEngineException> to be thrown. Instead, you can indirectly initiate navigation by creating an asynchronous work item using the <xref:System.Windows.Threading.Dispatcher>.  \n  \n> [!NOTE]\n>  When <xref:System.Windows.Navigation.NavigationService> raises FragmentNavigation, it also raises <xref:System.Windows.Application.FragmentNavigation?displayProperty=fullName> event on the <xref:System.Windows.Application> object.  \n  \n> [!IMPORTANT]\n>  Fragment navigation is not supported for loose [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] pages (markup-only [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] files with `Page` as the root element) in the following cases:  \n>   \n>  • When navigating to a fragment in a loose [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page.  \n>   \n>  • When navigating from a loose [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page to a fragment in another loose [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page.  \n>   \n>  However, a loose [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] page can navigate to its own fragments."
  example:
  - "The following example shows how to handle FragmentNavigation to provide custom fragment navigation behavior. In this case, the example opens an error [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)] page if the fragment in the source [!INCLUDE[TLA2#tla_titlexaml](~/add/includes/tla2sharptla-titlexaml-md.md)] page is not found.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowFragmentNavigationCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindowfragmentnavigationcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowFragmentNavigationCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindowfragmentnavigationcode)]"
  syntax:
    content: public event System.Windows.Navigation.FragmentNavigationEventHandler FragmentNavigation;
    return:
      type: System.Windows.Navigation.FragmentNavigationEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.GetNavigationService(System.Windows.DependencyObject)
  id: GetNavigationService(System.Windows.DependencyObject)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: GetNavigationService(DependencyObject)
  nameWithType: NavigationService.GetNavigationService(DependencyObject)
  fullName: System.Windows.Navigation.NavigationService.GetNavigationService(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取对<xref href=&quot;System.Windows.Navigation.NavigationService&quot;></xref>有关的内容包含指定的导航器<xref href=&quot;System.Windows.DependencyObject&quot;> </xref>。"
  remarks: "导航器具有<xref:System.Windows.Navigation.NavigationService>用于处理内容的导航。</xref:System.Windows.Navigation.NavigationService> [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]具有两个导航器︰<xref:System.Windows.Navigation.NavigationWindow>和<xref:System.Windows.Controls.Frame>。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow> 若要处理导航请求和管理导航生存期，导航器将使用[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]导航服务，它将作为<xref:System.Windows.Navigation.NavigationService>类</xref:System.Windows.Navigation.NavigationService>实现 通过导航器承载的内容可以获取对导航器的引用<xref:System.Windows.Navigation.NavigationService>通过调用 GetNavigationService 方法。</xref:System.Windows.Navigation.NavigationService>       GetNavigationService 返回`null`时`dependencyObject`:-是一种<xref:System.Windows.Navigation.NavigationWindow>。</xref:System.Windows.Navigation.NavigationWindow>      -为<xref:System.Windows.Controls.Frame>的︰ 1。</xref:System.Windows.Controls.Frame>  由另一个导航器进行承载。          2.  具有<xref:System.Windows.Controls.Frame.JournalOwnership%2A>属性设置为<xref:System.Windows.Navigation.JournalOwnership>。</xref:System.Windows.Navigation.JournalOwnership></xref:System.Windows.Controls.Frame.JournalOwnership%2A>其      -是内容的不是内容的通过导航器承载的一部分。       [!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]提供两个快捷方式来获取对引用<xref:System.Windows.Navigation.NavigationService>:-<xref:System.Windows.Navigation.NavigationService>处理到导航<xref:System.Windows.Controls.Page>可以从访问<xref:System.Windows.Controls.Page>本身获取的值通过其<xref:System.Windows.Controls.Page.NavigationService%2A?displayProperty=fullName>属性。</xref:System.Windows.Controls.Page.NavigationService%2A?displayProperty=fullName> </xref:System.Windows.Controls.Page> </xref:System.Windows.Controls.Page> </xref:System.Windows.Navigation.NavigationService> </xref:System.Windows.Navigation.NavigationService>      - <xref:System.Windows.Navigation.NavigationService>，它由<xref:System.Windows.Controls.Frame>处理导航可以通过获取的值<xref:System.Windows.Controls.Frame.NavigationService%2A>属性。</xref:System.Windows.Controls.Frame.NavigationService%2A> </xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how a <xref:System.Windows.Controls.UserControl> can retrieve a navigation service by calling GetNavigationService.  \n  \n [!code-cs[NSGetNavigationServiceSnippets#GetNavigationServiceCODE1](~/add/codesnippet/csharp/NSGetNavigationServiceSnippets.CSharp/ContentUserControl.xaml.cs#getnavigationservicecode1)]\n [!code-vb[NSGetNavigationServiceSnippets#GetNavigationServiceCODE1](~/add/codesnippet/visualbasic/nsgetnavigationservicesnippets/contentusercontrol.xaml.vb#getnavigationservicecode1)]  \n[!code-cs[NSGetNavigationServiceSnippets#GetNavigationServiceCODE2](~/add/codesnippet/csharp/NSGetNavigationServiceSnippets.CSharp/ContentUserControl.xaml.cs#getnavigationservicecode2)]\n[!code-vb[NSGetNavigationServiceSnippets#GetNavigationServiceCODE2](~/add/codesnippet/visualbasic/nsgetnavigationservicesnippets/contentusercontrol.xaml.vb#getnavigationservicecode2)]"
  syntax:
    content: public static System.Windows.Navigation.NavigationService GetNavigationService (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.DependencyObject&quot;> </xref>中通过导航器承载的内容。"
    return:
      type: System.Windows.Navigation.NavigationService
      description: "对引用<xref href=&quot;System.Windows.Navigation.NavigationService&quot;></xref>有关的内容包含指定的导航器<xref href=&quot;System.Windows.DependencyObject&quot;> </xref>; 可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>在某些情况下 （请参阅备注）。"
  overload: System.Windows.Navigation.NavigationService.GetNavigationService*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dependencyObject</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.GoBack
  id: GoBack
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: GoBack()
  nameWithType: NavigationService.GoBack()
  fullName: System.Windows.Navigation.NavigationService.GoBack()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "导航到的最新条目后退导航历史记录，如果有一个。"
  remarks: "在调用 GoBack 之前,<xref:System.Windows.Navigation.NavigationService.CanGoBack%2A>属性进行检查，以确定后退导航历史记录中是否存在条目。</xref:System.Windows.Navigation.NavigationService.CanGoBack%2A>"
  example:
  - "The following example navigates to the most recent entry in back navigation history, if one exists.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowBackCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindowbackcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowBackCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindowbackcode)]"
  syntax:
    content: public void GoBack ();
    parameters: []
  overload: System.Windows.Navigation.NavigationService.GoBack*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "GoBack 后退导航历史记录中不存在项时调用。"
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.GoForward
  id: GoForward
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: GoForward()
  nameWithType: NavigationService.GoForward()
  fullName: System.Windows.Navigation.NavigationService.GoForward()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "如果存在，请导航到前进导航历史记录中的最新条目。"
  remarks: "在调用 GoForward 之前,<xref:System.Windows.Navigation.NavigationService.CanGoForward%2A>属性进行检查，以确定前进导航历史记录中是否存在条目。</xref:System.Windows.Navigation.NavigationService.CanGoForward%2A>"
  example:
  - "The following example navigates to the most recent entry in forward navigation history, if one exists.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowForwardCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindowforwardcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowForwardCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindowforwardcode)]"
  syntax:
    content: public void GoForward ();
    parameters: []
  overload: System.Windows.Navigation.NavigationService.GoForward*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "GoForward 前进导航历史记录中不存在项时调用。"
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: NavigationService.LoadCompleted
  fullName: System.Windows.Navigation.NavigationService.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "在已加载，分析，并开始呈现导航到的内容时发生。"
  remarks: "如果你需要发现关于在加载完成时的导航请求的相关信息，请处理 LoadCompleted。 此信息可从<xref:System.Windows.Navigation.NavigationEventArgs>对象传递给 LoadCompleted 事件处理程序，并包含:-内容并将其[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。</xref:System.Windows.Navigation.NavigationEventArgs>      -导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>)。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>      -附加的数据，如果启动了导航，通过调用其中一种<xref:System.Windows.Navigation.NavigationService.Navigate%2A>或<xref:System.Windows.Navigation.NavigationService.Navigate%2A>。</xref:System.Windows.Navigation.NavigationService.Navigate%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%2A>      -响应详细信息 (使用<xref:System.Net.WebResponse>对象)。</xref:System.Net.WebResponse>       无法找到或加载在这种情况下，源页时，则不会引发 LoadCompleted<xref:System.Windows.Navigation.NavigationService.NavigationFailed>引发。</xref:System.Windows.Navigation.NavigationService.NavigationFailed>      1> [!NOTE]&1;> 时<xref:System.Windows.Navigation.NavigationService>引发 LoadCompleted，它还会引发<xref:System.Windows.Application.LoadCompleted?displayProperty=fullName>上的事件<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.LoadCompleted?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how to handle LoadCompleted.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowLoadCompletedCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindowloadcompletedcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowLoadCompletedCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindowloadcompletedcode)]"
  syntax:
    content: public event System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted;
    return:
      type: System.Windows.Navigation.LoadCompletedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Object)
  id: Navigate(System.Object)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigate(Object)
  nameWithType: NavigationService.Navigate(Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "异步导航到包含在某个对象的内容。"
  remarks: "导航将导航到<xref:System.Object>指定的`root`如果满足以下条件:-<xref:System.Windows.Navigation.NavigationService.Navigating>事件不会被取消。</xref:System.Windows.Navigation.NavigationService.Navigating> </xref:System.Object>      -A web 请求 (请参阅<xref:System.Windows.Navigation.NavigationService.Navigating>) 可以创建。</xref:System.Windows.Navigation.NavigationService.Navigating>       如果`root`是`null`，现有的内容 (<xref:System.Windows.Navigation.NavigationService.Content%2A>) 处于未选中状态。</xref:System.Windows.Navigation.NavigationService.Content%2A>      1> [!NOTE] 1> 时下载 Web 内容，可能会收到 Web 异常 (例如，404︰ 找不到文件)。 你可以处理从<xref:System.Windows.Navigation.NavigationService.NavigationFailed>.</xref:System.Windows.Navigation.NavigationService.NavigationFailed>此类异常"
  example:
  - "The following example shows how to navigate to a <xref:System.Windows.Controls.Page> object containing the source content tree.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigateObjectCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigateobjectcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigateObjectCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigateobjectcode)]"
  syntax:
    content: public bool Navigate (object root);
    parameters:
    - id: root
      type: System.Object
      description: "包含要导航到的内容的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未取消导航;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.Navigate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri)
  id: Navigate(System.Uri)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigate(Uri)
  nameWithType: NavigationService.Navigate(Uri)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "异步导航到由指定的内容[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。"
  remarks: "值`source`可以是一个[!INCLUDE[TLA#tla_url](~/add/includes/tlasharptla-url-md.md)]或有效的包[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)](请参阅[WPF 中的包 Uri](~/add/includes/ajax-current-ext-md.md))。       导航将导航到[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]指定的`source`如果满足以下条件:-<xref:System.Windows.Navigation.NavigationService.Navigating>事件不会被取消。</xref:System.Windows.Navigation.NavigationService.Navigating>      -A web 请求 (请参阅<xref:System.Windows.Navigation.NavigationService.Navigating>) 可以创建。</xref:System.Windows.Navigation.NavigationService.Navigating>       如果`source`是`null`，现有的内容 (<xref:System.Windows.Navigation.NavigationService.Content%2A>) 处于未选中状态。</xref:System.Windows.Navigation.NavigationService.Content%2A>      1> [!NOTE] 1> 时下载 Web 内容，可能会收到 Web 异常 (例如，404︰ 找不到文件)。 你可以处理从<xref:System.Windows.Navigation.NavigationService.NavigationFailed>.</xref:System.Windows.Navigation.NavigationService.NavigationFailed>此类异常       你可以使用导航导航到内容片段。 如果通过标识内容[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]是当前内容，不重新下载。"
  example:
  - "The following example shows how to navigate to a [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)].  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigateCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigatecode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigateCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigatecode)]"
  syntax:
    content: public bool Navigate (Uri source);
    parameters:
    - id: source
      type: System.Uri
      description: "A<xref:System.Uri>使用初始化对象[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]所需内容。</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未取消导航;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.Navigate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Object,System.Object)
  id: Navigate(System.Object,System.Object)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigate(Object,Object)
  nameWithType: NavigationService.Navigate(Object,Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "异步导航到由对象，包含的内容和传递的对象，包含要用于在导航过程处理的数据。"
  remarks: "此方法具有相同的行为<xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>，而不是传递的对象但[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。</xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>"
  example:
  - "The following example shows how to navigate to a <xref:System.Windows.Controls.Page> object containing the source content, and passing navigation state.  \n  \n [!code-cs[NavigationServiceNavigateObjectStateSnippets#MainWindowCODE](~/add/codesnippet/csharp/NavigationServiceNavigateObjectStateSnippets.CSharp/MainWindow.xaml.cs#mainwindowcode)]\n [!code-vb[NavigationServiceNavigateObjectStateSnippets#MainWindowCODE](~/add/codesnippet/visualbasic/navigationservicenavigateobjectstatesnippets/mainwindow.xaml.vb#mainwindowcode)]"
  syntax:
    content: public bool Navigate (object root, object navigationState);
    parameters:
    - id: root
      type: System.Object
      description: "包含要导航到的内容的对象。"
    - id: navigationState
      type: System.Object
      description: "包含要用于在导航过程处理的数据的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未取消导航;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.Navigate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object)
  id: Navigate(System.Uri,System.Object)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigate(Uri,Object)
  nameWithType: NavigationService.Navigate(Uri,Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "异步导航到位于源内容[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]，并传递一个对象，其中包含要用于在导航过程处理的数据。"
  remarks: "由于导航是异步的它时进行多个要在同一时间处于正在进行的导航。 例如，如果在一页有两个子框架，无法导航这两个框架。 在此情况下，引发的各种导航事件<xref:System.Windows.Navigation.NavigationService>可能会引发多个时间，一个用于每项内容要导航到，不一定以便请求的导航。</xref:System.Windows.Navigation.NavigationService> 因此，如果某个特定导航请求需要处理特定于单个请求的数据，则无法使用可供所有导航请求的数据。 相反，你可以使用`navigationState`导航处理的是特定于某个导航请求中传入数据。       以下事件自变量提供对导航状态的访问:- <xref:System.Windows.Navigation.NavigatingCancelEventArgs.ExtraData%2A>(传递到<xref:System.Windows.Navigation.NavigationService.Navigating>事件)。</xref:System.Windows.Navigation.NavigationService.Navigating> </xref:System.Windows.Navigation.NavigatingCancelEventArgs.ExtraData%2A>      - <xref:System.Windows.Navigation.NavigationEventArgs.ExtraData%2A>(传递到<xref:System.Windows.Navigation.NavigationService.Navigated>， <xref:System.Windows.Navigation.NavigationService.NavigationStopped>，<xref:System.Windows.Navigation.NavigationService.LoadCompleted>事件处理程序)。</xref:System.Windows.Navigation.NavigationService.LoadCompleted> </xref:System.Windows.Navigation.NavigationService.NavigationStopped> </xref:System.Windows.Navigation.NavigationService.Navigated> </xref:System.Windows.Navigation.NavigationEventArgs.ExtraData%2A>"
  example:
  - "The following example demonstrates navigating to a [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] and passing navigation state.  \n  \n [!code-cs[NavigationServiceNavigateUriStateSnippets#MainWindowCODE](~/add/codesnippet/csharp/NavigationServiceNavigateUriStateSnippets.CSharp/MainWindow.xaml.cs#mainwindowcode)]\n [!code-vb[NavigationServiceNavigateUriStateSnippets#MainWindowCODE](~/add/codesnippet/visualbasic/navigationservicenavigateuristatesnippets/mainwindow.xaml.vb#mainwindowcode)]"
  syntax:
    content: public bool Navigate (Uri source, object navigationState);
    parameters:
    - id: source
      type: System.Uri
      description: "A<xref:System.Uri>使用初始化对象[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]所需内容。</xref:System.Uri>"
    - id: navigationState
      type: System.Object
      description: "包含要用于在导航过程处理的数据的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未取消导航;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.Navigate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object,System.Boolean)
  id: Navigate(System.Uri,System.Object,System.Boolean)
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigate(Uri,Object,Boolean)
  nameWithType: NavigationService.Navigate(Uri,Object,Boolean)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri,Object,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "异步导航到位于源内容[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]，传递包含用于在导航窗格中和沙盒处理内容的导航状态的对象。"
  remarks: "此方法仅适用于独立应用程序和[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]内容。       此方法具有相同的行为<xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>，并通过确保正在下载的内容置于部分信任安全沙盒对其进行扩展 (具有默认 Internet 区域集的权限-请参阅[WPF 部分信任安全](~/add/includes/ajax-current-ext-md.md))。</xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>"
  syntax:
    content: public bool Navigate (Uri source, object navigationState, bool sandboxExternalContent);
    parameters:
    - id: source
      type: System.Uri
      description: "A<xref:System.Uri>使用初始化对象[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]所需内容。</xref:System.Uri>"
    - id: navigationState
      type: System.Object
      description: "包含要用于在导航过程处理的数据的对象。"
    - id: sandboxExternalContent
      type: System.Boolean
      description: "将内容下载到部分信任安全沙盒 (使用默认 Internet 区域的权限集，如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未取消导航;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Navigation.NavigationService.Navigate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigated
  id: Navigated
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigated
  nameWithType: NavigationService.Navigated
  fullName: System.Windows.Navigation.NavigationService.Navigated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "要导航到的内容已找到，并且可从时发生<xref:System.Windows.Navigation.NavigationService.Content*>属性，即使可能未完成加载。</xref:System.Windows.Navigation.NavigationService.Content*>"
  remarks: "如果你需要了解有关导航请求的信息，下载开始时，你可以处理 Navigated。 此信息可从<xref:System.Windows.Navigation.NavigationEventArgs>对象传递给 Navigated 事件处理程序，并包含:-源页。</xref:System.Windows.Navigation.NavigationEventArgs> 当引发 Navigated 时，至少部分的源页的[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]分析，树并将其附加到目标内容控件。      -请求[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。      -导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>)。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>      -附加的数据，如果启动了导航，通过调用其中一种<xref:System.Windows.Navigation.NavigationService.Navigate%2A>或<xref:System.Windows.Navigation.NavigationService.Navigate%2A>。</xref:System.Windows.Navigation.NavigationService.Navigate%2A> </xref:System.Windows.Navigation.NavigationService.Navigate%2A>      -响应详细信息 (使用<xref:System.Net.WebResponse>对象)。</xref:System.Net.WebResponse>       导航无法找到或加载在这种情况下，源页时，则不会引发<xref:System.Windows.Navigation.NavigationService.NavigationFailed>引发。</xref:System.Windows.Navigation.NavigationService.NavigationFailed>      1> [!NOTE]&1;> 时<xref:System.Windows.Navigation.NavigationService>引发<xref:System.Windows.Navigation.NavigationService.NavigationFailed>，它还会引发<xref:System.Windows.Application.NavigationFailed?displayProperty=fullName>上的事件<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.NavigationFailed?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.NavigationFailed> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how to handle Navigated.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigatedCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigatedcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigatedCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigatedcode)]"
  syntax:
    content: public event System.Windows.Navigation.NavigatedEventHandler Navigated;
    return:
      type: System.Windows.Navigation.NavigatedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Navigating
  id: Navigating
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Navigating
  nameWithType: NavigationService.Navigating
  fullName: System.Windows.Navigation.NavigationService.Navigating
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "当请求一个新导航时发生。"
  remarks: "导航时请求一个新导航，但在源之前请求内容，包括何时引发:-<xref:System.Windows.Navigation.NavigationService.Navigate%2A>称为。</xref:System.Windows.Navigation.NavigationService.Navigate%2A>      -<xref:System.Windows.Navigation.NavigationService.GoBack%2A>或<xref:System.Windows.Navigation.NavigationService.GoForward%2A>称为 (或从导航栏上选择一个条目[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)])。</xref:System.Windows.Navigation.NavigationService.GoForward%2A> </xref:System.Windows.Navigation.NavigationService.GoBack%2A>      -A 内容片段导航到。       如果你需要了解有关的信息导航开始之前导航请求，处理浏览。 此信息可从<xref:System.Windows.Navigation.NavigatingCancelEventArgs>传递给浏览事件处理程序的对象。</xref:System.Windows.Navigation.NavigatingCancelEventArgs>       A<xref:System.Net.WebRequest>对象用于导航的创建，并且可从<xref:System.Windows.Navigation.NavigatingCancelEventArgs>参数; 此时尚未成为实际的请求，因为你可以重新配置<xref:System.Net.WebRequest>对象，如有必要。</xref:System.Net.WebRequest> </xref:System.Windows.Navigation.NavigatingCancelEventArgs> </xref:System.Net.WebRequest>       你还处理<xref:System.Windows.Navigation.NavigatingCancelEventArgs>取消导航窗格中，如果需要，通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>为 true。</xref:System.ComponentModel.CancelEventArgs.Cancel%2A> </xref:System.Windows.Navigation.NavigatingCancelEventArgs> 如果您取消导航，则会不引发任何其他导航事件。      1> [!NOTE]&1;> 如果你的应用程序托管在浏览器中，你不能防止用户离开你的应用程序通过取消浏览事件。       内容的第一条已导航至由导航后 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>)，每项导航离开的内容添加到导航历史记录。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow> 如果你需要保存状态信息导航离开的内容，你可以将状态添加到该内容的日记条目通过设置<xref:System.Windows.Navigation.NavigatingCancelEventArgs.ContentStateToSave%2A>与<xref:System.Windows.Navigation.CustomContentState>对象。</xref:System.Windows.Navigation.CustomContentState> </xref:System.Windows.Navigation.NavigatingCancelEventArgs.ContentStateToSave%2A>      1> [!NOTE]&1;> 时<xref:System.Windows.Navigation.NavigationService>引发浏览，它还会引发<xref:System.Windows.Application.Navigating?displayProperty=fullName>上的事件<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.Navigating?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how to handle Navigating to detect whether a request to refresh static content has been made and, if so, to cancel the request.  \n  \n Navigating.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigatingCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigatingcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigatingCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigatingcode)]"
  syntax:
    content: public event System.Windows.Navigation.NavigatingCancelEventHandler Navigating;
    return:
      type: System.Windows.Navigation.NavigatingCancelEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.NavigationFailed
  id: NavigationFailed
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: NavigationFailed
  nameWithType: NavigationService.NavigationFailed
  fullName: System.Windows.Navigation.NavigationService.NavigationFailed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "在导航到所请求的内容时发生错误时发生。"
  remarks: "时请<xref:System.Net.WebException>或<xref:System.IO.IOException>在导航窗格中，将引发事件 NavigationFailed 过程中引发。</xref:System.IO.IOException> </xref:System.Net.WebException> 传递 NavigationFailed <xref:System.Windows.Navigation.NavigationFailedEventArgs>，封装有关异常和导致异常的导航的详细信息的信息。</xref:System.Windows.Navigation.NavigationFailedEventArgs>       当异常导致的失败的导航窗格中，并且未经处理时，按列出的顺序引发以下事件:-NavigationFailed。      -   <xref:System.Windows.Controls.Frame.NavigationFailed?displayProperty=fullName> or <xref:System.Windows.Navigation.NavigationWindow.NavigationFailed?displayProperty=fullName>.</xref:System.Windows.Navigation.NavigationWindow.NavigationFailed?displayProperty=fullName></xref:System.Windows.Controls.Frame.NavigationFailed?displayProperty=fullName>      -   <xref:System.Windows.Application.NavigationFailed?displayProperty=fullName>.</xref:System.Windows.Application.NavigationFailed?displayProperty=fullName>      -   <xref:System.Windows.Application.DispatcherUnhandledException>.</xref:System.Windows.Application.DispatcherUnhandledException>       如果导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>) 都由一个或多个导航器`NavigationFailed`则不会对其中任何一引发。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>"
  example:
  - "The following example shows how to handle NavigationFailed.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigationFailedCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigationfailedcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigationFailedCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigationfailedcode)]"
  syntax:
    content: public event System.Windows.Navigation.NavigationFailedEventHandler NavigationFailed;
    return:
      type: System.Windows.Navigation.NavigationFailedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.NavigationProgress
  id: NavigationProgress
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: NavigationProgress
  nameWithType: NavigationService.NavigationProgress
  fullName: System.Windows.Navigation.NavigationService.NavigationProgress
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "定期下载以提供导航进度信息期间出现。"
  remarks: "传递 NavigationProgress<xref:System.Windows.Navigation.NavigationProgressEventArgs>可公开以下的进度信息:-下载到目前为止的字节数 (<xref:System.Windows.Navigation.NavigationProgressEventArgs.BytesRead%2A>)。</xref:System.Windows.Navigation.NavigationProgressEventArgs.BytesRead%2A> </xref:System.Windows.Navigation.NavigationProgressEventArgs>      -若要下载的总字节数 (<xref:System.Windows.Navigation.NavigationProgressEventArgs.MaxBytes%2A>)。</xref:System.Windows.Navigation.NavigationProgressEventArgs.MaxBytes%2A>       针对每个 1024 字节内容下载后，并且一次的剩余字节数是曾小于 1024 个字节，则将引发 NavigationProgress。 为此，处理 NavigationProgress 提供有用的方式来跟踪和显示当前下载的进度。       在某些情况下，例如当相同的内容导航到，或在当前加载的内容到导航的内容的片段时，将不会引发 NavigationProgress (即值<xref:System.Windows.Navigation.NavigationService.Content%2A>属性)。</xref:System.Windows.Navigation.NavigationService.Content%2A>       当导航到已编译的 XAML 资源，可能不会引发最终 NavigationProgress 事件。 这意味着，在下载结束时，上次报告<xref:System.Windows.Navigation.NavigationProgressEventArgs.BytesRead%2A>值可能不等于<xref:System.Windows.Navigation.NavigationProgressEventArgs.MaxBytes%2A>值。</xref:System.Windows.Navigation.NavigationProgressEventArgs.MaxBytes%2A> </xref:System.Windows.Navigation.NavigationProgressEventArgs.BytesRead%2A> 处理<xref:System.Windows.Navigation.NavigationService.LoadCompleted>导航已完成时要通知的事件。</xref:System.Windows.Navigation.NavigationService.LoadCompleted>      1> [!NOTE]&1;> 时<xref:System.Windows.Navigation.NavigationService>引发 NavigationProgress，它还会引发<xref:System.Windows.Application.NavigationProgress?displayProperty=fullName>上的事件<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.NavigationProgress?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how to handle NavigationProgress.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigationProgressCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigationprogresscode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigationProgressCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigationprogresscode)]"
  syntax:
    content: public event System.Windows.Navigation.NavigationProgressEventHandler NavigationProgress;
    return:
      type: System.Windows.Navigation.NavigationProgressEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.NavigationStopped
  id: NavigationStopped
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: NavigationStopped
  nameWithType: NavigationService.NavigationStopped
  fullName: System.Windows.Navigation.NavigationService.NavigationStopped
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "发生时<xref:System.Windows.Navigation.NavigationService.StopLoading*>调用方法时，或正在进行当前导航时在请求新的导航。</xref:System.Windows.Navigation.NavigationService.StopLoading*>"
  remarks: "如果你需要了解有关导航请求的信息，下载停止时，你可以处理 NavigationStopped。 此信息可从<xref:System.Windows.Navigation.NavigationEventArgs>对象传递给 NavigationStopped 事件处理程序，并包含:-请求[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]。</xref:System.Windows.Navigation.NavigationEventArgs>      -导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>)。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>      -附加的数据，如果启动了导航，通过调用其中一种<xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>或<xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>。</xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService.Navigate%2A?displayProperty=fullName>      1> [!NOTE]&1;> 时<xref:System.Windows.Navigation.NavigationService>引发 NavigationStopped，它还会引发<xref:System.Windows.Application.NavigationStopped?displayProperty=fullName>上的事件<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.NavigationStopped?displayProperty=fullName> </xref:System.Windows.Navigation.NavigationService>"
  example:
  - "The following example shows how to handle NavigationStopped.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowNavigationStoppedCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindownavigationstoppedcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowNavigationStoppedCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindownavigationstoppedcode)]"
  syntax:
    content: public event System.Windows.Navigation.NavigationStoppedEventHandler NavigationStopped;
    return:
      type: System.Windows.Navigation.NavigationStoppedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Refresh
  id: Refresh
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Refresh()
  nameWithType: NavigationService.Refresh()
  fullName: System.Windows.Navigation.NavigationService.Refresh()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "将重新加载当前内容。"
  remarks: "如果当前的内容 (的值指定的<xref:System.Windows.Navigation.NavigationService.Source%2A>属性) 再次，导航到<xref:System.Windows.Navigation.NavigationService>不会下载内容。</xref:System.Windows.Navigation.NavigationService> </xref:System.Windows.Navigation.NavigationService.Source%2A> 若要强制<xref:System.Windows.Navigation.NavigationService>重新导航到内容，调用刷新。</xref:System.Windows.Navigation.NavigationService>       请注意，如果当前内容再次，导航到通过调用<xref:System.Windows.Navigation.NavigationService.Navigate%2A>或刷新，不会将新条目添加到导航历史记录。</xref:System.Windows.Navigation.NavigationService.Navigate%2A>"
  syntax:
    content: public void Refresh ();
    parameters: []
  overload: System.Windows.Navigation.NavigationService.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.RemoveBackEntry
  id: RemoveBackEntry
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: RemoveBackEntry()
  nameWithType: NavigationService.RemoveBackEntry()
  fullName: System.Windows.Navigation.NavigationService.RemoveBackEntry()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "移除后的历史记录中的最新的日志条目。"
  remarks: "如果两个或多个导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>) 共享相同的导航历史记录，一个导航器可以使用 RemoveBackEntry 来检索发生在另一个导航器中导航的后退导航历史记录条目。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>"
  syntax:
    content: public System.Windows.Navigation.JournalEntry RemoveBackEntry ();
    parameters: []
    return:
      type: System.Windows.Navigation.JournalEntry
      description: "最新<xref href=&quot;System.Windows.Navigation.JournalEntry&quot;></xref>后退导航历史记录，如果有一个中。"
  overload: System.Windows.Navigation.NavigationService.RemoveBackEntry*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.Source
  id: Source
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: Source
  nameWithType: NavigationService.Source
  fullName: System.Windows.Navigation.NavigationService.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "获取或设置[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]的当前内容，或[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的当前导航到的新内容。"
  remarks: "如果将此属性设置为另一种[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]比当前正显示，则导航器 (<xref:System.Windows.Navigation.NavigationWindow>， <xref:System.Windows.Controls.Frame>) 导航到指定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。</xref:System.Windows.Controls.Frame> </xref:System.Windows.Navigation.NavigationWindow>       源设置为从加载的内容[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]，导航到，除非取消的导航。       可以设置源片段仅使用[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]，并可以将设置为`null`。"
  syntax:
    content: public Uri Source { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>包含[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]当前内容，或当前导航到的内容。</xref:System.Uri>"
  overload: System.Windows.Navigation.NavigationService.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Navigation.NavigationService.StopLoading
  id: StopLoading
  parent: System.Windows.Navigation.NavigationService
  langs:
  - csharp
  name: StopLoading()
  nameWithType: NavigationService.StopLoading()
  fullName: System.Windows.Navigation.NavigationService.StopLoading()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Navigation
  summary: "将停止进一步下载当前导航请求的内容。"
  remarks: "可以调用 StopLoading 立即<xref:System.Windows.Navigation.NavigationService.Navigate%2A>返回，并停止正在进行子框架中的导航。</xref:System.Windows.Navigation.NavigationService.Navigate%2A>       (<xref:System.Windows.Controls.Frame>).</xref:System.Windows.Controls.Frame>       调用 StopLoading 方法引发<xref:System.Windows.Navigation.NavigationService.NavigationStopped>事件。</xref:System.Windows.Navigation.NavigationService.NavigationStopped>      1> [!NOTE]&1;> StopLoading 必须启动导航在同一线程上调用。"
  example:
  - "The following example demonstrates how to stop loading.  \n  \n [!code-cs[NavigationServiceSnippets#MainWindowStopLoadingCODE](~/add/codesnippet/csharp/NavigationServiceSnippets.CSharp/MainWindow.xaml.cs#mainwindowstoploadingcode)]\n [!code-vb[NavigationServiceSnippets#MainWindowStopLoadingCODE](~/add/codesnippet/visualbasic/navigationservicesnippets/mainwindow.xaml.vb#mainwindowstoploadingcode)]"
  syntax:
    content: public void StopLoading ();
    parameters: []
  overload: System.Windows.Navigation.NavigationService.StopLoading*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Navigation.NavigationService.AddBackEntry(System.Windows.Navigation.CustomContentState)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: AddBackEntry(CustomContentState)
  nameWithType: NavigationService.AddBackEntry(CustomContentState)
  fullName: System.Windows.Navigation.NavigationService.AddBackEntry(CustomContentState)
- uid: System.Windows.Navigation.CustomContentState
  parent: System.Windows.Navigation
  isExternal: false
  name: CustomContentState
  nameWithType: CustomContentState
  fullName: System.Windows.Navigation.CustomContentState
- uid: System.Windows.Navigation.NavigationService.CanGoBack
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CanGoBack
  nameWithType: NavigationService.CanGoBack
  fullName: System.Windows.Navigation.NavigationService.CanGoBack
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Navigation.NavigationService.CanGoForward
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CanGoForward
  nameWithType: NavigationService.CanGoForward
  fullName: System.Windows.Navigation.NavigationService.CanGoForward
- uid: System.Windows.Navigation.NavigationService.Content
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Content
  nameWithType: NavigationService.Content
  fullName: System.Windows.Navigation.NavigationService.Content
- uid: System.Windows.Navigation.NavigationService.CurrentSource
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CurrentSource
  nameWithType: NavigationService.CurrentSource
  fullName: System.Windows.Navigation.NavigationService.CurrentSource
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Windows.Navigation.NavigationService.FragmentNavigation
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: FragmentNavigation
  nameWithType: NavigationService.FragmentNavigation
  fullName: System.Windows.Navigation.NavigationService.FragmentNavigation
- uid: System.Windows.Navigation.FragmentNavigationEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: FragmentNavigationEventHandler
  nameWithType: FragmentNavigationEventHandler
  fullName: System.Windows.Navigation.FragmentNavigationEventHandler
- uid: System.Windows.Navigation.NavigationService.GetNavigationService(System.Windows.DependencyObject)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GetNavigationService(DependencyObject)
  nameWithType: NavigationService.GetNavigationService(DependencyObject)
  fullName: System.Windows.Navigation.NavigationService.GetNavigationService(DependencyObject)
- uid: System.Windows.Navigation.NavigationService
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationService
  nameWithType: NavigationService
  fullName: System.Windows.Navigation.NavigationService
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Navigation.NavigationService.GoBack
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GoBack()
  nameWithType: NavigationService.GoBack()
  fullName: System.Windows.Navigation.NavigationService.GoBack()
- uid: System.Windows.Navigation.NavigationService.GoForward
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GoForward()
  nameWithType: NavigationService.GoForward()
  fullName: System.Windows.Navigation.NavigationService.GoForward()
- uid: System.Windows.Navigation.NavigationService.LoadCompleted
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: LoadCompleted
  nameWithType: NavigationService.LoadCompleted
  fullName: System.Windows.Navigation.NavigationService.LoadCompleted
- uid: System.Windows.Navigation.LoadCompletedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: LoadCompletedEventHandler
  nameWithType: LoadCompletedEventHandler
  fullName: System.Windows.Navigation.LoadCompletedEventHandler
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Object)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate(Object)
  nameWithType: NavigationService.Navigate(Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Object)
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate(Uri)
  nameWithType: NavigationService.Navigate(Uri)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri)
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Object,System.Object)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate(Object,Object)
  nameWithType: NavigationService.Navigate(Object,Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Object,Object)
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate(Uri,Object)
  nameWithType: NavigationService.Navigate(Uri,Object)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri,Object)
- uid: System.Windows.Navigation.NavigationService.Navigate(System.Uri,System.Object,System.Boolean)
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate(Uri,Object,Boolean)
  nameWithType: NavigationService.Navigate(Uri,Object,Boolean)
  fullName: System.Windows.Navigation.NavigationService.Navigate(Uri,Object,Boolean)
- uid: System.Windows.Navigation.NavigationService.Navigated
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigated
  nameWithType: NavigationService.Navigated
  fullName: System.Windows.Navigation.NavigationService.Navigated
- uid: System.Windows.Navigation.NavigatedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigatedEventHandler
  nameWithType: NavigatedEventHandler
  fullName: System.Windows.Navigation.NavigatedEventHandler
- uid: System.Windows.Navigation.NavigationService.Navigating
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigating
  nameWithType: NavigationService.Navigating
  fullName: System.Windows.Navigation.NavigationService.Navigating
- uid: System.Windows.Navigation.NavigatingCancelEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigatingCancelEventHandler
  nameWithType: NavigatingCancelEventHandler
  fullName: System.Windows.Navigation.NavigatingCancelEventHandler
- uid: System.Windows.Navigation.NavigationService.NavigationFailed
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: NavigationFailed
  nameWithType: NavigationService.NavigationFailed
  fullName: System.Windows.Navigation.NavigationService.NavigationFailed
- uid: System.Windows.Navigation.NavigationFailedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationFailedEventHandler
  nameWithType: NavigationFailedEventHandler
  fullName: System.Windows.Navigation.NavigationFailedEventHandler
- uid: System.Windows.Navigation.NavigationService.NavigationProgress
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: NavigationProgress
  nameWithType: NavigationService.NavigationProgress
  fullName: System.Windows.Navigation.NavigationService.NavigationProgress
- uid: System.Windows.Navigation.NavigationProgressEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationProgressEventHandler
  nameWithType: NavigationProgressEventHandler
  fullName: System.Windows.Navigation.NavigationProgressEventHandler
- uid: System.Windows.Navigation.NavigationService.NavigationStopped
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: NavigationStopped
  nameWithType: NavigationService.NavigationStopped
  fullName: System.Windows.Navigation.NavigationService.NavigationStopped
- uid: System.Windows.Navigation.NavigationStoppedEventHandler
  parent: System.Windows.Navigation
  isExternal: false
  name: NavigationStoppedEventHandler
  nameWithType: NavigationStoppedEventHandler
  fullName: System.Windows.Navigation.NavigationStoppedEventHandler
- uid: System.Windows.Navigation.NavigationService.Refresh
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Refresh()
  nameWithType: NavigationService.Refresh()
  fullName: System.Windows.Navigation.NavigationService.Refresh()
- uid: System.Windows.Navigation.NavigationService.RemoveBackEntry
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: RemoveBackEntry()
  nameWithType: NavigationService.RemoveBackEntry()
  fullName: System.Windows.Navigation.NavigationService.RemoveBackEntry()
- uid: System.Windows.Navigation.JournalEntry
  parent: System.Windows.Navigation
  isExternal: false
  name: JournalEntry
  nameWithType: JournalEntry
  fullName: System.Windows.Navigation.JournalEntry
- uid: System.Windows.Navigation.NavigationService.Source
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Source
  nameWithType: NavigationService.Source
  fullName: System.Windows.Navigation.NavigationService.Source
- uid: System.Windows.Navigation.NavigationService.StopLoading
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: StopLoading()
  nameWithType: NavigationService.StopLoading()
  fullName: System.Windows.Navigation.NavigationService.StopLoading()
- uid: System.Windows.Navigation.NavigationService.AddBackEntry*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: AddBackEntry
  nameWithType: NavigationService.AddBackEntry
- uid: System.Windows.Navigation.NavigationService.CanGoBack*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CanGoBack
  nameWithType: NavigationService.CanGoBack
- uid: System.Windows.Navigation.NavigationService.CanGoForward*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CanGoForward
  nameWithType: NavigationService.CanGoForward
- uid: System.Windows.Navigation.NavigationService.Content*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Content
  nameWithType: NavigationService.Content
- uid: System.Windows.Navigation.NavigationService.CurrentSource*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: CurrentSource
  nameWithType: NavigationService.CurrentSource
- uid: System.Windows.Navigation.NavigationService.GetNavigationService*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GetNavigationService
  nameWithType: NavigationService.GetNavigationService
- uid: System.Windows.Navigation.NavigationService.GoBack*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GoBack
  nameWithType: NavigationService.GoBack
- uid: System.Windows.Navigation.NavigationService.GoForward*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: GoForward
  nameWithType: NavigationService.GoForward
- uid: System.Windows.Navigation.NavigationService.Navigate*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Navigate
  nameWithType: NavigationService.Navigate
- uid: System.Windows.Navigation.NavigationService.Refresh*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Refresh
  nameWithType: NavigationService.Refresh
- uid: System.Windows.Navigation.NavigationService.RemoveBackEntry*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: RemoveBackEntry
  nameWithType: NavigationService.RemoveBackEntry
- uid: System.Windows.Navigation.NavigationService.Source*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: Source
  nameWithType: NavigationService.Source
- uid: System.Windows.Navigation.NavigationService.StopLoading*
  parent: System.Windows.Navigation.NavigationService
  isExternal: false
  name: StopLoading
  nameWithType: NavigationService.StopLoading
