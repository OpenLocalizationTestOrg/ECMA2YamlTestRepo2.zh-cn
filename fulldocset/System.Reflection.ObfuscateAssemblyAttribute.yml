### YamlMime:ManagedReference
items:
- uid: System.Reflection.ObfuscateAssemblyAttribute
  id: ObfuscateAssemblyAttribute
  children:
  - System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  - System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  - System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute
  fullName: System.Reflection.ObfuscateAssemblyAttribute
  type: Class
  summary: "指示模糊处理工具为适当的程序集类型使用其标准模糊处理规则。"
  remarks: "<xref:System.Reflection.ObfuscationAttribute>和 ObfuscateAssemblyAttribute 属性提供一种方法为程序集作者批注二进制文件，以便模糊处理工具可以用最小的外部配置正确处理它们。</xref:System.Reflection.ObfuscationAttribute>       将此属性应用于程序集告知模糊处理工具来对程序集类型使用其默认规则。      1> [!IMPORTANT]&1;> 应用此特性不会不自动模糊处理程序集。 应用此特性是创建模糊处理工具的配置文件的替代方法。 也就是说，它只提供有关模糊处理工具的说明。 Microsoft 建议的模糊处理工具供应商遵循此处所述的语义。 但是，没有特定的工具，如下所示 Microsoft 建议能保证。       你可以将应用<xref:System.Reflection.ObfuscationAttribute>于程序集内的类型并向这些类型的成员。</xref:System.Reflection.ObfuscationAttribute> 最里面的属性控制模糊处理工具的方式处理任何特定代码实体。"
  example:
  - "The following code example shows a private assembly that has been marked with the ObfuscateAssemblyAttribute. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n For a code example that shows the use of ObfuscateAssemblyAttribute with <xref:System.Reflection.ObfuscationAttribute>, see the <xref:System.Reflection.ObfuscationAttribute> class.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/t-system.reflection.obfu_0_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/t-system.reflection.obfu_0_1.cs)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=false, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ObfuscateAssemblyAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "初始化的新实例<xref href=&quot;System.Reflection.ObfuscateAssemblyAttribute&quot;></xref>类，指定要进行模糊处理的程序集公共或私有。"
  remarks: "如果它们仅由你的应用程序，并且不库以供其他软件，则标记为私有程序集。 通常，标记为私有程序集将告诉模糊处理程序，它可以进行模糊处理的所有方法，包括对应用程序进行模糊处理的一部分的公共方法的名称。 如果程序集是公共的模糊处理程序不应进行模糊处理的公共成员的名称。      1> [!IMPORTANT]&1;> 应用此特性不会不自动模糊处理程序集。 应用此特性是创建模糊处理工具的配置文件的替代方法。 也就是说，它只提供有关模糊处理工具的说明。 Microsoft 建议的模糊处理工具供应商遵循此处所述的语义。 但是，没有特定的工具，如下所示 Microsoft 建议能保证。"
  example:
  - "The following code example shows how the attribute constructor specifies that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/m-system.reflection.obfu_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/m-system.reflection.obfu_1.cs)]"
  syntax:
    content: public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);
    parameters:
    - id: assemblyIsPrivate
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在一个应用程序; 范围内使用程序集否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  id: AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "获取<xref:System.Boolean>值，该值指示该程序集是否已标记私有。</xref:System.Boolean>"
  remarks: "仅由应用程序的它是一部分，而不是其他软件，则使用专用的程序集。      1> [!IMPORTANT]&1;> 应用此特性不会不自动模糊处理程序集。 应用此特性是创建模糊处理工具的配置文件的替代方法。 也就是说，它只提供有关模糊处理工具的说明。 Microsoft 建议的模糊处理工具供应商遵循此处所述的语义。 但是，没有特定的工具，如下所示 Microsoft 建议能保证。"
  example:
  - "The following code example shows how the attribute constructor sets the AssemblyIsPrivate property to `true`, to specify that an assembly is private. The <xref:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation%2A> property is `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_2_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_2_1.cs)]"
  syntax:
    content: public bool AssemblyIsPrivate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果程序集被标记为私有;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  id: StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  langs:
  - csharp
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "获取或设置<xref:System.Boolean>值，该值指示模糊处理工具是否应在处理后移除该特性。</xref:System.Boolean>"
  remarks: "如果将包含的另一个应用程序，你的库，并将其作为该应用程序的一部分进行模糊处理，则不应去除属性。       指定应去除模糊处理工具<xref:System.Reflection.ObfuscateAssemblyAttribute>不会影响的实例<xref:System.Reflection.ObfuscationAttribute>，已应用于类型和程序集内的成员。</xref:System.Reflection.ObfuscationAttribute> </xref:System.Reflection.ObfuscateAssemblyAttribute>      1> [!IMPORTANT]&1;> 应用此特性不会不自动模糊处理程序集。 应用此特性是创建模糊处理工具的配置文件的替代方法。 也就是说，它只提供有关模糊处理工具的说明。 Microsoft 建议的模糊处理工具供应商遵循此处所述的语义。 但是，没有特定的工具，如下所示 Microsoft 建议能保证。"
  example:
  - "The following code example shows the <xref:System.Reflection.ObfuscateAssemblyAttribute> attribute with the StripAfterObfuscation property set to `false`, to prevent the obfuscation tool from stripping the attribute after processing.  \n  \n [!code-vb[ObfuscateAssemblyAttribute#1](~/add/codesnippet/visualbasic/p-system.reflection.obfu_3_1.vb)]\n [!code-cs[ObfuscateAssemblyAttribute#1](~/add/codesnippet/csharp/p-system.reflection.obfu_3_1.cs)]"
  syntax:
    content: public bool StripAfterObfuscation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果模糊处理工具应处理; 后移除该特性否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 此属性的默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute(Boolean)
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
  fullName: System.Reflection.ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
  fullName: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
  fullName: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation
- uid: System.Reflection.ObfuscateAssemblyAttribute.#ctor*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: ObfuscateAssemblyAttribute
  nameWithType: ObfuscateAssemblyAttribute.ObfuscateAssemblyAttribute
- uid: System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: AssemblyIsPrivate
  nameWithType: ObfuscateAssemblyAttribute.AssemblyIsPrivate
- uid: System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation*
  parent: System.Reflection.ObfuscateAssemblyAttribute
  isExternal: false
  name: StripAfterObfuscation
  nameWithType: ObfuscateAssemblyAttribute.StripAfterObfuscation
