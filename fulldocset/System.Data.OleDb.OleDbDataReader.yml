### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbDataReader
  id: OleDbDataReader
  children:
  - System.Data.OleDb.OleDbDataReader.Close
  - System.Data.OleDb.OleDbDataReader.Depth
  - System.Data.OleDb.OleDbDataReader.FieldCount
  - System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetData(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetDbDataReader(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetEnumerator
  - System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetName(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)
  - System.Data.OleDb.OleDbDataReader.GetSchemaTable
  - System.Data.OleDb.OleDbDataReader.GetString(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)
  - System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])
  - System.Data.OleDb.OleDbDataReader.HasRows
  - System.Data.OleDb.OleDbDataReader.IsClosed
  - System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)
  - System.Data.OleDb.OleDbDataReader.Item(System.Int32)
  - System.Data.OleDb.OleDbDataReader.Item(System.String)
  - System.Data.OleDb.OleDbDataReader.NextResult
  - System.Data.OleDb.OleDbDataReader.Read
  - System.Data.OleDb.OleDbDataReader.RecordsAffected
  - System.Data.OleDb.OleDbDataReader.VisibleFieldCount
  langs:
  - csharp
  name: OleDbDataReader
  nameWithType: OleDbDataReader
  fullName: System.Data.OleDb.OleDbDataReader
  type: Class
  summary: "提供一种从数据源读取数据行的只进流。 此类不能被继承。"
  remarks: "若要创建 OleDbDataReader，必须调用<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>方法<xref:System.Data.OleDb.OleDbCommand>对象，而不是直接使用构造函数。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>       在关闭之前<xref:System.Data.OleDb.OleDbConnection>，先关闭 OleDbDataReader 对象。</xref:System.Data.OleDb.OleDbConnection> 如果计划重新<xref:System.Data.OleDb.OleDbCommand>对象，您还必须关闭 OleDbDataReader 对象。例如，无法检索输出参数，直到后调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>.</xref:System.Data.OleDb.OleDbDataReader.Close%2A> </xref:System.Data.OleDb.OleDbCommand>       对结果集由另一个进程或线程在读取数据时所做的更改可能会对 OleDbDataReader 用户可见。 但是，确切的行为与执行时间有关。       <xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A>和<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>是可以调用的唯一属性关闭 OleDbDataReader 之后。</xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A></xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A> 尽管<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>属性可以是访问 OleDbDataReader 存在时，始终调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>在返回的值之前<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>若要确保返回精确的值。</xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A> </xref:System.Data.OleDb.OleDbDataReader.Close%2A> </xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, an <xref:System.Data.OleDb.OleDbCommand>, and an OleDbDataReader. The example reads through the data, writing it out to the console. Finally, the example closes the OleDbDataReader and then the <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-vb[Classic WebData OleDbDataReader Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_2_1.vb)]\n [!code-cs[Classic WebData OleDbDataReader Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_2_1.cs)]"
  syntax:
    content: 'public sealed class OleDbDataReader : System.Data.Common.DbDataReader'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbDataReader
  implements: []
  inheritedMembers:
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.``0hreading.Cancellation``0oken)
  - System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.Common.DbDataReader.GetStream(System.Int32)
  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.ReadAsync
  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.Close
  id: Close
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: Close()
  nameWithType: OleDbDataReader.Close()
  fullName: System.Data.OleDb.OleDbDataReader.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "关闭<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>对象。"
  remarks: "通过使用时，必须显式调用 Close 方法<xref:System.Data.OleDb.OleDbDataReader>用于关联<xref:System.Data.OleDb.OleDbConnection>用于任何其他用途。</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbDataReader>      1> [!CAUTION]&1;> 不调用**关闭**或**释放**连接、 DataReader 或在任何其他托管的对象上**Finalize**你类的方法。 在终结器中，你应仅释放类直接拥有的非托管的资源。 如果你的类不拥有任何非托管的资源，不包括**Finalize**在类定义的方法。 有关详细信息，请参阅[垃圾回收](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, an <xref:System.Data.OleDb.OleDbCommand>, and an <xref:System.Data.OleDb.OleDbDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.OleDb.OleDbDataReader>, and then the <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_24_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_24_1.vb)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.OleDb.OleDbDataReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.Depth
  id: Depth
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: Depth
  nameWithType: OleDbDataReader.Depth
  fullName: System.Data.OleDb.OleDbDataReader.Depth
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取一个值，该值指示当前行的嵌套深度。"
  remarks: "最外面的表具有的深度为零。"
  syntax:
    content: public override int Depth { get; }
    return:
      type: System.Int32
      description: "当前行的嵌套深度。"
  overload: System.Data.OleDb.OleDbDataReader.Depth*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.FieldCount
  id: FieldCount
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: FieldCount
  nameWithType: OleDbDataReader.FieldCount
  fullName: System.Data.OleDb.OleDbDataReader.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取当前行中的列数。"
  remarks: "包括隐藏的字段。 使用<xref:System.Data.OleDb.OleDbDataReader.VisibleFieldCount%2A>可排除隐藏的字段。</xref:System.Data.OleDb.OleDbDataReader.VisibleFieldCount%2A>       执行不返回行的查询后, FieldCount 返回 0。"
  syntax:
    content: public override int FieldCount { get; }
    return:
      type: System.Int32
      description: "如果未放在有效的记录集，0;否则为中当前记录的列数。 默认值为-1。"
  overload: System.Data.OleDb.OleDbDataReader.FieldCount*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "没有当前连接到数据源。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: OleDbDataReader.GetBoolean(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值为布尔值。"
  remarks: "不进行任何转换;因此检索到的数据必须已经是一个布尔值，或生成异常。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override bool GetBoolean (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Boolean
      description: "列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetBoolean*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: OleDbDataReader.GetByte(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "字节的形式获取指定列的值。"
  remarks: "不进行任何转换;因此检索到的数据必须已经是一个字节。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override byte GetByte (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Byte
      description: "以字节的形式指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetByte*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OleDbDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "读取字节的流的指定的列偏移量到缓冲区为数组以给定的缓冲区偏移量开始。"
  remarks: "GetBytes 返回的字段中的可用字节数。 大多数情况下这是字段的确切长度。 但是，返回的版本号可能会小于该字段的真实长度如果`GetBytes`具有用于从字段中获取字节。 这可能是这种情况，例如，当<xref:System.Data.OleDb.OleDbDataReader>正在读取到缓冲区中的大型数据结构。</xref:System.Data.OleDb.OleDbDataReader> 有关详细信息，请参阅`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>设置       如果传递的缓冲区，则`null`，GetBytes 返回字段的长度以字节为单位。       不进行任何转换;因此，检索的数据必须已经是字节数组。"
  syntax:
    content: public override long GetBytes (int ordinal, long dataIndex, byte[] buffer, int bufferIndex, int length);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    - id: dataIndex
      type: System.Int64
      description: "中从其开始读取的操作的字段的索引。"
    - id: buffer
      type: System.Byte[]
      description: "要读取的字节流缓冲区。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`写入操作即将开始。"
    - id: length
      type: System.Int32
      description: "要复制到缓冲区的最大长度。"
    return:
      type: System.Int64
      description: "实际读取的字节数。"
  overload: System.Data.OleDb.OleDbDataReader.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: OleDbDataReader.GetChar(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "字符的形式获取指定列的值。"
  remarks: "不支持<xref:System.Data.OleDb>。</xref:System.Data.OleDb>"
  syntax:
    content: public override char GetChar (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Char
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetChar*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OleDbDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "流的字符从指定的列偏移量到缓冲区作为读入给定的缓冲区偏移量处开始的数组。"
  remarks: "GetChars 返回的字段中的可用的字符数。 大多数情况下这是字段的确切长度。 但是，返回的版本号可能会小于该字段的真实长度如果`GetChars`具有用于从字段中获取字符。 这可能是这种情况，例如，当<xref:System.Data.OleDb.OleDbDataReader>正在读取到缓冲区中的大型数据结构。</xref:System.Data.OleDb.OleDbDataReader> 有关详细信息，请参阅`SequentialAccess` <xref:System.Data.CommandBehavior>。</xref:System.Data.CommandBehavior>设置       如果传递的缓冲区，则`null`，GetChars 以字符为单位返回字段的长度。       不进行任何转换;因此，检索的数据必须已经是字符数组。"
  syntax:
    content: public override long GetChars (int ordinal, long dataIndex, char[] buffer, int bufferIndex, int length);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    - id: dataIndex
      type: System.Int64
      description: "中从其开始读取的操作的行的索引。"
    - id: buffer
      type: System.Char[]
      description: "若要将数据复制到的缓冲区。"
    - id: bufferIndex
      type: System.Int32
      description: "中的索引`buffer`写入操作即将开始。"
    - id: length
      type: System.Int32
      description: "要读取的字符数。"
    return:
      type: System.Int64
      description: "实际读取的字符数。"
  overload: System.Data.OleDb.OleDbDataReader.GetChars*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetData(Int32)
  nameWithType: OleDbDataReader.GetData(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetData(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "返回<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>对象请求的列序号。"
  remarks: "<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>将调用 GetData 如果该提供程序返回的<xref:System.Data.IDataReader>支持<xref:System.Data.IDataReader>.</xref:System.Data.IDataReader>列</xref:System.Data.IDataReader></xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.OleDb.OleDbDataReader GetData (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Data.OleDb.OleDbDataReader
      description: "<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;> </xref>对象。"
  overload: System.Data.OleDb.OleDbDataReader.GetData*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: OleDbDataReader.GetDataTypeName(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取源数据类型的名称。"
  syntax:
    content: public override string GetDataTypeName (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.String
      description: "后端数据类型的名称。 有关详细信息，请参阅[SQL Server 数据类型](http://go.microsoft.com/fwlink/?LinkId=198032)或[访问数据类型](http://go.microsoft.com/fwlink/?LinkId=198033)。"
  overload: System.Data.OleDb.OleDbDataReader.GetDataTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: OleDbDataReader.GetDateTime(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值<xref:System.DateTime>对象。</xref:System.DateTime>"
  remarks: "不进行任何转换;因此，检索的数据必须已经是<xref:System.DateTime>对象。</xref:System.DateTime>       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override DateTime GetDateTime (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.DateTime
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetDateTime*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetDbDataReader(System.Int32)
  id: GetDbDataReader(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetDbDataReader(Int32)
  nameWithType: OleDbDataReader.GetDbDataReader(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDbDataReader(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.DbDataReader GetDbDataReader (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "要添加。"
    return:
      type: System.Data.Common.DbDataReader
      description: "要添加。"
  overload: System.Data.OleDb.OleDbDataReader.GetDbDataReader*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: OleDbDataReader.GetDecimal(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值<xref:System.Decimal>对象。</xref:System.Decimal>"
  remarks: "不进行任何转换;因此，检索的数据必须已经是<xref:System.Decimal>对象。</xref:System.Decimal>       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override decimal GetDecimal (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Decimal
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetDecimal*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: OleDbDataReader.GetDouble(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "双精度浮点数字的形式获取指定列的值。"
  remarks: "不进行任何转换;因此，检索的数据必须已经是双精度浮点数。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override double GetDouble (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Double
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetDouble*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: OleDbDataReader.GetEnumerator()
  fullName: System.Data.OleDb.OleDbDataReader.GetEnumerator()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "返回<xref:System.Collections.IEnumerator>可用于循环访问数据读取器中的行。</xref:System.Collections.IEnumerator>"
  remarks: "可以使用此方法来检索一个显式的枚举器，但在语言的支持`foreach`构造，它会更易于使用循环构造直接以循环访问数据读取器中的行。"
  syntax:
    content: public override System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>可用于循环访问数据读取器中的行。</xref:System.Collections.IEnumerator>"
  overload: System.Data.OleDb.OleDbDataReader.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: OleDbDataReader.GetFieldType(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取<xref:System.Type>对象的数据类型。</xref:System.Type>"
  syntax:
    content: public override Type GetFieldType (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Type
      description: "<xref:System.Type>对象的数据类型。</xref:System.Type>"
  overload: System.Data.OleDb.OleDbDataReader.GetFieldType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: OleDbDataReader.GetFloat(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "单精度浮点数字的形式获取指定列的值。"
  remarks: "不进行任何转换。 因此，检索的数据必须已经是一个单精度浮点数。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override float GetFloat (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Single
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetFloat*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: OleDbDataReader.GetGuid(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "以全局唯一标识符 (GUID) 的形式获取指定列的值。"
  remarks: "不进行任何转换;因此检索到的数据已必须是全局唯一标识符。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override Guid GetGuid (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Guid
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetGuid*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: OleDbDataReader.GetInt16(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值作为 16 位有符号整数。"
  remarks: "不进行任何转换;因此，检索的数据必须已经是一个 16 位带符号的整数。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override short GetInt16 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Int16
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetInt16*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: OleDbDataReader.GetInt32(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值作为 32 位有符号整数。"
  remarks: "不进行任何转换;因此，检索的数据必须已经是一个 32 位带符号的整数。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override int GetInt32 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Int32
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetInt32*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: OleDbDataReader.GetInt64(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "以 64 位有符号整数的形式获取指定列的值。"
  remarks: "不进行任何转换;因此，检索的数据必须已经是一个 64 位带符号的整数。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override long GetInt64 (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Int64
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetInt64*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: OleDbDataReader.GetName(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的名称。"
  syntax:
    content: public override string GetName (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.String
      description: "指定列的名称。"
  overload: System.Data.OleDb.OleDbDataReader.GetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: OleDbDataReader.GetOrdinal(String)
  fullName: System.Data.OleDb.OleDbDataReader.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取的列序号，给定的列的名称。"
  remarks: "GetOrdinal 首先执行区分大小写的查找。 如果失败，进行第二个的不区分大小写搜索。 该方法将引发`IndexOutOfRange`exceptionif 找不到的从零开始的列序号。       GetOrdinal 是不区分假名宽度。       由于基于序号的查找，比命名查找更为有效，它是在循环中调用 GetOrdinal 效率不高。 通过调用一次，并将结果分配给在循环内使用一个整数变量节省时间。"
  example:
  - "The following example demonstrates how to use the GetOrdinal method.  \n  \n [!code-vb[Classic WebData OleDbDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_9_1.vb)]\n [!code-cs[Classic WebData OleDbDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_9_1.cs)]"
  syntax:
    content: public override int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "列的名称。"
    return:
      type: System.Int32
      description: "从零开始的列序号。"
  overload: System.Data.OleDb.OleDbDataReader.GetOrdinal*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "指定的名称不是有效的列名称。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetSchemaTable
  id: GetSchemaTable
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetSchemaTable()
  nameWithType: OleDbDataReader.GetSchemaTable()
  fullName: System.Data.OleDb.OleDbDataReader.GetSchemaTable()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "返回<xref href=&quot;System.Data.DataTable&quot;></xref>描述列元数据的<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;> </xref>。"
  remarks: "GetSchemaTable 方法映射到 OLE DB **IColumnsRowset::GetColumnsRowset**方法，并返回有关按以下顺序的每个列的元数据: |DataReader 列 |OLE DB 列 ID |说明 |  |-----------------------|----------------------|-----------------|  |ColumnName |DBCOLUMN_NAME |列; 的名称这可能不是唯一的。 如果无法确定该名称，则返回 null 值。 此名称始终反映最新的当前视图或命令文本中的列重命名。 |  |ColumnOrdinal |DBCOLUMN_NUMBER |列的从零开始的序号。 此列不能包含 null 值。 |  |Columnsize 类型 |DBCOLUMN_COLUMNSIZE |列中值的最大可取长度。 对于使用固定长度的数据类型的列，这是数据类型的大小。 |  |NumericPrecision |DBCOLUMN_PRECISION |如果 DbType 是数值数据类型，这是列的最大精度。 带 DBTYPE_DECIMAL 或 DBTYPE_NUMERIC 的数据类型的列的精度取决于列的定义。 如果 DbType 不是数值数据类型，这是一个 null 值。 |  |NumericScale |DBCOLUMN_SCALE |如果 DbType DBTYPE_DECIMAL 或 DBTYPE_NUMERIC，这是小数点右侧的数字个数。 否则，这就是一个 null 值。 |  |数据类型 |None |映射到列的.NET Framework 类型。 |  |提供程序类型 |DBCOLUMN_TYPE |列的数据类型的指示符。 如果列的数据类型会从行至行发生变化，这必须是 DBTYPE_VARIANT。 此列不能包含 null 值。 |  |IsLong |DBCOLUMNFLAGS_ISLONG |提供程序设置 DBCOLUMNFLAGS_ISLONG，如果列包含二进制长对象 (BLOB) 包含很长的数据。 很长的数据的定义是特定于提供程序。 此标志的设置对应的中的数据类型 PROVIDER_TYPES 行集的 IS_LONG 列的值。 |  |AllowDBNull |DBCOLUMNFLAGS_ISNULLABLE |提供程序设置 DBCOLUMNFLAGS_ISNULLABLE，如果使用者可以将列设置为 null 值，或提供程序无法确定使用者是否可以将列设置为 null 值。 列可能包含 null 值，即使它不能设置为 null 值。 |  |IsReadOnly |DBCOLUMNFLAGS_WRITE |`true`如果列不能修改; 否则为`false`。 列被假定为提供程序已设置的 DBCOLUMNFLAGS_WRITE 或 DBCOLUMNFLAGS_WRITEUNKNOWN 标志的情况下可写。 |  |IsRowVersion |DBCOLUMNFLAGS_ISROWID |提供程序设置 DBCOLUMNFLAGS_ISROWID，如果列包含一个持久性行标识符，它无法写入到，并且具有到标识以外没有有意义的值行。 |  |是唯一的 |DBCOLUMN_ISUNIQUE |VARIANT_TRUE: 基表中表中 BaseTableName 可以返回两行都不在此列中具有相同的值。 本身，或者如果没有类型仅适用于此列的 UNIQUE 约束的情况下，是唯一的保证是 VARIANT_TRUE 如果列表示一个密钥。<br /><br /> VARIANT_FALSE: 列可以包含基表中的重复值。 此列的默认值为 VARIANT_FALSE。 |  |IsKey |DBCOLUMN_KEYCOLUMN |VARIANT_TRUE: 列是一组的行集中的列，合在一起，唯一标识该行。 具有设置为 VARIANT_TRUE IsKey 的列集必须唯一标识行集中的行。 没有任何要求此列集是列的最小集。 此列集可能会生成从基表的主键、 唯一约束或唯一索引。<br /><br /> VARIANT_FALSE: 列不需要唯一标识行。 |  |IsAutoIncrement |DBCOLUMN_ISAUTOINCREMENT |VARIANT_TRUE: 列将值分配给新行以固定的增量。<br /><br /> VARIANT_FALSE: 列不会以固定的增量向新行分配值。 此列的默认值为 VARIANT_FALSE。 |  |BaseSchemaName |DBCOLUMN_BASESCHEMANAME |中包含的列的数据存储的架构的名称。 如果无法确定基础架构名称，null 值。 此列的默认值为 null 值。 |  |BaseCatalogName |DBCOLUMN_BASECATALOGNAME |包含的列的数据存储区中目录的名称。 如果无法确定基目录名称，null 值。 此列的默认值为 null 值。 |  |BaseTableName |DBCOLUMN_BASETABLENAME |表或视图中包含的列的数据存储区的名称。 如果基表名称不能确定，null 值。 此列的默认值为 null 值。 |  |BaseColumnName |DBCOLUMN_BASECOLUMNNAME |数据存储区中的列的名称。 这可能是不同于返回 ColumnName 列中，如果使用了别名的列名称。 如果无法确定基列名称，或者如果派生的但并不完全相同，则行集列，数据中的列存储一个 null 值。 此列的默认值为 null 值。 |    &1;> [!NOTE]&1;> 若要确保元数据列返回正确的信息，必须调用<xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A>与`behavior`参数设置为`KeyInfo`。</xref:System.Data.OleDb.OleDbCommand.ExecuteReader%2A> 否则，一些架构表中的列可能返回默认情况下，null，或不正确的数据。"
  syntax:
    content: public override System.Data.DataTable GetSchemaTable ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>描述列元数据。"
  overload: System.Data.OleDb.OleDbDataReader.GetSchemaTable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;> </xref>已关闭。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: OleDbDataReader.GetString(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "字符串形式获取指定列的值。"
  remarks: "不进行任何转换;因此检索到的数据已必须是字符串。       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public override string GetString (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.String
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)
  id: GetTimeSpan(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetTimeSpan(Int32)
  nameWithType: OleDbDataReader.GetTimeSpan(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetTimeSpan(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值<xref:System.TimeSpan>对象。</xref:System.TimeSpan>"
  remarks: "不进行任何转换;因此，检索的数据必须已经是<xref:System.TimeSpan>对象。</xref:System.TimeSpan>       调用<xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>若要调用此方法之前寻找 null 值。</xref:System.Data.OleDb.OleDbDataReader.IsDBNull%2A>"
  syntax:
    content: public TimeSpan GetTimeSpan (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.TimeSpan
      description: "指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetTimeSpan*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "指定强制转换无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: OleDbDataReader.GetValue(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取以本机格式的指定序号处的列的值。"
  remarks: "此方法返回<xref:System.DBNull>null 数据库列。</xref:System.DBNull>"
  syntax:
    content: public override object GetValue (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Object
      description: "要返回的值。"
  overload: System.Data.OleDb.OleDbDataReader.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: OleDbDataReader.GetValues(Object[])
  fullName: System.Data.OleDb.OleDbDataReader.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "将填充使用当前行的列值的对象数组。"
  remarks: "对于大多数应用程序，GetValues 方法提供了一种高效的方法用于检索所有列，而不是单独都检索每个列。       你可以将传递<xref:System.Object>数组，其中包含的结果行中包含的列数少于。</xref:System.Object> 数据量<xref:System.Object>数组包含复制到数组。</xref:System.Object> 你还可以传递<xref:System.Object>其长度是多个结果行中包含的列数的数组。</xref:System.Object>       此方法返回<xref:System.DBNull>null 数据库列。</xref:System.DBNull>"
  example:
  - >-
    [!code-cs[OleDbDataReader_GetValues#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_12_1.cs)]
     [!code-vb[OleDbDataReader_GetValues#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_12_1.vb)]
  syntax:
    content: public override int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "数组<xref:System.Object>要将属性列复制到其中。</xref:System.Object>"
    return:
      type: System.Int32
      description: "实例数<xref:System.Object>数组中。</xref:System.Object>"
  overload: System.Data.OleDb.OleDbDataReader.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.HasRows
  id: HasRows
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: HasRows
  nameWithType: OleDbDataReader.HasRows
  fullName: System.Data.OleDb.OleDbDataReader.HasRows
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>包含一个或多个行。"
  syntax:
    content: public override bool HasRows { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>包含一个或多个行; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbDataReader.HasRows*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.IsClosed
  id: IsClosed
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: IsClosed
  nameWithType: OleDbDataReader.IsClosed
  fullName: System.Data.OleDb.OleDbDataReader.IsClosed
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "指示是否关闭数据读取器。"
  remarks: "关闭和<xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>是可以后调用的唯一属性<xref:System.Data.OleDb.OleDbDataReader>已关闭。</xref:System.Data.OleDb.OleDbDataReader> </xref:System.Data.OleDb.OleDbDataReader.RecordsAffected%2A>"
  syntax:
    content: public override bool IsClosed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>已关闭; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbDataReader.IsClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: OleDbDataReader.IsDBNull(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取一个值，该值指示列是否包含不存在或丢失的值。"
  remarks: "调用此方法以查找前调用的类型化的 null 列值 get 方法 (例如， <xref:System.Data.OleDb.OleDbDataReader.GetByte%2A>， <xref:System.Data.OleDb.OleDbDataReader.GetChar%2A>，依次类推) 以避免产生一个错误。</xref:System.Data.OleDb.OleDbDataReader.GetChar%2A> </xref:System.Data.OleDb.OleDbDataReader.GetByte%2A>"
  syntax:
    content: public override bool IsDBNull (int ordinal);
    parameters:
    - id: ordinal
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的列值等效于<xref href=&quot;System.DBNull&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbDataReader.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: OleDbDataReader.Item(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值以本机格式在给定列序号。"
  syntax:
    content: public override object this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "列序号。"
    return:
      type: System.Object
      description: "以本机格式指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: Item(String)
  nameWithType: OleDbDataReader.Item(String)
  fullName: System.Data.OleDb.OleDbDataReader.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取指定列的值以本机格式在给定列名称。"
  remarks: "第一次执行区分大小写的查找。 如果失败，进行第二个的不区分大小写搜索。       此方法是不区分假名宽度。"
  syntax:
    content: public override object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "列名称。"
    return:
      type: System.Object
      description: "以本机格式指定列的值。"
  overload: System.Data.OleDb.OleDbDataReader.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "找到具有指定名称没有列。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.NextResult
  id: NextResult
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: NextResult()
  nameWithType: OleDbDataReader.NextResult()
  fullName: System.Data.OleDb.OleDbDataReader.NextResult()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "在读取批处理的 SQL 语句的结果时，将数据读取器推进到下一个结果。"
  remarks: "用于处理可以由执行批处理 SQL 语句生成的多个结果。       默认情况下，数据读取器定位在的第一个结果中。"
  syntax:
    content: public override bool NextResult ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多个结果集;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbDataReader.NextResult*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.Read
  id: Read
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: Read()
  nameWithType: OleDbDataReader.Read()
  fullName: System.Data.OleDb.OleDbDataReader.Read()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "推进<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>到下一个记录。"
  remarks: "默认位置<xref:System.Data.OleDb.OleDbDataReader>之前第一条记录。</xref:System.Data.OleDb.OleDbDataReader> 因此，必须调用读取开始访问任何数据。       虽然<xref:System.Data.OleDb.OleDbDataReader>正在使用中，关联<xref:System.Data.OleDb.OleDbConnection>忙于处理它直到你调用<xref:System.Data.OleDb.OleDbDataReader.Close%2A>.</xref:System.Data.OleDb.OleDbDataReader.Close%2A> </xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbDataReader>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbConnection>, an <xref:System.Data.OleDb.OleDbCommand>, and an <xref:System.Data.OleDb.OleDbDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.OleDb.OleDbDataReader> and then the <xref:System.Data.OleDb.OleDbConnection>.  \n  \n [!code-cs[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_6_1.cs)]\n [!code-vb[Classic WebData IDataReader.Read Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_6_1.vb)]"
  syntax:
    content: public override bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果有多个行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbDataReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: RecordsAffected
  nameWithType: OleDbDataReader.RecordsAffected
  fullName: System.Data.OleDb.OleDbDataReader.RecordsAffected
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取更改、 插入或删除通过执行 SQL 语句的行数。"
  remarks: "直到读取了所有行并关闭<xref:System.Data.OleDb.OleDbDataReader>.</xref:System.Data.OleDb.OleDbDataReader> RecordsAffected 属性未设置       此属性的值是累积的。 例如，如果两条记录插入在批处理模式下，RecordsAffected 的值是两个。       <xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A>和 RecordsAffected 是可以后调用的唯一属性<xref:System.Data.OleDb.OleDbDataReader>已关闭。</xref:System.Data.OleDb.OleDbDataReader></xref:System.Data.OleDb.OleDbDataReader.IsClosed%2A>"
  syntax:
    content: public override int RecordsAffected { get; }
    return:
      type: System.Int32
      description: "更改、 插入或删除; 的行数如果任何行受不影响的 0 或语句失败;和 SELECT 语句的-1。"
  overload: System.Data.OleDb.OleDbDataReader.RecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.OleDb.OleDbDataReader
  langs:
  - csharp
  name: VisibleFieldCount
  nameWithType: OleDbDataReader.VisibleFieldCount
  fullName: System.Data.OleDb.OleDbDataReader.VisibleFieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取的字段数目<xref href=&quot;System.Data.OleDb.OleDbDataReader&quot;></xref>中未隐藏。"
  remarks: "此值用于确定在字段的数目<xref:System.Data.OleDb.OleDbDataReader>可见。</xref:System.Data.OleDb.OleDbDataReader> 例如，对分部主键 SELECT 返回密钥的剩余部分作为隐藏的字段。 隐藏的字段始终追加在可见字段之后。"
  syntax:
    content: public override int VisibleFieldCount { get; }
    return:
      type: System.Int32
      description: "未隐藏的字段数。"
  overload: System.Data.OleDb.OleDbDataReader.VisibleFieldCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataReader
  isExternal: false
  name: System.Data.Common.DbDataReader
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.OleDb.OleDbDataReader.Close
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Close()
  nameWithType: OleDbDataReader.Close()
  fullName: System.Data.OleDb.OleDbDataReader.Close()
- uid: System.Data.OleDb.OleDbDataReader.Depth
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Depth
  nameWithType: OleDbDataReader.Depth
  fullName: System.Data.OleDb.OleDbDataReader.Depth
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OleDb.OleDbDataReader.FieldCount
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OleDbDataReader.FieldCount
  fullName: System.Data.OleDb.OleDbDataReader.FieldCount
- uid: System.Data.OleDb.OleDbDataReader.GetBoolean(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: OleDbDataReader.GetBoolean(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OleDb.OleDbDataReader.GetByte(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetByte(Int32)
  nameWithType: OleDbDataReader.GetByte(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.OleDb.OleDbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: OleDbDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbDataReader.GetChar(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetChar(Int32)
  nameWithType: OleDbDataReader.GetChar(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.OleDb.OleDbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: OleDbDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbDataReader.GetData(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetData(Int32)
  nameWithType: OleDbDataReader.GetData(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetData(Int32)
- uid: System.Data.OleDb.OleDbDataReader
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbDataReader
  nameWithType: OleDbDataReader
  fullName: System.Data.OleDb.OleDbDataReader
- uid: System.Data.OleDb.OleDbDataReader.GetDataTypeName(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: OleDbDataReader.GetDataTypeName(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbDataReader.GetDateTime(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: OleDbDataReader.GetDateTime(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.OleDb.OleDbDataReader.GetDbDataReader(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDbDataReader(Int32)
  nameWithType: OleDbDataReader.GetDbDataReader(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDbDataReader(Int32)
- uid: System.Data.OleDb.OleDbDataReader.GetDecimal(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: OleDbDataReader.GetDecimal(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.OleDb.OleDbDataReader.GetDouble(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: OleDbDataReader.GetDouble(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.OleDb.OleDbDataReader.GetEnumerator
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetEnumerator()
  nameWithType: OleDbDataReader.GetEnumerator()
  fullName: System.Data.OleDb.OleDbDataReader.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.OleDb.OleDbDataReader.GetFieldType(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: OleDbDataReader.GetFieldType(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.OleDb.OleDbDataReader.GetFloat(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: OleDbDataReader.GetFloat(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.OleDb.OleDbDataReader.GetGuid(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: OleDbDataReader.GetGuid(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.OleDb.OleDbDataReader.GetInt16(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: OleDbDataReader.GetInt16(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.OleDb.OleDbDataReader.GetInt32(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: OleDbDataReader.GetInt32(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt32(Int32)
- uid: System.Data.OleDb.OleDbDataReader.GetInt64(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: OleDbDataReader.GetInt64(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetInt64(Int32)
- uid: System.Data.OleDb.OleDbDataReader.GetName(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetName(Int32)
  nameWithType: OleDbDataReader.GetName(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetName(Int32)
- uid: System.Data.OleDb.OleDbDataReader.GetOrdinal(System.String)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: OleDbDataReader.GetOrdinal(String)
  fullName: System.Data.OleDb.OleDbDataReader.GetOrdinal(String)
- uid: System.Data.OleDb.OleDbDataReader.GetSchemaTable
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: OleDbDataReader.GetSchemaTable()
  fullName: System.Data.OleDb.OleDbDataReader.GetSchemaTable()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.OleDb.OleDbDataReader.GetString(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetString(Int32)
  nameWithType: OleDbDataReader.GetString(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetString(Int32)
- uid: System.Data.OleDb.OleDbDataReader.GetTimeSpan(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetTimeSpan(Int32)
  nameWithType: OleDbDataReader.GetTimeSpan(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetTimeSpan(Int32)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.OleDb.OleDbDataReader.GetValue(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetValue(Int32)
  nameWithType: OleDbDataReader.GetValue(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.GetValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbDataReader.GetValues(System.Object[])
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetValues(Object[])
  nameWithType: OleDbDataReader.GetValues(Object[])
  fullName: System.Data.OleDb.OleDbDataReader.GetValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OleDb.OleDbDataReader.HasRows
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: HasRows
  nameWithType: OleDbDataReader.HasRows
  fullName: System.Data.OleDb.OleDbDataReader.HasRows
- uid: System.Data.OleDb.OleDbDataReader.IsClosed
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OleDbDataReader.IsClosed
  fullName: System.Data.OleDb.OleDbDataReader.IsClosed
- uid: System.Data.OleDb.OleDbDataReader.IsDBNull(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: OleDbDataReader.IsDBNull(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.IsDBNull(Int32)
- uid: System.Data.OleDb.OleDbDataReader.Item(System.Int32)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Item(Int32)
  nameWithType: OleDbDataReader.Item(Int32)
  fullName: System.Data.OleDb.OleDbDataReader.Item(Int32)
- uid: System.Data.OleDb.OleDbDataReader.Item(System.String)
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Item(String)
  nameWithType: OleDbDataReader.Item(String)
  fullName: System.Data.OleDb.OleDbDataReader.Item(String)
- uid: System.Data.OleDb.OleDbDataReader.NextResult
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: NextResult()
  nameWithType: OleDbDataReader.NextResult()
  fullName: System.Data.OleDb.OleDbDataReader.NextResult()
- uid: System.Data.OleDb.OleDbDataReader.Read
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Read()
  nameWithType: OleDbDataReader.Read()
  fullName: System.Data.OleDb.OleDbDataReader.Read()
- uid: System.Data.OleDb.OleDbDataReader.RecordsAffected
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OleDbDataReader.RecordsAffected
  fullName: System.Data.OleDb.OleDbDataReader.RecordsAffected
- uid: System.Data.OleDb.OleDbDataReader.VisibleFieldCount
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: OleDbDataReader.VisibleFieldCount
  fullName: System.Data.OleDb.OleDbDataReader.VisibleFieldCount
- uid: System.Data.OleDb.OleDbDataReader.Close*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Close
  nameWithType: OleDbDataReader.Close
- uid: System.Data.OleDb.OleDbDataReader.Depth*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Depth
  nameWithType: OleDbDataReader.Depth
- uid: System.Data.OleDb.OleDbDataReader.FieldCount*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: FieldCount
  nameWithType: OleDbDataReader.FieldCount
- uid: System.Data.OleDb.OleDbDataReader.GetBoolean*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetBoolean
  nameWithType: OleDbDataReader.GetBoolean
- uid: System.Data.OleDb.OleDbDataReader.GetByte*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetByte
  nameWithType: OleDbDataReader.GetByte
- uid: System.Data.OleDb.OleDbDataReader.GetBytes*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetBytes
  nameWithType: OleDbDataReader.GetBytes
- uid: System.Data.OleDb.OleDbDataReader.GetChar*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetChar
  nameWithType: OleDbDataReader.GetChar
- uid: System.Data.OleDb.OleDbDataReader.GetChars*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetChars
  nameWithType: OleDbDataReader.GetChars
- uid: System.Data.OleDb.OleDbDataReader.GetData*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetData
  nameWithType: OleDbDataReader.GetData
- uid: System.Data.OleDb.OleDbDataReader.GetDataTypeName*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDataTypeName
  nameWithType: OleDbDataReader.GetDataTypeName
- uid: System.Data.OleDb.OleDbDataReader.GetDateTime*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDateTime
  nameWithType: OleDbDataReader.GetDateTime
- uid: System.Data.OleDb.OleDbDataReader.GetDbDataReader*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDbDataReader
  nameWithType: OleDbDataReader.GetDbDataReader
- uid: System.Data.OleDb.OleDbDataReader.GetDecimal*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDecimal
  nameWithType: OleDbDataReader.GetDecimal
- uid: System.Data.OleDb.OleDbDataReader.GetDouble*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetDouble
  nameWithType: OleDbDataReader.GetDouble
- uid: System.Data.OleDb.OleDbDataReader.GetEnumerator*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetEnumerator
  nameWithType: OleDbDataReader.GetEnumerator
- uid: System.Data.OleDb.OleDbDataReader.GetFieldType*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetFieldType
  nameWithType: OleDbDataReader.GetFieldType
- uid: System.Data.OleDb.OleDbDataReader.GetFloat*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetFloat
  nameWithType: OleDbDataReader.GetFloat
- uid: System.Data.OleDb.OleDbDataReader.GetGuid*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetGuid
  nameWithType: OleDbDataReader.GetGuid
- uid: System.Data.OleDb.OleDbDataReader.GetInt16*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt16
  nameWithType: OleDbDataReader.GetInt16
- uid: System.Data.OleDb.OleDbDataReader.GetInt32*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt32
  nameWithType: OleDbDataReader.GetInt32
- uid: System.Data.OleDb.OleDbDataReader.GetInt64*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetInt64
  nameWithType: OleDbDataReader.GetInt64
- uid: System.Data.OleDb.OleDbDataReader.GetName*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetName
  nameWithType: OleDbDataReader.GetName
- uid: System.Data.OleDb.OleDbDataReader.GetOrdinal*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetOrdinal
  nameWithType: OleDbDataReader.GetOrdinal
- uid: System.Data.OleDb.OleDbDataReader.GetSchemaTable*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetSchemaTable
  nameWithType: OleDbDataReader.GetSchemaTable
- uid: System.Data.OleDb.OleDbDataReader.GetString*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetString
  nameWithType: OleDbDataReader.GetString
- uid: System.Data.OleDb.OleDbDataReader.GetTimeSpan*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetTimeSpan
  nameWithType: OleDbDataReader.GetTimeSpan
- uid: System.Data.OleDb.OleDbDataReader.GetValue*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetValue
  nameWithType: OleDbDataReader.GetValue
- uid: System.Data.OleDb.OleDbDataReader.GetValues*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: GetValues
  nameWithType: OleDbDataReader.GetValues
- uid: System.Data.OleDb.OleDbDataReader.HasRows*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: HasRows
  nameWithType: OleDbDataReader.HasRows
- uid: System.Data.OleDb.OleDbDataReader.IsClosed*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: IsClosed
  nameWithType: OleDbDataReader.IsClosed
- uid: System.Data.OleDb.OleDbDataReader.IsDBNull*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: IsDBNull
  nameWithType: OleDbDataReader.IsDBNull
- uid: System.Data.OleDb.OleDbDataReader.Item*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Item
  nameWithType: OleDbDataReader.Item
- uid: System.Data.OleDb.OleDbDataReader.NextResult*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: NextResult
  nameWithType: OleDbDataReader.NextResult
- uid: System.Data.OleDb.OleDbDataReader.Read*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: Read
  nameWithType: OleDbDataReader.Read
- uid: System.Data.OleDb.OleDbDataReader.RecordsAffected*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: OleDbDataReader.RecordsAffected
- uid: System.Data.OleDb.OleDbDataReader.VisibleFieldCount*
  parent: System.Data.OleDb.OleDbDataReader
  isExternal: false
  name: VisibleFieldCount
  nameWithType: OleDbDataReader.VisibleFieldCount
