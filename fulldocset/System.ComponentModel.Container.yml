### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Container
  id: Container
  children:
  - System.ComponentModel.Container.#ctor
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Components
  - System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Dispose
  - System.ComponentModel.Container.Dispose(System.Boolean)
  - System.ComponentModel.Container.Finalize
  - System.ComponentModel.Container.GetService(System.Type)
  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  langs:
  - csharp
  name: Container
  nameWithType: Container
  fullName: System.ComponentModel.Container
  type: Class
  summary: "封装零个或多个组件。"
  remarks: "容器类是的默认实现<xref:System.ComponentModel.IContainer>接口。</xref:System.ComponentModel.IContainer>       容器是封装并跟踪零个或多个组件的对象。 在此上下文中，包含引用逻辑包容，而不是直观包容。 你可以使用组件和容器中的各种方案，包括 visual 和非可视化的方案。       在第一个中先进先出列表，它还定义容器内的组件的顺序中，容器中的组件进行跟踪。 添加的组件将追加到列表的末尾。"
  syntax:
    content: 'public class Container : IDisposable, System.ComponentModel.IContainer'
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.IContainer
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Container.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Container()
  nameWithType: Container.Container()
  fullName: System.ComponentModel.Container.Container()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Container&quot;></xref>类。"
  syntax:
    content: public Container ();
    parameters: []
  overload: System.ComponentModel.Container.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  id: Add(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Add(IComponent)
  nameWithType: Container.Add(IComponent)
  fullName: System.ComponentModel.Container.Add(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将指定的<xref href=&quot;System.ComponentModel.Component&quot;></xref>到<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。 组件是未命名的。"
  remarks: "此方法由派生类中重写。       新<xref:System.ComponentModel.Component>添加到列表的末尾。</xref:System.ComponentModel.Component>"
  syntax:
    content: public virtual void Add (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "要添加的组件。"
  overload: System.ComponentModel.Container.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  id: Add(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Add(IComponent,String)
  nameWithType: Container.Add(IComponent,String)
  fullName: System.ComponentModel.Container.Add(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将指定的<xref href=&quot;System.ComponentModel.Component&quot;></xref>到<xref href=&quot;System.ComponentModel.Container&quot;></xref>并将其分配一个名称。"
  remarks: "此方法由派生类中重写。       新<xref:System.ComponentModel.Component>添加到列表的末尾。</xref:System.ComponentModel.Component>"
  syntax:
    content: public virtual void Add (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "要添加的组件。"
    - id: name
      type: System.String
      description: "唯一不区分大小写的名称将分配给该组件。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，它使未命名的组件。"
  overload: System.ComponentModel.Container.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>不是唯一的。"
  platform:
  - net462
- uid: System.ComponentModel.Container.Components
  id: Components
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Components
  nameWithType: Container.Components
  fullName: System.ComponentModel.Container.Components
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取所有组件中<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。"
  remarks: "此方法由派生类中重写。       由于添加到<xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container>集合中的组件存储在相同的顺序"
  syntax:
    content: public virtual System.ComponentModel.ComponentCollection Components { get; }
    return:
      type: System.ComponentModel.ComponentCollection
      description: "一个包含中的组件集合<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。"
  overload: System.ComponentModel.Container.Components*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  id: CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: CreateSite(IComponent,String)
  nameWithType: Container.CreateSite(IComponent,String)
  fullName: System.ComponentModel.Container.CreateSite(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建一个站点<xref href=&quot;System.ComponentModel.ISite&quot;></xref>为给定<xref href=&quot;System.ComponentModel.IComponent&quot;></xref>和分配到站点的给定名称。"
  remarks: "如果`name`参数是`null`、<xref:System.ComponentModel.IComponent>添加到<xref:System.ComponentModel.Container>没有标识的名称。</xref:System.ComponentModel.Container> </xref:System.ComponentModel.IComponent>       此方法由派生类中重写。 需要重写 CreateSite 方法的实现程序可以提供通过实现的类的自定义实现<xref:System.ComponentModel.ISite>接口。</xref:System.ComponentModel.ISite>"
  syntax:
    content: protected virtual System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>若要创建一个站点。"
    - id: name
      type: System.String
      description: "要分配给名称`component`，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要跳过的名称分配。"
    return:
      type: System.ComponentModel.ISite
      description: "新创建的网站。"
  overload: System.ComponentModel.Container.CreateSite*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Dispose
  id: Dispose
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Dispose()
  nameWithType: Container.Dispose()
  fullName: System.ComponentModel.Container.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放使用的所有资源<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。"
  remarks: "调用<xref:System.ComponentModel.Container.Dispose%2A>在完成使用<xref:System.ComponentModel.Container>.</xref:System.ComponentModel.Container>时</xref:System.ComponentModel.Container.Dispose%2A> <xref:System.ComponentModel.Container.Dispose%2A>方法使<xref:System.ComponentModel.Container>中不可用状态。</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> 在调用<xref:System.ComponentModel.Container.Dispose%2A>，必须释放对所有引用<xref:System.ComponentModel.Container>以便垃圾回收器才能回收的内存，<xref:System.ComponentModel.Container>占用。</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container.Dispose%2A> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用<xref:System.ComponentModel.Container.Dispose%2A>发布到<xref:System.ComponentModel.Container>。</xref:System.ComponentModel.Container>最后一个引用之前</xref:System.ComponentModel.Container.Dispose%2A> 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.ComponentModel.Container>对象的`Finalize`方法。</xref:System.ComponentModel.Container>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Container.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Container.Dispose(Boolean)
  fullName: System.ComponentModel.Container.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放由非托管的资源<xref href=&quot;System.ComponentModel.Container&quot;> </xref>，，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.ComponentModel.Container>引用。</xref:System.ComponentModel.Container> 此方法调用`Dispose`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.ComponentModel.Container.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Finalize
  id: Finalize
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Finalize()
  nameWithType: Container.Finalize()
  fullName: System.ComponentModel.Container.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放非托管的资源并执行其他清理操作之前<xref href=&quot;System.ComponentModel.Container&quot;></xref>通过垃圾回收回收。"
  remarks: "此方法将替代<xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> 应用程序代码不应调用此方法。对象的`Finalize`方法过程中将自动调用垃圾回收，除非已通过调用禁用垃圾回收器的终止<xref:System.GC.SuppressFinalize%2A>方法。</xref:System.GC.SuppressFinalize%2A>       有关详细信息，请参阅[Finalize 方法和析构函数](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)，[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)，和[重写 Finalize 方法](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。"
  syntax:
    content: ~Container ();
    parameters: []
  overload: System.ComponentModel.Container.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: Container.GetService(Type)
  fullName: System.ComponentModel.Container.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "如果可用，请获取指定类型的服务对象。"
  remarks: "此方法的默认实现返回类的当前实例，如果`service`是<xref:System.ComponentModel.IContainer>; 否则为它将返回`null`。</xref:System.ComponentModel.IContainer> 你可以重写该方法以提供自定义实现可返回一个服务对象。 有关详细信息，请参阅<xref:System.IServiceProvider.GetService%2A?displayProperty=fullName>方法。</xref:System.IServiceProvider.GetService%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "<xref:System.Type>要检索的服务。</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>实现请求的服务，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果无法解析服务。</xref:System.Object>"
  overload: System.ComponentModel.Container.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  id: Remove(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: Remove(IComponent)
  nameWithType: Container.Remove(IComponent)
  fullName: System.ComponentModel.Container.Remove(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除的组件<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。"
  remarks: "此方法由派生类中重写。"
  syntax:
    content: public virtual void Remove (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "要删除的组件。"
  overload: System.ComponentModel.Container.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  id: RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: RemoveWithoutUnsiting(IComponent)
  nameWithType: Container.RemoveWithoutUnsiting(IComponent)
  fullName: System.ComponentModel.Container.RemoveWithoutUnsiting(IComponent)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除的组件<xref href=&quot;System.ComponentModel.Container&quot;></xref>但不包括设置<xref:System.ComponentModel.IComponent.Site*>到<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.IComponent.Site*>"
  remarks: "RemoveWithoutUnsiting 方法清理站点像往常一样，但不设置组件的<xref:System.ComponentModel.IComponent.Site%2A>属性`null`。</xref:System.ComponentModel.IComponent.Site%2A>"
  syntax:
    content: protected void RemoveWithoutUnsiting (System.ComponentModel.IComponent component);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "要删除的组件。"
  overload: System.ComponentModel.Container.RemoveWithoutUnsiting*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  id: ValidateName(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  langs:
  - csharp
  name: ValidateName(IComponent,String)
  nameWithType: Container.ValidateName(IComponent,String)
  fullName: System.ComponentModel.Container.ValidateName(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定该组件名称是否唯一为此容器。"
  remarks: "调用 ValidateName 方法<xref:System.ComponentModel.Container.Add%2A>方法可确定的名称`component`正在增加了对此<xref:System.ComponentModel.Container>。</xref:System.ComponentModel.Container>唯一</xref:System.ComponentModel.Container.Add%2A> 如果`name`参数不是`null`并且不是唯一的<xref:System.ArgumentException>引发。</xref:System.ArgumentException>"
  syntax:
    content: protected virtual void ValidateName (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "命名的组件。"
    - id: name
      type: System.String
      description: "要验证的组件名称。"
  overload: System.ComponentModel.Container.ValidateName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>不是唯一的。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Container.#ctor
  parent: System.ComponentModel.Container
  isExternal: false
  name: Container()
  nameWithType: Container.Container()
  fullName: System.ComponentModel.Container.Container()
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add(IComponent)
  nameWithType: Container.Add(IComponent)
  fullName: System.ComponentModel.Container.Add(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add(IComponent,String)
  nameWithType: Container.Add(IComponent,String)
  fullName: System.ComponentModel.Container.Add(IComponent,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Container.Components
  parent: System.ComponentModel.Container
  isExternal: false
  name: Components
  nameWithType: Container.Components
  fullName: System.ComponentModel.Container.Components
- uid: System.ComponentModel.ComponentCollection
  parent: System.ComponentModel
  isExternal: false
  name: ComponentCollection
  nameWithType: ComponentCollection
  fullName: System.ComponentModel.ComponentCollection
- uid: System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: CreateSite(IComponent,String)
  nameWithType: Container.CreateSite(IComponent,String)
  fullName: System.ComponentModel.Container.CreateSite(IComponent,String)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.ComponentModel.Container.Dispose
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose()
  nameWithType: Container.Dispose()
  fullName: System.ComponentModel.Container.Dispose()
- uid: System.ComponentModel.Container.Dispose(System.Boolean)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Container.Dispose(Boolean)
  fullName: System.ComponentModel.Container.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Container.Finalize
  parent: System.ComponentModel.Container
  isExternal: false
  name: Finalize()
  nameWithType: Container.Finalize()
  fullName: System.ComponentModel.Container.Finalize()
- uid: System.ComponentModel.Container.GetService(System.Type)
  parent: System.ComponentModel.Container
  isExternal: false
  name: GetService(Type)
  nameWithType: Container.GetService(Type)
  fullName: System.ComponentModel.Container.GetService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: Remove(IComponent)
  nameWithType: Container.Remove(IComponent)
  fullName: System.ComponentModel.Container.Remove(IComponent)
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Container
  isExternal: false
  name: RemoveWithoutUnsiting(IComponent)
  nameWithType: Container.RemoveWithoutUnsiting(IComponent)
  fullName: System.ComponentModel.Container.RemoveWithoutUnsiting(IComponent)
- uid: System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Container
  isExternal: false
  name: ValidateName(IComponent,String)
  nameWithType: Container.ValidateName(IComponent,String)
  fullName: System.ComponentModel.Container.ValidateName(IComponent,String)
- uid: System.ComponentModel.Container.#ctor*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Container
  nameWithType: Container.Container
- uid: System.ComponentModel.Container.Add*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Add
  nameWithType: Container.Add
- uid: System.ComponentModel.Container.Components*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Components
  nameWithType: Container.Components
- uid: System.ComponentModel.Container.CreateSite*
  parent: System.ComponentModel.Container
  isExternal: false
  name: CreateSite
  nameWithType: Container.CreateSite
- uid: System.ComponentModel.Container.Dispose*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Dispose
  nameWithType: Container.Dispose
- uid: System.ComponentModel.Container.Finalize*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Finalize
  nameWithType: Container.Finalize
- uid: System.ComponentModel.Container.GetService*
  parent: System.ComponentModel.Container
  isExternal: false
  name: GetService
  nameWithType: Container.GetService
- uid: System.ComponentModel.Container.Remove*
  parent: System.ComponentModel.Container
  isExternal: false
  name: Remove
  nameWithType: Container.Remove
- uid: System.ComponentModel.Container.RemoveWithoutUnsiting*
  parent: System.ComponentModel.Container
  isExternal: false
  name: RemoveWithoutUnsiting
  nameWithType: Container.RemoveWithoutUnsiting
- uid: System.ComponentModel.Container.ValidateName*
  parent: System.ComponentModel.Container
  isExternal: false
  name: ValidateName
  nameWithType: Container.ValidateName
