### YamlMime:ManagedReference
items:
- uid: System.Collections.SortedList
  id: SortedList
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
  type: Class
  summary: "表示按键排序并可按照键和索引访问的键/值对的集合。"
  remarks: "此集合的泛型版本，请参阅<xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>。</xref:System.Collections.Generic.SortedList%602?displayProperty=fullName>       SortedList 元素可以访问由键，像在任何元素<xref:System.Collections.IDictionary>实现，或通过其索引，像在任何元素<xref:System.Collections.IList>实现。</xref:System.Collections.IList> </xref:System.Collections.IDictionary>       SortedList 对象在内部维护两个数组存储的列表; 元素键和关联的值的另一个数组，它是一个数组。 每个元素都是可作为访问键/值对<xref:System.Collections.DictionaryEntry>对象。</xref:System.Collections.DictionaryEntry> 密钥不能为`null`，但可以是一个值。       SortedList 对象的容量是 SortedList 能够容纳的元素数。 当元素添加到 SortedList 时，自动增加容量通过重新分配所需的方式。 可以通过调用减少容量<xref:System.Collections.SortedList.TrimToSize%2A>或通过设置<xref:System.Collections.SortedList.Capacity%2A>属性显式。</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A>       对于非常大 SortedList 对象，你可以通过设置增加到 20 亿元素在 64 位系统上的最大容量`enabled`到的配置元素的属性`true`在运行时环境中。       SortedList 对象的元素进行排序的键是根据特定<xref:System.Collections.IComparer>指定当创建 SortedList 或根据实现<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.IComparer> 在任一情况下，SortedList 不允许重复键。       索引序列基于排序顺序。 添加的元素，它正确的排序顺序中，插入到 SortedList 而索引会相应地调整。 在删除某个元素后，索引也相应地调整。 因此，添加或从 SortedList 对象中删除元素时，可能会更改特定键/值对的索引。       SortedList 对象上的操作往往速度要慢于对操作<xref:System.Collections.Hashtable>由于排序的对象。</xref:System.Collections.Hashtable> 但是，SortedList 提供更大的灵活性，通过允许对值的访问，可以通过在相关的键或索引。       可以使用整数索引访问此集合中的元素。  在此集合中的索引是从零开始。       `foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 返回集合中的元素的类型的对象。 由于 SortedList 对象的每个元素是键/值对，元素类型不是键的类型或值的类型。 相反，元素类型是<xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> 例如︰ [!code-cpp[经典 SortedList 第二个示例](~/add/codesnippet/cpp/t-system.collections.sor_1.cpp)][!code-cs[经典 SortedList 第二个示例](~/add/codesnippet/csharp/t-system.collections.sor_1.cs)][!code-vb[经典 SortedList 第二个示例](~/add/codesnippet/visualbasic/t-system.collections.sor_1.vb)] `foreach`语句是枚举器，允许从，不写入集合只能读取允许周围的包装器。    "
  example:
  - "The following code example shows how to create and initialize a SortedList object and how to print out its keys and values.  \n  \n [!code-cpp[Classic SortedList Example#1](~/add/codesnippet/cpp/t-system.collections.sor_2.cpp)]\n [!code-cs[Classic SortedList Example#1](~/add/codesnippet/csharp/t-system.collections.sor_2.cs)]\n [!code-vb[Classic SortedList Example#1](~/add/codesnippet/visualbasic/t-system.collections.sor_2.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.SortedList/SortedListDebugView))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortedList : ICloneable, System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类为空，具有默认初始容量，并且根据排序<xref:System.IComparable>由每个密钥添加到实现接口<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.IComparable>"
  remarks: "每个键必须实现<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> 对元素进行排序<xref:System.IComparable>的每个密钥添加到<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>实现</xref:System.IComparable>根据       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 o （1） 操作。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_7_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_7_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_7_1.cpp)]"
  syntax:
    content: public SortedList ();
    parameters: []
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类为空，具有默认初始容量，并且排序按照指定<xref:System.Collections.IComparer>接口。</xref:System.Collections.IComparer>"
  remarks: "对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</xref:System.Collections.IComparer> 如果`comparer`参数是`null`、<xref:System.IComparable>使用的每个键的实现; 因此，必须实现每个键<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 o （1） 操作。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctor#1](~/add/codesnippet/csharp/m-system.collections.sor_18_1.cs)]\n [!code-vb[System.Collections.SortedList_ctor#1](~/add/codesnippet/visualbasic/m-system.collections.sor_18_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctor#1](~/add/codesnippet/cpp/m-system.collections.sor_18_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>实现对键进行比较时使用。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>实现的每个键。</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类，该类包含从指定的字典中，复制的元素已复制的元素数相同的初始容量，并且根据排序<xref:System.IComparable>接口实现的每个键。</xref:System.IComparable>"
  remarks: "每个键必须实现<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> 对元素进行排序<xref:System.IComparable>的每个密钥添加到<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>实现</xref:System.IComparable>根据       A<xref:System.Collections.Hashtable>对象是一种<xref:System.Collections.IDictionary>可以传递给此构造函数的实现。</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> 新<xref:System.Collections.SortedList>对象包含的键和值存储在<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>一份</xref:System.Collections.SortedList>       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 O (`n`) 操作，其中`n`是中的元素数`d`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/m-system.collections.sor_9_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/m-system.collections.sor_9_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/m-system.collections.sor_9_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>实现，以将复制到新<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IDictionary>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "中的一个或多个元素<code> d </code>未实现<xref:System.IComparable>接口。</xref:System.IComparable>"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类为空且具有指定的初始容量，并且根据排序<xref:System.IComparable>由每个密钥添加到实现接口<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.IComparable>"
  remarks: "每个键必须实现<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> 对元素进行排序<xref:System.IComparable>的每个密钥添加到<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>实现</xref:System.IComparable>根据       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 O (`n`) 操作，其中`n`是`initialCapacity`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/m-system.collections.sor_15_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/m-system.collections.sor_15_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/m-system.collections.sor_15_1.cpp)]"
  syntax:
    content: public SortedList (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: "初始元素数的<xref href=&quot;System.Collections.SortedList&quot;></xref>对象可以包含。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>initialCapacity</code>小于零。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是内存不足，无法创建<xref href=&quot;System.Collections.SortedList&quot;></xref>使用指定的对象<code> initialCapacity </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类为空，具有指定的初始容量，并且排序按照指定<xref:System.Collections.IComparer>接口。</xref:System.Collections.IComparer>"
  remarks: "对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</xref:System.Collections.IComparer> 如果`comparer`参数是`null`、<xref:System.IComparable>使用的每个键的实现; 因此，必须实现每个键<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 O (`n`) 操作，其中`n`是`capacity`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cs[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/csharp/1806b376-56fc-45e2-aff7-_1.cs)]\n [!code-vb[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/visualbasic/1806b376-56fc-45e2-aff7-_1.vb)]\n [!code-cpp[System.Collections.SortedList_ctorInt#1](~/add/codesnippet/cpp/1806b376-56fc-45e2-aff7-_1.cpp)]"
  syntax:
    content: public SortedList (System.Collections.IComparer comparer, int capacity);
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>实现对键进行比较时使用。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>实现的每个键。</xref:System.IComparable>"
    - id: capacity
      type: System.Int32
      description: "初始元素数的<xref href=&quot;System.Collections.SortedList&quot;></xref>对象可以包含。"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小于零。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是内存不足，无法创建<xref href=&quot;System.Collections.SortedList&quot;></xref>使用指定的对象<code> capacity </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.SortedList&quot;></xref>类，该类包含从指定的字典中，复制的元素已复制的元素数相同的初始容量，并且排序按照指定<xref:System.Collections.IComparer>接口。</xref:System.Collections.IComparer>"
  remarks: "对元素进行排序按照指定<xref:System.Collections.IComparer>实现。</xref:System.Collections.IComparer> 如果`comparer`参数是`null`、<xref:System.IComparable>使用的每个键的实现; 因此，必须实现每个键<xref:System.IComparable>接口，才能与中的其他所有键的比较<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.IComparable> </xref:System.IComparable>       A<xref:System.Collections.Hashtable>对象是一种<xref:System.Collections.IDictionary>可以传递给此构造函数的实现。</xref:System.Collections.IDictionary> </xref:System.Collections.Hashtable> 新<xref:System.Collections.SortedList>对象包含的键和值存储在<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>一份</xref:System.Collections.SortedList>       容量<xref:System.Collections.SortedList>对象是元素的数目，<xref:System.Collections.SortedList>可以容纳。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 如元素添加到<xref:System.Collections.SortedList>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.SortedList>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此构造函数是 O (`n`) 操作，其中`n`是中的元素数`d`。"
  example:
  - "The following code example creates collections using different <xref:System.Collections.SortedList> constructors and demonstrates the differences in the behavior of the collections.  \n  \n [!code-cpp[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/cpp/653e16d8-524e-4544-8674-_1.cpp)]\n [!code-vb[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/visualbasic/653e16d8-524e-4544-8674-_1.vb)]\n [!code-cs[System.Collections.SortedList_ctorDictionary#1](~/add/codesnippet/csharp/653e16d8-524e-4544-8674-_1.cs)]"
  syntax:
    content: public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);
    parameters:
    - id: d
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>实现，以将复制到新<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IDictionary>"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>实现对键进行比较时使用。</xref:System.Collections.IComparer>       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>使用<xref:System.IComparable>实现的每个键。</xref:System.IComparable>"
  overload: System.Collections.SortedList.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>d</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>comparer</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，和中的一个或多个元素<code>d</code>未实现<xref:System.IComparable>接口。"
  platform:
  - net462
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "添加一个带有指定的键和值的元素<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "插入点根据显式或默认情况下，选择的比较器确定当<xref:System.Collections.SortedList>创建对象。</xref:System.Collections.SortedList>       如果<xref:System.Collections.SortedList.Count%2A>已经等于<xref:System.Collections.SortedList.Capacity%2A>、 容量的<xref:System.Collections.SortedList>对象提高自动重新分配内部数组，并添加新的元素之前，现有的元素被复制到新数组。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.Count%2A>       你还可以使用<xref:System.Collections.SortedList.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.SortedList>对象 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`)。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList.Item%2A> 但是，如果指定的键已存在于<xref:System.Collections.SortedList>，则设置<xref:System.Collections.SortedList.Item%2A>属性将会覆盖旧值。</xref:System.Collections.SortedList.Item%2A> </xref:System.Collections.SortedList> 与此相反，Add 方法不会修改现有元素。       元素<xref:System.Collections.SortedList>对象进行排序的键是根据特定<xref:System.Collections.IComparer>实现时指定<xref:System.Collections.SortedList>创建或按照<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       密钥不能为`null`，但可以是一个值。       此方法为 O (`n`) 操作未排序的数据，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A> 它是 O (日志`n`) 如果在列表的末尾添加了新元素的操作。 如果插入导致大小调整，运算复杂度为 O (`n`)。"
  example:
  - "The following code example shows how to add elements to a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.Add Example#1](~/add/codesnippet/cpp/m-system.collections.sor_4_1.cpp)]\n [!code-vb[Classic SortedList.Add Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_4_1.vb)]\n [!code-cs[Classic SortedList.Add Example#1](~/add/codesnippet/csharp/m-system.collections.sor_4_1.cs)]"
  syntax:
    content: public virtual void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要添加的元素的键。"
    - id: value
      type: System.Object
      description: "要添加的元素的值。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "具有指定的元素<code> key </code>中已存在<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>设置为使用<xref:System.IComparable>接口，和<code> key </code>不实现<xref:System.IComparable>接口。</xref:System.IComparable> </xref:System.IComparable>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>是只读的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>具有固定的大小。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是内存不足，无法将元素添加到<xref href=&quot;System.Collections.SortedList&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比较器引发异常。"
  platform:
  - net462
- uid: System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取或设置的容量<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "容量是元素的数目，<xref:System.Collections.SortedList>对象可以存储。</xref:System.Collections.SortedList> <xref:System.Collections.SortedList.Count%2A>是其实是<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的元素的数目</xref:System.Collections.SortedList.Count%2A>       容量始终是大于或等于<xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 如果<xref:System.Collections.SortedList.Count%2A>添加元素时超过容量，通过在复制旧元素和添加新的元素之前重新分配在内部数组自动增加容量。</xref:System.Collections.SortedList.Count%2A>       可以通过调用减少容量<xref:System.Collections.SortedList.TrimToSize%2A>或通过显式设置的容量属性。</xref:System.Collections.SortedList.TrimToSize%2A> 当显式设置的容量的值时，在内部数组也会重新分配以适应指定的容量。       检索此属性的值的运算 o （1）;将属性设置为 O (`n`) 操作，其中`n`新容量。"
  syntax:
    content: public virtual int Capacity { get; set; }
    return:
      type: System.Int32
      description: "元素的数目， <xref href=&quot;System.Collections.SortedList&quot;> </xref>对象可以包含。"
  overload: System.Collections.SortedList.Capacity*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "分配的值小于元素中的当前数目<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够的内存可用系统上。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除所有元素从<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "<xref:System.Collections.SortedList.Count%2A>设置为零并且对其他对象的集合的元素引用也被释放。</xref:System.Collections.SortedList.Count%2A>       <xref:System.Collections.SortedList.Capacity%2A>保持不变。</xref:System.Collections.SortedList.Capacity%2A> 若要重置的容量<xref:System.Collections.SortedList>对象，请调用<xref:System.Collections.SortedList.TrimToSize%2A>或设置<xref:System.Collections.SortedList.Capacity%2A>属性直接。</xref:System.Collections.SortedList.Capacity%2A> </xref:System.Collections.SortedList.TrimToSize%2A> </xref:System.Collections.SortedList> 截去空<xref:System.Collections.SortedList>的容量设置<xref:System.Collections.SortedList>到默认的容量。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear the values of the <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_14_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_14_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_14_1.vb)]"
  syntax:
    content: public virtual void Clear ();
    parameters: []
  overload: System.Collections.SortedList.Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>对象是只读的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "创建的浅表复制<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "集合的浅表副本仅集合的元素复制，无论它们是引用类型还是值类型，但不会复制引用所引用的对象。 新集合中的引用都指向原始集合中的引用指向同一对象。       与此相反，集合的深层副本复制这些元素，以及由这些元素直接或间接引用的所有内容。       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  syntax:
    content: public virtual object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "浅表复制<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "确定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含特定键。"
  remarks: "元素<xref:System.Collections.SortedList>对象进行排序的键是根据特定<xref:System.Collections.IComparer>实现时指定<xref:System.Collections.SortedList>创建或按照<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       包含实现<xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName>.</xref:System.Collections.IDictionary.Contains%2A?displayProperty=fullName> 它的行为完全相同<xref:System.Collections.SortedList.ContainsKey%2A>.</xref:System.Collections.SortedList.ContainsKey%2A>       此方法使用二进制搜索算法;因此，此方法为 O (日志`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否存在项。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_12_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_12_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_12_1.vb)]"
  syntax:
    content: public virtual bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要查找中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含具有指定的元素<code> key </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比较器引发异常。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "确定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含特定键。"
  remarks: "元素<xref:System.Collections.SortedList>对象进行排序的键是根据特定<xref:System.Collections.IComparer>实现时指定<xref:System.Collections.SortedList>创建或按照<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       此方法的行为完全相同<xref:System.Collections.SortedList.Contains%2A>方法。</xref:System.Collections.SortedList.Contains%2A>       此方法使用二进制搜索算法;因此，此方法为 O (日志`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否存在项。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_16_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_16_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_16_1.vb)]"
  syntax:
    content: public virtual bool ContainsKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要查找中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含具有指定的元素<code> key </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比较器引发异常。"
  platform:
  - net462
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "确定是否<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含特定值。"
  remarks: "元素的值<xref:System.Collections.SortedList>相比对象指定的值使用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       此方法执行的线性搜索;因此，平均执行时间正比<xref:System.Collections.SortedList.Count%2A>.</xref:System.Collections.SortedList.Count%2A> 也就是说，此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否存在项。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine whether a <xref:System.Collections.SortedList> object contains a specific element.  \n  \n [!code-cs[Classic SortedList.Contains Example#1](~/add/codesnippet/csharp/m-system.collections.sor_0_1.cs)]\n [!code-cpp[Classic SortedList.Contains Example#1](~/add/codesnippet/cpp/m-system.collections.sor_0_1.cpp)]\n [!code-vb[Classic SortedList.Contains Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_0_1.vb)]"
  syntax:
    content: public virtual bool ContainsValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要查找中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>对象包含具有指定的元素<code> value </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.ContainsValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "副本<xref href=&quot;System.Collections.SortedList&quot;></xref>元素的一维<xref:System.Array>对象，数组中的指定索引处开始。</xref:System.Array>"
  remarks: "键/值对复制到<xref:System.Array>枚举数循环访问的相同顺序中对象<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.Array>       若要复制仅在密钥<xref:System.Collections.SortedList>，使用`SortedList.Keys.CopyTo`。</xref:System.Collections.SortedList>       若要仅中的值复制<xref:System.Collections.SortedList>，使用`SortedList.Values.CopyTo`。</xref:System.Collections.SortedList>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to copy the values in a <xref:System.Collections.SortedList> object into a one-dimensional <xref:System.Array> object.  \n  \n [!code-cs[Classic SortedList.CopyTo Example#1](~/add/codesnippet/csharp/m-system.collections.sor_20_1.cs)]\n [!code-cpp[Classic SortedList.CopyTo Example#1](~/add/codesnippet/cpp/m-system.collections.sor_20_1.cpp)]\n [!code-vb[Classic SortedList.CopyTo Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_20_1.vb)]"
  syntax:
    content: public virtual void CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: "一维<xref:System.Array>对象，它的目标<xref:System.Collections.DictionaryEntry>从复制的对象<xref href=&quot;System.Collections.SortedList&quot;> </xref>。</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: arrayIndex
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.Collections.SortedList.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>arrayIndex</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref href=&quot;System.Collections.SortedList&quot;></xref>对象是否大于从的可用空间<code>arrayIndex</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref href=&quot;System.Collections.SortedList&quot;></xref>无法自动转换为目标的类型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取包含中的元素数<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "每个元素都是可作为访问键/值对<xref:System.Collections.DictionaryEntry>对象。</xref:System.Collections.DictionaryEntry>       <xref:System.Collections.SortedList.Capacity%2A>是的元素数的<xref:System.Collections.SortedList>对象可以存储。</xref:System.Collections.SortedList></xref:System.Collections.SortedList.Capacity%2A> 计数是其实是<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的元素的数目       <xref:System.Collections.SortedList.Capacity%2A>始终是大于或等于计数。</xref:System.Collections.SortedList.Capacity%2A> 如果计数超过<xref:System.Collections.SortedList.Capacity%2A>时添加元素，则自动增大容量通过重新在内部数组分配在复制旧元素和添加新的元素之前。</xref:System.Collections.SortedList.Capacity%2A>       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中包含的元素数<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取指定索引处的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或移除元素<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此方法为 o （1） 运算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_8_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_8_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_8_1.vb)]"
  syntax:
    content: public virtual object GetByIndex (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要获取的值的从零开始的索引。"
    return:
      type: System.Object
      description: "指定索引处的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.GetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的有效索引范围<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回<xref:System.Collections.IDictionaryEnumerator>循环访问的对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。       此方法为 o （1） 运算。"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.SortedList.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取指定索引处的密钥， <xref href=&quot;System.Collections.SortedList&quot;> </xref>对象。"
  remarks: "索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或移除元素<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此方法为 o （1） 运算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_19_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_19_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_19_1.vb)]"
  syntax:
    content: public virtual object GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要获取的键的从零开始的索引。"
    return:
      type: System.Object
      description: "指定索引处的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.GetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的有效索引范围<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "返回<xref:System.Collections.IList>对象是只读的视图的键的<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.Collections.IList> 对基础<xref:System.Collections.SortedList><xref:System.Collections.IList>.</xref:System.Collections.IList>中将立即反映</xref:System.Collections.SortedList>所做的修改       返回<xref:System.Collections.IList>作为的<xref:System.Collections.SortedList>。</xref:System.Collections.SortedList>键相同的顺序排序</xref:System.Collections.IList>的元素       此方法类似于是<xref:System.Collections.SortedList.Keys%2A>属性，但返回<xref:System.Collections.IList>对象而不是<xref:System.Collections.ICollection>对象。</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Keys%2A>       此方法为 o （1） 运算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_1_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetKeyList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>对象，其中包含中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetKeyList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "返回<xref:System.Collections.IList>对象是只读的值的视图<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.Collections.IList> 对基础<xref:System.Collections.SortedList><xref:System.Collections.IList>.</xref:System.Collections.IList>中将立即反映</xref:System.Collections.SortedList>所做的修改       返回<xref:System.Collections.IList>按用作<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的值相同的顺序进行排序</xref:System.Collections.IList>的元素       此方法类似于是<xref:System.Collections.SortedList.Values%2A>属性，但返回<xref:System.Collections.IList>对象而不是<xref:System.Collections.ICollection>对象。</xref:System.Collections.ICollection> </xref:System.Collections.IList> </xref:System.Collections.SortedList.Values%2A>       此方法为 o （1） 运算。"
  example:
  - "The following code example shows how to get one or all the keys or values in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_11_1.cpp)]\n [!code-cs[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_11_1.cs)]\n [!code-vb[Classic SortedList.GetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_11_1.vb)]"
  syntax:
    content: public virtual System.Collections.IList GetValueList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>包含中的值的对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.IList>"
  overload: System.Collections.SortedList.GetValueList*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回在指定的键的从零开始索引<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "元素<xref:System.Collections.SortedList>对象进行排序的键是根据特定<xref:System.Collections.IComparer>实现时指定<xref:System.Collections.SortedList>创建，或按照<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或删除从<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>元素       此方法使用二进制搜索算法;因此，此方法为 O (日志`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否存在项。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_2_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_2_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_2_1.cs)]"
  syntax:
    content: public virtual int IndexOfKey (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要查找中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
    return:
      type: System.Int32
      description: "从零开始的索引<code> key </code>参数，如果<code> key </code>中找到<xref href=&quot;System.Collections.SortedList&quot;></xref>对象; 否则为-1。"
  overload: System.Collections.SortedList.IndexOfKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比较器引发异常。"
  platform:
  - net462
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回在指定的值的第一个匹配项的从零开始索引<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或移除元素<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       元素的值<xref:System.Collections.SortedList>相比于指定的值使用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.Collections.SortedList>       此方法使用的线性搜索;因此，此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`以确定是否存在项。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example shows how to determine the index of a key or a value in a <xref:System.Collections.SortedList> object.  \n  \n [!code-cpp[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/cpp/m-system.collections.sor_5_1.cpp)]\n [!code-vb[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_5_1.vb)]\n [!code-cs[Classic SortedList.IndexOfKey Example#1](~/add/codesnippet/csharp/m-system.collections.sor_5_1.cs)]"
  syntax:
    content: public virtual int IndexOfValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要查找中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Int32
      description: "第一个匹配项的从零开始索引<code> value </code>参数，如果<code> value </code>中找到<xref href=&quot;System.Collections.SortedList&quot;></xref>对象; 否则为-1。"
  overload: System.Collections.SortedList.IndexOfValue*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.SortedList&quot;></xref>对象具有固定的大小。"
  remarks: "具有固定大小的集合不允许添加或移除元素后集合创建后，但允许修改现有元素。       具有固定大小的集合是只是一个集合的包装器防止添加和移除元素;因此，如果对基础集合，包括添加或移除元素，进行更改的固定大小的集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>对象具有固定大小; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.SortedList&quot;></xref>对象是只读的。"
  remarks: "集合是只读的不允许添加、 移除或修改元素的集合在创建后。       集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.SortedList&quot;></xref>对象是只读的; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否访问<xref href=&quot;System.Collections.SortedList&quot;></xref>对象已同步 （线程安全）。"
  remarks: "若要确保的线程安全性<xref:System.Collections.SortedList>对象，所有操作必须通过返回的包装器来都完成<xref:System.Collections.SortedList.Synchronized%2A>方法。</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock a collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_1_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_1_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_1_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/p-system.collections.sor_1_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/p-system.collections.sor_1_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/p-system.collections.sor_1_2.vb)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref href=&quot;System.Collections.SortedList&quot;></xref>对象已同步 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取和设置与中的特定键关联的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "你可以使用 Item 属性访问集合中的特定元素通过指定以下语法︰ `myCollection[key]`。       你还可以使用此属性来添加新元素中不存在的键的值设置<xref:System.Collections.SortedList>对象 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue)`。</xref:System.Collections.SortedList> 但是，如果指定的键已存在于<xref:System.Collections.SortedList>，设置项目属性将覆盖旧值。</xref:System.Collections.SortedList> 与此相反，<xref:System.Collections.SortedList.Add%2A>方法不会修改现有元素。</xref:System.Collections.SortedList.Add%2A>       密钥不能为`null`，但可以是一个值。 来区分`null`返回因为找不到指定的键和`null`返回指定键的值是因为`null`，使用<xref:System.Collections.SortedList.Contains%2A>方法或<xref:System.Collections.SortedList.ContainsKey%2A>方法来确定在列表中是否存在的项。</xref:System.Collections.SortedList.ContainsKey%2A> </xref:System.Collections.SortedList.Contains%2A>       元素<xref:System.Collections.SortedList>按键排序是根据特定<xref:System.Collections.IComparer>实现时指定<xref:System.Collections.SortedList>创建或按照<xref:System.IComparable>键本身提供的实现。</xref:System.IComparable> </xref:System.Collections.SortedList> </xref:System.Collections.IComparer> </xref:System.Collections.SortedList>       C# 语言使用关键字进行定义而不是实现索引器<xref:System.Collections.SortedList.Keys%2A>属性。</xref:System.Collections.SortedList.Keys%2A> Visual Basic 实现为默认属性，它提供相同的索引功能的项。       检索此属性的值是 O (日志`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A> 将属性设置为 O (日志`n`) 操作，如果该密钥已处于<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> 如果该键不在列表中，将属性设置为 O (`n`) 未排序的数据或 O 操作 (日志`n`) 如果在列表的末尾添加了新元素。 如果插入导致大小调整，运算复杂度为 O (`n`)。"
  syntax:
    content: public virtual object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "要获取或设置的值与关联的密钥。"
    return:
      type: System.Object
      description: "与关联的值<code> key </code>中的参数<xref href=&quot;System.Collections.SortedList&quot;></xref>对象，如果<code> key </code>找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "将属性设置和<xref href=&quot;System.Collections.SortedList&quot;></xref>对象是只读的。       -或-设置该属性， <code> key </code>不存在于集合中，与<xref href=&quot;System.Collections.SortedList&quot;></xref>具有固定的大小。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "不是内存不足，无法将元素添加到<xref href=&quot;System.Collections.SortedList&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "比较器引发异常。"
  platform:
  - net462
- uid: System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "<xref:System.Collections.ICollection>对象是只读的视图的键的<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> 对基础<xref:System.Collections.SortedList><xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>中将立即反映</xref:System.Collections.SortedList>所做的修改       <xref:System.Collections.ICollection>按<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的键相同的顺序进行排序</xref:System.Collections.ICollection>的元素       此属性是类似于<xref:System.Collections.SortedList.GetKeyList%2A>方法，但返回<xref:System.Collections.ICollection>对象而不是<xref:System.Collections.IList>对象。</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetKeyList%2A>       此方法为 o （1） 运算。"
  syntax:
    content: public virtual System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含中的键<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除带有指定键的元素<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "如果<xref:System.Collections.SortedList>对象具有指定键，不包含的元素<xref:System.Collections.SortedList>保持不变。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 不引发异常。       在由连续的元素，如列表，集合中移除的元素下面的元素的元素将上移以占据空出的位置。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分为不同存储桶，如哈希表的集合。       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_6_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_6_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_6_1.vb)]"
  syntax:
    content: public virtual void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的元素的键。"
  overload: System.Collections.SortedList.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>对象是只读的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除的指定索引处的元素<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或移除元素<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       在由连续的元素，如列表，集合中移除的元素下面的元素的元素将上移以占据空出的位置。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分为不同存储桶，如哈希表的集合。       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to remove elements from a <xref:System.Collections.SortedList> object.  \n  \n [!code-cs[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/csharp/m-system.collections.sor_17_1.cs)]\n [!code-cpp[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/cpp/m-system.collections.sor_17_1.cpp)]\n [!code-vb[Classic SortedList.RemoveAt Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_17_1.vb)]"
  syntax:
    content: public virtual void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要移除的元素的从零开始的索引。"
  overload: System.Collections.SortedList.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的有效索引范围<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>是只读的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "替换中的特定索引处的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "索引序列基于排序顺序。 当添加的元素时，它将插入到<xref:System.Collections.SortedList>中正确的排序顺序和索引进行相应调整。</xref:System.Collections.SortedList> 在删除某个元素后，索引也相应地调整。 因此，可能会更改特定键/值对的索引，添加或移除元素<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       此方法为 o （1） 运算。"
  example:
  - "The following code example shows how to replace the value of an existing element in a <xref:System.Collections.SortedList> object.  \n  \n [!code-vb[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_13_1.vb)]\n [!code-cs[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/csharp/m-system.collections.sor_13_1.cs)]\n [!code-cpp[Classic SortedList.SetByIndex Example#1](~/add/codesnippet/cpp/m-system.collections.sor_13_1.cpp)]"
  syntax:
    content: public virtual void SetByIndex (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的索引位置用于保存`value`。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>要保存到<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Object> 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.SortedList.SetByIndex*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的有效索引范围<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回同步的 （线程安全） 包装器<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "若要确保的线程安全性<xref:System.Collections.SortedList>对象，必须通过此包装器仅执行所有操作。</xref:System.Collections.SortedList>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.SortedList.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/m-system.collections.sor_10_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/m-system.collections.sor_10_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/m-system.collections.sor_10_1.vb)]  \n  \n This method is an O(1) operation.  \n  \n The following code example shows how to synchronize a <xref:System.Collections.SortedList> object, determine whether a <xref:System.Collections.SortedList> is synchronized, and use a synchronized <xref:System.Collections.SortedList>.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/cpp/m-system.collections.sor_10_2.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/csharp/m-system.collections.sor_10_2.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_10_2.vb)]"
  syntax:
    content: public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);
    parameters:
    - id: list
      type: System.Collections.SortedList
      description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>要同步的对象。"
    return:
      type: System.Collections.SortedList
      description: "一个同步 （线程安全） 包装器<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.Synchronized*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>list</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取可以用于对访问进行同步的对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "若要创建的同步的版本<xref:System.Collections.SortedList>对象，请使用<xref:System.Collections.SortedList.Synchronized%2A>方法。</xref:System.Collections.SortedList.Synchronized%2A> </xref:System.Collections.SortedList> 但是，派生的类可以提供自己的同步的版本<xref:System.Collections.SortedList>使用 SyncRoot 属性。</xref:System.Collections.SortedList> 同步代码必须对执行操作的 SyncRoot <xref:System.Collections.SortedList>，不是直接对<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList> </xref:System.Collections.SortedList> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot property during the entire enumeration.  \n  \n [!code-cpp[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/cpp/p-system.collections.sor_0_1.cpp)]\n [!code-cs[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/csharp/p-system.collections.sor_0_1.cs)]\n [!code-vb[Classic SortedList.IsSynchronized Example#2](~/add/codesnippet/visualbasic/p-system.collections.sor_0_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于对访问进行同步的对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  overload: System.Collections.SortedList.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回<xref:System.Collections.IEnumerator>，它循环访问<xref href=&quot;System.Collections.SortedList&quot;> </xref>。</xref:System.Collections.IEnumerator>"
  remarks: "[Visual Basic、 C#]      `foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A> 在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       此方法为 o （1） 运算。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.SortedList&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "将容量设置中的元素的实际数目<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "此方法可以用于降低集合的内存开销，如果没有新的元素将添加到集合。       若要重置<xref:System.Collections.SortedList>对象为其初始状态，调用<xref:System.Collections.SortedList.Clear%2A>方法之前调用 TrimToSize。</xref:System.Collections.SortedList.Clear%2A> </xref:System.Collections.SortedList> 截去空<xref:System.Collections.SortedList>的容量设置<xref:System.Collections.SortedList>到默认的容量。</xref:System.Collections.SortedList> </xref:System.Collections.SortedList>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.SortedList.Count%2A>。</xref:System.Collections.SortedList.Count%2A>"
  example:
  - "The following code example shows how to trim the unused portions of a <xref:System.Collections.SortedList> object and how to clear its values.  \n  \n [!code-cpp[Classic SortedList.Clear Example#1](~/add/codesnippet/cpp/m-system.collections.sor_3_1.cpp)]\n [!code-cs[Classic SortedList.Clear Example#1](~/add/codesnippet/csharp/m-system.collections.sor_3_1.cs)]\n [!code-vb[Classic SortedList.Clear Example#1](~/add/codesnippet/visualbasic/m-system.collections.sor_3_1.vb)]"
  syntax:
    content: public virtual void TrimToSize ();
    parameters: []
  overload: System.Collections.SortedList.TrimToSize*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.SortedList&quot;> </xref>对象是只读的。       -或- <xref href=&quot;System.Collections.SortedList&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取中的值<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。"
  remarks: "<xref:System.Collections.ICollection>对象是只读的值的视图<xref:System.Collections.SortedList>对象。</xref:System.Collections.SortedList> </xref:System.Collections.ICollection> 对基础<xref:System.Collections.SortedList><xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>中将立即反映</xref:System.Collections.SortedList>所做的修改       <xref:System.Collections.ICollection>用作<xref:System.Collections.SortedList>.</xref:System.Collections.SortedList>的值相同的顺序排序</xref:System.Collections.ICollection>的元素       此属性是类似于<xref:System.Collections.SortedList.GetValueList%2A>方法，但返回<xref:System.Collections.ICollection>对象而不是<xref:System.Collections.IList>对象。</xref:System.Collections.IList> </xref:System.Collections.ICollection> </xref:System.Collections.SortedList.GetValueList%2A>       此方法为 o （1） 运算。"
  syntax:
    content: public virtual System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的值的对象<xref href=&quot;System.Collections.SortedList&quot;></xref>对象。</xref:System.Collections.ICollection>"
  overload: System.Collections.SortedList.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Collections.SortedList.#ctor
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList()
  nameWithType: SortedList.SortedList()
  fullName: System.Collections.SortedList.SortedList()
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer)
  nameWithType: SortedList.SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(IComparer)
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary)
  nameWithType: SortedList.SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.SortedList.#ctor(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(Int32)
  nameWithType: SortedList.SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IComparer,Int32)
  nameWithType: SortedList.SortedList(IComparer,Int32)
  fullName: System.Collections.SortedList.SortedList(IComparer,Int32)
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList(IDictionary,IComparer)
  nameWithType: SortedList.SortedList(IDictionary,IComparer)
  fullName: System.Collections.SortedList.SortedList(IDictionary,IComparer)
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Add(Object,Object)
  nameWithType: SortedList.Add(Object,Object)
  fullName: System.Collections.SortedList.Add(Object,Object)
- uid: System.Collections.SortedList.Capacity
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
  fullName: System.Collections.SortedList.Capacity
- uid: System.Collections.SortedList.Clear
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear()
  nameWithType: SortedList.Clear()
  fullName: System.Collections.SortedList.Clear()
- uid: System.Collections.SortedList.Clone
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone()
  nameWithType: SortedList.Clone()
  fullName: System.Collections.SortedList.Clone()
- uid: System.Collections.SortedList.Contains(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains(Object)
  nameWithType: SortedList.Contains(Object)
  fullName: System.Collections.SortedList.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey(Object)
  nameWithType: SortedList.ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(Object)
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue(Object)
  nameWithType: SortedList.ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(Object)
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: SortedList.CopyTo(Array,Int32)
  fullName: System.Collections.SortedList.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.SortedList.Count
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
  fullName: System.Collections.SortedList.Count
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex(Int32)
  nameWithType: SortedList.GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(Int32)
- uid: System.Collections.SortedList.GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator()
  nameWithType: SortedList.GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.SortedList.GetKey(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey(Int32)
  nameWithType: SortedList.GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(Int32)
- uid: System.Collections.SortedList.GetKeyList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList()
  nameWithType: SortedList.GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.SortedList.GetValueList
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList()
  nameWithType: SortedList.GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey(Object)
  nameWithType: SortedList.IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(Object)
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue(Object)
  nameWithType: SortedList.IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(Object)
- uid: System.Collections.SortedList.IsFixedSize
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Item(Object)
  nameWithType: SortedList.Item(Object)
  fullName: System.Collections.SortedList.Item(Object)
- uid: System.Collections.SortedList.Keys
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
  fullName: System.Collections.SortedList.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.SortedList.Remove(System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove(Object)
  nameWithType: SortedList.Remove(Object)
  fullName: System.Collections.SortedList.Remove(Object)
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SortedList.RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(Int32)
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex(Int32,Object)
  nameWithType: SortedList.SetByIndex(Int32,Object)
  fullName: System.Collections.SortedList.SetByIndex(Int32,Object)
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized(SortedList)
  nameWithType: SortedList.Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(SortedList)
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  nameWithType: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.SortedList.SyncRoot
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.SortedList.TrimToSize
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize()
  nameWithType: SortedList.TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
- uid: System.Collections.SortedList.Values
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
  fullName: System.Collections.SortedList.Values
- uid: System.Collections.SortedList.#ctor*
  parent: System.Collections.SortedList
  isExternal: false
  name: SortedList
  nameWithType: SortedList.SortedList
- uid: System.Collections.SortedList.Add*
  parent: System.Collections.SortedList
  isExternal: false
  name: Add
  nameWithType: SortedList.Add
- uid: System.Collections.SortedList.Capacity*
  parent: System.Collections.SortedList
  isExternal: false
  name: Capacity
  nameWithType: SortedList.Capacity
- uid: System.Collections.SortedList.Clear*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clear
  nameWithType: SortedList.Clear
- uid: System.Collections.SortedList.Clone*
  parent: System.Collections.SortedList
  isExternal: false
  name: Clone
  nameWithType: SortedList.Clone
- uid: System.Collections.SortedList.Contains*
  parent: System.Collections.SortedList
  isExternal: false
  name: Contains
  nameWithType: SortedList.Contains
- uid: System.Collections.SortedList.ContainsKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsKey
  nameWithType: SortedList.ContainsKey
- uid: System.Collections.SortedList.ContainsValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: ContainsValue
  nameWithType: SortedList.ContainsValue
- uid: System.Collections.SortedList.CopyTo*
  parent: System.Collections.SortedList
  isExternal: false
  name: CopyTo
  nameWithType: SortedList.CopyTo
- uid: System.Collections.SortedList.Count*
  parent: System.Collections.SortedList
  isExternal: false
  name: Count
  nameWithType: SortedList.Count
- uid: System.Collections.SortedList.GetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetByIndex
  nameWithType: SortedList.GetByIndex
- uid: System.Collections.SortedList.GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetEnumerator
  nameWithType: SortedList.GetEnumerator
- uid: System.Collections.SortedList.GetKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKey
  nameWithType: SortedList.GetKey
- uid: System.Collections.SortedList.GetKeyList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetKeyList
  nameWithType: SortedList.GetKeyList
- uid: System.Collections.SortedList.GetValueList*
  parent: System.Collections.SortedList
  isExternal: false
  name: GetValueList
  nameWithType: SortedList.GetValueList
- uid: System.Collections.SortedList.IndexOfKey*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfKey
  nameWithType: SortedList.IndexOfKey
- uid: System.Collections.SortedList.IndexOfValue*
  parent: System.Collections.SortedList
  isExternal: false
  name: IndexOfValue
  nameWithType: SortedList.IndexOfValue
- uid: System.Collections.SortedList.IsFixedSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsFixedSize
  nameWithType: SortedList.IsFixedSize
- uid: System.Collections.SortedList.IsReadOnly*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsReadOnly
  nameWithType: SortedList.IsReadOnly
- uid: System.Collections.SortedList.IsSynchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: IsSynchronized
  nameWithType: SortedList.IsSynchronized
- uid: System.Collections.SortedList.Item*
  parent: System.Collections.SortedList
  isExternal: false
  name: Item
  nameWithType: SortedList.Item
- uid: System.Collections.SortedList.Keys*
  parent: System.Collections.SortedList
  isExternal: false
  name: Keys
  nameWithType: SortedList.Keys
- uid: System.Collections.SortedList.Remove*
  parent: System.Collections.SortedList
  isExternal: false
  name: Remove
  nameWithType: SortedList.Remove
- uid: System.Collections.SortedList.RemoveAt*
  parent: System.Collections.SortedList
  isExternal: false
  name: RemoveAt
  nameWithType: SortedList.RemoveAt
- uid: System.Collections.SortedList.SetByIndex*
  parent: System.Collections.SortedList
  isExternal: false
  name: SetByIndex
  nameWithType: SortedList.SetByIndex
- uid: System.Collections.SortedList.Synchronized*
  parent: System.Collections.SortedList
  isExternal: false
  name: Synchronized
  nameWithType: SortedList.Synchronized
- uid: System.Collections.SortedList.SyncRoot*
  parent: System.Collections.SortedList
  isExternal: false
  name: SyncRoot
  nameWithType: SortedList.SyncRoot
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.SortedList
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: SortedList.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.SortedList.TrimToSize*
  parent: System.Collections.SortedList
  isExternal: false
  name: TrimToSize
  nameWithType: SortedList.TrimToSize
- uid: System.Collections.SortedList.Values*
  parent: System.Collections.SortedList
  isExternal: false
  name: Values
  nameWithType: SortedList.Values
