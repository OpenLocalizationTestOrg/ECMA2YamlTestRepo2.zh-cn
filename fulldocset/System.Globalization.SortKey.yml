### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortKey
  id: SortKey
  children:
  - System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  - System.Globalization.SortKey.Equals(System.Object)
  - System.Globalization.SortKey.GetHashCode
  - System.Globalization.SortKey.KeyData
  - System.Globalization.SortKey.OriginalString
  - System.Globalization.SortKey.ToString
  langs:
  - csharp
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
  type: Class
  summary: "表示映射到其排序键的字符串的结果。"
  remarks: "两个字符串的区分区域性的比较取决于在具有多个排序权重，包括脚本，包含字母、 类别字符串中的每个字符大小写和变音符权重。 排序键用作的特定字符串这些权重的存储库。       <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName>方法返回反映指定字符串中字符的区分区域性的映射排序类的实例。</xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName> 排序对象的值是其密钥数据，这由返回<xref:System.Globalization.SortKey.KeyData%2A>属性。</xref:System.Globalization.SortKey.KeyData%2A> 此键的数据包含的一系列字节进行编码的字符串、 特定于区域性的排序规则和用户指定的比较选项。 使用排序键的比较包含，每个排序键中的相应密钥数据的按位比较。  例如，如果通过调用创建的排序键<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>具有值的方法<xref:System.Globalization.CompareOptions?displayProperty=fullName>，使用该排序键的字符串比较运算不区分大小写。</xref:System.Globalization.CompareOptions?displayProperty=fullName> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29>       通过调用静态创建字符串的排序键后，比较排序键<xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName> 此方法执行简单的逐字节比较，因此很远低于<xref:System.String.Compare%2A?displayProperty=fullName>或<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.String.Compare%2A?displayProperty=fullName>      ## 性能注意事项时执行字符串比较，<xref:System.Globalization.SortKey.Compare%2A>和<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法生成相同的结果，但它们面向不同的方案。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> </xref:System.Globalization.SortKey.Compare%2A>       在高级别，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法生成每个字符串的排序键、 执行比较，然后放弃的排序键并返回比较的结果。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> 但是，<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法实际上不会生成完整的排序关键字进行比较。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> 相反，则方法将生成每个字符串中每个文本元素 （即，基字符、 代理项对或组合字符序列） 的密钥数据。 方法然后将相应的文本元素的键数据进行比较。 一旦确定比较的最终结果，操作将终止。 计算排序密钥信息，但不创建任何排序关键字对象。 此策略是经济就性能而言，如果一次，比较这两个字符串，但将成为相同的字符串比较很多次的情况下成本高昂。       <xref:System.Globalization.SortKey.Compare%2A>方法在执行比较之前每个字符串需要生成一个排序关键字对象。</xref:System.Globalization.SortKey.Compare%2A> 此策略因产生很大影响性能的第一个比较的时间和内存来生成排序关键字对象。 但是，它将成为经济如果相同的排序键进行比较多次。       例如，假设你编写的应用程序在其中基于字符串的索引列与指定的搜索的字符串匹配的行的数据库表中搜索。 该表包含数千行，而比较中每一行的索引的搜索字符串将花费很长时间。 因此，当应用程序将存储行和其索引列，它还生成并将索引的排序键存储在专用于改进搜索性能的列。 当应用程序搜索目标行时，它会将连接到的索引字符串，而不是比较和索引字符串的搜索字符串的排序键的搜索字符串的排序键进行比较。      ## 安全注意事项<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>方法返回一个排序关键字对象，基于指定的字符串的值和<xref:System.Globalization.CompareOptions>值，并与基础关联的区域性<xref:System.Globalization.CompareInfo>对象。</xref:System.Globalization.CompareInfo> </xref:System.Globalization.CompareOptions> </xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> 如果安全决策取决于字符串比较或大小写更改，则应使用<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>固定区域性，以确保操作的行为保持一致，无论操作系统的区域性设置的方法。</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       使用以下步骤获取排序键︰ 1。  检索固定区域性<xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>属性。</xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName>      2.  检索<xref:System.Globalization.CompareInfo>用于从固定区域性的对象<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName>属性。</xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> </xref:System.Globalization.CompareInfo>      3.  调用<xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName>       使用排序的值对象是否等效于调用 Windows`LCMapString`与指定的 LCMAP_SORTKEY 值的方法。 但是，对于排序关键字对象中，使用英文字符的排序键在前朝鲜语字符的排序键。       排序关键字对象可以序列化，但仅限于，以便它们可以跨<xref:System.AppDomain>对象。</xref:System.AppDomain> 如果应用程序序列化的排序关键字对象，该应用程序必须重新生成所有排序键，.NET Framework 的新版本时。       有关排序键的详细信息，请参阅 Unicode 技术标准 #10:&quot;Unicode 排序规则算法&quot;上[Unicode Consortium 网站](http://go.microsoft.com/fwlink/?linkid=37123)。"
  example:
  - "The following example compares the string \"llama\" using the \"en-US\" and \"es-ES\" cultures, and the \"en-US\" and \"es-ES\" traditional cultures.  \n  \n [!code-cpp[System.Globalization.SortKey.Compare#1](~/add/codesnippet/cpp/t-system.globalization.s_1_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Compare#1](~/add/codesnippet/csharp/t-system.globalization.s_1_1.cs)]\n [!code-vb[System.Globalization.SortKey.Compare#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_1.vb)]  \n  \n The following example shows how you can use the SortKey class to improve performance in an application that relies extensively on sorting and searching a large array. The example creates an unordered array of names, which in this case has 13 elements. It then stores the sort key of each name in a parallel array, which it passes to the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> method. The result is a sorted array. The example then searches the array for three strings. For each search string, it calls the <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method to retrieve the string's sort key, and then calls the <xref:System.Array.FindIndex%2A?displayProperty=fullName> method to retrieve the index of that sort key in the array of sort keys. Because the name and sort key arrays are parallel, the returned index is also the index of the name in the `names` array.  \n  \n [!code-vb[System.Globalization.SortKey.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.s_1_2.vb)]\n [!code-cs[System.Globalization.SortKey.Class#1](~/add/codesnippet/csharp/t-system.globalization.s_1_2.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class SortKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  id: Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "比较两个排序键。"
  remarks: "Compare 方法比较<xref:System.Globalization.SortKey.KeyData%2A>属性`sortkey1`和`sortkey2`参数。</xref:System.Globalization.SortKey.KeyData%2A> 该方法生成相同的结果<xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>方法。</xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName>       有关比较方法和的排序键进行比较的详细信息，请参阅<xref:System.Globalization.SortKey>类主题。</xref:System.Globalization.SortKey>"
  example:
  - "The following code example compares two strings using the Compare method and the equivalent <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> method.  \n  \n [!code-cs[sys.glob.sortkey.compare#1](~/add/codesnippet/csharp/4647647d-ce80-4fb7-82b7-_1.cs)]\n [!code-vb[sys.glob.sortkey.compare#1](~/add/codesnippet/visualbasic/4647647d-ce80-4fb7-82b7-_1.vb)]"
  syntax:
    content: public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);
    parameters:
    - id: sortkey1
      type: System.Globalization.SortKey
      description: "要比较的第一个排序键。"
    - id: sortkey2
      type: System.Globalization.SortKey
      description: "要比较的第二个排序键。"
    return:
      type: System.Int32
      description: "一个有符号的整数，指示之间的关系<code> sortkey1 </code>和<code> sortkey2 </code>。       <table><thead><tr><th> 值       </th><th> 条件       </th></tr></thead><tbody><tr><td> 小于零       </td><td><code>sortkey1</code>is less than <code>sortkey2</code>.       </td></tr><tr><td> 零       </td><td><code>sortkey1</code>is equal to <code>sortkey2</code>.       </td></tr><tr><td> 大于零       </td><td><code>sortkey1</code>大于<code> sortkey2 </code>。       </td></tr></tbody></table>"
  overload: System.Globalization.SortKey.Compare*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sortkey1</code>or <code>sortkey2</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定的对象是否等于当前<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  remarks: "两个<xref:System.Globalization.SortKey>对象被视为相等，如果其<xref:System.Globalization.SortKey.KeyData%2A>属性是否相等。</xref:System.Globalization.SortKey.KeyData%2A> </xref:System.Globalization.SortKey>       此方法将替代<xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName>"
  example:
  - "The following code example shows the results of Equals when compared with different <xref:System.Globalization.SortKey> objects.  \n  \n [!code-vb[System.Globalization.SortKey.Equals#1](~/add/codesnippet/visualbasic/m-system.globalization.s_0_1.vb)]\n [!code-cpp[System.Globalization.SortKey.Equals#1](~/add/codesnippet/cpp/m-system.globalization.s_0_1.cpp)]\n [!code-cs[System.Globalization.SortKey.Equals#1](~/add/codesnippet/csharp/m-system.globalization.s_0_1.cs)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要与当前比较的对象<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> value </code>参数是否等于当前<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortKey.Equals*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Globalization.SortKey.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "用作当前的哈希函数<xref href=&quot;System.Globalization.SortKey&quot;></xref>适用于哈希算法和数据结构，如哈希表的对象。"
  remarks: "此方法将生成两个对象是否相等根据相同的哈希代码<xref:System.Globalization.SortKey.Equals%2A>方法。</xref:System.Globalization.SortKey.Equals%2A>       此方法将替代<xref:System.Object.GetHashCode%2A?displayProperty=fullName>.</xref:System.Object.GetHashCode%2A?displayProperty=fullName>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  overload: System.Globalization.SortKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.KeyData
  id: KeyData
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取表示当前的字节数组<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  remarks: "有关使用中比较字符串的 KeyData 属性返回的数据的详细信息，请参阅<xref:System.Globalization.SortKey>类主题。</xref:System.Globalization.SortKey>"
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_0_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_0_1.cs)]"
  syntax:
    content: public virtual byte[] KeyData { get; }
    return:
      type: System.Byte[]
      description: "表示当前的字节数组<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  overload: System.Globalization.SortKey.KeyData*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.OriginalString
  id: OriginalString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取用于创建当前的原始字符串<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  remarks: ''
  example:
  - "The following code example displays an original string and the equivalent string and key data for a case-sensitive sort key and a case-insensitive sort key.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/p-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/p-system.globalization.s_1_1.cs)]"
  syntax:
    content: public virtual string OriginalString { get; }
    return:
      type: System.String
      description: "用于创建当前的原始字符串<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  overload: System.Globalization.SortKey.OriginalString*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortKey.ToString
  id: ToString
  parent: System.Globalization.SortKey
  langs:
  - csharp
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个字符串，表示当前<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  remarks: "返回值为&quot;排序关键字的&quot;的字符串的串联、 区域性标识符和比较选项的当前<xref:System.Globalization.SortKey>对象和的值<xref:System.Globalization.SortKey.OriginalString%2A>属性。</xref:System.Globalization.SortKey.OriginalString%2A> </xref:System.Globalization.SortKey>       此方法将替代<xref:System.Object.ToString%2A?displayProperty=fullName>.</xref:System.Object.ToString%2A?displayProperty=fullName>"
  example:
  - "The following code example displays an original string, the strings yielded by the ToString method for case-sensitive and case-insensitive sort keys, and the key data for case-sensitive and case-insensitive sort keys.  \n  \n [!code-vb[sys.glob.sortkey.tostring#1](~/add/codesnippet/visualbasic/m-system.globalization.s_1_1.vb)]\n [!code-cs[sys.glob.sortkey.tostring#1](~/add/codesnippet/csharp/m-system.globalization.s_1_1.cs)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，表示当前<xref href=&quot;System.Globalization.SortKey&quot;></xref>对象。"
  overload: System.Globalization.SortKey.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare(SortKey,SortKey)
  nameWithType: SortKey.Compare(SortKey,SortKey)
  fullName: System.Globalization.SortKey.Compare(SortKey,SortKey)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.SortKey
  parent: System.Globalization
  isExternal: false
  name: SortKey
  nameWithType: SortKey
  fullName: System.Globalization.SortKey
- uid: System.Globalization.SortKey.Equals(System.Object)
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals(Object)
  nameWithType: SortKey.Equals(Object)
  fullName: System.Globalization.SortKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortKey.GetHashCode
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode()
  nameWithType: SortKey.GetHashCode()
  fullName: System.Globalization.SortKey.GetHashCode()
- uid: System.Globalization.SortKey.KeyData
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
  fullName: System.Globalization.SortKey.KeyData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.SortKey.OriginalString
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
  fullName: System.Globalization.SortKey.OriginalString
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.SortKey.ToString
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString()
  nameWithType: SortKey.ToString()
  fullName: System.Globalization.SortKey.ToString()
- uid: System.Globalization.SortKey.Compare*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Compare
  nameWithType: SortKey.Compare
- uid: System.Globalization.SortKey.Equals*
  parent: System.Globalization.SortKey
  isExternal: false
  name: Equals
  nameWithType: SortKey.Equals
- uid: System.Globalization.SortKey.GetHashCode*
  parent: System.Globalization.SortKey
  isExternal: false
  name: GetHashCode
  nameWithType: SortKey.GetHashCode
- uid: System.Globalization.SortKey.KeyData*
  parent: System.Globalization.SortKey
  isExternal: false
  name: KeyData
  nameWithType: SortKey.KeyData
- uid: System.Globalization.SortKey.OriginalString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: OriginalString
  nameWithType: SortKey.OriginalString
- uid: System.Globalization.SortKey.ToString*
  parent: System.Globalization.SortKey
  isExternal: false
  name: ToString
  nameWithType: SortKey.ToString
