### YamlMime:ManagedReference
items:
- uid: System.Windows.FrameworkElement
  id: FrameworkElement
  children:
  - System.Windows.FrameworkElement.#ctor
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.LogicalChildren
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  langs:
  - csharp
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
  type: Class
  summary: "提供属性、 事件和方法的 WPF 框架级别组[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]元素。 此类表示基于 WPF 核心级别所提供的 WPF 框架级别实现[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]由定义<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  remarks: "FrameworkElement 是 WPF 框架级别元素类的 WPF 核心级集之间的连接点<xref:System.Windows.UIElement>表示服务。</xref:System.Windows.UIElement> 有关这些概念的详细信息，请参阅[WPF 体系结构](~/add/includes/ajax-current-ext-md.md)。       FrameworkElement 扩展<xref:System.Windows.UIElement>和添加了以下功能:-**布局系统定义**: FrameworkElement 的提供特定的 WPF 框架级别实现对于某些已定义为<xref:System.Windows.UIElement>.</xref:System.Windows.UIElement>中的虚拟成员的方法</xref:System.Windows.UIElement> 最值得注意的是，FrameworkElement 会对某些 WPF 核心级布局的重写，并改为提供应改为替代派生类的 WPF 框架级别等效项。 例如，FrameworkElement 密封<xref:System.Windows.UIElement.ArrangeCore%2A>但提供<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> </xref:System.Windows.UIElement.ArrangeCore%2A> 这些更改反映在 WPF 框架级别有一个完整的布局系统可能会使任何 FrameworkElement 的位置中的事实派生类。 在 WPF 核心构建常规的级别，某些成员[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]基于的布局解决方案位于的位置，但未定义该布局系统的实际引擎。 有关详细信息，请参阅[布局](~/add/includes/ajax-current-ext-md.md)。      -**逻辑树︰**常规[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]编程模型通常按正在元素树表示。 支持用于表达元素逻辑树中，作为树，并同时还支持用于标记中定义该树实现的 FrameworkElement 级别。 但是请注意 FrameworkElement 故意不会定义内容模型，并使这一责任派生的类。 有关详细信息，请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)。      -**对象生存期事件︰**通常是有用知道初始化某个元素时 （调用的构造函数） 或元素时首次加载到逻辑树。 FrameworkElement 定义与对象生存期相关的代码隐藏操作，涉及元素，例如添加更多的子元素提供有用的挂钩的多个事件。 有关详细信息，请参阅[对象生存期事件](~/add/includes/ajax-current-ext-md.md)。      -**支持数据绑定和动态资源引用︰**由实现数据绑定和资源的属性级别支持<xref:System.Windows.DependencyProperty>类和属性系统，但能够解决存储为一个成员值中包含<xref:System.Windows.Expression>（提供支持数据绑定和动态资源的编程构造） 实现的 FrameworkElement。</xref:System.Windows.Expression> </xref:System.Windows.DependencyProperty> 有关详细信息，请参阅[数据绑定概述](~/add/includes/ajax-current-ext-md.md)和[XAML 资源](~/add/includes/ajax-current-ext-md.md)。      -**样式︰** FrameworkElement 定义<xref:System.Windows.FrameworkElement.Style%2A>属性。</xref:System.Windows.FrameworkElement.Style%2A> 但是，FrameworkElement 不尚未定义支持模板，或者支持修饰器。 这些功能的控件类，例如<xref:System.Windows.Controls.Control>和<xref:System.Windows.Controls.ContentControl>.</xref:System.Windows.Controls.ContentControl></xref:System.Windows.Controls.Control>所引入      -**更多的动画支持︰**一些动画支持已定义为在 WPF 核心级别，但 FrameworkElement 扩展这通过实现<xref:System.Windows.FrameworkElement.BeginStoryboard%2A>和相关成员。</xref:System.Windows.FrameworkElement.BeginStoryboard%2A>       如下所示的类层次结构中，从许多[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]类派生自 FrameworkElement，直接或通过如<xref:System.Windows.Controls.Panel>或<xref:System.Windows.Controls.Control>.</xref:System.Windows.Controls.Control></xref:System.Windows.Controls.Panel>中间基类       如果你想要 FrameworkElement 用作基类，你可能想要首先检查现有的派生的类。 FrameworkElement 为大量的基本方案提供支持，但还没有大量的意义上的用于创建构建基块&quot;element&quot;为所需的功能[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]中[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]。 例如，FrameworkElement 未定义任何 true 的内容模型;用作基类的 FrameworkElement 不会定义一个属性，可以创建[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]子元素。 具体而言，你可能想要查看<xref:System.Windows.Controls.Control>和<xref:System.Windows.Controls.ContentControl>。</xref:System.Windows.Controls.ContentControl> </xref:System.Windows.Controls.Control>"
  syntax:
    content: >-
      [System.Windows.Markup.RuntimeNameProperty("Name")]

      [System.Windows.Markup.UsableDuringInitialization(true)]

      [System.Windows.Markup.XmlLangProperty("Language")]

      [System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))]

      public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  implements:
  - System.ComponentModel.ISupportInitialize
  - System.Windows.IFrameworkInputElement
  - System.Windows.Markup.IQueryAmbient
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnCreateAutomationPeer
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.FrameworkElement.#ctor
  id: '#ctor'
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FrameworkElement()
  nameWithType: FrameworkElement.FrameworkElement()
  fullName: System.Windows.FrameworkElement.FrameworkElement()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>类。"
  syntax:
    content: public FrameworkElement ();
    parameters: []
  overload: System.Windows.FrameworkElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ActualHeight
  id: ActualHeight
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ActualHeight
  nameWithType: FrameworkElement.ActualHeight
  fullName: System.Windows.FrameworkElement.ActualHeight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取此元素的呈现的高度。"
  remarks: "此属性是基于其他高度输入和布局系统的计算的值。 值由布局系统本身，基于实际呈现处理过程中，设置，并可能因此稍微属性的设置值如<xref:System.Windows.FrameworkElement.Height%2A>所输入的更改的基础。</xref:System.Windows.FrameworkElement.Height%2A>       由于 ActualHeight 是计算得出的值，你应注意可能有多个或增量更改与其各种操作后由布局系统报告。 布局系统可能计算所需的度量值的空间子元素、 约束由父元素中，依次类推。       虽然您无法设置此属性从[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，您可以基于<xref:System.Windows.Trigger>在样式中其值时。</xref:System.Windows.Trigger>      <a name=&quot;dependencyPropertyInfo_ActualHeight&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.ActualHeightProperty>"
  example:
  - "The following example displays various height properties.  \n  \n [!code-cs[HeightMinHeightMaxHeight#3](~/add/codesnippet/csharp/Height_MinHeight_MaxHeight_CSharp/Window1.xaml.cs#3)]\n [!code-vb[HeightMinHeightMaxHeight#3](~/add/codesnippet/visualbasic/Height_MinHeight_MaxHeight/Window1.xaml.vb#3)]"
  syntax:
    content: public double ActualHeight { get; }
    return:
      type: System.Double
      description: "元素的高度，这是中的值[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为 0 （零）。"
  overload: System.Windows.FrameworkElement.ActualHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ActualHeightProperty
  id: ActualHeightProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ActualHeightProperty
  nameWithType: FrameworkElement.ActualHeightProperty
  fullName: System.Windows.FrameworkElement.ActualHeightProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.ActualHeight*>依赖项属性。</xref:System.Windows.FrameworkElement.ActualHeight*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ActualHeightProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ActualWidth
  id: ActualWidth
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ActualWidth
  nameWithType: FrameworkElement.ActualWidth
  fullName: System.Windows.FrameworkElement.ActualWidth
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取此元素的呈现的宽度。"
  remarks: "此属性是基于其他宽度输入和布局系统的计算的值。 值由布局系统本身，基于实际呈现处理过程中，设置，并可能因此稍微属性的设置值如<xref:System.Windows.FrameworkElement.Width%2A>所输入的更改的基础。</xref:System.Windows.FrameworkElement.Width%2A>       由于 ActualWidth 是计算得出的值，你应注意可能有多个或增量更改与其各种操作后由布局系统报告。 布局系统可能计算所需的度量值的空间子元素、 约束由父元素中，依次类推。       虽然您无法设置此属性从[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，您可以基于<xref:System.Windows.Trigger>在样式中其值时。</xref:System.Windows.Trigger>      <a name=&quot;dependencyPropertyInfo_ActualWidth&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.ActualWidthProperty>"
  example:
  - "The following example displays various width properties.  \n  \n [!code-vb[WidthMinWidthMaxWidth#3](~/add/codesnippet/visualbasic/Width_MinWidth_MaxWidth/Window1.xaml.vb#3)]\n [!code-cs[WidthMinWidthMaxWidth#3](~/add/codesnippet/csharp/Width_MinWidth_MaxWidth_CSharp/Window1.xaml.cs#3)]"
  syntax:
    content: public double ActualWidth { get; }
    return:
      type: System.Double
      description: "元素的宽度，这是中的值[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为 0 （零）。"
  overload: System.Windows.FrameworkElement.ActualWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ActualWidthProperty
  id: ActualWidthProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ActualWidthProperty
  nameWithType: FrameworkElement.ActualWidthProperty
  fullName: System.Windows.FrameworkElement.ActualWidthProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.ActualWidth*>依赖项属性。</xref:System.Windows.FrameworkElement.ActualWidth*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ActualWidthProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  id: AddLogicalChild(System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: AddLogicalChild(Object)
  nameWithType: FrameworkElement.AddLogicalChild(Object)
  fullName: System.Windows.FrameworkElement.AddLogicalChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "将所提供的对象添加到此元素的逻辑树。"
  remarks: "使用此方法用于实现的上表示的元素的逻辑子元素的对象的集合。 子元素集合的集合维护操作可能会在属性 getter 或 setter，类处理的更改事件、 构造函数，或在这些集合类型本身。       对于控件作者操作在此级别的逻辑树不是建议的做法，除非所有可用的基控件类的内容模型都适用于你的控件方案。 请考虑级别的子类化<xref:System.Windows.Controls.ContentControl>， <xref:System.Windows.Controls.ItemsControl>，和<xref:System.Windows.Controls.HeaderedItemsControl>。</xref:System.Windows.Controls.HeaderedItemsControl> </xref:System.Windows.Controls.ItemsControl> </xref:System.Windows.Controls.ContentControl> 这些类提供的内容模型通过专用的逻辑树子元素的特定强制[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]，以及对其他功能中通常所需的支持[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]控件如通过模板的样式。 有关详细信息如何使用<xref:System.Windows.FrameworkElement.LogicalChildren%2A>和 AddLogicalChild，请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.FrameworkElement.LogicalChildren%2A>       如果在另一个进程循环访问的逻辑树时调用，AddLogicalChild 可能引发异常。"
  example:
  - "The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation. The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection. The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.  \n  \n [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/visualbasic/compositiontargetrenderinganimations/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]\n [!code-cs[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/csharp/CompositionTargetRenderingAnimations/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]"
  syntax:
    content: protected void AddLogicalChild (object child);
    parameters:
    - id: child
      type: System.Object
      description: "要添加的子元素。"
  overload: System.Windows.FrameworkElement.AddLogicalChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ApplyTemplate
  id: ApplyTemplate
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ApplyTemplate()
  nameWithType: FrameworkElement.ApplyTemplate()
  fullName: System.Windows.FrameworkElement.ApplyTemplate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "生成当前模板的可视化树如有必要，并返回一个值，该值指示是否的可视化树是否由此调用重新生成。"
  remarks: "应用程序可以调用此方法要保证元素的可视化树的完整性。 如果检查在代码中的树中的子元素，则可能需要采用此保证步骤。 对于典型的元素在应用程序内的逻辑，调用 ApplyTemplate 不是有必要，因为模板将应用到合适的点处的元素在其生存期自动。       在每个度量值上调用 ApplyTemplate WPF 框架级别布局系统通过将传递。       <xref:System.Windows.FrameworkElement>派生的类可以使用<xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>类处理程序的情况下其中显式调用此方法或由布局系统接收通知。</xref:System.Windows.FrameworkElement.OnApplyTemplate%2A></xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>模板是完全生成的附加到逻辑树中后调用。</xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>"
  syntax:
    content: public bool ApplyTemplate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果将视觉对象添加到树中。返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>否则为。"
  overload: System.Windows.FrameworkElement.ApplyTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  id: ArrangeCore(System.Windows.Rect)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ArrangeCore(Rect)
  nameWithType: FrameworkElement.ArrangeCore(Rect)
  fullName: System.Windows.FrameworkElement.ArrangeCore(Rect)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "实现<xref:System.Windows.UIElement.ArrangeCore*>(定义为中的虚拟机<xref href=&quot;System.Windows.UIElement&quot;> </xref>) 并密封实现。</xref:System.Windows.UIElement.ArrangeCore*>"
  remarks: "此方法被密封。 若要重写中专门为元素布局，你的<xref:System.Windows.FrameworkElement>派生的类必须重写<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</xref:System.Windows.FrameworkElement.ArrangeOverride%2A></xref:System.Windows.FrameworkElement>的排列处理你自定义元素的逻辑"
  syntax:
    content: protected override sealed void ArrangeCore (System.Windows.Rect finalRect);
    parameters:
    - id: finalRect
      type: System.Windows.Rect
      description: "父级中应使用此元素排列自身及其子元素的最终区域。"
  overload: System.Windows.FrameworkElement.ArrangeCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: FrameworkElement.ArrangeOverride(Size)
  fullName: System.Windows.FrameworkElement.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当在派生类中重写，定位子元素，并确定的大小<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>派生类。"
  syntax:
    content: protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);
    parameters:
    - id: finalSize
      type: System.Windows.Size
      description: "父级中应使用此元素排列自身及其子元素的最终区域。"
    return:
      type: System.Windows.Size
      description: "使用的实际大小。"
  overload: System.Windows.FrameworkElement.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BeginInit
  id: BeginInit
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BeginInit()
  nameWithType: FrameworkElement.BeginInit()
  fullName: System.Windows.FrameworkElement.BeginInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "开始初始化过程的此元素。"
  remarks: "如果你在执行尚未公开或将元素连接到任何元素树的方式调整它们，你可以对单独的元素调用此方法。 例如，你可能创建了一个新<xref:System.Windows.FrameworkElement>，但具有尚未将其附加到任何逻辑树。</xref:System.Windows.FrameworkElement> 或者，其中你元素是一个子元素在它的逻辑树可能不会连接到的窗口或页的应用程序。"
  syntax:
    content: public virtual void BeginInit ();
    parameters: []
  overload: System.Windows.FrameworkElement.BeginInit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BeginStoryboard(Storyboard)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "开始提供的情节提要中包含的操作的序列。"
  remarks: "大多数典型动画方案不使用此方法。 通常，你创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将其作为<xref:System.Windows.EventTrigger>上一个元素的内容。</xref:System.Windows.EventTrigger> </xref:System.Windows.Media.Animation.BeginStoryboard> </xref:System.Windows.Media.Animation.Storyboard> 当触发事件，动画将运行。 控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</xref:System.Windows.Media.Animation.Storyboard>       不使用的签名`isControllable`，参数，或指定该参数时， `false`，动画达到&quot;填充&quot;期时，就会立即删除了与动画的时间线时钟。 因此，在动画运行一次后将不能是重启。 动画的控制还要求情节提要具有[X:name 指令](~/add/includes/ajax-current-ext-md.md)或可由代码中的引用。"
  example:
  - "The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.  \n  \n [!code-vb[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/visualbasic/cubeanimation_xbap/page1.xaml.vb#febeginstoryboard)]\n [!code-cs[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/csharp/CubeAnimation_XBAP/Page1.xaml.cs#febeginstoryboard)]"
  syntax:
    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);
    parameters:
    - id: storyboard
      type: System.Windows.Media.Animation.Storyboard
      description: "若要开始情节提要。"
  overload: System.Windows.FrameworkElement.BeginStoryboard*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BeginStoryboard(Storyboard,HandoffBehavior)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "开始使用该属性已进行动画处理应执行的操作为指定的选项中提供的情节提要，包含的操作序列。"
  remarks: "大多数典型动画方案不使用此方法。 通常，你创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将其作为<xref:System.Windows.EventTrigger>上一个元素的内容。</xref:System.Windows.EventTrigger> </xref:System.Windows.Media.Animation.BeginStoryboard> </xref:System.Windows.Media.Animation.Storyboard> 当触发事件，动画将运行。 控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</xref:System.Windows.Media.Animation.Storyboard>       不使用的签名`isControllable`，参数，或指定该参数时， `false`，动画达到&quot;填充&quot;期时，就会立即删除了与动画的时间线时钟。 因此，在动画运行一次后将不能是重启。 动画的控制还要求情节提要具有[X:name 指令](~/add/includes/ajax-current-ext-md.md)或可由代码中的引用。       切换行为可以指定为<xref:System.Windows.Media.Animation.BeginStoryboard>.</xref:System.Windows.Media.Animation.BeginStoryboard>的属性      ## 使用撰写 HandoffBehavior 应用时<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>到通过使用属性<xref:System.Windows.Media.Animation.HandoffBehavior><xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>以前与该属性关联的对象可继续使用系统资源; 计时系统不会自动删除时钟。</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       若要避免性能问题时通过使用应用大量的时钟<xref:System.Windows.Media.Animation.HandoffBehavior>，完成后，应从属性的基值移除组合时钟。</xref:System.Windows.Media.Animation.HandoffBehavior> 有几种方法来移除时钟:-如果要从属性中移除所有时钟，使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>动画对象的方法。</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 指定正进行动画处理的第一个参数的属性和`null`为第二个。 这从属性中移除所有动画时钟。      -若要删除特定<xref:System.Windows.Media.Animation.AnimationClock>的时钟，列表从使用<xref:System.Windows.Media.Animation.Clock.Controller%2A><xref:System.Windows.Media.Animation.AnimationClock>要检索的<xref:System.Windows.Media.Animation.ClockController>，然后调用该<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法的<xref:System.Windows.Media.Animation.ClockController>。</xref:System.Windows.Media.Animation.ClockController></xref:System.Windows.Media.Animation.ClockController.Remove%2A></xref:System.Windows.Media.Animation.ClockController></xref:System.Windows.Media.Animation.AnimationClock>属性</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.AnimationClock> 这通常是<xref:System.Windows.Media.Animation.Clock.Completed>时钟的事件处理程序。</xref:System.Windows.Media.Animation.Clock.Completed> 请注意，仅根时钟可以受<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性子时钟返回`null`。</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> 另请注意，<xref:System.Windows.Media.Animation.Clock.Completed>如果时钟的有效持续时间都是永久性的则不会引发事件。</xref:System.Windows.Media.Animation.Clock.Completed>  在这种情况下，用户必须确定何时调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       这是主要用于动画上长生存期对象的问题。  一个对象进行垃圾回收，其时钟还断开连接，并垃圾收集。       有关时钟对象的详细信息，请参阅[动画和计时系统概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.  \n  \n [!code-vb[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/visualbasic/cubeanimation_xbap/page1.xaml.vb#febeginstoryboard)]\n [!code-cs[CubeAnimation#FEBeginStoryboard](~/add/codesnippet/csharp/CubeAnimation_XBAP/Page1.xaml.cs#febeginstoryboard)]"
  syntax:
    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);
    parameters:
    - id: storyboard
      type: System.Windows.Media.Animation.Storyboard
      description: "若要开始情节提要。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "枚举描述行为，以使用如果情节提要中所述的属性已进行动画处理的值。"
  overload: System.Windows.FrameworkElement.BeginStoryboard*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  id: BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "开始提供的演示图板，具有指定状态的动画启动后对其控件中包含的操作序列。"
  remarks: "大多数典型动画方案不使用此方法。 通常，你创建<xref:System.Windows.Media.Animation.Storyboard>或<xref:System.Windows.Media.Animation.BeginStoryboard>元素标记，然后将其作为<xref:System.Windows.EventTrigger>上一个元素的内容。</xref:System.Windows.EventTrigger> </xref:System.Windows.Media.Animation.BeginStoryboard> </xref:System.Windows.Media.Animation.Storyboard> 当触发事件，动画将运行。 控制的各个方面的大多数<xref:System.Windows.Media.Animation.Storyboard>可以通过在标记中公开的属性进行寻址。</xref:System.Windows.Media.Animation.Storyboard>       不使用的签名`isControllable`，参数，或指定该参数时， `false`，动画达到&quot;填充&quot;期时，就会立即删除了与动画的时间线时钟。 因此，在动画运行一次后将不能是重启。 动画的控制还要求情节提要具有[X:name 指令](~/add/includes/ajax-current-ext-md.md)或可由代码中的引用。       切换行为可以指定为<xref:System.Windows.Media.Animation.BeginStoryboard>.</xref:System.Windows.Media.Animation.BeginStoryboard>的属性      ## 使用撰写 HandoffBehavior 应用时<xref:System.Windows.Media.Animation.Storyboard>， <xref:System.Windows.Media.Animation.AnimationTimeline>，或<xref:System.Windows.Media.Animation.AnimationClock>到通过使用属性<xref:System.Windows.Media.Animation.HandoffBehavior><xref:System.Windows.Media.Animation.HandoffBehavior>、 任何<xref:System.Windows.Media.Animation.Clock>以前与该属性关联的对象可继续使用系统资源; 计时系统不会自动删除时钟。</xref:System.Windows.Media.Animation.Clock> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.HandoffBehavior> </xref:System.Windows.Media.Animation.AnimationClock> </xref:System.Windows.Media.Animation.AnimationTimeline> </xref:System.Windows.Media.Animation.Storyboard>       若要避免性能问题时通过使用应用大量的时钟<xref:System.Windows.Media.Animation.HandoffBehavior>，完成后，应从属性的基值移除组合时钟。</xref:System.Windows.Media.Animation.HandoffBehavior> 有几种方法来移除时钟:-如果要从属性中移除所有时钟，使用<xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29>或<xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29>动画对象的方法。</xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> </xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 指定正进行动画处理的第一个参数的属性和`null`为第二个。 这从属性中移除所有动画时钟。      -若要删除特定<xref:System.Windows.Media.Animation.AnimationClock>的时钟，列表从使用<xref:System.Windows.Media.Animation.Clock.Controller%2A><xref:System.Windows.Media.Animation.AnimationClock>要检索的<xref:System.Windows.Media.Animation.ClockController>，然后调用该<xref:System.Windows.Media.Animation.ClockController.Remove%2A>方法的<xref:System.Windows.Media.Animation.ClockController>。</xref:System.Windows.Media.Animation.ClockController></xref:System.Windows.Media.Animation.ClockController.Remove%2A></xref:System.Windows.Media.Animation.ClockController></xref:System.Windows.Media.Animation.AnimationClock>属性</xref:System.Windows.Media.Animation.Clock.Controller%2A></xref:System.Windows.Media.Animation.AnimationClock> 这通常是<xref:System.Windows.Media.Animation.Clock.Completed>时钟的事件处理程序。</xref:System.Windows.Media.Animation.Clock.Completed> 请注意，仅根时钟可以受<xref:System.Windows.Media.Animation.ClockController>;<xref:System.Windows.Media.Animation.Clock.Controller%2A>属性子时钟返回`null`。</xref:System.Windows.Media.Animation.Clock.Controller%2A> </xref:System.Windows.Media.Animation.ClockController> 另请注意，<xref:System.Windows.Media.Animation.Clock.Completed>如果时钟的有效持续时间都是永久性的则不会引发事件。</xref:System.Windows.Media.Animation.Clock.Completed>  在这种情况下，用户必须确定何时调用<xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</xref:System.Windows.Media.Animation.ClockController.Remove%2A>       这是主要用于动画上长生存期对象的问题。  一个对象进行垃圾回收，其时钟还断开连接，并垃圾收集。       有关时钟对象的详细信息，请参阅[动画和计时系统概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);
    parameters:
    - id: storyboard
      type: System.Windows.Media.Animation.Storyboard
      description: "若要开始情节提要。"
    - id: handoffBehavior
      type: System.Windows.Media.Animation.HandoffBehavior
      description: "枚举描述行为，以使用如果情节提要中所述的属性已进行动画处理的值。"
    - id: isControllable
      type: System.Boolean
      description: "声明动画是否是控制的 （可以暂停） 启动后。"
  overload: System.Windows.FrameworkElement.BeginStoryboard*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BindingGroup
  id: BindingGroup
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BindingGroup
  nameWithType: FrameworkElement.BindingGroup
  fullName: System.Windows.FrameworkElement.BindingGroup
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置<xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>用于元素。"
  remarks: "A<xref:System.Windows.Data.BindingGroup>可以用于验证对象的多个属性的值。</xref:System.Windows.Data.BindingGroup> 例如，假设应用程序提示用户输入地址，然后填充类型的对象`Address`，其中具有属性`Street`， `City`， `ZipCode`，和`Country`，与用户提供的值。 应用程序具有包含四个面板<xref:System.Windows.Controls.TextBox>控件，其中每个绑定到对象的属性之一。</xref:System.Windows.Controls.TextBox> 你可以使用<xref:System.Windows.Controls.ValidationRule>中<xref:System.Windows.Data.BindingGroup>验证`Address`对象。</xref:System.Windows.Data.BindingGroup> </xref:System.Windows.Controls.ValidationRule> 例如，<xref:System.Windows.Controls.ValidationRule>可确保邮政编码的有效地址的国家/地区。</xref:System.Windows.Controls.ValidationRule>       子元素继承<xref:System.Windows.Data.BindingGroup>从其父元素，就像使用任何其他可继承的属性。</xref:System.Windows.Data.BindingGroup>      <a name=&quot;dependencyPropertyInfo_BindingGroup&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  |元数据属性设置为**true**|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement.BindingGroupProperty>"
  example:
  - "The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source. The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroupComplete](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupcomplete)]  \n  \n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.  In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \n  \n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]  \n  \n To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.  The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.  \n  \n [!code-cs[BindingGroupSnippets#UpdateSourcesClick](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#updatesourcesclick)]\n [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#updatesourcesclick)]"
  syntax:
    content: public System.Windows.Data.BindingGroup BindingGroup { get; set; }
    return:
      type: System.Windows.Data.BindingGroup
      description: "<xref href=&quot;System.Windows.Data.BindingGroup&quot;> </xref>用于元素。"
  overload: System.Windows.FrameworkElement.BindingGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BindingGroupProperty
  id: BindingGroupProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BindingGroupProperty
  nameWithType: FrameworkElement.BindingGroupProperty
  fullName: System.Windows.FrameworkElement.BindingGroupProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.BindingGroup*>依赖项属性。</xref:System.Windows.FrameworkElement.BindingGroup*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty BindingGroupProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BringIntoView
  id: BringIntoView
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BringIntoView()
  nameWithType: FrameworkElement.BringIntoView()
  fullName: System.Windows.FrameworkElement.BringIntoView()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "尝试将此元素放入视图，它包含在任何可滚动区域内。"
  remarks: "通过调用此方法，你将提升<xref:System.Windows.FrameworkElement.RequestBringIntoView>源自当前元素的事件。</xref:System.Windows.FrameworkElement.RequestBringIntoView> 将引发此事件，以便其可以通过处理<xref:System.Windows.Controls.ScrollViewer>，或派生或类似的类。</xref:System.Windows.Controls.ScrollViewer> 预期的行为是由父元素，标记为已处理的事件数据，在处理此事件和事件的源放入通过中嵌入的逻辑视图<xref:System.Windows.Controls.ScrollViewer>控件。</xref:System.Windows.Controls.ScrollViewer> 既不<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件和 BringIntoView 方法传输有关的成功或失败，而非，通常会将事件标记上处理的成功的任何信息。</xref:System.Windows.FrameworkElement.RequestBringIntoView> 失败的原因可以包括元素设置，例如<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>以外的某些值</xref:System.Windows.UIElement.Visibility%2A>       如果使用未指定的签名`targetRectangle`，然后的整个元素大小 (其<xref:System.Windows.UIElement.RenderSize%2A>) 将变为可见。</xref:System.Windows.UIElement.RenderSize%2A>       通过调用此方法，你可能将调用<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>在任何父可滚动区域中包含的元素。</xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 如果此元素不包含在可滚动区域中，<xref:System.Windows.FrameworkElement.RequestBringIntoView>仍引发事件，但因为没有事件侦听器将是不起作用。</xref:System.Windows.FrameworkElement.RequestBringIntoView>"
  example:
  - "The following example implements a handler for an application navigation event that responds whenever the [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)] being navigated to includes a fragment. The fragment is named in the [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)] following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame. BringIntoView and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.  \n  \n [!code-vb[FragmentNavigationSample#FEBringIntoView](~/add/codesnippet/visualbasic/FragmentNavigationSampleVisualBasic/MainWindow.xaml.vb#febringintoview)]\n [!code-cs[FragmentNavigationSample#FEBringIntoView](~/add/codesnippet/csharp/FragmentNavigationSample/MainWindow.xaml.cs#febringintoview)]"
  syntax:
    content: public void BringIntoView ();
    parameters: []
  overload: System.Windows.FrameworkElement.BringIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  id: BringIntoView(System.Windows.Rect)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: BringIntoView(Rect)
  nameWithType: FrameworkElement.BringIntoView(Rect)
  fullName: System.Windows.FrameworkElement.BringIntoView(Rect)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "尝试将此元素的提供的区域大小放入视图，它包含在任何可滚动区域内。"
  remarks: "通过调用此方法，你将提升<xref:System.Windows.FrameworkElement.RequestBringIntoView>源自当前元素的事件。</xref:System.Windows.FrameworkElement.RequestBringIntoView> 将引发此事件，以便其可以通过处理<xref:System.Windows.Controls.ScrollViewer>，或派生或类似的类。</xref:System.Windows.Controls.ScrollViewer> 预期的行为是由父元素，标记为已处理的事件数据，在处理此事件和事件的源放入通过中嵌入的逻辑视图<xref:System.Windows.Controls.ScrollViewer>控件。</xref:System.Windows.Controls.ScrollViewer> 既不<xref:System.Windows.FrameworkElement.RequestBringIntoView>事件也不<xref:System.Windows.FrameworkElement.BringIntoView%2A>方法不会传输有关的成功或失败，而非，通常会将事件标记上处理的成功的任何信息。</xref:System.Windows.FrameworkElement.BringIntoView%2A> </xref:System.Windows.FrameworkElement.RequestBringIntoView> 失败的原因可以包括元素设置，例如<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>以外的某些值</xref:System.Windows.UIElement.Visibility%2A>       如果使用未指定的签名`targetRectangle`，然后的整个元素大小 (其<xref:System.Windows.UIElement.RenderSize%2A>) 将变为可见。</xref:System.Windows.UIElement.RenderSize%2A>       通过调用此方法，你可能将调用<xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>在任何父可滚动区域中包含的元素。</xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 如果此元素不包含在可滚动区域中，<xref:System.Windows.FrameworkElement.RequestBringIntoView>仍引发事件，但因为没有事件侦听器将是不起作用。</xref:System.Windows.FrameworkElement.RequestBringIntoView>"
  example:
  - "The following example has a large graphic in a constrained scrolling region. A button on the page has a handler that scrolls the view to a particular region of the large graphic.  \n  \n [!code-xml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/add/codesnippet/xaml/BaseElementsSmorgasbord/Page1.xaml#bringintoviewrectmarkup)]  \n  \n [!code-cs[BaseElementsSmorgasbord#BringIntoViewRectCode](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#bringintoviewrectcode)]\n [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#bringintoviewrectcode)]"
  syntax:
    content: public void BringIntoView (System.Windows.Rect targetRectangle);
    parameters:
    - id: targetRectangle
      type: System.Windows.Rect
      description: "此外应放入视图的元素的指定的大小。"
  overload: System.Windows.FrameworkElement.BringIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenu
  id: ContextMenu
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenu
  nameWithType: FrameworkElement.ContextMenu
  fullName: System.Windows.FrameworkElement.ContextMenu
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置通过请求的上下文菜单时应该显示的上下文菜单元素[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]从在此元素。"
  remarks: "<xref:System.Windows.Controls.ContextMenu>本身是<xref:System.Windows.FrameworkElement>派生类，并将从技术上讲可能<xref:System.Windows.Controls.ContextMenu>本身可以具有 ContextMenu 属性。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.FrameworkElement></xref:System.Windows.Controls.ContextMenu> 但是，这将创建用户提供令人困惑的上下文菜单体验，并且不建议这样做。      <a name=&quot;dependencyPropertyInfo_ContextMenu&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.ContextMenuProperty>"
  syntax:
    content: public System.Windows.Controls.ContextMenu ContextMenu { get; set; }
    return:
      type: System.Windows.Controls.ContextMenu
      description: "分配给此元素的上下文菜单。"
  overload: System.Windows.FrameworkElement.ContextMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenuClosing
  id: ContextMenuClosing
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenuClosing
  nameWithType: FrameworkElement.ContextMenuClosing
  fullName: System.Windows.FrameworkElement.ContextMenuClosing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "即将关闭元素上的任何上下文菜单时发生。"
  remarks: "若要取消关闭上下文菜单，事件的处理程序应将其标记为已处理。       若要将此事件用作<xref:System.Windows.EventTrigger>样式，则必须引用的事件的基础服务的定义︰ [!code-xml [CorePseudocode #FEContextMenuClosing](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuclosing) ] (此用法是必需的因为上的事件实现<xref:System.Windows.FrameworkElement>公开基础服务事件未映射的 ContextMenuClosing 标识符，以便你可以将它用作触发器)。</xref:System.Windows.FrameworkElement> </xref:System.Windows.EventTrigger>       <xref:System.Windows.Controls.ContextMenu>本身是<xref:System.Windows.FrameworkElement>派生类，但 ContextMenuClosing 事件不会引发由上下文菜单直接。</xref:System.Windows.FrameworkElement></xref:System.Windows.Controls.ContextMenu> 相反，从&quot;拥有&quot;作为属性的上下文菜单，并仅在用户尝试关闭用户界面中的上下文菜单时引发的元素，将引发事件。 但是有可能<xref:System.Windows.Controls.ContextMenu>本身可以具有<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性 （嵌套的上下文菜单）。</xref:System.Windows.FrameworkElement.ContextMenu%2A> </xref:System.Windows.Controls.ContextMenu> 在这种情况下<xref:System.Windows.Controls.ContextMenu>实际上确实拥有嵌套<xref:System.Windows.Controls.ContextMenu>，可能引发事件，与嵌套的上下文菜单上的事件源。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ContextMenu>       <xref:System.Windows.Controls.ContextMenu>类本身也有类似的事件 (<xref:System.Windows.Controls.ContextMenu.Closed>) 但<xref:System.Windows.Controls.ContextMenu.Closed>事件不提供你取消用户执行任何操作的机会。</xref:System.Windows.Controls.ContextMenu.Closed> </xref:System.Windows.Controls.ContextMenu.Closed> </xref:System.Windows.Controls.ContextMenu>      <a name=&quot;routedEventInfo_ContextMenuClosing&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Controls.ContextMenuEventHandler>|     -重写<xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A>实现处理此事件在派生类中的类。</xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> </xref:System.Windows.Controls.ContextMenuEventHandler> </xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>"
  syntax:
    content: public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;
    return:
      type: System.Windows.Controls.ContextMenuEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenuClosingEvent
  id: ContextMenuClosingEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenuClosingEvent
  nameWithType: FrameworkElement.ContextMenuClosingEvent
  fullName: System.Windows.FrameworkElement.ContextMenuClosingEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.ContextMenuClosing&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenuOpening
  id: ContextMenuOpening
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenuOpening
  nameWithType: FrameworkElement.ContextMenuOpening
  fullName: System.Windows.FrameworkElement.ContextMenuOpening
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当打开任何元素上的上下文菜单时发生。"
  remarks: "若要手动打开上下文菜单，事件的处理程序应将相关的事件标记为已处理。 否则为的现有值<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性将用于自动打开上下文菜单。</xref:System.Windows.FrameworkElement.ContextMenu%2A> 将标记处理的事件可有效地取消的默认操作，并且可有机会重置的<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性，然后打开新<xref:System.Windows.Controls.ContextMenu>。</xref:System.Windows.Controls.ContextMenu></xref:System.Windows.FrameworkElement.ContextMenu%2A>的值 但是，没有应该注意的计时问题。 若要完全替换通过 ContextMenuOpening 处理程序的上下文菜单，初始上下文菜单不能为 null / 空。 或者，你可能需要处理该事件，然后手动打开新的上下文菜单。 有关详细信息，请参阅[如何︰ 处理 ContextMenuOpening 事件](~/add/includes/ajax-current-ext-md.md)。       若要将此事件用作<xref:System.Windows.EventTrigger>样式，则必须引用基础的附加的事件︰ [!code-xml [CorePseudocode #FEContextMenuOpening](~/add/codesnippet/xaml/CorePseudocode/pseudocode.xaml#fecontextmenuopening) ] (此用法是必需的因为上的事件实现<xref:System.Windows.FrameworkElement>公开基础服务事件未映射的 ContextMenuOpening 标识符，以便你可以在触发器中使用它)。</xref:System.Windows.FrameworkElement> </xref:System.Windows.EventTrigger>       <xref:System.Windows.Controls.ContextMenu>本身是<xref:System.Windows.FrameworkElement>派生类，但不是会从上下文菜单中打开作为源引发此事件。</xref:System.Windows.FrameworkElement></xref:System.Windows.Controls.ContextMenu> 从&quot;拥有&quot;作为属性的上下文菜单，并仅在用户尝试在 UI 中打开上下文菜单时引发的元素，将引发事件。 之所以<xref:System.Windows.Controls.ContextMenu>本身可以具有<xref:System.Windows.FrameworkElement.ContextMenu%2A>属性，但你应避免这种情况下 (有关详细信息，请参阅<xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName>)。</xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.ContextMenu%2A> </xref:System.Windows.Controls.ContextMenu>       <xref:System.Windows.Controls.ContextMenu>类本身也有类似的事件 (<xref:System.Windows.Controls.ContextMenu.Opened>) 但<xref:System.Windows.Controls.ContextMenu.Opened>不提供取消用户执行任何操作的机会。</xref:System.Windows.Controls.ContextMenu.Opened> </xref:System.Windows.Controls.ContextMenu.Opened> </xref:System.Windows.Controls.ContextMenu>      <a name=&quot;routedEventInfo_ContextMenuOpening&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Controls.ContextMenuEventHandler>|     -重写<xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A>实现处理此事件在派生类中的类。</xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> </xref:System.Windows.Controls.ContextMenuEventHandler> </xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>"
  syntax:
    content: public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;
    return:
      type: System.Windows.Controls.ContextMenuEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenuOpeningEvent
  id: ContextMenuOpeningEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenuOpeningEvent
  nameWithType: FrameworkElement.ContextMenuOpeningEvent
  fullName: System.Windows.FrameworkElement.ContextMenuOpeningEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.ContextMenuOpening&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ContextMenuProperty
  id: ContextMenuProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ContextMenuProperty
  nameWithType: FrameworkElement.ContextMenuProperty
  fullName: System.Windows.FrameworkElement.ContextMenuProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.ContextMenu*>依赖项属性。</xref:System.Windows.FrameworkElement.ContextMenu*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ContextMenuProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Cursor
  id: Cursor
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Cursor
  nameWithType: FrameworkElement.Cursor
  fullName: System.Windows.FrameworkElement.Cursor
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置当鼠标指针位于此元素时，显示的光标。"
  remarks: "在设置此属性时[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]、[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]处理器依赖于针对类型转换<xref:System.Windows.Input.Cursor>类来计算该字符串。</xref:System.Windows.Input.Cursor> 所提供的字符串的计算结果应为<xref:System.Windows.Input.CursorType>值。</xref:System.Windows.Input.CursorType> 请参阅<xref:System.Windows.Input.Cursor>有关详细信息。</xref:System.Windows.Input.Cursor>       是否建立此属性的光标将或将不会显示在鼠标指针位于此元素时也是依赖于的值<xref:System.Windows.FrameworkElement.ForceCursor%2A>属性。</xref:System.Windows.FrameworkElement.ForceCursor%2A> 此外，与事件相关的注意事项，如活动拖动、 鼠标捕获、 文本编辑控件，以此类推内, 模式还将影响光标，并且其优先级高于此属性中指定的值。       若要恢复的此属性设置为最终的默认行为，请将其设置为`null`试。       `null`默认的真正含义的实际光标值确定此处延迟，并且应从其他地方获取。 如果没有来自任何源的编程值显示的默认光标，则光标[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]应用程序将是一个箭头。 但是，暂时性光标发生变化，未设置为元素的光标值时通过传递。 属性将仅报告中的非 null 值光标情况下，它是实际设置，例如通过代码或样式。 每个移动的鼠标悬停[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]应用程序将引发<xref:System.Windows.UIElement.QueryCursor>事件。</xref:System.Windows.UIElement.QueryCursor> 该事件将冒泡，并且在路由任何元素都有机会对事件进行处理，并将光标通过此事件的自变量的值设置。 这是产生显而易见的光标，在大多数情况下的机制。 如果<xref:System.Windows.UIElement.QueryCursor>处理程序返回一个光标结果中，则事实事件进行处理，并且参数中有更改的值优先于任何级别的游标属性的值除非<xref:System.Windows.FrameworkElement.ForceCursor%2A>设置。</xref:System.Windows.FrameworkElement.ForceCursor%2A> </xref:System.Windows.UIElement.QueryCursor>       如果不创建自定义光标，已将此属性通常设置为静态属性值的<xref:System.Windows.Input.Cursors>类。</xref:System.Windows.Input.Cursors> 设置光标在代码中需要以下项之一:-调用<xref:System.Windows.Input.Cursor>构造函数获取<xref:System.Windows.Input.Cursor>实例。</xref:System.Windows.Input.Cursor> </xref:System.Windows.Input.Cursor> 这两个签名<xref:System.Windows.Input.Cursor>构造函数使用的流或文件，为你创建的预期<xref:System.Windows.Input.Cursor>自定义光标对象。</xref:System.Windows.Input.Cursor> </xref:System.Windows.Input.Cursor>      -使用<xref:System.Windows.Input.CursorConverter>类并将其<xref:System.Windows.Input.CursorConverter.ConvertFrom%2A>方法，以指定通过游标<xref:System.Windows.Input.CursorType>，或可以计算为字符串<xref:System.Windows.Input.CursorType>，并强制转换到<xref:System.Windows.Input.Cursor>。</xref:System.Windows.Input.Cursor>返回</xref:System.Windows.Input.CursorType></xref:System.Windows.Input.CursorType></xref:System.Windows.Input.CursorConverter.ConvertFrom%2A></xref:System.Windows.Input.CursorConverter>       设置<xref:System.Windows.Input.Cursor>在部分信任环境中未启用为自定义值。</xref:System.Windows.Input.Cursor> 有关自定义的游标的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Cursor&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.CursorProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.CursorProperty>"
  example:
  - "The following example shows how to deliberately set the cursor graphic.  \n  \n [!code-cs[cursors#ChangeCursorsSample](~/add/codesnippet/csharp/cursors/Window1.xaml.cs#changecursorssample)]\n [!code-vb[cursors#ChangeCursorsSample](~/add/codesnippet/visualbasic/cursors/Window1.xaml.vb#changecursorssample)]"
  syntax:
    content: public System.Windows.Input.Cursor Cursor { get; set; }
    return:
      type: System.Windows.Input.Cursor
      description: "要显示的光标。 默认值指<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>按此依赖属性。 但是，在运行时的实际默认值将来自多种因素。"
  overload: System.Windows.FrameworkElement.Cursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.CursorProperty
  id: CursorProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: CursorProperty
  nameWithType: FrameworkElement.CursorProperty
  fullName: System.Windows.FrameworkElement.CursorProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Cursor*>依赖项属性。</xref:System.Windows.FrameworkElement.Cursor*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty CursorProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.DataContext
  id: DataContext
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: DataContext
  nameWithType: FrameworkElement.DataContext
  fullName: System.Windows.FrameworkElement.DataContext
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的数据上下文，参与数据绑定时。"
  remarks: "*数据上下文*是使元素可以信息从其父元素继承有关用于绑定，以及绑定，如路径的其他特征的数据源的概念。       可以直接设置数据上下文[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]对象，并且将绑定到该对象的属性计算。 或者，可以设置的数据上下文为<xref:System.Windows.Data.DataSourceProvider>对象。</xref:System.Windows.Data.DataSourceProvider>       此依赖属性继承属性值。 如果没有无需通过本地值或样式建立的 DataContext 其他值的子元素，则属性系统将设置此值为最接近的父元素的 DataContext 值与分配此值。       或者，你可以使用的以下属性之一<xref:System.Windows.Data.Binding>类显式指定绑定源︰ <xref:System.Windows.Data.Binding.ElementName%2A>， <xref:System.Windows.Data.Binding.Source%2A>，或<xref:System.Windows.Data.Binding.RelativeSource%2A>。</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> </xref:System.Windows.Data.Binding.ElementName%2A> </xref:System.Windows.Data.Binding> 有关详细信息，请参阅[如何︰ 指定绑定源](~/add/includes/ajax-current-ext-md.md)。       在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，DataContext 通常设置为作为<xref:System.Windows.Data.Binding>声明。</xref:System.Windows.Data.Binding> 你可以使用属性元素语法或特性语法。 特性语法在此页上的示例所示。 代码还可用于设置 DataContext。       DataContext 是可绑定的属性，以便于可能会将一个上下文绑定到另一个方案。 但是，如果你将绑定到 DataContext，请注意不创建循环绑定引用 （不绑定 DataContext 自身，这是由于 DataContext 属性的属性值继承特性执行）。      <a name=&quot;xamlPropertyElementUsage_DataContext&quot;></a># # XAML 属性元素用法```   <object>     <object.DataContext>       <dataContextObject />     </object.DataContext>   </object>   ``` <a name=&quot;xamlAttributeUsage_DataContext&quot;> </a> # # XAML 属性用法```   <object DataContext=&quot;bindingUsage&quot;/>   - or -   <object DataContext=&quot;{resourceExtension contextResourceKey}&quot;/>   ``` <a name=&quot;xamlValues_DataContext&quot;> </a> # # XAML 值*dataContextObject*用作父元素内的任何绑定的数据上下文直接嵌入的对象。             通常情况下，此对象是<xref:System.Windows.Data.Binding>或另一个<xref:System.Windows.Data.BindingBase>派生类。</xref:System.Windows.Data.BindingBase> </xref:System.Windows.Data.Binding> 或者，原始数据的任何[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]对象适用于绑定可能会放置在这里，与更高版本定义的实际绑定的类型。       *bindingUsage*计算结果为适当的数据上下文的绑定用法。 有关详细信息，请参阅[绑定标记扩展](~/add/includes/ajax-current-ext-md.md)。       *resourceExtension*以下项之一︰ 或。 在引用定义为资源中的对象的原始数据时，使用这种用法。 请参阅[XAML 资源](~/add/includes/ajax-current-ext-md.md)。       *contextResourceKey*内一种<xref:System.Windows.ResourceDictionary>。</xref:System.Windows.ResourceDictionary>从发出请求的对象的密钥标识符      <a name=&quot;dependencyPropertyInfo_DataContext&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.DataContextProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement.DataContextProperty>"
  example:
  - "The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.  \n  \n [!code-xml[MasterDetail#DataContextProperty](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty)]  \n[!code-xml[MasterDetail#DataContextProperty2](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty2)]  \n[!code-xml[MasterDetail#DataContextProperty3](~/add/codesnippet/xaml/MasterDetail/Page1.xaml#datacontextproperty3)]"
  syntax:
    content: public object DataContext { get; set; }
    return:
      type: System.Object
      description: "要用作数据上下文的对象。"
  overload: System.Windows.FrameworkElement.DataContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.DataContextChanged
  id: DataContextChanged
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: DataContextChanged
  nameWithType: FrameworkElement.DataContextChanged
  fullName: System.Windows.FrameworkElement.DataContextChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当此元素的数据上下文更改时发生。"
  remarks: "数据上下文和数据绑定的说明，请参阅[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。      1> [!IMPORTANT]&1;> 时<xref:System.Windows.FrameworkElement.DataContext%2A>元素更改，此元素上的所有数据绑定属性可能会受到都影响。</xref:System.Windows.FrameworkElement.DataContext%2A> 这适用于任何子元素的逻辑树中中的当前元素继承的数据上下文，以及当前元素本身。 此类的所有现有绑定必须重新解释新<xref:System.Windows.FrameworkElement.DataContext%2A>并将重新计算绑定结果。</xref:System.Windows.FrameworkElement.DataContext%2A> 数据绑定引擎不是有关这些重新计算，相对于引发 DataContextChanged 事件的顺序确定的。 事件发生后, 或在任意组合，该事件前, 可以出现重新计算。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.DataContextProperty
  id: DataContextProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: DataContextProperty
  nameWithType: FrameworkElement.DataContextProperty
  fullName: System.Windows.FrameworkElement.DataContextProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.DataContext*>依赖项属性。</xref:System.Windows.FrameworkElement.DataContext*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty DataContextProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.DefaultStyleKey
  id: DefaultStyleKey
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: DefaultStyleKey
  nameWithType: FrameworkElement.DefaultStyleKey
  fullName: System.Windows.FrameworkElement.DefaultStyleKey
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置要使用可在使用或定义主题样式时引用此控件的样式的键。"
  remarks: "此属性通常不通过其直接属性访问器的任何设置。 相反，替代此依赖项属性的特定类型的元数据，每次创建新的<xref:System.Windows.FrameworkElement>派生类。</xref:System.Windows.FrameworkElement> 当派生的控件时，调用<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法依据<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>在控件的静态构造函数内的标识符，派生类 （或等效的类初始化）。</xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>       通常，控件重写其自己的类型，此属性的默认值，但在某些情况下无法也使用的基类型存在主题字典中的样式。 如果基控件的控件模板完全定义的可视表示形式该派生，并且派生的类型公开的任何其他成员不需要的其他元素的控件模板的一部分，这是控件的仅可行的。       如果你希望元素或控件，以防出现故意不使用主题样式，设置<xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>属性`true`。</xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A>      <a name=&quot;dependencyPropertyInfo_DefaultStyleKey&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>"
  example:
  - "The following example illustrates the dependency property metadata override usage discussed in Remarks. This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly. The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](~/add/includes/ajax-current-ext-md.md)) and finally overrides the DefaultStyleKey dependency property metadata on the `NumericUpDown` class. DefaultStyleKey always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control. The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](http://go.microsoft.com/fwlink/?LinkID=160025).  \n  \n [!code-cs[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/add/codesnippet/csharp/CustomControlLibrary/NumericUpDown.cs#staticctorofcustomclasscommontasks)]\n [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/add/codesnippet/visualbasic/customcontrollibrary/numericupdown.vb#staticctorofcustomclasscommontasks)]  \n[!code-cs[CustomControlNumericUpDown#Close](~/add/codesnippet/csharp/CustomControlLibrary/NumericUpDown.cs#close)]\n[!code-vb[CustomControlNumericUpDown#Close](~/add/codesnippet/visualbasic/customcontrollibrary/numericupdown.vb#close)]"
  syntax:
    content: protected object DefaultStyleKey { get; set; }
    return:
      type: System.Object
      description: "样式键。 为了作为主题样式查找的一部分正常工作，此值应为<xref:System.Type>带样式的控件。</xref:System.Type>"
  overload: System.Windows.FrameworkElement.DefaultStyleKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.DefaultStyleKeyProperty
  id: DefaultStyleKeyProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: DefaultStyleKeyProperty
  nameWithType: FrameworkElement.DefaultStyleKeyProperty
  fullName: System.Windows.FrameworkElement.DefaultStyleKeyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.DefaultStyleKey*>依赖项属性。</xref:System.Windows.FrameworkElement.DefaultStyleKey*>"
  syntax:
    content: protected static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.EndInit
  id: EndInit
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: EndInit()
  nameWithType: FrameworkElement.EndInit()
  fullName: System.Windows.FrameworkElement.EndInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "指示元素的初始化过程已完成。"
  remarks: "如果<xref:System.Windows.FrameworkElement.BeginInit%2A>之前已调用，基实现将引发<xref:System.Windows.FrameworkElement.Initialized>事件。</xref:System.Windows.FrameworkElement.Initialized> </xref:System.Windows.FrameworkElement.BeginInit%2A> 否则为如果<xref:System.Windows.FrameworkElement.BeginInit%2A>未调用或它无法确定是否<xref:System.Windows.FrameworkElement.BeginInit%2A>调用，<xref:System.Windows.FrameworkElement.Initialized>则不会引发并且改为引发异常。</xref:System.Windows.FrameworkElement.Initialized> </xref:System.Windows.FrameworkElement.BeginInit%2A> </xref:System.Windows.FrameworkElement.BeginInit%2A>"
  syntax:
    content: public virtual void EndInit ();
    parameters: []
  overload: System.Windows.FrameworkElement.EndInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已调用 EndInit<xref:System.Windows.FrameworkElement.BeginInit*>以前未在元素上调用。</xref:System.Windows.FrameworkElement.BeginInit*>"
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FindName(System.String)
  id: FindName(System.String)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FindName(String)
  nameWithType: FrameworkElement.FindName(String)
  fullName: System.Windows.FrameworkElement.FindName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "查找具有提供的标识符名称的元素。"
  remarks: "如果元素具有子元素，这些子元素将是所有以递归方式搜索请求的命名元素。       FindName 运行在当前元素的名称范围内。 有关详细信息，请参阅[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public object FindName (string name);
    parameters:
    - id: name
      type: System.String
      description: "请求的元素的名称。"
    return:
      type: System.Object
      description: "请求的元素。 这可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不找到任何匹配元素。"
  overload: System.Windows.FrameworkElement.FindName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FindResource(System.Object)
  id: FindResource(System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FindResource(Object)
  nameWithType: FrameworkElement.FindResource(Object)
  fullName: System.Windows.FrameworkElement.FindResource(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "资源中搜索具有指定键，并在找不到请求的资源时引发异常。"
  remarks: "> [!IMPORTANT]1> 如果找不到键调用此方法，将引发异常。 如果你不想要处理的异常，导致调用 FindResource，调用<xref:System.Windows.FrameworkElement.TryFindResource%2A>相反。</xref:System.Windows.FrameworkElement.TryFindResource%2A> <xref:System.Windows.FrameworkElement.TryFindResource%2A>返回`null`请求的资源时无法找到，且不会引发异常。</xref:System.Windows.FrameworkElement.TryFindResource%2A>       如果调用元素上未找到资源，逻辑树中的父元素是搜索的下一步，然后应用程序，然后主题和最后系统资源。 这种查找方法等同于请求资源时在标记中的动态资源引用如何搜索树。 有关资源查找的详细信息，请参阅[XAML 资源](~/add/includes/ajax-current-ext-md.md)。       通常情况下，你立即强制转换为属性的类型的返回值所设置，并返回的资源值 FindResource。       资源键不一定是字符串。 例如，样式特意根据主题级别的控件<xref:System.Type>的控件，并应用程序或页面的样式的控件通常使用此相同的键约定。</xref:System.Type> 有关详细信息，请参阅[样式和模板化](~/add/includes/ajax-current-ext-md.md)或[XAML 资源](../Topic/XAML%20Resources.md)。"
  example:
  - "The following example obtains a named resource and casts it to an appropriate type to fill a property.  \n  \n [!code-cs[PropertiesOvwSupport#ResourceProceduralGet](~/add/codesnippet/csharp/PropertiesOvwSupport/page3.xaml.cs#resourceproceduralget)]\n [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/add/codesnippet/visualbasic/propertiesovwsupport/page3.xaml.vb#resourceproceduralget)]"
  syntax:
    content: public object FindResource (object resourceKey);
    parameters:
    - id: resourceKey
      type: System.Object
      description: "请求的资源键标识符。"
    return:
      type: System.Object
      description: "请求的资源。 如果找不到与提供的键资源，则引发异常。 <xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>中异常的情况下可能还会返回值。"
  overload: System.Windows.FrameworkElement.FindResource*
  exceptions:
  - type: System.Windows.ResourceReferenceKeyNotFoundException
    commentId: T:System.Windows.ResourceReferenceKeyNotFoundException
    description: "<code>resourceKey</code>未找到和事件处理程序不存在<xref href=&quot;System.Windows.Threading.Dispatcher.UnhandledException&quot;></xref>事件。       -<code>resourceKey</code>找不到与<xref:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>中<xref href=&quot;System.Windows.Threading.Dispatcher.UnhandledException&quot;></xref>事件。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>resourceKey</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FlowDirection
  id: FlowDirection
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FlowDirection
  nameWithType: FrameworkElement.FlowDirection
  fullName: System.Windows.FrameworkElement.FlowDirection
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置方向，文本和其他[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]元素在任何控制其布局的父元素中的流动。"
  remarks: "The dependency property usage sets the FlowDirection on this element. Because of property value inheritance, setting FlowDirection on an element can potentially set FlowDirection on all child elements that did not set FlowDirection locally or though other means such as styles.  \n  \n This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information. For more information on globalization considerations, see [Globalization for WPF](~/add/includes/ajax-current-ext-md.md).  \n  \n This property has a defined [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property. However, it is also registered as attached, so it can also function as an attached property. The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property. The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property. (Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction. The property value is then read by the eventual content host without requiring attached property usage.)  \n  \n<a name=\"xamlAttributeUsage_FlowDirection\"></a>   \n## XAML Attribute Usage  \n \\<*object* **FlowDirection**=\"<xref:System.Windows.FlowDirection>\"/>  \n  \n<a name=\"xamlTextUsage_FlowDirection\"></a>   \n## XAML Text Usage  \n This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] attached property usage:  \n  \n `<` *object* `FrameworkElement.`**FlowDirection**=\"<xref:System.Windows.FlowDirection>`\"/>`  \n  \n<a name=\"dependencyPropertyInfo_FlowDirection\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  \n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  \n  \n This property is both a dependency property and an attached property; see Remarks."
  syntax:
    content: public System.Windows.FlowDirection FlowDirection { get; set; }
    return:
      type: System.Windows.FlowDirection
      description: "方向，文本和其他[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]元素在它们的父元素中的流动作为枚举的值。 默认值是<xref href=&quot;System.Windows.FlowDirection&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.FlowDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FlowDirectionProperty
  id: FlowDirectionProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FlowDirectionProperty
  nameWithType: FrameworkElement.FlowDirectionProperty
  fullName: System.Windows.FrameworkElement.FlowDirectionProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.FlowDirection*>依赖项属性。</xref:System.Windows.FrameworkElement.FlowDirection*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FlowDirectionProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FocusVisualStyle
  id: FocusVisualStyle
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FocusVisualStyle
  nameWithType: FrameworkElement.FocusVisualStyle
  fullName: System.Windows.FrameworkElement.FocusVisualStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个属性，允许自定义的外观、 效果或将应用于此元素，它会捕获键盘焦点时其他样式特征。"
  remarks: "此属性会影响视觉外观，但不会报告<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>元数据中。</xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> 这是因为可视外观更改是事件驱动的和可能不适用于在所有时间，并因此通常不应该报告元数据中的任何 visual 或布局信息。       从概念上讲，应用于控件的焦点的可视行为应为连贯控件间。 最合理的方法，来强制执行一致性是仅更改焦点视觉样式，如果你创建的整个主题。 将此属性设置单个控件样式上，而不是主题的一部分不是预期的用法的此属性，因为它可能会导致混乱的用户体验与键盘焦点有关。 如果你想为以防出现故意不连贯整个主题的特定于控件的行为，较好的做法是使用触发器样式中的单个输入的状态属性，如<xref:System.Windows.UIElement.IsFocused%2A>或<xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>，并不直观地干扰任何现有的焦点视觉样式的方法中执行此操作。</xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement.IsFocused%2A> 有关的设计意图的 FocusVisualStyle 和备用焦点属性的详细信息，请参阅[样式的焦点在控件和 FocusVisualStyle](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_FocusVisualStyle&quot;></a># # XAML 属性用法```   <object FocusVisualStyle=&quot;{resourceExtension styleResourceKey}&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_FocusVisualStyle&quot;> </a> # # XAML 属性元素用法<a name=&quot;xamlValues_FocusVisualStyle&quot;> </a> # # XAML 值*resourceExtension*以下项之一:，或。       请参阅[XAML 资源](~/add/includes/ajax-current-ext-md.md)。       *styleResourceKey*标识所请求的样式的键。 键指一种<xref:System.Windows.ResourceDictionary>。</xref:System.Windows.ResourceDictionary>中的现有资源      1> [!NOTE]&1;> 属性元素语法是从技术上讲是可行的但不是建议这样做。 请参阅[内联样式和模板](~/add/includes/ajax-current-ext-md.md)。 绑定引用使用或<xref:System.Windows.Data.Binding>也是可行的但不常见。</xref:System.Windows.Data.Binding>      <a name=&quot;dependencyPropertyInfo_FocusVisualStyle&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>"
  syntax:
    content: public System.Windows.Style FocusVisualStyle { get; set; }
    return:
      type: System.Windows.Style
      description: "要应用于焦点的所需的样式。 依赖项属性中声明的默认值是一个空的静态<xref href=&quot;System.Windows.Style&quot;> </xref>。 但是，在运行时的有效值是通常 （但并非总是） 所提供的控件的主题支持的样式。"
  overload: System.Windows.FrameworkElement.FocusVisualStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.FocusVisualStyleProperty
  id: FocusVisualStyleProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: FocusVisualStyleProperty
  nameWithType: FrameworkElement.FocusVisualStyleProperty
  fullName: System.Windows.FrameworkElement.FocusVisualStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.FocusVisualStyle*>依赖项属性。</xref:System.Windows.FrameworkElement.FocusVisualStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ForceCursor
  id: ForceCursor
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ForceCursor
  nameWithType: FrameworkElement.ForceCursor
  fullName: System.Windows.FrameworkElement.ForceCursor
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示是否这<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>应强制[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]呈现所声明的游标<xref:System.Windows.FrameworkElement.Cursor*>属性。</xref:System.Windows.FrameworkElement.Cursor*>"
  remarks: "如果将此属性设置为`true`将重写建立的子元素的光标首选项。 这样做因此一般情况下应用程序[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]可能令人困惑的用户，尤其是当子元素尝试指定游标。 设置 ForceCursor 是控件子类化或组合方案中更合适。      <a name=&quot;dependencyPropertyInfo_ForceCursor&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.ForceCursorProperty>"
  example:
  - "The following example forces the cursor value.  \n  \n [!code-xml[ForceCursor#ForceCursor](~/add/codesnippet/xaml/forcecursor/default.xaml#forcecursor)]"
  syntax:
    content: public bool ForceCursor { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果光标位于此元素的呈现会强制使用当前<xref:System.Windows.FrameworkElement.Cursor*>设置光标 （包括所有子元素）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.FrameworkElement.Cursor*> 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.ForceCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ForceCursorProperty
  id: ForceCursorProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ForceCursorProperty
  nameWithType: FrameworkElement.ForceCursorProperty
  fullName: System.Windows.FrameworkElement.ForceCursorProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.ForceCursor*>依赖项属性。</xref:System.Windows.FrameworkElement.ForceCursor*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ForceCursorProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  id: GetBindingExpression(System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetBindingExpression(DependencyProperty)
  nameWithType: FrameworkElement.GetBindingExpression(DependencyProperty)
  fullName: System.Windows.FrameworkElement.GetBindingExpression(DependencyProperty)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回<xref href=&quot;System.Windows.Data.BindingExpression&quot;></xref>表示按指定的属性的绑定。"
  remarks: "检查的返回值`null`是一种技术，可用于确定属性是否具有活动的绑定。       此方法是实际上只是方便周围的包装器<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>方法。</xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName> GetBindingExpression 将当前实例传递和`dp`到<xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>。</xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=fullName>参数"
  syntax:
    content: public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "目标<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>来获取从绑定。"
    return:
      type: System.Windows.Data.BindingExpression
      description: "A <xref href=&quot;System.Windows.Data.BindingExpression&quot;> </xref>如果目标属性具有活动的绑定; 否则，返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.GetBindingExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  id: GetFlowDirection(System.Windows.DependencyObject)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetFlowDirection(DependencyObject)
  nameWithType: FrameworkElement.GetFlowDirection(DependencyObject)
  fullName: System.Windows.FrameworkElement.GetFlowDirection(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取的值<xref:System.Windows.FrameworkElement.FlowDirection*>附加属性的指定<xref href=&quot;System.Windows.DependencyObject&quot;> </xref>。</xref:System.Windows.FrameworkElement.FlowDirection*>"
  remarks: "此方法的主要用途是支持的附加的属性语法<xref:System.Windows.FrameworkElement.FlowDirection%2A>属性，从而使子元素提供的<xref:System.Windows.FrameworkElement>指定其父元素内的排列的数据流方向。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement.FlowDirection%2A> 若要获取的值对当前<xref:System.Windows.FrameworkElement>，使用 direct[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]访问器<xref:System.Windows.FrameworkElement.FlowDirection%2A>.</xref:System.Windows.FrameworkElement.FlowDirection%2A> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要返回<xref:System.Windows.FrameworkElement.FlowDirection*>为</xref:System.Windows.FrameworkElement.FlowDirection*>的元素"
    return:
      type: System.Windows.FlowDirection
      description: "请求的流方向，作为枚举的值。"
  overload: System.Windows.FrameworkElement.GetFlowDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  id: GetLayoutClip(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetLayoutClip(Size)
  nameWithType: FrameworkElement.GetLayoutClip(Size)
  fullName: System.Windows.FrameworkElement.GetLayoutClip(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回剪切蒙板的几何图形。 掩码适用如果布局系统尝试排列大于可用的显示空间的元素。"
  remarks: "将从减去边距`layoutSlotSize`布局系统行为的一部分。       如果返回 null 引用指示没有剪辑将发生。 默认实现始终返回`null`时<xref:System.Windows.UIElement.ClipToBounds%2A>是`false`。</xref:System.Windows.UIElement.ClipToBounds%2A> 此方法将替代<xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName>.</xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=fullName> <xref:System.Windows.FrameworkElement>实现使用<xref:System.Windows.FrameworkElement.MaxHeight%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>其计算中。</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement> 一些子类<xref:System.Windows.FrameworkElement>再次重写此方法。</xref:System.Windows.FrameworkElement> <xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName>将重写以便始终返回`null`因为装饰器通常都特意普通的范围之外。</xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=fullName> <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName>and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</xref:System.Windows.UIElement.ClipToBounds%2A></xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=fullName></xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=fullName>"
  syntax:
    content: protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);
    parameters:
    - id: layoutSlotSize
      type: System.Windows.Size
      description: "执行可视化演示元素的部件的大小。"
    return:
      type: System.Windows.Media.Geometry
      description: "剪辑几何图形中。"
  overload: System.Windows.FrameworkElement.GetLayoutClip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetTemplateChild(System.String)
  id: GetTemplateChild(System.String)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetTemplateChild(String)
  nameWithType: FrameworkElement.GetTemplateChild(String)
  fullName: System.Windows.FrameworkElement.GetTemplateChild(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "在实例化的可视化树中返回的命名的元素<xref href=&quot;System.Windows.Controls.ControlTemplate&quot;> </xref>。"
  remarks: "中的模板[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]具有自包含的命名空间。 这是因为模板可以重复使用，并且当多个实例的每个控件实例化其模板，模板中定义的任何名称不能保持唯一。 调用 GetTemplateChild 方法返回对来自该模板后实例化的对象的引用。 不能使用<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>方法以查找模板中的项，因为<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>以更通用作用域，并且没有之间没有连接<xref:System.Windows.Controls.ControlTemplate>类本身和实例化的模板后应用。</xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>       <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName>提供此方法与相同的功能。</xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName>而不是公共受保护，并使用正确允许其访问内部元素并查找名为其中的项的模板的名称范围的注意事项。</xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName> 使用<xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName>何时需要获取其父控件外部元素的位置。</xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=fullName>"
  syntax:
    content: protected System.Windows.DependencyObject GetTemplateChild (string childName);
    parameters:
    - id: childName
      type: System.String
      description: "要查找的子级的名称。"
    return:
      type: System.Windows.DependencyObject
      description: "请求的元素。 可能是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果请求的名称的元素不存在。"
  overload: System.Windows.FrameworkElement.GetTemplateChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: FrameworkElement.GetUIParentCore()
  fullName: System.Windows.FrameworkElement.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "如果没有视觉父级，则返回此元素的备用逻辑父级。"
  remarks: "此方法将替代<xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName>.</xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=fullName> 默认值<xref:System.Windows.FrameworkElement>实现返回预期的单个视觉父级，即与获取相同的结果<xref:System.Windows.FrameworkElement.Parent%2A>值。</xref:System.Windows.FrameworkElement.Parent%2A> </xref:System.Windows.FrameworkElement> 派生的类的实现可能会返回备用父关系。"
  syntax:
    content: protected override System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "返回的内容不<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>此方法的 WPF 框架级别实现具有非视觉父级连接时，即。"
  overload: System.Windows.FrameworkElement.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  id: GetVisualChild(System.Int32)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: GetVisualChild(Int32)
  nameWithType: FrameworkElement.GetVisualChild(Int32)
  fullName: System.Windows.FrameworkElement.GetVisualChild(Int32)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "重写&lt;xref:System.Windows.Media.Visual.GetVisualChild%2A?displayProperty=fullName&gt;，并从子元素的集合中返回指定索引处。"
  remarks: "在<xref:System.Windows.FrameworkElement>实现中，唯一有效的索引为零。</xref:System.Windows.FrameworkElement> GetVisualChild 的内容模型支持零个或一个子元素，不是一个集合。"
  example:
  - "The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children. These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and GetVisualChild.  \n  \n [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverridespre)]\n [!code-cs[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverridespre)]  \n[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverrides)]\n[!code-cs[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverrides)]"
  syntax:
    content: protected override System.Windows.Media.Visual GetVisualChild (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "集合中请求的子元素的从零开始索引。"
    return:
      type: System.Windows.Media.Visual
      description: "请求的子元素。 这不应返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 提供的索引是否外的范围，则会引发异常。"
  overload: System.Windows.FrameworkElement.GetVisualChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Height
  id: Height
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Height
  nameWithType: FrameworkElement.Height
  fullName: System.Windows.FrameworkElement.Height
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的建议的高度。"
  remarks: "高度是三个可写属性之一上<xref:System.Windows.FrameworkElement>用于指定高度信息。</xref:System.Windows.FrameworkElement> 另外两个是<xref:System.Windows.FrameworkElement.MinHeight%2A>和<xref:System.Windows.FrameworkElement.MaxHeight%2A>。</xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.MinHeight%2A> 如果没有发生冲突这三个值，确定高度的实际的应用程序的顺序是︰ 首先<xref:System.Windows.FrameworkElement.MinHeight%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后，如果它是在限制之内，高度。</xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.MinHeight%2A>       如果此元素是一个子元素在其他某个元素，然后将此属性设置为值实际上只有一个建议的值。 布局系统，以及父元素的特定布局逻辑将使用值作为没有约束力的输入在布局过程。 在实际情况下，<xref:System.Windows.FrameworkElement>是几乎总是的其他内容; 即使你设置的时间为<xref:System.Windows.Window>。</xref:System.Windows.Window>高度的子元素</xref:System.Windows.FrameworkElement> (有关<xref:System.Windows.Window>，值时的基础的应用程序模型建立创建 Hwnd 的基本呈现假设使用托管的应用程序。)</xref:System.Windows.Window>     除了可接受<xref:System.Double>值，此属性也可能是<xref:System.Double.NaN?displayProperty=fullName>.</xref:System.Double.NaN?displayProperty=fullName> </xref:System.Double> 这是如何在代码中指定自动调整大小行为。 在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]你设置的值为字符串&quot;自动&quot;（不区分大小写） 若要启用自动调整大小行为。 自动调整大小行为意味着元素将填满可用的高度。 但是请注意，特定的控件通常提供通过将禁用自动调整大小行为，除非专门重新启用了其默认主题样式的默认值。       此属性的返回值始终是任何已设置为它的值相同。 相反，值<xref:System.Windows.FrameworkElement.ActualHeight%2A>可能会有所不同。</xref:System.Windows.FrameworkElement.ActualHeight%2A> 这种情况可能是静态因为布局出于某种原因，被拒绝的建议的大小也可能是暂时。 布局系统本身相对于属性系统的组的高度以异步方式工作，可能不处理该特定的大小调整属性的更改。       对的值限制<xref:System.Double>由强制执行值<xref:System.Windows.ValidateValueCallback>机制。</xref:System.Windows.ValidateValueCallback> </xref:System.Double> 如果你尝试设置一个无效值，则会引发一个运行时异常。       除了验证检查，还有由布局系统强制执行的高度发往非确定性上限值 (这是非常大的数，大于<xref:System.Single.MaxValue?displayProperty=fullName>但小于<xref:System.Double.MaxValue?displayProperty=fullName>)。</xref:System.Double.MaxValue?displayProperty=fullName> </xref:System.Single.MaxValue?displayProperty=fullName> 如果超过此限制，该元素将不会呈现，并不会引发异常。 未设置为一个值，将显著大于任何可能的可视显示的最大大小的高度，或可能超出此非确定性的上限。      <a name=&quot;xamlAttributeUsage_Height&quot;></a># # XAML 属性用法```   <object Height=&quot;double&quot;/>   - or -   <object Height=&quot;qualifiedDouble&quot;/>   - or -   <object Height=&quot;Auto&quot;/>   ``` <a name=&quot;xamlValues_Height&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           以了解上限信息，请参阅备注。 此值解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px**自动**启用自动调整大小行为。        请参阅备注。      <a name=&quot;dependencyPropertyInfo_Height&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.HeightProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.HeightProperty>"
  syntax:
    content: public double Height { get; set; }
    return:
      type: System.Double
      description: "元素的高度，在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值是&lt;xref:System.Double?displayProperty=fullName&gt;。 此值必须等于或大于 0.0。 以了解上限信息，请参阅备注。"
  overload: System.Windows.FrameworkElement.Height*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.HeightProperty
  id: HeightProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: HeightProperty
  nameWithType: FrameworkElement.HeightProperty
  fullName: System.Windows.FrameworkElement.HeightProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Height*>依赖项属性。</xref:System.Windows.FrameworkElement.Height*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty HeightProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.HorizontalAlignment
  id: HorizontalAlignment
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: HorizontalAlignment
  nameWithType: FrameworkElement.HorizontalAlignment
  fullName: System.Windows.FrameworkElement.HorizontalAlignment
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置应用到此元素时它由在父元素，如面板或项控件的水平对齐特征。"
  remarks: "在<xref:System.Windows.FrameworkElement.Height%2A>和<xref:System.Windows.FrameworkElement.Width%2A>上一个元素显式设置属性，这些度量值较高的优先级，在布局过程，并且将取消设置到<xref:System.Windows.HorizontalAlignment>。</xref:System.Windows.HorizontalAlignment> HorizontalAlignment 的典型的效果</xref:System.Windows.FrameworkElement.Width%2A></xref:System.Windows.FrameworkElement.Height%2A>       HorizontalAlignment 是[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]它实际上是依赖项属性的属性访问器。 此特定的依赖项属性非常普遍地具有子类化元素，尤其是控件中以不同方式设置其原本&quot;默认&quot;值。 这通常发生在两种方式之一︰ 特定子类化，但具有不同的元数据，用于设置其默认值; 重新注册依赖项属性或者应用了默认样式以不同方式设置的依赖项属性值。 例如，明显&quot;默认值&quot;为 HorizontalAlignment<xref:System.Windows.Controls.Label>控件将是<xref:System.Windows.HorizontalAlignment>，即使<xref:System.Windows.Controls.Label>继承 HorizontalAlignment 直接从<xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Controls.Label> </xref:System.Windows.HorizontalAlignment> </xref:System.Windows.Controls.Label> 这是因为该值已重置中的默认样式<xref:System.Windows.Controls.Label>中的样式的控件模板。</xref:System.Windows.Controls.Label>       <xref:System.Windows.Controls.Canvas>时不使用 HorizontalAlignment 构成布局，因为<xref:System.Windows.Controls.Canvas>根据绝对定位。</xref:System.Windows.Controls.Canvas></xref:System.Windows.Controls.Canvas>       当由<xref:System.Windows.Controls.Label>或<xref:System.Windows.Controls.Label>重新定义为<xref:System.Windows.HorizontalAlignment>.</xref:System.Windows.HorizontalAlignment>此依赖项属性的默认值</xref:System.Windows.Controls.Label>的派生的类</xref:System.Windows.Controls.Label>继承      <a name=&quot;dependencyPropertyInfo_HorizontalAlignment&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> </xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>"
  syntax:
    content: public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }
    return:
      type: System.Windows.HorizontalAlignment
      description: "水平对齐设置，作为枚举的值。 默认值是<xref href=&quot;System.Windows.HorizontalAlignment&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.HorizontalAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.HorizontalAlignmentProperty
  id: HorizontalAlignmentProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: HorizontalAlignmentProperty
  nameWithType: FrameworkElement.HorizontalAlignmentProperty
  fullName: System.Windows.FrameworkElement.HorizontalAlignmentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.HorizontalAlignment*>依赖项属性。</xref:System.Windows.FrameworkElement.HorizontalAlignment*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.InheritanceBehavior
  id: InheritanceBehavior
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: InheritanceBehavior
  nameWithType: FrameworkElement.InheritanceBehavior
  fullName: System.Windows.FrameworkElement.InheritanceBehavior
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置属性值继承、 资源键查找和 RelativeSource FindAncestor 查找的作用域限制。"
  remarks: "元素树中的某些边界设置 InheritanceBehavior 有意限制继承行为，检查应用程序资源，或防止 RelativeSource FindAncestor 查找查询的当前元素或任何进一步的强制资源查找到的作用域。 使用的绑定时发生 RelativeSource FindAncestor 查找<xref:System.Windows.Data.RelativeSource>具有其<xref:System.Windows.Data.RelativeSource.Mode%2A>属性设置为<xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName>值。</xref:System.Windows.Data.RelativeSourceMode?displayProperty=fullName> </xref:System.Windows.Data.RelativeSource.Mode%2A> </xref:System.Windows.Data.RelativeSource>       如果你想将此属性设置在派生的类，则应这样在静态构造函数或其他初始化例程。"
  syntax:
    content: protected System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }
    return:
      type: System.Windows.InheritanceBehavior
      description: "枚举的值。 默认值是<xref href=&quot;System.Windows.InheritanceBehavior&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.InheritanceBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Initialized
  id: Initialized
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Initialized
  nameWithType: FrameworkElement.Initialized
  fullName: System.Windows.FrameworkElement.Initialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "发生时这<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>初始化。 此事件与用例与位于同一位置的值<xref:System.Windows.FrameworkElement.IsInitialized*>属性更改从<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> （或未定义） 到<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.FrameworkElement.IsInitialized*>"
  remarks: "此事件将引发每当<xref:System.Windows.FrameworkElement.EndInit%2A>或<xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A>调用方法。</xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> </xref:System.Windows.FrameworkElement.EndInit%2A> 对任何一种方法的调用可能会从应用程序代码或通过具有出现[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]处理器行为时[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]页进行处理。       您选择是否处理<xref:System.Windows.FrameworkElement.Loaded>或初始化取决于你的要求。</xref:System.Windows.FrameworkElement.Loaded> 如果你不需要读取元素属性，想要重置属性，并且不需要任何布局信息，初始化可能是更好的事件执行操作。 如果您需要所有属性的元素可用，并且你将设置重置布局中，有可能的属性<xref:System.Windows.FrameworkElement.Loaded>可能是更好的事件执行操作。</xref:System.Windows.FrameworkElement.Loaded> 如果您的处理程序重置由布局系统，以表示新布局处理过程需要解释的任何属性，则请注意的重新进入。 (你可能需要检查<xref:System.Windows.FrameworkPropertyMetadata>上的属性，如果你不确定哪些属性可能需要新的布局的值传递更改时。)</xref:System.Windows.FrameworkPropertyMetadata>     有关序列的对象事件的详细信息<xref:System.Windows.FrameworkElement>，另一些相关应用程序和元素类，请参阅和[对象生存期事件](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.FrameworkElement>"
  syntax:
    content: public event EventHandler Initialized;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.InputScope
  id: InputScope
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: InputScope
  nameWithType: FrameworkElement.InputScope
  fullName: System.Windows.FrameworkElement.InputScope
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置由此的输入的上下文<xref href=&quot;System.Windows.FrameworkElement&quot;> </xref>。"
  remarks: "此依赖属性继承属性值。 如果没有无需通过本地值或样式建立 InputScope 其他值的子元素，则属性系统将设置此值为最接近的上级元素的 InputScope 值与分配此值。       尽管[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]语法使用情况列出和语法允许，则将此属性设置[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]并不常见。      <a name=&quot;dependencyPropertyInfo_InputScope&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.InputScopeProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement.InputScopeProperty>"
  syntax:
    content: public System.Windows.Input.InputScope InputScope { get; set; }
    return:
      type: System.Windows.Input.InputScope
      description: "输入的范围，修改其他输入法输入的解释方式。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref> （这将导致命令的默认处理）。"
  overload: System.Windows.FrameworkElement.InputScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.InputScopeProperty
  id: InputScopeProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: InputScopeProperty
  nameWithType: FrameworkElement.InputScopeProperty
  fullName: System.Windows.FrameworkElement.InputScopeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.InputScope*>依赖项属性。</xref:System.Windows.FrameworkElement.InputScope*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty InputScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.IsInitialized
  id: IsInitialized
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: IsInitialized
  nameWithType: FrameworkElement.IsInitialized
  fullName: System.Windows.FrameworkElement.IsInitialized
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取一个值，该值指示是否已初始化此元素，在处理通过[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]处理器，或者通过显式其<xref:System.Windows.FrameworkElement.EndInit*>调用方法。</xref:System.Windows.FrameworkElement.EndInit*>"
  remarks: "此属性也可能是`true`如果此元素已在逻辑树中以便它有一个新的父元素，并因此重新。       此属性很有用，如果你还使用<xref:System.Windows.FrameworkElement.BeginInit%2A>和<xref:System.Windows.FrameworkElement.EndInit%2A>.</xref:System.Windows.FrameworkElement.EndInit%2A> </xref:System.Windows.FrameworkElement.BeginInit%2A> 加载的逻辑树中的元素[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]保证处理器初始化。 不在逻辑树中的元素将初始化时<xref:System.Windows.FrameworkElement.EndInit%2A>称为。</xref:System.Windows.FrameworkElement.EndInit%2A> 在没有任何特定的处理的情况下<xref:System.Windows.FrameworkElement.BeginInit%2A>和<xref:System.Windows.FrameworkElement.EndInit%2A>，这将会构造函数将返回初始化的结果时，就会立即发生。</xref:System.Windows.FrameworkElement.EndInit%2A> </xref:System.Windows.FrameworkElement.BeginInit%2A>"
  syntax:
    content: public bool IsInitialized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素初始化按照前面提到[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]处理或者方法调用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.IsInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.IsLoaded
  id: IsLoaded
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: IsLoaded
  nameWithType: FrameworkElement.IsLoaded
  fullName: System.Windows.FrameworkElement.IsLoaded
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取一个值，该值指示是否已加载此元素，以便演示文稿。"
  remarks: "从新构造<xref:System.Windows.FrameworkElement>，此属性开始`false`，并保留`true`设置为之后`true`，即使随后移除元素从连接的逻辑树的代码。</xref:System.Windows.FrameworkElement> `true`元素加载到演示文稿引擎时，将按常规表示逻辑设置状态。       通常，已加载的元素都是呈现出来，但并非所有<xref:System.Windows.FrameworkElement>派生的类具有一个演示文稿和其他属性，如<xref:System.Windows.UIElement.Visibility%2A>可能影响表示形式。</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.FrameworkElement>"
  example:
  - "The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event. The other handler is hooked to a user control, and calls IsLoaded to assure that the root element is loaded completely. Both handlers call the same function (not shown) that will populate child elements with fresh data.  \n  \n [!code-cs[GroupBoxExample#FEIsLoaded](~/add/codesnippet/csharp/GroupBoxExample/Page1.xaml.cs#feisloaded)]"
  syntax:
    content: public bool IsLoaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前元素附加到元素树;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果该元素已永远不会附加到加载的元素树。"
  overload: System.Windows.FrameworkElement.IsLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Language
  id: Language
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Language
  nameWithType: FrameworkElement.Language
  fullName: System.Windows.FrameworkElement.Language
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置应用于某个元素的本地化/全球化语言信息。"
  remarks: "字符串格式遵循 RFC 3066 标准。 例如，美国英语是&quot;EN-US&quot;。 值和格式的详细信息，请参阅<xref:System.Windows.Markup.XmlLanguage>。</xref:System.Windows.Markup.XmlLanguage>       此依赖属性继承属性值。 如果没有无需针对通过本地值或样式建立其他值的子元素，属性系统将设置此值为最接近的上级元素的语言值与分配此值。       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]定义的常规含义`xml:lang`属性。 语言实质上是公开的此属性为依赖项属性的含义。 语言可以以编程方式调整，并且可以参与的方式，等同于属性系统值继承了`xml:lang`特性可以继承到子元素范围中[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]。 如果你设置的语言，则该值将成为`xml:lang`并覆盖任何以前的值。 有关详细信息，请参阅[xml: lang 在 XAML 中处理](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_CultureInfo&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.LanguageProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|</xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> </xref:System.Windows.FrameworkElement.LanguageProperty>"
  syntax:
    content: public System.Windows.Markup.XmlLanguage Language { get; set; }
    return:
      type: System.Windows.Markup.XmlLanguage
      description: "此元素的语言信息。 默认值是<xref href=&quot;System.Windows.Markup.XmlLanguage&quot;></xref>与其<xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*>值设置为字符串&quot;EN-US&quot;。</xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag*>"
  overload: System.Windows.FrameworkElement.Language*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.LanguageProperty
  id: LanguageProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: LanguageProperty
  nameWithType: FrameworkElement.LanguageProperty
  fullName: System.Windows.FrameworkElement.LanguageProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Language*>依赖项属性。</xref:System.Windows.FrameworkElement.Language*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LanguageProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.LayoutTransform
  id: LayoutTransform
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: LayoutTransform
  nameWithType: FrameworkElement.LayoutTransform
  fullName: System.Windows.FrameworkElement.LayoutTransform
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个图形转换，它执行布局时应应用于此元素。"
  remarks: "与此相反<xref:System.Windows.UIElement.RenderTransform%2A>，LayoutTransform 将影响布局的结果。</xref:System.Windows.UIElement.RenderTransform%2A>       设置一个转换，可提供强大的功能的缩放和旋转。 但是，将忽略 LayoutTransform<xref:System.Windows.Media.TranslateTransform>操作。</xref:System.Windows.Media.TranslateTransform> 这是因为子元素的布局系统行为<xref:System.Windows.FrameworkElement>自动更正任何偏移量到布局的缩放或旋转元素的位置和父元素的坐标系统。</xref:System.Windows.FrameworkElement>       如果方案不需要该布局系统的全面处理过程中调用它，LayoutTransform 可能导致应用程序性能差。 当您将应用到 LayoutTransform<xref:System.Windows.Controls.Panel.Children%2A>集合<xref:System.Windows.Controls.Panel>，它将触发一个新的传递布局系统和强制屏幕上的所有对象重新度量和重新排列。</xref:System.Windows.Controls.Panel> </xref:System.Windows.Controls.Panel.Children%2A> 如果你要更新完整的应用程序[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]，此功能可能有且仅你的需要。 但是，如果不需要完整的布局处理过程，使用<xref:System.Windows.UIElement.RenderTransform%2A>属性，而不会调用该布局系统，因此，通常是这种情况下为更好的选择。</xref:System.Windows.UIElement.RenderTransform%2A>       LayoutTransform 会有用的示例方案包括︰ 旋转元素菜单组件从水平方向为垂直或者反之亦然，如缩放 （放大） 的元素上焦点时，提供编辑行为，等等。     <a name=&quot;dependencyPropertyInfo_LayoutTransform&quot;> </a> # # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.LayoutTransformProperty>"
  example:
  - "The following example shows how to apply a LayoutTransform to an element. The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>. It also uses the LayoutTransform property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.  \n  \n [!code-vb[LayoutTransform#1](~/add/codesnippet/visualbasic/LayoutTransformVB/LayoutTransform.vb#1)]\n [!code-cpp[LayoutTransform#1](~/add/codesnippet/cpp/layouttransform/LayoutTransform.cpp#1)]\n [!code-xml[LayoutTransform#1](~/add/codesnippet/xaml/LayoutTransform/default.xaml#1)]\n [!code-cs[LayoutTransform#1](~/add/codesnippet/csharp/LayoutTransformCsharp/LayoutTransform.cs#1)]"
  syntax:
    content: public System.Windows.Media.Transform LayoutTransform { get; set; }
    return:
      type: System.Windows.Media.Transform
      description: "应使用此元素的转换。 默认值为<xref:System.Windows.Media.Transform.Identity*>。</xref:System.Windows.Media.Transform.Identity*>"
  overload: System.Windows.FrameworkElement.LayoutTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.LayoutTransformProperty
  id: LayoutTransformProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: LayoutTransformProperty
  nameWithType: FrameworkElement.LayoutTransformProperty
  fullName: System.Windows.FrameworkElement.LayoutTransformProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.LayoutTransform*>依赖项属性。</xref:System.Windows.FrameworkElement.LayoutTransform*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LayoutTransformProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Loaded
  id: Loaded
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Loaded
  nameWithType: FrameworkElement.Loaded
  fullName: System.Windows.FrameworkElement.Loaded
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "元素的布局，呈现，且可用于交互时发生。"
  remarks: "加载通常的最后一个事件中引发元素初始化序列。 <xref:System.Windows.FrameworkElement.Initialized>.</xref:System.Windows.FrameworkElement.Initialized>后将始终引发 您选择是否处理 Loaded 或<xref:System.Windows.FrameworkElement.Initialized>取决于你的要求。</xref:System.Windows.FrameworkElement.Initialized> 如果不需要读取元素属性，想要重置属性，并且不需要任何布局的信息，<xref:System.Windows.FrameworkElement.Initialized>可能是更好的事件执行操作。</xref:System.Windows.FrameworkElement.Initialized> 如果你需要的所有属性的元素可用，并且你要设置的属性重置布局有可能，加载可能是更好的事件执行操作。 如果您的处理程序重置由布局系统，以表示新布局处理过程需要解释的任何属性，则请注意的重新进入。 (你可能需要检查<xref:System.Windows.FrameworkPropertyMetadata>上的属性，如果你不确定哪些属性可能需要新的布局的值传递更改时。)</xref:System.Windows.FrameworkPropertyMetadata>     有关序列的对象事件的详细信息<xref:System.Windows.FrameworkElement>，另一些相关应用程序和元素类，请参阅和[对象生存期事件](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.FrameworkElement>       直接路由的事件不遵循路由，而仅处理引发它们时对同一元素中。 直接路由的事件是否支持其他路由的事件行为︰ 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式。</xref:System.Windows.EventTrigger>       加载和<xref:System.Windows.FrameworkElement.Unloaded>可能同时会引发在用户启动的系统主题更改控件上。</xref:System.Windows.FrameworkElement.Unloaded> 主题更改会导致控件模板和包含的可视化树，这反过来会导致整个控件，若要卸载并重新加载的失效。 因此不能加载假定发生仅当页面首次加载通过导航到页。      <a name=&quot;routedEventInfo_Loaded&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.LoadedEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.RoutedEventHandler>|</xref:System.Windows.RoutedEventHandler></xref:System.Windows.FrameworkElement.LoadedEvent>"
  syntax:
    content: public event System.Windows.RoutedEventHandler Loaded;
    return:
      type: System.Windows.RoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.LoadedEvent
  id: LoadedEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: LoadedEvent
  nameWithType: FrameworkElement.LoadedEvent
  fullName: System.Windows.FrameworkElement.LoadedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.Loaded&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LoadedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: FrameworkElement.LogicalChildren
  fullName: System.Windows.FrameworkElement.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取此元素的逻辑子元素的枚举数。"
  remarks: "LogicalChildren 可以循环访问子元素。 这可用于元素可能不具有已定义的专用集合，但仍包含多个子元素，特别<xref:System.Windows.FrameworkContentElement>子元素。</xref:System.Windows.FrameworkContentElement>       有关如何使用 LogicalChildren 的详细信息和<xref:System.Windows.FrameworkElement.AddLogicalChild%2A>，请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.FrameworkElement.AddLogicalChild%2A>"
  syntax:
    content: protected virtual System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "此元素的逻辑子元素枚举器。"
  overload: System.Windows.FrameworkElement.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Margin
  id: Margin
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Margin
  nameWithType: FrameworkElement.Margin
  fullName: System.Windows.FrameworkElement.Margin
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的外边距。"
  remarks: "边距是此元素与布局创建时，将相邻其他元素之间的空间[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。 共享的元素可能是对等元素 （如公共的父控件的集合中的其他元素），或者也可能是此元素的父级。       边距设置为<xref:System.Windows.Thickness>结构而不是数字的形式，以便非对称设置边距。</xref:System.Windows.Thickness> <xref:System.Windows.Thickness>结构本身支持字符串类型转换，以便你可以指定用非对称宽限期[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]还属性语法。</xref:System.Windows.Thickness>       非零边距适用元素布局<xref:System.Windows.FrameworkElement.ActualWidth%2A>和<xref:System.Windows.FrameworkElement.ActualHeight%2A>。</xref:System.Windows.FrameworkElement.ActualHeight%2A></xref:System.Windows.FrameworkElement.ActualWidth%2A>以外的空间       边距的同级元素在布局中; 累加性例如，它们都具有边距为 30 相连的边缘设置的两个相邻元素将具有 60 之间的距离单位。       如果没有足够大小以容纳边距加上元素的内容区域的矩形分配的空间，设置边距的元素将不通常约束指定边距的大小。 计算布局时，将改为约束元素内容区域。 唯一的情形进行约束边距也是如果内容已被约束到零。      <a name=&quot;xamlAttributeUsage_Margin&quot;></a># # XAML 属性用法```   <object Margin=&quot;left,top,right,bottom&quot;/>   - or -   <object Margin=&quot;left,top&quot;/>   - or -   <object Margin=&quot;thicknessReference&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_Margin&quot;> </a> # # XAML 属性元素用法```   <object>     <object.Margin>       <Thickness Left=&quot;left&quot; Top=&quot;top&quot; Right=&quot;right&quot; Bottom=&quot;bottom&quot;/>     </object.Margin>   </object>   ``` <a name=&quot;xamlValues_Margin&quot;> </a> # # XAML 值*保留，排名靠前的、 右、 下*0 之间的数字值和<xref:System.Double.PositiveInfinity>指定四个可能的维度属性<xref:System.Windows.Thickness>结构。</xref:System.Windows.Thickness> </xref:System.Double.PositiveInfinity>                   属性用法还将接受缩写应用中提供，对称而符合逻辑的顺序的值。 例如，`Margin=&quot;20&quot;`将解释为表示<xref:System.Windows.Thickness>其所有属性都设置为 20。</xref:System.Windows.Thickness> `Margin=&quot;20,50&quot;`将解释为表示<xref:System.Windows.Thickness>与<xref:System.Windows.Thickness.Left%2A>和<xref:System.Windows.Thickness.Right%2A>设置为 20，和<xref:System.Windows.Thickness.Top%2A>和<xref:System.Windows.Thickness.Bottom%2A>设置为 50。</xref:System.Windows.Thickness.Bottom%2A> </xref:System.Windows.Thickness.Top%2A> </xref:System.Windows.Thickness.Right%2A> </xref:System.Windows.Thickness.Left%2A> </xref:System.Windows.Thickness>       默认单位<xref:System.Windows.Thickness>度量值是[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]。</xref:System.Windows.Thickness> 此外可以指定其他单位，通过追加单位类型字符串`cm`， `in`，或`pt`到任何度量值。       数字值作为提供[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]属性不需要指定位小数 （0 是可以接受的不需要提供作为 0.0)。 有关详细信息[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]使用情况，请参阅<xref:System.Windows.Thickness>。</xref:System.Windows.Thickness>       *thicknessReference*对现有<xref:System.Windows.Thickness>.</xref:System.Windows.Thickness>的对象引用 这可能是`}`、 a，或`}`引用。 有关详细信息[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]使用情况，请参阅<xref:System.Windows.Thickness>。</xref:System.Windows.Thickness>      <a name=&quot;dependencyPropertyInfo_Margin&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.MarginProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.MarginProperty>"
  syntax:
    content: public System.Windows.Thickness Margin { get; set; }
    return:
      type: System.Windows.Thickness
      description: "提供的元素的边距值。 默认值是<xref href=&quot;System.Windows.Thickness&quot;></xref>其所有属性都等于 0 （零）。"
  overload: System.Windows.FrameworkElement.Margin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MarginProperty
  id: MarginProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MarginProperty
  nameWithType: FrameworkElement.MarginProperty
  fullName: System.Windows.FrameworkElement.MarginProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Margin*>依赖项属性。</xref:System.Windows.FrameworkElement.Margin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty MarginProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MaxHeight
  id: MaxHeight
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MaxHeight
  nameWithType: FrameworkElement.MaxHeight
  fullName: System.Windows.FrameworkElement.MaxHeight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的最大高度约束。"
  remarks: "这是一个三个属性上<xref:System.Windows.FrameworkElement>用于指定高度信息。</xref:System.Windows.FrameworkElement> 另外两个是<xref:System.Windows.FrameworkElement.MinHeight%2A>和<xref:System.Windows.FrameworkElement.Height%2A>。</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.MinHeight%2A>  如果这些值之间没有冲突，确定高度的实际的应用程序的顺序是第一个<xref:System.Windows.FrameworkElement.MinHeight%2A>必须采用，然后 MaxHeight，最后如果每个都在限制之内， <xref:System.Windows.FrameworkElement.Height%2A>.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.MinHeight%2A>       对的值限制<xref:System.Double>由强制执行值<xref:System.Windows.ValidateValueCallback>机制。</xref:System.Windows.ValidateValueCallback> </xref:System.Double> 如果你尝试设置一个无效值会引发一个运行时异常。      <a name=&quot;xamlAttributeUsage_MaxHeight&quot;></a># # XAML 属性用法```   <object MaxHeight=&quot;double&quot;/>   - or –   <object MaxHeight =&quot;qualifiedDouble&quot;/>   ``` <a name=&quot;xamlValues_MaxHeight&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           它被解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       相同<xref:System.Double>应用范围限制在属性值部分所述，只不过你必须使用[X:static 标记扩展](~/add/includes/ajax-current-ext-md.md)你是否需要显式设置此值为<xref:System.Double.PositiveInfinity>.</xref:System.Double.PositiveInfinity> </xref:System.Double>       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px <a name=&quot;dependencyPropertyInfo_MaxHeight&quot;> </a> # # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.MaxHeightProperty>       "
  syntax:
    content: public double MaxHeight { get; set; }
    return:
      type: System.Double
      description: "元素的最大高度，在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为<xref:System.Double>。</xref:System.Double> 此值可以是等于或大于 0.0 的任何值。 <xref:System.Double>也是有效的。</xref:System.Double>"
  overload: System.Windows.FrameworkElement.MaxHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MaxHeightProperty
  id: MaxHeightProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MaxHeightProperty
  nameWithType: FrameworkElement.MaxHeightProperty
  fullName: System.Windows.FrameworkElement.MaxHeightProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.MaxHeight*>依赖项属性。</xref:System.Windows.FrameworkElement.MaxHeight*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty MaxHeightProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MaxWidth
  id: MaxWidth
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MaxWidth
  nameWithType: FrameworkElement.MaxWidth
  fullName: System.Windows.FrameworkElement.MaxWidth
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的最大宽度约束。"
  remarks: "这是一个三个属性上<xref:System.Windows.FrameworkElement>指定宽度的信息。</xref:System.Windows.FrameworkElement> 另外两个是<xref:System.Windows.FrameworkElement.MinWidth%2A>和<xref:System.Windows.FrameworkElement.Width%2A>。</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.MinWidth%2A> 如果这些值之间没有冲突，应用程序实际宽度确定的顺序是︰ 首先<xref:System.Windows.FrameworkElement.MinWidth%2A>必须采用，然后 MaxWidth，最后如果每个都在限制之内， <xref:System.Windows.FrameworkElement.Width%2A>.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.MinWidth%2A>       对的值限制<xref:System.Double>由强制执行值<xref:System.Windows.ValidateValueCallback>机制。</xref:System.Windows.ValidateValueCallback> </xref:System.Double> 如果你尝试设置一个无效值，则会引发一个运行时异常。      <a name=&quot;xamlAttributeUsage_MaxWidth&quot;></a># # XAML 属性用法```   <object MaxWidth=&quot;double&quot;/>   - or -   <object MaxWidth=&quot;qualifiedDouble&quot;/>   ``` <a name=&quot;xamlValues_MaxWidth&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           它被解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       相同<xref:System.Double>应用范围限制在属性值部分所述，只不过你必须使用[X:static 标记扩展](~/add/includes/ajax-current-ext-md.md)设置此值为<xref:System.Double.PositiveInfinity>.</xref:System.Double.PositiveInfinity> </xref:System.Double>       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px <a name=&quot;dependencyPropertyInfo_MaxWidth&quot;> </a> # # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.MaxWidthProperty>       "
  syntax:
    content: public double MaxWidth { get; set; }
    return:
      type: System.Double
      description: "元素的最大宽度，请在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为<xref:System.Double>。</xref:System.Double> 此值可以是等于或大于 0.0 的任何值。 <xref:System.Double>也是有效的。</xref:System.Double>"
  overload: System.Windows.FrameworkElement.MaxWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MaxWidthProperty
  id: MaxWidthProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MaxWidthProperty
  nameWithType: FrameworkElement.MaxWidthProperty
  fullName: System.Windows.FrameworkElement.MaxWidthProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.MaxWidth*>依赖项属性。</xref:System.Windows.FrameworkElement.MaxWidth*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty MaxWidthProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  id: MeasureCore(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MeasureCore(Size)
  nameWithType: FrameworkElement.MeasureCore(Size)
  fullName: System.Windows.FrameworkElement.MeasureCore(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "实现基本度量传递布局系统行为<xref href=&quot;System.Windows.FrameworkElement&quot;> </xref>。"
  remarks: "此方法将替代<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>连接的 WPF 核心级别和 WPF 框架级别布局度量值实现。</xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName> <xref:System.Windows.FrameworkElement>实现会对该方法。</xref:System.Windows.FrameworkElement> 若要调整的 WPF 框架级别生成任何元素的度量传递布局行为，重写<xref:System.Windows.FrameworkElement.MeasureOverride%2A>相反。</xref:System.Windows.FrameworkElement.MeasureOverride%2A> 若要调整度量值，将传递布局行为，以防出现故意不会在 WPF 框架级别上生成或使用<xref:System.Windows.FrameworkElement>，请重写<xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName>.</xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=fullName></xref:System.Windows.FrameworkElement>的元素"
  syntax:
    content: protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "父元素可以赋予子元素可用大小。"
    return:
      type: System.Windows.Size
      description: "此元素在布局所需的大小。"
  overload: System.Windows.FrameworkElement.MeasureCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: FrameworkElement.MeasureOverride(Size)
  fullName: System.Windows.FrameworkElement.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当在派生类中重写，测量的大小以所需的子元素的布局，并确定的大小<xref href=&quot;System.Windows.FrameworkElement&quot;> </xref>-派生类。"
  remarks: "重写 MeasureOverride 实现您的元素的自定义布局大小调整行为参与[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]布局系统。 您的实现应执行以下操作︰ 1。  循环的布局，调用的一部分的子级的元素的特定集合<xref:System.Windows.UIElement.Measure%2A>每个子元素上。</xref:System.Windows.UIElement.Measure%2A>      2.  立即获取<xref:System.Windows.UIElement.DesiredSize%2A>对子 (这将设置为一个属性后<xref:System.Windows.UIElement.Measure%2A>称为)。</xref:System.Windows.UIElement.Measure%2A> </xref:System.Windows.UIElement.DesiredSize%2A>      3.  计算所需的基于测量到的子元素的父净大小。       MeasureOverride 的返回值应为元素自身的所需大小，随后将成为当前元素的父元素的度量值输入。 这一过程继续通过该布局系统，直到达到页的根元素。       在此过程中，子元素可能会返回较大<xref:System.Windows.UIElement.DesiredSize%2A>大小大于初始`availableSize`指示子元素想更多空间。</xref:System.Windows.UIElement.DesiredSize%2A> 引入了可滚动区域，在调整父控件中，通过某种方式堆叠顺序或任意数量的解决方案来测量或排列内容，可能会在您自己的实现中处理此。      1> [!IMPORTANT]&1;> 元素应调用<xref:System.Windows.UIElement.Measure%2A>在每个在此过程中的子活动，否则为子元素不会正确调整大小或排列。</xref:System.Windows.UIElement.Measure%2A>"
  syntax:
    content: protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "此元素可提供给子元素可用大小。 无穷大可以指定为一个值，指示元素将为内容的可用大小。"
    return:
      type: System.Windows.Size
      description: "在布局，根据其的子元素大小的计算期间需要此元素确定它的大小。"
  overload: System.Windows.FrameworkElement.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MinHeight
  id: MinHeight
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MinHeight
  nameWithType: FrameworkElement.MinHeight
  fullName: System.Windows.FrameworkElement.MinHeight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的最小高度约束。"
  remarks: "这是一个三个属性上<xref:System.Windows.FrameworkElement>用于指定高度信息。</xref:System.Windows.FrameworkElement>  另外两个是<xref:System.Windows.FrameworkElement.Height%2A>和<xref:System.Windows.FrameworkElement.MaxHeight%2A>。</xref:System.Windows.FrameworkElement.MaxHeight%2A> </xref:System.Windows.FrameworkElement.Height%2A> 如果冲突之间没有这些值，应用程序的顺序确定实际高度为第一个 MinHeight 必须进行确认，然后<xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后如果每个都在限制之内， <xref:System.Windows.FrameworkElement.Height%2A>.</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.MaxHeight%2A>       对的值限制<xref:System.Double>由强制执行值<xref:System.Windows.ValidateValueCallback>机制。</xref:System.Windows.ValidateValueCallback> </xref:System.Double> 如果你尝试设置一个无效值，则会引发一个运行时异常。      <a name=&quot;xamlAttributeUsage_MinHeight&quot;></a># # XAML 属性用法```   <object MinHeight=&quot;double&quot;/>   - or -   <object MinHeight=&quot;qualifiedDouble&quot;/>   ``` <a name=&quot;xamlValues_MinHeight&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           它被解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       相同<xref:System.Double>属性值部分中所述的范围限制也适用。</xref:System.Double>       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px <a name=&quot;dependencyPropertyInfo_MinHeight&quot;> </a> # # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.MinHeightProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.MinHeightProperty>       "
  syntax:
    content: public double MinHeight { get; set; }
    return:
      type: System.Double
      description: "元素的最小高度，在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为 0.0。 此值可以是等于或大于 0.0 的任何值。 但是，<xref:System.Double>不是有效的也不是&lt;xref:System.Double?displayProperty=fullName&gt;。</xref:System.Double>"
  overload: System.Windows.FrameworkElement.MinHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MinHeightProperty
  id: MinHeightProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MinHeightProperty
  nameWithType: FrameworkElement.MinHeightProperty
  fullName: System.Windows.FrameworkElement.MinHeightProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.MinHeight*>依赖项属性。</xref:System.Windows.FrameworkElement.MinHeight*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty MinHeightProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MinWidth
  id: MinWidth
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MinWidth
  nameWithType: FrameworkElement.MinWidth
  fullName: System.Windows.FrameworkElement.MinWidth
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的最小宽度约束。"
  remarks: "这是一个三个属性上<xref:System.Windows.FrameworkElement>指定宽度的信息。</xref:System.Windows.FrameworkElement>  另外两个是<xref:System.Windows.FrameworkElement.Width%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>。</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.Width%2A>  如果冲突之间没有这些值，应用程序的顺序确定实际宽度为第一个 MinWidth 必须进行确认，然后<xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后如果每个都在限制之内， <xref:System.Windows.FrameworkElement.Width%2A>.</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.MaxWidth%2A>       对的值限制<xref:System.Double>由强制执行值<xref:System.Windows.ValidateValueCallback>机制。</xref:System.Windows.ValidateValueCallback> </xref:System.Double> 如果你尝试设置一个无效值，则会引发一个运行时异常。      <a name=&quot;xamlAttributeUsage_MinWidth&quot;></a># # XAML 属性用法```   <object MinWidth=&quot;double&quot;/>   - or -   <object MinWidth=&quot;qualifiedDouble&quot;/>   ``` <a name=&quot;xamlValues_MinWidth&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           它被解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       相同<xref:System.Double>属性值部分中所述的范围限制也适用。</xref:System.Double>       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px <a name=&quot;dependencyPropertyInfo_MinWidth&quot;> </a> # # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.MinWidthProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.MinWidthProperty>       "
  syntax:
    content: public double MinWidth { get; set; }
    return:
      type: System.Double
      description: "元素的最小宽度，请在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值为 0.0。 此值可以是等于或大于 0.0 的任何值。 但是，<xref:System.Double>无效，也不是&lt;xref:System.Double?displayProperty=fullName&gt;。</xref:System.Double>"
  overload: System.Windows.FrameworkElement.MinWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MinWidthProperty
  id: MinWidthProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MinWidthProperty
  nameWithType: FrameworkElement.MinWidthProperty
  fullName: System.Windows.FrameworkElement.MinWidthProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.MinWidth*>依赖项属性。</xref:System.Windows.FrameworkElement.MinWidth*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty MinWidthProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: FrameworkElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.FrameworkElement.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "提供的遍历方向移动键盘焦点离开此元素和到另一个元素。"
  remarks: "此实现将重写<xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName>并密封方法。</xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=fullName>"
  example:
  - "The following example implements a handler that handles several possible button inputs. Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>. The handler tracks the element with current keyboard focus, and calls MoveFocus on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.  \n  \n [!code-cs[FocusSample#FocusSampleMoveFocus](~/add/codesnippet/csharp/FocusSample/Window1.xaml.cs#focussamplemovefocus)]\n [!code-vb[FocusSample#FocusSampleMoveFocus](~/add/codesnippet/visualbasic/focussample/window1.xaml.vb#focussamplemovefocus)]"
  syntax:
    content: public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "焦点为枚举的值作为要移动的方向。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功，则移动焦点<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果方向为中的目标元素指定不存在或无法不聚焦于键盘。"
  overload: System.Windows.FrameworkElement.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Name
  id: Name
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Name
  nameWithType: FrameworkElement.Name
  fullName: System.Windows.FrameworkElement.Name
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的标识名称。 该名称提供引用，以便代码隐藏，如事件处理程序代码中，可以引用标记元素的处理过程中构造之后[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]处理器。"
  remarks: "此属性的最常见用法是指定[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]作为标记中的属性的元素名称。       此属性实质上是提供一个 WPF 框架级别便捷属性，以设置[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] [X:name 指令](~/add/includes/ajax-current-ext-md.md)。       名称必须是唯一名称范围内。 有关详细信息，请参阅[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。       如果你在代码中创建元素获取名称并不常见。 如果你已在代码中具有适当的引用，你可以直接调用方法和属性元素上的引用，通常不需要名称。 一种例外情况是名称字符串具有某些重载的含义，实例有用中显示该名称是否[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]。 设置从代码隐藏如果从标记中设置的原始名称的名称也不建议，并在加载后更改的属性[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]将不会更改原始对象引用。 仅当在分析过程中显式创建了基础名称范围创建的对象引用。 你必须明确调用<xref:System.Windows.FrameworkElement.RegisterName%2A>对已加载的元素的 Name 属性进行有效的更改。</xref:System.Windows.FrameworkElement.RegisterName%2A>       在代码中设置名称是重要的一个值得注意的情况下是注册情节提要将针对，运行的元素的名称，以便可以在运行时引用它们时。 你可以注册名称之前，可能还需要实例化并分配<xref:System.Windows.NameScope>实例。</xref:System.Windows.NameScope> 请参阅示例部分中，或[情节提要概述](~/add/includes/ajax-current-ext-md.md)。       从代码中设置名称具有有限的应用程序，但更常见的获取按名称的元素是。 特定的一种情况是如果你的应用程序支持到应用程序，重新加载页面，其中的运行的时代码不一定隐藏代码定义该页面的导航模型。 实用工具方法<xref:System.Windows.FrameworkElement.FindName%2A>，这是可从任何<xref:System.Windows.FrameworkElement>，可以查找任何元素按名称的逻辑树中该元素，根据需要树递归搜索。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement.FindName%2A> 也可以使用<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>静态方法<xref:System.Windows.LogicalTreeHelper>，其还会作为自变量的名称字符串。</xref:System.Windows.LogicalTreeHelper> </xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>       通常使用的根元素 (<xref:System.Windows.Window>，<xref:System.Windows.Controls.Page>例如) 实现的接口<xref:System.Windows.Markup.INameScope>.</xref:System.Windows.Markup.INameScope> </xref:System.Windows.Controls.Page> </xref:System.Windows.Window> 此接口的实现需要强制该名称是明确在其范围内。 定义此接口的根元素还为所有定义的名称范围行为边界相关[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]。       Name 属性还充当其他进程的标识符。 例如，[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]自动化模型将使用名称作为 AutomationId 客户端和提供程序。       用于名称的字符串值具有一些限制，如强加在基础[X:name 指令](../Topic/x:Name%20Directive.md)由定义[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]规范。 最值得注意的是，名称必须以字母或下划线字符 (_) 开头，并且必须包含字母、 数字或下划线。 有关详细信息，请参阅[WPF XAML Namescopes](../Topic/WPF%20XAML%20Namescopes.md)。       名称是一个无法进行动画处理的极少数依赖项属性 (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>是`true`元数据中)，因为名称本身是所必需的定位动画。</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 数据绑定的名称是从技术上讲是可行的但是极少见的方案，因为数据绑定名称不能提供的属性的主要预期的用途︰ 若要隐藏代码提供的标识符连接点。      <a name=&quot;dependencyPropertyInfo_Name&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.NameProperty>|  |元数据属性设置为`true`|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|</xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> </xref:System.Windows.FrameworkElement.NameProperty>"
  example:
  - "The following example sets the Name property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>. The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the Name, and cannot be targeted by object reference.  \n  \n [!code-vb[animateHeight_procedural#FEName](~/add/codesnippet/visualbasic/animateheight/animatedheightexample.vb#fename)]\n [!code-cs[animateHeight_procedural#FEName](~/add/codesnippet/csharp/animateheight_csharp/AnimatedHeightExample.cs#fename)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "元素的名称。 默认值为一个空字符串。"
  overload: System.Windows.FrameworkElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.NameProperty
  id: NameProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: NameProperty
  nameWithType: FrameworkElement.NameProperty
  fullName: System.Windows.FrameworkElement.NameProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Name*>依赖项属性。</xref:System.Windows.FrameworkElement.Name*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty NameProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnApplyTemplate
  id: OnApplyTemplate
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnApplyTemplate()
  nameWithType: FrameworkElement.OnApplyTemplate()
  fullName: System.Windows.FrameworkElement.OnApplyTemplate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "在派生类中重写，无论应用程序代码或内部进程调用<xref:System.Windows.FrameworkElement.ApplyTemplate*>.</xref:System.Windows.FrameworkElement.ApplyTemplate*>都会调用"
  remarks: "此方法不具有默认实现。       模板是来自模板属性的元素的已完成可视化树部分<xref:System.Windows.Style>元素被应用。</xref:System.Windows.Style> 有关详细信息，请参阅[样式和模板化](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual void OnApplyTemplate ();
    parameters: []
  overload: System.Windows.FrameworkElement.OnApplyTemplate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  id: OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnContextMenuClosing(ContextMenuEventArgs)
  nameWithType: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)
  fullName: System.Windows.FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当某个未处理调用<xref href=&quot;System.Windows.FrameworkElement.ContextMenuClosing&quot;></xref>路由的事件到达其路由中的此类。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \n  \n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled."
  syntax:
    content: protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Controls.ContextMenuEventArgs
      description: "提供有关事件的数据。"
  overload: System.Windows.FrameworkElement.OnContextMenuClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  id: OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnContextMenuOpening(ContextMenuEventArgs)
  nameWithType: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)
  fullName: System.Windows.FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当某个未处理调用<xref href=&quot;System.Windows.FrameworkElement.ContextMenuOpening&quot;></xref>路由的事件到达其路由中的此类。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \n  \n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled."
  syntax:
    content: protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Controls.ContextMenuEventArgs
      description: "<xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.FrameworkElement.OnContextMenuOpening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: FrameworkElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.FrameworkElement.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当某个未处理调用<xref href=&quot;System.Windows.UIElement.GotFocus&quot;></xref>事件到达其路由中的此元素。"
  remarks: "与一些其他不同 * 公开由基元素 OnGotFocus 方法具有的默认实现。 具体而言，它具有重写下， <xref:System.Windows.UIElement.OnGotFocus%2A>.</xref:System.Windows.UIElement.OnGotFocus%2A>的基元素的下一步级别中的 null 实现实现 调用时，OnGotFocus 在事件生成由于键盘焦点的当前元素的位置的情况下此元素上设置相应的焦点行为。 为已处理，即使焦点设置到当前元素，OnGotFocus 处理程序不会不会标记的事件自变量。 如果事件的源树 （不是当前元素） 中的另一个元素，该处理程序将没有任何影响。       你可以重写此方法，以更改您的元素上的默认焦点行为，但请注意，更改焦点行为以这种方式可能更好地完成通过不允许要在所有可获得焦点的元素 (请参阅<xref:System.Windows.UIElement.Focusable%2A>)。</xref:System.Windows.UIElement.Focusable%2A>"
  syntax:
    content: protected override void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "<xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.FrameworkElement.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  id: OnInitialized(System.EventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnInitialized(EventArgs)
  nameWithType: FrameworkElement.OnInitialized(EventArgs)
  fullName: System.Windows.FrameworkElement.OnInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.FrameworkElement.Initialized&quot;></xref>事件。 调用此方法时<xref:System.Windows.FrameworkElement.IsInitialized*>设置为<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>内部。</xref:System.Windows.FrameworkElement.IsInitialized*>"
  remarks: "This particular On* method is not a class handler hook. Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] On\\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.  \n  \n Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior. Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] framework."
  syntax:
    content: protected virtual void OnInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.FrameworkElement.OnInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当调用这任何依赖属性的有效值<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>已更新。 自变量参数中报告更改的特定依赖属性。 重写<xref:System.Windows.DependencyObject.OnPropertyChanged*>.</xref:System.Windows.DependencyObject.OnPropertyChanged*>"
  remarks: "此方法不应通常检测属性更改或失效。 它而被旨在用于修改常规失效模式如果查阅宽分类的属性已知的某些信息。       调用此方法可能很多时候一个对象的生命周期内。 因此，你可以实现更好的性能，如果重写特定属性的元数据，然后将附加<xref:System.Windows.CoerceValueCallback>或<xref:System.Windows.PropertyChangedCallback>为各个属性的函数。</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback> 但是，如果你将使用此方法<xref:System.Windows.FrameworkElement>包括大量的值相关的依赖项属性，或如果它包括逻辑，如呈现行为，必须重新运行多个相关属性失效的情况。</xref:System.Windows.FrameworkElement>       请注意，没有具有相同名称`OnPropertyChanged`用不同的签名的方法 (该参数类型是<xref:System.ComponentModel.PropertyChangedEventArgs>)，可能出现在多个类。</xref:System.ComponentModel.PropertyChangedEventArgs> `OnPropertyChanged`用于数据对象通知，并且是<xref:System.ComponentModel.INotifyPropertyChanged>。</xref:System.ComponentModel.INotifyPropertyChanged>协定的一部分"
  syntax:
    content: protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "描述已更改，属性的事件数据以及旧值和新值。"
  overload: System.Windows.FrameworkElement.OnPropertyChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.FrameworkElement.SizeChanged&quot;></xref>事件，使用指定的信息作为最终事件数据的一部分。"
  remarks: "此方法将替代<xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</xref:System.Windows.UIElement.OnRenderSizeChanged%2A> 如果调用此方法将重置<xref:System.Windows.FrameworkElement.ActualWidth%2A>属性，<xref:System.Windows.FrameworkElement.ActualHeight%2A>属性，或两者都，具体取决于为指定的内容中更改提供的自变量，并且将始终引发此事件。</xref:System.Windows.FrameworkElement.ActualHeight%2A> </xref:System.Windows.FrameworkElement.ActualWidth%2A>"
  syntax:
    content: protected override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);
    parameters:
    - id: sizeInfo
      type: System.Windows.SizeChangedInfo
      description: "此更改中涉及的旧和新大小的详细信息。"
  overload: System.Windows.FrameworkElement.OnRenderSizeChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  id: OnStyleChanged(System.Windows.Style,System.Windows.Style)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnStyleChanged(Style,Style)
  nameWithType: FrameworkElement.OnStyleChanged(Style,Style)
  fullName: System.Windows.FrameworkElement.OnStyleChanged(Style,Style)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "在此元素上使用的样式更改时调用，这将使失效布局。"
  remarks: "此方法已设置说明样式更改条件的内部标志的默认实现。"
  syntax:
    content: protected virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);
    parameters:
    - id: oldStyle
      type: System.Windows.Style
      description: "旧的样式。"
    - id: newStyle
      type: System.Windows.Style
      description: "将新样式。"
  overload: System.Windows.FrameworkElement.OnStyleChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  id: OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnToolTipClosing(ToolTipEventArgs)
  nameWithType: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)
  fullName: System.Windows.FrameworkElement.OnToolTipClosing(ToolTipEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当某个未处理调用<xref href=&quot;System.Windows.FrameworkElement.ToolTipClosing&quot;></xref>路由的事件到达其路由中的此类。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \n  \n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled."
  syntax:
    content: protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Controls.ToolTipEventArgs
      description: "提供有关事件的数据。"
  overload: System.Windows.FrameworkElement.OnToolTipClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  id: OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnToolTipOpening(ToolTipEventArgs)
  nameWithType: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)
  fullName: System.Windows.FrameworkElement.OnToolTipOpening(ToolTipEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "每当调用<xref href=&quot;System.Windows.FrameworkElement.ToolTipOpening&quot;></xref>路由的事件到达其路由中的此类。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.  \n  \n The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases). Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route. One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route."
  syntax:
    content: protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Controls.ToolTipEventArgs
      description: "提供有关事件的数据。"
  overload: System.Windows.FrameworkElement.OnToolTipOpening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: FrameworkElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.FrameworkElement.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "可视化树中此元素的父级发生更改时调用。 重写<xref:System.Windows.UIElement.OnVisualParentChanged*>.</xref:System.Windows.UIElement.OnVisualParentChanged*>"
  remarks: "可视化树是不同于逻辑树，因为它无法不例如集合、 直观地呈现的元素，并且展开某些元素根据其主题和样式的组合。 有关详细信息，请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "旧的父元素。 可能是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>以指示元素是否有过 visual 父级。"
  overload: System.Windows.FrameworkElement.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OverridesDefaultStyle
  id: OverridesDefaultStyle
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OverridesDefaultStyle
  nameWithType: FrameworkElement.OverridesDefaultStyle
  fullName: System.Windows.FrameworkElement.OverridesDefaultStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示此元素是否包含从主题样式的样式属性。"
  remarks: "此属性的最常见用法是一种间接使用正提供主题样式的样式的 setter 中。      1> [!IMPORTANT]&1;> 如果 OverridesDefaultStyle 设置为`true`控件，则会禁用主题样式所提供的默认控件模板。 该控件模板通常包含内容的显示器和提供基本其他复合元素[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]功能和控件的可视化效果。 如果你想要继续支持与默认主题样式相同的功能的控件，你必须提供替代样式与复制相同的结构的控件模板。 有关详细信息，请参阅[控件创作概述](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_OverridesDefaultStyle&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>"
  syntax:
    content: public bool OverridesDefaultStyle { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素不使用主题样式属性;所有源于样式的属性来自本地应用程序样式和主题样式属性不适用。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果应用程序样式首先，应用，然后主题样式应用于的专门不在应用程序样式中设置的属性。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.OverridesDefaultStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  id: OverridesDefaultStyleProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: OverridesDefaultStyleProperty
  nameWithType: FrameworkElement.OverridesDefaultStyleProperty
  fullName: System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.OverridesDefaultStyle*>依赖项属性。</xref:System.Windows.FrameworkElement.OverridesDefaultStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Parent
  id: Parent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Parent
  nameWithType: FrameworkElement.Parent
  fullName: System.Windows.FrameworkElement.Parent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取此元素的逻辑父元素。"
  remarks: "父节点可能是`null`情况下，元素已实例化，但未附加到任何最终将连接到的页级别的根元素或应用程序对象的逻辑树中。       请注意，根据你的应用程序的功能，可能发生更改的元素的逻辑父级，并且此属性的值保持将不会反映所做的更改。 你需要它之前，你通常应获取的值。       请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)有关逻辑树遍历和其中父用作父元素发现一种技术是适当的方案的详细信息。       属性引擎将可能重新计算此元素的所有属性值时父级，因为某些属性继承值通过逻辑树。 <xref:System.Windows.FrameworkElement.DataContext%2A>适用于元素是父级，还可以更改绑定。</xref:System.Windows.FrameworkElement.DataContext%2A>       更改元素的父通常只是对集合的操作，通过使用专用添加或删除方法，或通过设置的元素的内容属性。       使用父属性的大多数典型方案是获得的引用，然后获取各种<xref:System.Windows.FrameworkElement>从父属性值。</xref:System.Windows.FrameworkElement> 对于模板，模板最终的父级将`null`。 若要忽略这一点并扩展到实际将应用的模板的逻辑树，请使用<xref:System.Windows.FrameworkElement.TemplatedParent%2A>。</xref:System.Windows.FrameworkElement.TemplatedParent%2A>       请注意，此属性不会报告在其中而这些变化从逻辑树父的情况下的可视化树父级。 可视化树的父项不是为常规应用程序的情况下通常很重要，但可能会某些可视化级别情况所需的父元素。 请参阅<xref:System.Windows.Media.VisualTreeHelper>。</xref:System.Windows.Media.VisualTreeHelper>"
  example:
  - "The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match. In this case these are properties that affect the rendering size.  \n  \n [!code-vb[GeometryDesigner#FEParentProperty](~/add/codesnippet/visualbasic/geometrydesigner/window1.xaml.vb#feparentproperty)]\n [!code-cs[GeometryDesigner#FEParentProperty](~/add/codesnippet/csharp/GeometryDesigner/Window1.xaml.cs#feparentproperty)]"
  syntax:
    content: public System.Windows.DependencyObject Parent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "此元素的逻辑父级。"
  overload: System.Windows.FrameworkElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  id: ParentLayoutInvalidated(System.Windows.UIElement)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ParentLayoutInvalidated(UIElement)
  nameWithType: FrameworkElement.ParentLayoutInvalidated(UIElement)
  fullName: System.Windows.FrameworkElement.ParentLayoutInvalidated(UIElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "支持的专用子类中的增量布局实现<xref href=&quot;System.Windows.FrameworkElement&quot;> </xref>。 ParentLayoutInvalidated 子元素包含无效标记为影响父级的度量值的元数据中的属性时调用，或排列过程布局。"
  remarks: "如果此元素具有子元素在其某些属性已失效，并且该属性被标记为<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A>或<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>在注册期间的属性元数据，会调用此方法。</xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> </xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 方法调用将通知的特定子元素必须是重新测量，如果此元素支持部分 （增量） 更新的布局的父元素。       默认情况下，<xref:System.Windows.FrameworkElement>不支持增量布局，然后在<xref:System.Windows.FrameworkElement>这类方法具有没有默认实现。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement> 将需要重写此方法的方案并不常用，因为它需要修改默认布局系统行为。       一个实现方案示例可能是一个类包含可能存在的子元素的显著比 WPF 框架级别布局系统限制性更强的类型限制。 由于这些自定义元素的特性，可能有意推迟属性更改时实现一些自定义布局的行为。 例如，/排列度量值的方法重写，则尝试优化子元素呈现处理过程，可能对某些类型的更改通常会生成另一个布局处理过程中被推迟。"
  syntax:
    content: protected virtual void ParentLayoutInvalidated (System.Windows.UIElement child);
    parameters:
    - id: child
      type: System.Windows.UIElement
      description: "报告更改子元素。"
  overload: System.Windows.FrameworkElement.ParentLayoutInvalidated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: FrameworkElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.FrameworkElement.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "确定将接收相对于对提供的焦点移动方向，此元素的焦点，但不会实际移动焦点的下一个元素。"
  remarks: "<xref:System.Windows.FrameworkElement.MoveFocus%2A>是实际移动焦点的相关的方法。</xref:System.Windows.FrameworkElement.MoveFocus%2A>"
  example:
  - "The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>. The handler tracks the element with current keyboard focus, and calls PredictFocus on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided. Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.  \n  \n [!code-cs[FocusSample#FEPredictFocus](~/add/codesnippet/csharp/FocusSample/Window1.xaml.cs#fepredictfocus)]\n [!code-vb[FocusSample#FEPredictFocus](~/add/codesnippet/visualbasic/focussample/window1.xaml.vb#fepredictfocus)]"
  syntax:
    content: public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "应为其确定潜在的焦点更改方向。"
    return:
      type: System.Windows.DependencyObject
      description: "如果实际遍历了焦点，将要移到集中的下一个元素。 可能会返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果焦点不能提供的方向移动相对于此元素。"
  overload: System.Windows.FrameworkElement.PredictFocus*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: 'Specified one of the following directions in the <xref href=&quot;System.Windows.Input.TraversalRequest&quot;></xref>: <xref href=&quot;System.Windows.Input.FocusNavigationDirection&quot;></xref>, <xref href=&quot;System.Windows.Input.FocusNavigationDirection&quot;></xref>, <xref href=&quot;System.Windows.Input.FocusNavigationDirection&quot;></xref>, <xref href=&quot;System.Windows.Input.FocusNavigationDirection&quot;></xref>. 这些说明不是合法的 PredictFocus (但它们都是合法的<xref:System.Windows.FrameworkElement.MoveFocus*>)。</xref:System.Windows.FrameworkElement.MoveFocus*>'
  platform:
  - net462
- uid: System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  id: RegisterName(System.String,System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: RegisterName(String,Object)
  nameWithType: FrameworkElement.RegisterName(String,Object)
  fullName: System.Windows.FrameworkElement.RegisterName(String,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "提供简化了对访问的访问器<xref:System.Windows.NameScope>注册方法。</xref:System.Windows.NameScope>"
  remarks: "此方法是调用<xref:System.Windows.NameScope.RegisterName%2A>.</xref:System.Windows.NameScope.RegisterName%2A>的便捷方法 该实现将检查连续的父元素，直到它找到适用的<xref:System.Windows.NameScope>实现中，位于通过查找实现<xref:System.Windows.Markup.INameScope>.</xref:System.Windows.Markup.INameScope>元素</xref:System.Windows.NameScope> 有关名称范围的详细信息，请参阅[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。       调用寄存器名所需的是正确挂钩的应用程序时在代码中创建的动画情节提要。 这是因为其中一个主要情节提要属性， <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>，而不是能够充分目标元素的引用中使用运行时名称查找。</xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> 即使该元素是可访问的代码中的引用，也是如此。 为何需要注册名称的情节提要目标的详细信息，请参阅[情节提要概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - >-
    [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/add/codesnippet/visualbasic/animateproperty_storyboards_vb/scopeexample.vb#namescopeexample)]
     [!code-cs[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/add/codesnippet/csharp/AnimateProperty_Storyboards_csharp/ScopeExample.cs#namescopeexample)]
  syntax:
    content: public void RegisterName (string name, object scopedElement);
    parameters:
    - id: name
      type: System.String
      description: "要使用指定的名称-对象映射的名称。"
    - id: scopedElement
      type: System.Object
      description: "映射的的对象。"
  overload: System.Windows.FrameworkElement.RegisterName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  id: RemoveLogicalChild(System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: RemoveLogicalChild(Object)
  nameWithType: FrameworkElement.RemoveLogicalChild(Object)
  fullName: System.Windows.FrameworkElement.RemoveLogicalChild(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "从此元素的逻辑树中移除所提供的对象。 <xref href=&quot;System.Windows.FrameworkElement&quot;></xref>更新受影响的逻辑树父指针，以便与此删除操作保持同步。"
  remarks: "使用此方法用于实现的上表示逻辑子级的元素的对象的集合。 属性 getter 或 setter 中的类处理程序可以采取这`Changed`事件、 构造函数，或在集合类型本身。       对于控件作者操作在此级别的逻辑树不是建议的做法，除非没有合适的提供基控件类的内容模型。 请考虑级别的子类化<xref:System.Windows.Controls.ContentControl>， <xref:System.Windows.Controls.ItemsControl>，和<xref:System.Windows.Controls.HeaderedItemsControl>。</xref:System.Windows.Controls.HeaderedItemsControl> </xref:System.Windows.Controls.ItemsControl> </xref:System.Windows.Controls.ContentControl> 这些类提供的内容模型通过专用的逻辑子级的特定强制[!INCLUDE[TLA2#tla_api#plural](~/add/includes/tla2sharptla-apisharpplural-md.md)]，以及对其他功能中通常所需的支持[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]控件如通过模板的样式。"
  example:
  - "The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation. The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection. The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.  \n  \n [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/visualbasic/compositiontargetrenderinganimations/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]\n [!code-cs[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/add/codesnippet/csharp/CompositionTargetRenderingAnimations/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]"
  syntax:
    content: protected void RemoveLogicalChild (object child);
    parameters:
    - id: child
      type: System.Object
      description: "要移除的元素。"
  overload: System.Windows.FrameworkElement.RemoveLogicalChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.RequestBringIntoView
  id: RequestBringIntoView
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: RequestBringIntoView
  nameWithType: FrameworkElement.RequestBringIntoView
  fullName: System.Windows.FrameworkElement.RequestBringIntoView
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "发生时<xref:System.Windows.FrameworkElement.BringIntoView*>在此元素上调用。</xref:System.Windows.FrameworkElement.BringIntoView*>"
  remarks: "此事件指示︰ 对于父级<xref:System.Windows.Controls.ScrollViewer>（或派生类） 的可滚动区域内应进行可见引发 RequestBringIntoView 事件的元素。</xref:System.Windows.Controls.ScrollViewer> <xref:System.Windows.Controls.ScrollViewer>将然后标记为已处理，通过使用的事件的类处理 RequestBringIntoView 事件。</xref:System.Windows.Controls.ScrollViewer> 一般情况下 RequestBringIntoView 事件数据不应将标记通过控制滚动区域，任何类或任何处理实例处理程序，因为这样会妨碍其预期目标是称为<xref:System.Windows.FrameworkElement.BringIntoView%2A>。</xref:System.Windows.FrameworkElement.BringIntoView%2A>的元素      <a name=&quot;routedEventInfo_RequestBringIntoView&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.RequestBringIntoViewEventHandler>|</xref:System.Windows.RequestBringIntoViewEventHandler></xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>"
  syntax:
    content: public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;
    return:
      type: System.Windows.RequestBringIntoViewEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.RequestBringIntoViewEvent
  id: RequestBringIntoViewEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: RequestBringIntoViewEvent
  nameWithType: FrameworkElement.RequestBringIntoViewEvent
  fullName: System.Windows.FrameworkElement.RequestBringIntoViewEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.RequestBringIntoView&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Resources
  id: Resources
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Resources
  nameWithType: FrameworkElement.Resources
  fullName: System.Windows.FrameworkElement.Resources
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置本地定义的资源字典。"
  remarks: "可以完全或部分中定义的资源字典[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]通常创建为一个属性元素，并且通常是根元素为任何单个页面或应用程序上。 将在此级别的资源字典便于查找从页面中的各个子元素 （或任何页上，在应用程序的情况下）。 在大多数应用程序方案中，我们建议作为对象元素使用的资源字典中定义样式或作为外部资源定义整个样式资源可以是自包含 （这种方法可帮助分隔设计人员的责任从开发人员的责任分离需要编辑的物理文件）。       请注意，此属性返回直接在该元素内声明仅的资源字典。 此函数不同于实际资源查找过程中，子元素可以访问任何向上递归搜索每个父元素中定义的资源。       资源在集合中，从代码也可以引用，但请注意资源创建在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]肯定不可访问，直到<xref:System.Windows.FrameworkElement.Loaded>引发的声明该字典的元素。</xref:System.Windows.FrameworkElement.Loaded> 以异步方式而不分析资源的实际上，即使<xref:System.Windows.FrameworkElement.Loaded>事件是保证可引用[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]定义资源。</xref:System.Windows.FrameworkElement.Loaded> 因此你通常只应访问[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]定义资源作为的一部分运行时代码，或通过其他[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]技术，如样式或特性值的资源扩展引用。 通过代码访问资源时，它是实质上等同于从进行的引用[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。       基础<xref:System.Windows.ResourceDictionary>支持添加、 删除或通过使用代码查询从集合中的资源所需的方法。</xref:System.Windows.ResourceDictionary> 资源属性是可以设置以支持以下场景︰ 完全替换的元素为一个新的资源集合或不同<xref:System.Windows.ResourceDictionary>。</xref:System.Windows.ResourceDictionary>       请注意，[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]所示的语法不包含<xref:System.Windows.ResourceDictionary>。</xref:System.Windows.ResourceDictionary>元素 这是隐式集合语法; 一个示例可以省略表示集合元素的标记。 改为指定为项添加到集合的元素。 有关隐式集合的详细信息和[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，请参阅[在详细信息的 XAML 语法](~/add/includes/ajax-current-ext-md.md)。 一种情况下<xref:System.Windows.ResourceDictionary>仍指定显式如元素是引入合并的字典，这种情况下是否存在通常该<xref:System.Windows.ResourceDictionary>.</xref:System.Windows.ResourceDictionary>没有子元素</xref:System.Windows.ResourceDictionary> 有关详细信息，请参阅[合并资源字典](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlPropertyElementUsage_Resources&quot;></a># # XAML 属性元素用法```   <object>     <object.Resources>       oneOrMoreResourceElements     </object.Resources>   </object>   ``` <a name=&quot;xamlValues_Resources&quot;> </a> # # XAML 值*oneOrMoreResourceElements*一个或多个对象元素，其中每个定义的资源。       在每个每个资源属性元素<xref:System.Windows.ResourceDictionary>必须具有唯一值[X:key 指令](~/add/includes/ajax-current-ext-md.md)，它用作唯一键时将从<xref:System.Windows.ResourceDictionary>.</xref:System.Windows.ResourceDictionary>检索值</xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public System.Windows.ResourceDictionary Resources { get; set; }
    return:
      type: System.Windows.ResourceDictionary
      description: "当前本地定义的字典的资源，其中每个资源可以通过键进行访问。"
  overload: System.Windows.FrameworkElement.Resources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  id: SetBinding(System.Windows.DependencyProperty,System.String)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SetBinding(DependencyProperty,String)
  nameWithType: FrameworkElement.SetBinding(DependencyProperty,String)
  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "将一个绑定附加到此元素，作为数据源的路径限定基于提供的源属性名称。"
  remarks: "此方法是调用的便捷方法<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>，后者将当前实例作为传递<xref:System.Windows.DependencyObject>，并创建一个新<xref:System.Windows.Data.Binding>根据所提供`path`参数。</xref:System.Windows.Data.Binding> </xref:System.Windows.DependencyObject> </xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName> 此签名会更方便，当您要建立简单的默认绑定。 如果你需要指定任何绑定属性为非默认条件，或想要使用<xref:System.Windows.Data.MultiBinding>或<xref:System.Windows.Data.PriorityBinding>，应使用<xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29>签名。</xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> </xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.MultiBinding>"
  example:
  - "The following example sets a binding using a specific path.  \n  \n [!code-cs[BaseElementsSmorgasbord#SetBindingPath](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#setbindingpath)]\n [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#setbindingpath)]"
  syntax:
    content: public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "标识应在其中建立绑定的目标属性。"
    - id: path
      type: System.String
      description: "源属性名称或用于绑定的属性的路径。"
    return:
      type: System.Windows.Data.BindingExpression
      description: "记录绑定的条件。 此返回值可用于错误检查。"
  overload: System.Windows.FrameworkElement.SetBinding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  id: SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SetBinding(DependencyProperty,BindingBase)
  nameWithType: FrameworkElement.SetBinding(DependencyProperty,BindingBase)
  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,BindingBase)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "将一个绑定附加到此元素，提供的绑定对象的基础。"
  remarks: "此方法是调用<xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>，后者将当前实例作为<xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject>传递</xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=fullName>的便捷方法"
  syntax:
    content: public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "标识应在其中建立绑定的属性。"
    - id: binding
      type: System.Windows.Data.BindingBase
      description: "表示数据绑定的详细信息。"
    return:
      type: System.Windows.Data.BindingExpressionBase
      description: "记录绑定的条件。 此返回值可用于错误检查。"
  overload: System.Windows.FrameworkElement.SetBinding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  id: SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SetFlowDirection(DependencyObject,FlowDirection)
  nameWithType: FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)
  fullName: System.Windows.FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "设置的值<xref:System.Windows.FrameworkElement.FlowDirection*>附加属性提供的元素。</xref:System.Windows.FrameworkElement.FlowDirection*>"
  remarks: "此方法支持的附加的属性语法<xref:System.Windows.FrameworkElement.FlowDirection%2A>属性，从而使子元素提供的<xref:System.Windows.FrameworkElement>指定其父元素内的排列的数据流方向。</xref:System.Windows.FrameworkElement> </xref:System.Windows.FrameworkElement.FlowDirection%2A> 对当前设置的值<xref:System.Windows.FrameworkElement>，使用 direct[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]访问器<xref:System.Windows.FrameworkElement.FlowDirection%2A>.</xref:System.Windows.FrameworkElement.FlowDirection%2A> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "指定数据流方向的元素。"
    - id: value
      type: System.Windows.FlowDirection
      description: "枚举，指定方向的值。"
  overload: System.Windows.FrameworkElement.SetFlowDirection*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  id: SetResourceReference(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SetResourceReference(DependencyProperty,Object)
  nameWithType: FrameworkElement.SetResourceReference(DependencyProperty,Object)
  fullName: System.Windows.FrameworkElement.SetResourceReference(DependencyProperty,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "搜索具有指定名称的资源，并将设置对它的指定属性的资源引用。"
  remarks: "资源引用相当于使用[DynamicResource 标记扩展](~/add/includes/ajax-current-ext-md.md)标记中。 资源引用创建提供根据延迟特定的运行时间的指定属性的值的内部表达式。 该表达式将重新计算每当资源字典指示通过内部事件，更改的值或父级的当前元素 （父级更改会更改的字典查找路径）。"
  syntax:
    content: public void SetResourceReference (System.Windows.DependencyProperty dp, object name);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "资源绑定到属性。"
    - id: name
      type: System.Object
      description: "资源的名称。"
  overload: System.Windows.FrameworkElement.SetResourceReference*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ShouldSerializeResources
  id: ShouldSerializeResources
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ShouldSerializeResources()
  nameWithType: FrameworkElement.ShouldSerializeResources()
  fullName: System.Windows.FrameworkElement.ShouldSerializeResources()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回序列化进程是否应序列化的内容<xref:System.Windows.FrameworkElement.Resources*>属性。</xref:System.Windows.FrameworkElement.Resources*>"
  remarks: "这将返回`true`，只要本地<xref:System.Windows.FrameworkElement.Resources%2A>.</xref:System.Windows.FrameworkElement.Resources%2A>没有至少一个键控的资源"
  syntax:
    content: public bool ShouldSerializeResources ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.FrameworkElement.Resources*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.FrameworkElement.Resources*>"
  overload: System.Windows.FrameworkElement.ShouldSerializeResources*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ShouldSerializeStyle
  id: ShouldSerializeStyle
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ShouldSerializeStyle()
  nameWithType: FrameworkElement.ShouldSerializeStyle()
  fullName: System.Windows.FrameworkElement.ShouldSerializeStyle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回序列化进程是否应序列化的内容<xref:System.Windows.FrameworkElement.Style*>属性。</xref:System.Windows.FrameworkElement.Style*>"
  remarks: "这将返回`true`如果<xref:System.Windows.Style>本地设置。</xref:System.Windows.Style>"
  syntax:
    content: public bool ShouldSerializeStyle ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.FrameworkElement.Style*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.FrameworkElement.Style*>"
  overload: System.Windows.FrameworkElement.ShouldSerializeStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers
  id: ShouldSerializeTriggers
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ShouldSerializeTriggers()
  nameWithType: FrameworkElement.ShouldSerializeTriggers()
  fullName: System.Windows.FrameworkElement.ShouldSerializeTriggers()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回序列化进程是否应序列化的内容<xref:System.Windows.FrameworkElement.Triggers*>属性。</xref:System.Windows.FrameworkElement.Triggers*>"
  remarks: "此方法返回`true`如果<xref:System.Windows.FrameworkElement.Triggers%2A>属性本地设置。</xref:System.Windows.FrameworkElement.Triggers%2A>"
  syntax:
    content: public bool ShouldSerializeTriggers ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.FrameworkElement.Triggers*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.FrameworkElement.Triggers*>"
  overload: System.Windows.FrameworkElement.ShouldSerializeTriggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SizeChanged
  id: SizeChanged
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SizeChanged
  nameWithType: FrameworkElement.SizeChanged
  fullName: System.Windows.FrameworkElement.SizeChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "发生时任一<> *1> 或<> *1> 属性更改针对此元素的值。"
  remarks: "直接路由的事件不遵循路由，而仅处理引发它们时对同一元素中。 直接路由的事件是否支持其他路由的事件行为︰ 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式。</xref:System.Windows.EventTrigger>       布局系统读取属性内的<xref:System.Windows.SizeChangedEventArgs>自变量类的此事件，以确定是否应将报告的大小更改视为重要。</xref:System.Windows.SizeChangedEventArgs> 这允许该布局系统或自己的特定于控件的布局实现不会强制执行布局更改由于直观地无法觉察旧和新的高度或宽度值之间的差异。 无法觉察的差异可能是由于舍入或相同的结果计算的浮点数据类型。      <a name=&quot;routedEventInfo_SizeChanged&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.SizeChangedEventHandler>|</xref:System.Windows.SizeChangedEventHandler></xref:System.Windows.FrameworkElement.SizeChangedEvent>"
  syntax:
    content: public event System.Windows.SizeChangedEventHandler SizeChanged;
    return:
      type: System.Windows.SizeChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SizeChangedEvent
  id: SizeChangedEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SizeChangedEvent
  nameWithType: FrameworkElement.SizeChangedEvent
  fullName: System.Windows.FrameworkElement.SizeChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.SizeChanged&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SizeChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.SourceUpdated
  id: SourceUpdated
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: SourceUpdated
  nameWithType: FrameworkElement.SourceUpdated
  fullName: System.Windows.FrameworkElement.SourceUpdated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "对于任何现有的属性，在此元素上绑定源值更改时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Data.Binding.SourceUpdated>引发任何事件<xref:System.Windows.Data.Binding>与此元素关联。</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.SourceUpdated>      <a name=&quot;xamlAttributeUsage_SourceUpdated&quot;></a># # XAML 属性用法```   <object SourceUpdated=&quot;eventHandler&quot;/>   ```"
  syntax:
    content: public event EventHandler<System.Windows.Data.DataTransferEventArgs> SourceUpdated;
    return:
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Style
  id: Style
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Style
  nameWithType: FrameworkElement.Style
  fullName: System.Windows.FrameworkElement.Style
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置此元素呈现时所使用的样式。"
  remarks: "对于控件，当前的样式是通常由控件主题中的默认样式或从样式通常应用于该类型的控件在页面或应用程序级别 （隐式样式） 的资源。 此属性不未设置或返回默认值 （主题） 样式，但它返回隐式样式或对元素执行显式样式。 如果存在隐式或显式样式，它并不重要的样式是指定为资源还是本地定义。       设置样式有一些限制。 可以将整个的样式属性重置到新<xref:System.Windows.Style>任何时候，这将强制布局重新组合。</xref:System.Windows.Style> 但是，只要该样式加载的元素，置于使用<xref:System.Windows.Style>应视为密封。</xref:System.Windows.Style> 尝试对正在使用样式任何单个属性进行更改 (如在集合内的任何内容<xref:System.Windows.Style.Setters%2A>) 将导致异常引发。</xref:System.Windows.Style.Setters%2A> 在标记中定义样式被视为一旦加载从资源字典 （对于资源），或包含在页面加载 （对于内联样式），可使用。       样式是具有特殊优先级依赖项属性。 本地设置样式通常最高优先级会在运行属性系统。 如果此时样式为 null，期间加载属性系统检查本地或应用程序指定该类型的资源中的隐式样式。 在此步骤后，在样式为仍然为 null，然后演示文稿目的的有效样式通常来自于默认 （主题） 样式，但默认样式中的样式属性值将不返回。 请参阅[依赖项属性值优先级](~/add/includes/ajax-current-ext-md.md)或[样式和模板化](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_Style&quot;></a># # XAML 属性用法```   <object Style=&quot;{resourceExtension styleResourceKey}&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_Style&quot;> </a> # # XAML 属性元素用法<a name=&quot;xamlValues_Style&quot;> </a> # # XAML 值*resourceExtension*以下项之一:，或。       请参阅[XAML 资源](~/add/includes/ajax-current-ext-md.md)。       *styleResourceKey*标识所请求的样式的键。 键指一种<xref:System.Windows.ResourceDictionary>。</xref:System.Windows.ResourceDictionary>中的现有资源      1> [!NOTE]&1;> 属性元素语法是从技术上讲是可行的但对于大多数样式方案不建议这样做。 请参阅[内联样式和模板](~/add/includes/ajax-current-ext-md.md)。 绑定引用使用或<xref:System.Windows.Data.Binding>也是可行的但不常见。</xref:System.Windows.Data.Binding>      <a name=&quot;dependencyPropertyInfo_Style&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.StyleProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.StyleProperty>"
  example:
  - "The following example defines a style in a resource dictionary.  \n  \n [!code-xml[FEResource#StyleProperty](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty)]  \n[!code-xml[FEResource#StyleProperty2](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty2)]  \n[!code-xml[FEResource#StyleProperty3](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty3)]  \n[!code-xml[FEResource#StyleProperty4](~/add/codesnippet/xaml/FEResource/default.xaml#styleproperty4)]"
  syntax:
    content: public System.Windows.Style Style { get; set; }
    return:
      type: System.Windows.Style
      description: "对于元素，如果存在适用的非默认样式。 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。 默认值为默认构造<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.StyleProperty
  id: StyleProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: StyleProperty
  nameWithType: FrameworkElement.StyleProperty
  fullName: System.Windows.FrameworkElement.StyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Style*>依赖项属性。</xref:System.Windows.FrameworkElement.Style*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty StyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  id: System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  isEii: true
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "有关此成员的说明，请参阅<xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*>方法。</xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Windows.FrameworkElement>实例被强制转换为<xref:System.Windows.Markup.IQueryAmbient>接口。</xref:System.Windows.Markup.IQueryAmbient> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "请求的环境属性的名称。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> propertyName </code>可用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Tag
  id: Tag
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Tag
  nameWithType: FrameworkElement.Tag
  fullName: System.Windows.FrameworkElement.Tag
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个任意对象值，用于存储有关此元素的自定义信息。"
  remarks: "此属性是类似于在其他标记属性[!INCLUDE[TLA#tla_ms](~/add/includes/tlasharptla-ms-md.md)]编程模型，如[!INCLUDE[TLA#tla_vba](~/add/includes/ajax-current-ext-md.md)]或[!INCLUDE[TLA#tla_winforms](~/add/includes/ajax-current-ext-md.md)]。 标记旨在提供可以在其中存储有关任何一些基本自定义信息的预先存在的属性位置<xref:System.Windows.FrameworkElement>而无需你子类化元素。</xref:System.Windows.FrameworkElement>       因为此属性采用对象，你将需要使用属性元素用法，以便在设置标记属性[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]带已知和内置类型转换器，如字符串对象之外的任何内容。 在这种方式中使用的对象通常并不位于标准[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]命名空间，因此可能需要将命名空间映射到外部命名空间，以便作为引入[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]元素。 有关详细信息，请参阅[XAML 命名空间和 Namespace 映射为 WPF XAML](~/add/includes/ajax-current-ext-md.md)和[XAML 和 wpf 自定义类](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Tag&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.TagProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.TagProperty>"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "预期的值。 此属性没有任何默认值。"
  overload: System.Windows.FrameworkElement.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.TagProperty
  id: TagProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: TagProperty
  nameWithType: FrameworkElement.TagProperty
  fullName: System.Windows.FrameworkElement.TagProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Tag*>依赖项属性。</xref:System.Windows.FrameworkElement.Tag*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TagProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.TargetUpdated
  id: TargetUpdated
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: TargetUpdated
  nameWithType: FrameworkElement.TargetUpdated
  fullName: System.Windows.FrameworkElement.TargetUpdated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "此元素上的任何属性绑定目标值发生更改时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Data.Binding.TargetUpdated>引发任何事件<xref:System.Windows.Data.Binding>与此元素关联。</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.TargetUpdated> 这通常意味着，所讨论的绑定是一个双向绑定，且它的绑定的依赖项属性断言是现在根据任何验证或属性或数据源所支持的缓存方案无效以前的属性值。       使用 TargetUpdated 事件的事件数据来确定报告目标值更新的特定属性。      <a name=&quot;xamlAttributeUsage_TargetUpdated&quot;></a># # XAML 属性用法```   <object TargetUpdated=&quot;eventHandler&quot;/>   ```"
  syntax:
    content: public event EventHandler<System.Windows.Data.DataTransferEventArgs> TargetUpdated;
    return:
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.TemplatedParent
  id: TemplatedParent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: TemplatedParent
  nameWithType: FrameworkElement.TemplatedParent
  fullName: System.Windows.FrameworkElement.TemplatedParent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取对此元素的模板父级的引用。 如果未通过模板创建元素，则此属性无关。"
  remarks: "TemplatedParent 通常是`null`在你的应用程序标记或代码中创建的对象。 这是因为你的那些对象直接创建，不是通过模板。 对象获取通过从根，遍历逻辑树，或者典型名称引用的引用，不是来自模板。       情况下可能不是 TemplatedParent`null`包括操作，例如命中测试，某些低级别的输入事件，遍历与的可视化树的事件处理<xref:System.Windows.Media.VisualTreeHelper>，或使用枚举器，这可能会返回来自模板的元素。</xref:System.Windows.Media.VisualTreeHelper> 另一种是如果你明确调用<xref:System.Windows.FrameworkTemplate.FindName%2A>针对现有<xref:System.Windows.FrameworkTemplate>并且使用返回的对象。</xref:System.Windows.FrameworkTemplate> </xref:System.Windows.FrameworkTemplate.FindName%2A>       模板是实际共享的对象，其中仅一次创建模板的内容。 因此，如果你获取对来自模板的元素的对象引用，你可能会发现明显的逻辑树无法到达页面根。 若要连接到该页面的逻辑树这样的模板引用，你应获取 TemplatedParent 值，然后继续根据需要该元素树中导航。"
  syntax:
    content: public System.Windows.DependencyObject TemplatedParent { get; }
    return:
      type: System.Windows.DependencyObject
      description: "元素其<xref href=&quot;System.Windows.FrameworkTemplate&quot;> </xref> <xref:System.Windows.FrameworkTemplate.VisualTree*>导致要创建此元素。</xref:System.Windows.FrameworkTemplate.VisualTree*> 此值通常为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 请参阅备注。"
  overload: System.Windows.FrameworkElement.TemplatedParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTip
  id: ToolTip
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTip
  nameWithType: FrameworkElement.ToolTip
  fullName: System.Windows.FrameworkElement.ToolTip
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置此元素中显示的工具提示对象[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。"
  remarks: "如果此属性的值属于类型<xref:System.Windows.Controls.ToolTip>，则该值将用于工具提示[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]。</xref:System.Windows.Controls.ToolTip>  如果值为的任何其他类型，则该值将用作*内容*为<xref:System.Windows.Controls.ToolTip>提供 （构造） 系统。</xref:System.Windows.Controls.ToolTip> 有关详细信息，请参阅<xref:System.Windows.Controls.ToolTipService>。</xref:System.Windows.Controls.ToolTipService> 服务类提供了可用来进一步自定义一种<xref:System.Windows.Controls.ToolTip>。</xref:System.Windows.Controls.ToolTip>的附加的属性      <a name=&quot;xamlAttributeUsage_ToolTip&quot;></a># # XAML 属性用法```   <object ToolTip=&quot;toolTipContent&quot;/>   ``` <a name=&quot;xamlPropertyElementUsage_ToolTip&quot;> </a> # # XAML 属性元素用法```   <object>     <object.ToolTip>       <ToolTip .../>     </object.ToolTip>   </object>   - or -   <object>     <object.ToolTip>       toolTipObjectContent     </object.ToolTip>   </object>   ``` <a name=&quot;xamlValues_ToolTip&quot;> </a> # # XAML 值*toolTipContent*成为的工具提示的显示文本的字符串。                   *经过*对象元素窗体，应该用作<xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement>内容中提供的某些对象 通常这是<xref:System.Windows.FrameworkElement>或创建工具提示，最终包含文本内容在该组合中布局组合的一些其他元素。</xref:System.Windows.FrameworkElement> 在这种用法，<xref:System.Windows.Controls.ToolTip>元素创建的隐式地从已分析[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]，和*经过*内容设置为其<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName>属性。</xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=fullName> </xref:System.Windows.Controls.ToolTip>       `ToolTip`.../>    See <xref:System.Windows.Controls.ToolTip>.</xref:System.Windows.Controls.ToolTip>      <a name=&quot;dependencyPropertyInfo_ToolTip&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ToolTipProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.FrameworkElement.ToolTipProperty>"
  example:
  - "The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the ToolTip property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.  \n  \n [!code-vb[StatusBar#MakeProgressBar](~/add/codesnippet/visualbasic/statusbar/window1.xaml.vb#makeprogressbar)]\n [!code-cs[StatusBar#MakeProgressBar](~/add/codesnippet/csharp/StatusBar/Window1.xaml.cs#makeprogressbar)]"
  syntax:
    content: public object ToolTip { get; set; }
    return:
      type: System.Object
      description: "工具提示的对象。 有关为什么此参数不强类型的详细信息，请参阅下面的备注。"
  overload: System.Windows.FrameworkElement.ToolTip*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTipClosing
  id: ToolTipClosing
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTipClosing
  nameWithType: FrameworkElement.ToolTipClosing
  fullName: System.Windows.FrameworkElement.ToolTipClosing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "关闭任何元素上的工具提示之前发生。"
  remarks: "为已处理标记 ToolTipClosing 事件不会取消关闭工具提示。 工具提示显示后，关闭工具提示是仅在响应用户交互，与 UI 中完成的。       此事件不能为<xref:System.Windows.EventTrigger>样式。</xref:System.Windows.EventTrigger> 这是因为此事件的标识符字段重新使用从服务不会公开为服务级别事件的添加/删除事件方法的实现。      <a name=&quot;routedEventInfo_ToolTipClosing&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Controls.ToolTipEventHandler>|     -重写<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>实现处理此事件在派生类中的类。</xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> </xref:System.Windows.Controls.ToolTipEventHandler> </xref:System.Windows.FrameworkElement.ToolTipClosingEvent>"
  syntax:
    content: public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;
    return:
      type: System.Windows.Controls.ToolTipEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTipClosingEvent
  id: ToolTipClosingEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTipClosingEvent
  nameWithType: FrameworkElement.ToolTipClosingEvent
  fullName: System.Windows.FrameworkElement.ToolTipClosingEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.ToolTipClosing&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTipOpening
  id: ToolTipOpening
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTipOpening
  nameWithType: FrameworkElement.ToolTipOpening
  fullName: System.Windows.FrameworkElement.ToolTipOpening
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "打开任何工具提示在元素上的时发生。"
  remarks: "若要防止工具提示显示在 UI 中，你处理 ToolTipOpening 程序可以将标记<xref:System.Windows.Controls.ToolTipEventArgs>所处理的事件数据。</xref:System.Windows.Controls.ToolTipEventArgs> 否则，显示工具提示，使用的值<xref:System.Windows.FrameworkElement.ToolTip%2A>属性作为工具提示的内容。</xref:System.Windows.FrameworkElement.ToolTip%2A> 另一种情形是，你可以编写的处理程序的值重置<xref:System.Windows.FrameworkElement.ToolTip%2A>是事件源中，工具提示显示之前的元素的属性。</xref:System.Windows.FrameworkElement.ToolTip%2A>       如果不会引发 ToolTipOpening 的值<xref:System.Windows.FrameworkElement.ToolTip%2A>是`null`或其他取消设置。</xref:System.Windows.FrameworkElement.ToolTip%2A> 不要特意将<xref:System.Windows.FrameworkElement.ToolTip%2A>到`null`时工具提示是打开的或者打开; 这不会关闭工具提示的效果，并改为将在 UI 中创建不需要的视觉假象。</xref:System.Windows.FrameworkElement.ToolTip%2A>       注册不能为<xref:System.Windows.EventTrigger>样式。</xref:System.Windows.EventTrigger> 这是因为此事件的标识符字段重新使用从服务不会公开为服务级别事件的添加/删除事件方法的实现。      <a name=&quot;routedEventInfo_ToolTipOpening&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Controls.ToolTipEventHandler>|     -重写<xref:System.Windows.FrameworkElement.OnToolTipClosing%2A>实现处理此事件在派生类中的类。</xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> </xref:System.Windows.Controls.ToolTipEventHandler> </xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>"
  syntax:
    content: public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;
    return:
      type: System.Windows.Controls.ToolTipEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTipOpeningEvent
  id: ToolTipOpeningEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTipOpeningEvent
  nameWithType: FrameworkElement.ToolTipOpeningEvent
  fullName: System.Windows.FrameworkElement.ToolTipOpeningEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.ToolTipOpening&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.ToolTipProperty
  id: ToolTipProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: ToolTipProperty
  nameWithType: FrameworkElement.ToolTipProperty
  fullName: System.Windows.FrameworkElement.ToolTipProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.ToolTip*>依赖项属性。</xref:System.Windows.FrameworkElement.ToolTip*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ToolTipProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Triggers
  id: Triggers
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Triggers
  nameWithType: FrameworkElement.Triggers
  fullName: System.Windows.FrameworkElement.Triggers
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取直接在此元素上或在子元素中建立的触发器的集合。"
  remarks: "> [!NOTE]1> 此属性仅在中设置[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]通过集合语法所示，或通过访问的集合对象并使用它的各种方法，例如 Add。 要访问集合对象本身的属性是只读的该集合本身是读写。 仅存在于根元素; 上的属性尝试查找它或将其设置在其他位置将会导致引发异常。       此属性不允许你检查作为中此元素上使用的样式的一部分存在的触发器。 它只报告的按其原义添加到集合，在标记或代码中的触发器的集合。 元素通常没有现有默认情况下此类元素 (通过模板的实例);很多常见的来自控件组合建立样式中的触发器。       在行为 （以及尝试建立哪个效果来自哪个元素声明触发器集合），触发条件以及触发器产生什么影响可能会针对此元素，也可能对其逻辑树中的子元素。 请注意，如果您使用生存期事件如<xref:System.Windows.FrameworkElement.Loaded>若要获取此集合，子元素的触发器可能尚未进行完全加载，而且则集合将为小于在运行时将真正。</xref:System.Windows.FrameworkElement.Loaded>       请注意，在元素上建立的触发器集合仅支持<xref:System.Windows.EventTrigger>，不属性触发器 (<xref:System.Windows.Trigger>)。</xref:System.Windows.Trigger> </xref:System.Windows.EventTrigger> 如果需要属性触发器，你必须将这些样式或模板中并将该样式或模板的元素或者直接通过<xref:System.Windows.FrameworkElement.Style%2A>属性，或通过隐式样式引用间接。</xref:System.Windows.FrameworkElement.Style%2A>      <a name=&quot;xamlPropertyElementUsage_Triggers&quot;></a># # XAML 属性元素用法```   <object>     <object.Triggers>       oneOrMoreTriggers     </object.Triggers>   </object>   ``` <a name=&quot;xamlValues_Triggers&quot;> </a> # # XAML 值*oneOrMoreTriggers*一个或多个已定义<xref:System.Windows.EventTrigger>元素。</xref:System.Windows.EventTrigger>       每个此类触发器应包含有效的情节提要操作和引用。 请注意此集合仅可以建立一个页的根元素上。 有关详细信息，请参阅[情节提要概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Windows.TriggerCollection Triggers { get; }
    return:
      type: System.Windows.TriggerCollection
      description: "强类型的集合<xref href=&quot;System.Windows.Trigger&quot;></xref>对象。"
  overload: System.Windows.FrameworkElement.Triggers*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.TryFindResource(System.Object)
  id: TryFindResource(System.Object)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: TryFindResource(Object)
  nameWithType: FrameworkElement.TryFindResource(Object)
  fullName: System.Windows.FrameworkElement.TryFindResource(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "资源中搜索具有指定键，并返回该资源，如果找到。"
  remarks: "如果调用元素上未找到资源，在逻辑树向上搜索父资源树，在树的方法相同的资源请求时搜索由参数在运行时。 该方法返回`null`仅该密钥的任何资源资源林中的任何位置都不存在，如果每次树的现有条件调用该 TryFindResource。       通常将立即强制转换为已尝试用返回的资源值进行设置的属性的类型的返回值。       <xref:System.Windows.FrameworkElement.FindResource%2A>方法具有类似的行为，只是返回具有提供的键的资源时，它会引发异常。</xref:System.Windows.FrameworkElement.FindResource%2A>"
  example:
  - "The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling TryFindResource on itself. This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] and is not shown).  \n  \n [!code-cs[BaseElementsSmorgasbord#FETryFindResource](~/add/codesnippet/csharp/BaseElementsSmorgasbord/Page1.xaml.cs#fetryfindresource)]\n [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/add/codesnippet/visualbasic/baseelementssmorgasbord/page1.xaml.vb#fetryfindresource)]"
  syntax:
    content: public object TryFindResource (object resourceKey);
    parameters:
    - id: resourceKey
      type: System.Object
      description: "要找的资源键标识符。"
    return:
      type: System.Object
      description: "找到的资源，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果利用所提供的任何资源<code> key </code>找到。"
  overload: System.Windows.FrameworkElement.TryFindResource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Unloaded
  id: Unloaded
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Unloaded
  nameWithType: FrameworkElement.Unloaded
  fullName: System.Windows.FrameworkElement.Unloaded
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "元素将从已加载的元素的元素树中删除时发生。"
  remarks: "直接路由的事件不遵循路由，而仅处理引发它们时对同一元素中。 直接路由的事件是否支持其他路由的事件行为︰ 它们支持的可访问的处理程序集合，并可用作<xref:System.Windows.EventTrigger>样式。</xref:System.Windows.EventTrigger>       <xref:System.Windows.FrameworkElement.Loaded>并卸载可能同时引发在用户启动的系统主题更改控件上。</xref:System.Windows.FrameworkElement.Loaded> 主题更改会导致控件模板和包含的可视化树，这反过来会导致整个控件，若要卸载并重新加载的失效。 因此不能假定卸载只会在导航离开页面。       请注意在应用程序开始关闭后不会引发卸载事件。 应用程序时，发生所定义的条件<xref:System.Windows.Application.ShutdownMode%2A>属性出现。</xref:System.Windows.Application.ShutdownMode%2A> 如果你将为卸载事件处理程序内的清理代码的放置如<xref:System.Windows.Window>或<xref:System.Windows.Controls.UserControl>，它可能不会调用按预期方式。</xref:System.Windows.Controls.UserControl> </xref:System.Windows.Window>      <a name=&quot;routedEventInfo_Unloaded&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.UnloadedEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.RoutedEventHandler>|</xref:System.Windows.RoutedEventHandler></xref:System.Windows.FrameworkElement.UnloadedEvent>"
  syntax:
    content: public event System.Windows.RoutedEventHandler Unloaded;
    return:
      type: System.Windows.RoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.UnloadedEvent
  id: UnloadedEvent
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: UnloadedEvent
  nameWithType: FrameworkElement.UnloadedEvent
  fullName: System.Windows.FrameworkElement.UnloadedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.FrameworkElement.Unloaded&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent UnloadedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.UnregisterName(System.String)
  id: UnregisterName(System.String)
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: UnregisterName(String)
  nameWithType: FrameworkElement.UnregisterName(String)
  fullName: System.Windows.FrameworkElement.UnregisterName(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "简化了对访问<xref:System.Windows.NameScope>取消注册方法。</xref:System.Windows.NameScope>"
  remarks: "您只需要取消注册名称到如果你想要重新注册该同名的另一个元素。"
  syntax:
    content: public void UnregisterName (string name);
    parameters:
    - id: name
      type: System.String
      description: "从当前作用域中删除名称对象对中的名称。"
  overload: System.Windows.FrameworkElement.UnregisterName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.UpdateDefaultStyle
  id: UpdateDefaultStyle
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: UpdateDefaultStyle()
  nameWithType: FrameworkElement.UpdateDefaultStyle()
  fullName: System.Windows.FrameworkElement.UpdateDefaultStyle()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "重新默认样式应用到当前<xref href=&quot;System.Windows.FrameworkElement&quot;> </xref>。"
  syntax:
    content: public void UpdateDefaultStyle ();
    parameters: []
  overload: System.Windows.FrameworkElement.UpdateDefaultStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.UseLayoutRounding
  id: UseLayoutRounding
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: UseLayoutRounding
  nameWithType: FrameworkElement.UseLayoutRounding
  fullName: System.Windows.FrameworkElement.UseLayoutRounding
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示是否布局舍入应应用到此元素的大小和位置布局。"
  remarks: "当元素 UseLayoutRounding 属性是`true`，过程中所计算的所有非整型像素值<xref:System.Windows.UIElement.Measure%2A>和<xref:System.Windows.UIElement.Arrange%2A>传递舍入为整数像素值。</xref:System.Windows.UIElement.Arrange%2A> </xref:System.Windows.UIElement.Measure%2A>       此属性被继承的子元素。      1> [!NOTE]&1;> 应将设为 UseLayoutRounding`true`根元素上。 布局系统将子坐标添加到父坐标中;因此，如果父坐标不像素边界上，子坐标也是像素边界上。 如果不能在根目录设置 UseLayoutRounding，设置<xref:System.Windows.UIElement.SnapsToDevicePixels%2A>在的子活动以获取所需的效果。</xref:System.Windows.UIElement.SnapsToDevicePixels%2A>       对象绘制像素边界上消除了一条边不再处于中间设备像素时，生成的抗锯齿的半透明边缘。 下图显示的单个像素宽度行的位置在设备像素的中间输出。 在左侧的行不使用布局舍入，并且是消除锯齿。 在右侧的行使用布局舍入。       ![消除锯齿的线与单像素线的比较。](~/add/media/pixelsnaplinecompare.PNG &quot;消除锯齿的线与单像素线的比较。&quot;)       当你使用布局舍入和<xref:System.Windows.GridUnitType>调整大小，该布局系统中的列或行的度量值以避免子像素呈现中创建小型变体。</xref:System.Windows.GridUnitType> 例如，如果一个网格，具有 100 具有 3 列每个大小的总宽度<xref:System.Windows.GridUnitType>，而不是创建三个列都具有 33.3 的相等宽度，该布局系统创建具有 33 到其中一个的宽度为 34 的宽度的 2 列。</xref:System.Windows.GridUnitType>      1> [!NOTE] 1>.NET 4.6 中的更改布局舍入以减少带边框的控件中的剪切实例。 默认情况下，如果目标框架是.NET Framework 4.6 或更高版本启用此功能。 面向的 framework 的早期版本的应用程序可以选择加入到新的行为通过将以下设置添加到 app.config 文件︰`<runtime>``<AppContextSwitchOverrides      value=&quot;Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false&quot;/>``</runtime>`时在.NET Framework 4.6 上运行该应用程序后，该设置将仅将生效。"
  example:
  - "The following example demonstrates the effect that the UseLayoutRounding property has on a single pixel-width line. The line on the left does not use layout rounding and the line on the right uses layout rounding. If you slowly resize the window, you can see the difference that layout rounding makes.  \n  \n```xaml  \n  \n<Page x:Class=\"LayoutRounding.Lines\"  \n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"  \n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"  \n    Title=\"Lines\" Name=\"linesPage\"  \n    >  \n  <StackPanel Width=\"150\"  Margin=\"7\" Orientation=\"Horizontal\">  \n    <!-- Single pixel line with layout rounding turned OFF.-->  \n    <Rectangle UseLayoutRounding=\"False\"  \n       Width=\"45.5\" Margin=\"10\" Height=\"1\" Fill=\"Red\"/>  \n    <!-- Single pixel line with layout rounding turned ON.-->  \n    <Rectangle UseLayoutRounding=\"True\"  \n      Width=\"45.5\" Margin=\"10\" Height=\"1\" Fill=\"Red\"/>  \n  </StackPanel>  \n  <!-- Background Grid -->  \n  <Page.Background>  \n    <DrawingBrush  Viewport=\"0,0,10,10\" ViewportUnits=\"Absolute\" TileMode=\"Tile\">  \n      <DrawingBrush.Drawing>  \n        <DrawingGroup>  \n          <GeometryDrawing Brush=\"White\">  \n            <GeometryDrawing.Geometry>  \n              <RectangleGeometry Rect=\"0,0,1,1\" />  \n            </GeometryDrawing.Geometry>  \n          </GeometryDrawing>  \n          <GeometryDrawing Geometry=\"M0,0 L1,0 1,0.1, 0,0.1Z \" Brush=\"#CCCCFF\" />  \n          <GeometryDrawing Geometry=\"M0,0 L0,1 0.1,1, 0.1,0Z\" Brush=\"#CCCCFF\" />  \n        </DrawingGroup>  \n      </DrawingBrush.Drawing>  \n    </DrawingBrush>  \n  </Page.Background>  \n</Page>  \n```"
  syntax:
    content: public bool UseLayoutRounding { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果应用了布局舍入;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.UseLayoutRounding*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.UseLayoutRoundingProperty
  id: UseLayoutRoundingProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: UseLayoutRoundingProperty
  nameWithType: FrameworkElement.UseLayoutRoundingProperty
  fullName: System.Windows.FrameworkElement.UseLayoutRoundingProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.UseLayoutRounding*>依赖项属性。</xref:System.Windows.FrameworkElement.UseLayoutRounding*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.VerticalAlignment
  id: VerticalAlignment
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: VerticalAlignment
  nameWithType: FrameworkElement.VerticalAlignment
  fullName: System.Windows.FrameworkElement.VerticalAlignment
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置应用到此元素时它由在父元素，如面板或项控件的垂直对齐特征。"
  remarks: "在<xref:System.Windows.FrameworkElement.Height%2A>和<xref:System.Windows.FrameworkElement.Width%2A>上一个元素显式设置属性，这些度量值需要布局引用单元格，并且取消设置此属性设置为<xref:System.Windows.VerticalAlignment>.</xref:System.Windows.VerticalAlignment>的正则效果</xref:System.Windows.FrameworkElement.Width%2A></xref:System.Windows.FrameworkElement.Height%2A>       VerticalAlignment 是[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]它实际上是依赖项属性的属性访问器。 此特定的依赖项属性非常普遍地具有派生的元素类，尤其是控件中以不同方式设置其原本&quot;默认&quot;值。 这通常发生在两种方式之一︰ 为特定的派生类中，但具有不同的元数据，用于设置其默认值; 重新注册依赖项属性或者应用了默认样式以不同方式设置的依赖项属性值。 例如，原本&quot;默认&quot;VerticalAlignment 为<xref:System.Windows.Controls.ComboBoxItem>控件将是<xref:System.Windows.VerticalAlignment>，即使<xref:System.Windows.Controls.ComboBoxItem>继承 VerticalAlignment 直接从<xref:System.Windows.FrameworkElement>.</xref:System.Windows.FrameworkElement> </xref:System.Windows.Controls.ComboBoxItem> </xref:System.Windows.VerticalAlignment> </xref:System.Windows.Controls.ComboBoxItem> 这是因为该值已重置中的默认样式<xref:System.Windows.Controls.ComboBoxItem>中的样式的控件模板。</xref:System.Windows.Controls.ComboBoxItem>       <xref:System.Windows.Controls.Canvas>时不使用 VerticalAlignment 构成布局，因为<xref:System.Windows.Controls.Canvas>根据绝对定位。</xref:System.Windows.Controls.Canvas></xref:System.Windows.Controls.Canvas>       当由<xref:System.Windows.Controls.ComboBoxItem>或任何派生的类中，<xref:System.Windows.Controls.ComboBoxItem>将此属性才<xref:System.Windows.VerticalAlignment>.</xref:System.Windows.VerticalAlignment>默认值重新定义</xref:System.Windows.Controls.ComboBoxItem></xref:System.Windows.Controls.ComboBoxItem>继承      <a name=&quot;dependencyPropertyInfo_VerticalAlignment&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A> </xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>"
  syntax:
    content: public System.Windows.VerticalAlignment VerticalAlignment { get; set; }
    return:
      type: System.Windows.VerticalAlignment
      description: "垂直对齐设置。 默认值是<xref href=&quot;System.Windows.VerticalAlignment&quot;> </xref>。"
  overload: System.Windows.FrameworkElement.VerticalAlignment*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.VerticalAlignmentProperty
  id: VerticalAlignmentProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: VerticalAlignmentProperty
  nameWithType: FrameworkElement.VerticalAlignmentProperty
  fullName: System.Windows.FrameworkElement.VerticalAlignmentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.VerticalAlignment*>依赖项属性。</xref:System.Windows.FrameworkElement.VerticalAlignment*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.VisualChildrenCount
  id: VisualChildrenCount
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: VisualChildrenCount
  nameWithType: FrameworkElement.VisualChildrenCount
  fullName: System.Windows.FrameworkElement.VisualChildrenCount
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取此元素内可视子元素的数目。"
  remarks: "<xref:System.Windows.FrameworkElement>的 VisualChildrenCount 实现始终返回零个或一个。</xref:System.Windows.FrameworkElement> 维护可能超过&1; 的可视子集合的类必须重写此属性和<xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</xref:System.Windows.FrameworkElement.GetVisualChild%2A>       此属性通常用于确定当前的子集合，以便实现布局重写的上限 (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>， <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>)。</xref:System.Windows.FrameworkElement.ArrangeOverride%2A> </xref:System.Windows.FrameworkElement.MeasureOverride%2A>"
  example:
  - "The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of VisualChildrenCount and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.  \n  \n [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverridespre)]\n [!code-cs[Adorners_ResizingAdorner#FEVisualOverridesPre](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverridespre)]  \n[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/visualbasic/resizingadorner/resizingadorner.vb#fevisualoverrides)]\n[!code-cs[Adorners_ResizingAdorner#FEVisualOverrides](~/add/codesnippet/csharp/ResizingAdorner/ResizingAdorner.cs#fevisualoverrides)]"
  syntax:
    content: protected override int VisualChildrenCount { get; }
    return:
      type: System.Int32
      description: "此元素的可视子元素的数目。"
  overload: System.Windows.FrameworkElement.VisualChildrenCount*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.Width
  id: Width
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: Width
  nameWithType: FrameworkElement.Width
  fullName: System.Windows.FrameworkElement.Width
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置元素的宽度。"
  remarks: "这是一个三个属性上<xref:System.Windows.FrameworkElement>指定宽度的信息。</xref:System.Windows.FrameworkElement>  另外两个是<xref:System.Windows.FrameworkElement.MinWidth%2A>和<xref:System.Windows.FrameworkElement.MaxWidth%2A>。</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MinWidth%2A>  如果这些值之间没有冲突，应用程序实际宽度确定的顺序是︰ 首先<xref:System.Windows.FrameworkElement.MinWidth%2A>必须采用，然后<xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后如果每个都在限制之内，宽度。</xref:System.Windows.FrameworkElement.MaxWidth%2A> </xref:System.Windows.FrameworkElement.MinWidth%2A>       此属性的返回值始终是任何已设置为它的值相同。 相反，值<xref:System.Windows.FrameworkElement.ActualWidth%2A>可能会有所不同。</xref:System.Windows.FrameworkElement.ActualWidth%2A> 布局可能已被拒绝的建议的大小出于某种原因。 此外，布局系统本身相对于属性系统的集中的宽度以异步方式工作，可能不处理该特定的大小调整属性的更改。       除了可接受<xref:System.Double>值，此属性也可能是<xref:System.Double.NaN?displayProperty=fullName>.</xref:System.Double.NaN?displayProperty=fullName> </xref:System.Double> 这是如何指定自动调整大小行为。 在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]你设置的值为字符串&quot;自动&quot;（不区分大小写） 若要启用自动调整大小行为。 自动调整大小行为意味着元素将填满可用的宽度。 但是请注意，特定的控件通常提供将禁用自动调整大小行为，除非专门重新启用了其默认样式中的默认值。       除了验证检查，还有由布局系统强制执行的宽度发往非确定性上限值 (这是非常大的数，大于<xref:System.Single.MaxValue?displayProperty=fullName>但小于<xref:System.Double.MaxValue?displayProperty=fullName>)。</xref:System.Double.MaxValue?displayProperty=fullName> </xref:System.Single.MaxValue?displayProperty=fullName> 如果超过此限制，该元素将不会呈现，并不会引发异常。 未设置为一个值，将显著大于任何可能的可视显示的最大大小的宽度或可能超出此非确定性的上限。      <a name=&quot;xamlAttributeUsage_Width&quot;></a># # XAML 属性用法```   <object Width=&quot;double&quot;/>   - or –   <object Width =&quot;qualifiedDouble&quot;/>   - or -   <object Width =&quot;Auto&quot;/>   ``` <a name=&quot;xamlValues_Width&quot;> </a> # # XAML 值*double* <xref:System.Double>的字符串表示形式<xref:System.Double>值等于或大于 0.0。</xref:System.Double> </xref:System.Double>           以了解上限信息，请参阅备注。 此值解释为[!INCLUDE[TLA#tla_dipixel](~/add/includes/tlasharptla-dipixel-md.md)]度量。 字符串不需要显式包括位小数。 例如，值的`1`是可以接受的。       *qualifiedDouble* A *double*该值，上文所述跟以下单位声明字符串之一︰ `px`， `in`， `cm`， `pt`。       `px`（默认值） 是[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]`in`为英寸; 1 英寸 = = 96px`cm`是厘米; 1cm==(96/2.54) px`pt`是点; 1pt==(96/72) px`Auto`启用自动调整大小行为。        请参阅备注。      <a name=&quot;dependencyPropertyInfo_Width&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.FrameworkElement.WidthProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.FrameworkElement.WidthProperty>"
  syntax:
    content: public double Width { get; set; }
    return:
      type: System.Double
      description: "元素的宽度，请在[!INCLUDE[TLA#tla_dipixel#plural](~/add/includes/ajax-current-ext-md.md)]。 默认值是&lt;xref:System.Double?displayProperty=fullName&gt;。 此值必须等于或大于 0.0。 以了解上限信息，请参阅备注。"
  overload: System.Windows.FrameworkElement.Width*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.FrameworkElement.WidthProperty
  id: WidthProperty
  parent: System.Windows.FrameworkElement
  langs:
  - csharp
  name: WidthProperty
  nameWithType: FrameworkElement.WidthProperty
  fullName: System.Windows.FrameworkElement.WidthProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.FrameworkElement.Width*>依赖项属性。</xref:System.Windows.FrameworkElement.Width*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WidthProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.UIElement
  isExternal: false
  name: System.Windows.UIElement
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.ResourceReferenceKeyNotFoundException
  parent: System.Windows
  isExternal: false
  name: ResourceReferenceKeyNotFoundException
  nameWithType: ResourceReferenceKeyNotFoundException
  fullName: System.Windows.ResourceReferenceKeyNotFoundException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Windows.FrameworkElement.#ctor
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FrameworkElement()
  nameWithType: FrameworkElement.FrameworkElement()
  fullName: System.Windows.FrameworkElement.FrameworkElement()
- uid: System.Windows.FrameworkElement.ActualHeight
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualHeight
  nameWithType: FrameworkElement.ActualHeight
  fullName: System.Windows.FrameworkElement.ActualHeight
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.FrameworkElement.ActualHeightProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualHeightProperty
  nameWithType: FrameworkElement.ActualHeightProperty
  fullName: System.Windows.FrameworkElement.ActualHeightProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.FrameworkElement.ActualWidth
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualWidth
  nameWithType: FrameworkElement.ActualWidth
  fullName: System.Windows.FrameworkElement.ActualWidth
- uid: System.Windows.FrameworkElement.ActualWidthProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualWidthProperty
  nameWithType: FrameworkElement.ActualWidthProperty
  fullName: System.Windows.FrameworkElement.ActualWidthProperty
- uid: System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: AddLogicalChild(Object)
  nameWithType: FrameworkElement.AddLogicalChild(Object)
  fullName: System.Windows.FrameworkElement.AddLogicalChild(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.FrameworkElement.ApplyTemplate
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ApplyTemplate()
  nameWithType: FrameworkElement.ApplyTemplate()
  fullName: System.Windows.FrameworkElement.ApplyTemplate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ArrangeCore(Rect)
  nameWithType: FrameworkElement.ArrangeCore(Rect)
  fullName: System.Windows.FrameworkElement.ArrangeCore(Rect)
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: FrameworkElement.ArrangeOverride(Size)
  fullName: System.Windows.FrameworkElement.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.FrameworkElement.BeginInit
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginInit()
  nameWithType: FrameworkElement.BeginInit()
  fullName: System.Windows.FrameworkElement.BeginInit()
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginStoryboard(Storyboard)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard)
- uid: System.Windows.Media.Animation.Storyboard
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Storyboard
  nameWithType: Storyboard
  fullName: System.Windows.Media.Animation.Storyboard
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginStoryboard(Storyboard,HandoffBehavior)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior)
- uid: System.Windows.Media.Animation.HandoffBehavior
  parent: System.Windows.Media.Animation
  isExternal: false
  name: HandoffBehavior
  nameWithType: HandoffBehavior
  fullName: System.Windows.Media.Animation.HandoffBehavior
- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
  nameWithType: FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
  fullName: System.Windows.FrameworkElement.BeginStoryboard(Storyboard,HandoffBehavior,Boolean)
- uid: System.Windows.FrameworkElement.BindingGroup
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BindingGroup
  nameWithType: FrameworkElement.BindingGroup
  fullName: System.Windows.FrameworkElement.BindingGroup
- uid: System.Windows.Data.BindingGroup
  parent: System.Windows.Data
  isExternal: false
  name: BindingGroup
  nameWithType: BindingGroup
  fullName: System.Windows.Data.BindingGroup
- uid: System.Windows.FrameworkElement.BindingGroupProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BindingGroupProperty
  nameWithType: FrameworkElement.BindingGroupProperty
  fullName: System.Windows.FrameworkElement.BindingGroupProperty
- uid: System.Windows.FrameworkElement.BringIntoView
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BringIntoView()
  nameWithType: FrameworkElement.BringIntoView()
  fullName: System.Windows.FrameworkElement.BringIntoView()
- uid: System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BringIntoView(Rect)
  nameWithType: FrameworkElement.BringIntoView(Rect)
  fullName: System.Windows.FrameworkElement.BringIntoView(Rect)
- uid: System.Windows.FrameworkElement.ContextMenu
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenu
  nameWithType: FrameworkElement.ContextMenu
  fullName: System.Windows.FrameworkElement.ContextMenu
- uid: System.Windows.Controls.ContextMenu
  parent: System.Windows.Controls
  isExternal: false
  name: ContextMenu
  nameWithType: ContextMenu
  fullName: System.Windows.Controls.ContextMenu
- uid: System.Windows.FrameworkElement.ContextMenuClosing
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenuClosing
  nameWithType: FrameworkElement.ContextMenuClosing
  fullName: System.Windows.FrameworkElement.ContextMenuClosing
- uid: System.Windows.Controls.ContextMenuEventHandler
  parent: System.Windows.Controls
  isExternal: false
  name: ContextMenuEventHandler
  nameWithType: ContextMenuEventHandler
  fullName: System.Windows.Controls.ContextMenuEventHandler
- uid: System.Windows.FrameworkElement.ContextMenuClosingEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenuClosingEvent
  nameWithType: FrameworkElement.ContextMenuClosingEvent
  fullName: System.Windows.FrameworkElement.ContextMenuClosingEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.FrameworkElement.ContextMenuOpening
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenuOpening
  nameWithType: FrameworkElement.ContextMenuOpening
  fullName: System.Windows.FrameworkElement.ContextMenuOpening
- uid: System.Windows.FrameworkElement.ContextMenuOpeningEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenuOpeningEvent
  nameWithType: FrameworkElement.ContextMenuOpeningEvent
  fullName: System.Windows.FrameworkElement.ContextMenuOpeningEvent
- uid: System.Windows.FrameworkElement.ContextMenuProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenuProperty
  nameWithType: FrameworkElement.ContextMenuProperty
  fullName: System.Windows.FrameworkElement.ContextMenuProperty
- uid: System.Windows.FrameworkElement.Cursor
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Cursor
  nameWithType: FrameworkElement.Cursor
  fullName: System.Windows.FrameworkElement.Cursor
- uid: System.Windows.Input.Cursor
  parent: System.Windows.Input
  isExternal: false
  name: Cursor
  nameWithType: Cursor
  fullName: System.Windows.Input.Cursor
- uid: System.Windows.FrameworkElement.CursorProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: CursorProperty
  nameWithType: FrameworkElement.CursorProperty
  fullName: System.Windows.FrameworkElement.CursorProperty
- uid: System.Windows.FrameworkElement.DataContext
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DataContext
  nameWithType: FrameworkElement.DataContext
  fullName: System.Windows.FrameworkElement.DataContext
- uid: System.Windows.FrameworkElement.DataContextChanged
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DataContextChanged
  nameWithType: FrameworkElement.DataContextChanged
  fullName: System.Windows.FrameworkElement.DataContextChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.FrameworkElement.DataContextProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DataContextProperty
  nameWithType: FrameworkElement.DataContextProperty
  fullName: System.Windows.FrameworkElement.DataContextProperty
- uid: System.Windows.FrameworkElement.DefaultStyleKey
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DefaultStyleKey
  nameWithType: FrameworkElement.DefaultStyleKey
  fullName: System.Windows.FrameworkElement.DefaultStyleKey
- uid: System.Windows.FrameworkElement.DefaultStyleKeyProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DefaultStyleKeyProperty
  nameWithType: FrameworkElement.DefaultStyleKeyProperty
  fullName: System.Windows.FrameworkElement.DefaultStyleKeyProperty
- uid: System.Windows.FrameworkElement.EndInit
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: EndInit()
  nameWithType: FrameworkElement.EndInit()
  fullName: System.Windows.FrameworkElement.EndInit()
- uid: System.Windows.FrameworkElement.FindName(System.String)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FindName(String)
  nameWithType: FrameworkElement.FindName(String)
  fullName: System.Windows.FrameworkElement.FindName(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.FrameworkElement.FindResource(System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FindResource(Object)
  nameWithType: FrameworkElement.FindResource(Object)
  fullName: System.Windows.FrameworkElement.FindResource(Object)
- uid: System.Windows.FrameworkElement.FlowDirection
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FlowDirection
  nameWithType: FrameworkElement.FlowDirection
  fullName: System.Windows.FrameworkElement.FlowDirection
- uid: System.Windows.FlowDirection
  parent: System.Windows
  isExternal: false
  name: FlowDirection
  nameWithType: FlowDirection
  fullName: System.Windows.FlowDirection
- uid: System.Windows.FrameworkElement.FlowDirectionProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FlowDirectionProperty
  nameWithType: FrameworkElement.FlowDirectionProperty
  fullName: System.Windows.FrameworkElement.FlowDirectionProperty
- uid: System.Windows.FrameworkElement.FocusVisualStyle
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FocusVisualStyle
  nameWithType: FrameworkElement.FocusVisualStyle
  fullName: System.Windows.FrameworkElement.FocusVisualStyle
- uid: System.Windows.Style
  parent: System.Windows
  isExternal: false
  name: Style
  nameWithType: Style
  fullName: System.Windows.Style
- uid: System.Windows.FrameworkElement.FocusVisualStyleProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FocusVisualStyleProperty
  nameWithType: FrameworkElement.FocusVisualStyleProperty
  fullName: System.Windows.FrameworkElement.FocusVisualStyleProperty
- uid: System.Windows.FrameworkElement.ForceCursor
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ForceCursor
  nameWithType: FrameworkElement.ForceCursor
  fullName: System.Windows.FrameworkElement.ForceCursor
- uid: System.Windows.FrameworkElement.ForceCursorProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ForceCursorProperty
  nameWithType: FrameworkElement.ForceCursorProperty
  fullName: System.Windows.FrameworkElement.ForceCursorProperty
- uid: System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetBindingExpression(DependencyProperty)
  nameWithType: FrameworkElement.GetBindingExpression(DependencyProperty)
  fullName: System.Windows.FrameworkElement.GetBindingExpression(DependencyProperty)
- uid: System.Windows.Data.BindingExpression
  parent: System.Windows.Data
  isExternal: false
  name: BindingExpression
  nameWithType: BindingExpression
  fullName: System.Windows.Data.BindingExpression
- uid: System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetFlowDirection(DependencyObject)
  nameWithType: FrameworkElement.GetFlowDirection(DependencyObject)
  fullName: System.Windows.FrameworkElement.GetFlowDirection(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetLayoutClip(Size)
  nameWithType: FrameworkElement.GetLayoutClip(Size)
  fullName: System.Windows.FrameworkElement.GetLayoutClip(Size)
- uid: System.Windows.Media.Geometry
  parent: System.Windows.Media
  isExternal: false
  name: Geometry
  nameWithType: Geometry
  fullName: System.Windows.Media.Geometry
- uid: System.Windows.FrameworkElement.GetTemplateChild(System.String)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetTemplateChild(String)
  nameWithType: FrameworkElement.GetTemplateChild(String)
  fullName: System.Windows.FrameworkElement.GetTemplateChild(String)
- uid: System.Windows.FrameworkElement.GetUIParentCore
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetUIParentCore()
  nameWithType: FrameworkElement.GetUIParentCore()
  fullName: System.Windows.FrameworkElement.GetUIParentCore()
- uid: System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetVisualChild(Int32)
  nameWithType: FrameworkElement.GetVisualChild(Int32)
  fullName: System.Windows.FrameworkElement.GetVisualChild(Int32)
- uid: System.Windows.Media.Visual
  parent: System.Windows.Media
  isExternal: false
  name: Visual
  nameWithType: Visual
  fullName: System.Windows.Media.Visual
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.FrameworkElement.Height
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Height
  nameWithType: FrameworkElement.Height
  fullName: System.Windows.FrameworkElement.Height
- uid: System.Windows.FrameworkElement.HeightProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: HeightProperty
  nameWithType: FrameworkElement.HeightProperty
  fullName: System.Windows.FrameworkElement.HeightProperty
- uid: System.Windows.FrameworkElement.HorizontalAlignment
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: HorizontalAlignment
  nameWithType: FrameworkElement.HorizontalAlignment
  fullName: System.Windows.FrameworkElement.HorizontalAlignment
- uid: System.Windows.HorizontalAlignment
  parent: System.Windows
  isExternal: false
  name: HorizontalAlignment
  nameWithType: HorizontalAlignment
  fullName: System.Windows.HorizontalAlignment
- uid: System.Windows.FrameworkElement.HorizontalAlignmentProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: HorizontalAlignmentProperty
  nameWithType: FrameworkElement.HorizontalAlignmentProperty
  fullName: System.Windows.FrameworkElement.HorizontalAlignmentProperty
- uid: System.Windows.FrameworkElement.InheritanceBehavior
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: InheritanceBehavior
  nameWithType: FrameworkElement.InheritanceBehavior
  fullName: System.Windows.FrameworkElement.InheritanceBehavior
- uid: System.Windows.InheritanceBehavior
  parent: System.Windows
  isExternal: false
  name: InheritanceBehavior
  nameWithType: InheritanceBehavior
  fullName: System.Windows.InheritanceBehavior
- uid: System.Windows.FrameworkElement.Initialized
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Initialized
  nameWithType: FrameworkElement.Initialized
  fullName: System.Windows.FrameworkElement.Initialized
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.FrameworkElement.InputScope
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: InputScope
  nameWithType: FrameworkElement.InputScope
  fullName: System.Windows.FrameworkElement.InputScope
- uid: System.Windows.Input.InputScope
  parent: System.Windows.Input
  isExternal: false
  name: InputScope
  nameWithType: InputScope
  fullName: System.Windows.Input.InputScope
- uid: System.Windows.FrameworkElement.InputScopeProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: InputScopeProperty
  nameWithType: FrameworkElement.InputScopeProperty
  fullName: System.Windows.FrameworkElement.InputScopeProperty
- uid: System.Windows.FrameworkElement.IsInitialized
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: IsInitialized
  nameWithType: FrameworkElement.IsInitialized
  fullName: System.Windows.FrameworkElement.IsInitialized
- uid: System.Windows.FrameworkElement.IsLoaded
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: IsLoaded
  nameWithType: FrameworkElement.IsLoaded
  fullName: System.Windows.FrameworkElement.IsLoaded
- uid: System.Windows.FrameworkElement.Language
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Language
  nameWithType: FrameworkElement.Language
  fullName: System.Windows.FrameworkElement.Language
- uid: System.Windows.Markup.XmlLanguage
  parent: System.Windows.Markup
  isExternal: false
  name: XmlLanguage
  nameWithType: XmlLanguage
  fullName: System.Windows.Markup.XmlLanguage
- uid: System.Windows.FrameworkElement.LanguageProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LanguageProperty
  nameWithType: FrameworkElement.LanguageProperty
  fullName: System.Windows.FrameworkElement.LanguageProperty
- uid: System.Windows.FrameworkElement.LayoutTransform
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LayoutTransform
  nameWithType: FrameworkElement.LayoutTransform
  fullName: System.Windows.FrameworkElement.LayoutTransform
- uid: System.Windows.Media.Transform
  parent: System.Windows.Media
  isExternal: false
  name: Transform
  nameWithType: Transform
  fullName: System.Windows.Media.Transform
- uid: System.Windows.FrameworkElement.LayoutTransformProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LayoutTransformProperty
  nameWithType: FrameworkElement.LayoutTransformProperty
  fullName: System.Windows.FrameworkElement.LayoutTransformProperty
- uid: System.Windows.FrameworkElement.Loaded
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Loaded
  nameWithType: FrameworkElement.Loaded
  fullName: System.Windows.FrameworkElement.Loaded
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.FrameworkElement.LoadedEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LoadedEvent
  nameWithType: FrameworkElement.LoadedEvent
  fullName: System.Windows.FrameworkElement.LoadedEvent
- uid: System.Windows.FrameworkElement.LogicalChildren
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LogicalChildren
  nameWithType: FrameworkElement.LogicalChildren
  fullName: System.Windows.FrameworkElement.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.FrameworkElement.Margin
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Margin
  nameWithType: FrameworkElement.Margin
  fullName: System.Windows.FrameworkElement.Margin
- uid: System.Windows.Thickness
  parent: System.Windows
  isExternal: false
  name: Thickness
  nameWithType: Thickness
  fullName: System.Windows.Thickness
- uid: System.Windows.FrameworkElement.MarginProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MarginProperty
  nameWithType: FrameworkElement.MarginProperty
  fullName: System.Windows.FrameworkElement.MarginProperty
- uid: System.Windows.FrameworkElement.MaxHeight
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxHeight
  nameWithType: FrameworkElement.MaxHeight
  fullName: System.Windows.FrameworkElement.MaxHeight
- uid: System.Windows.FrameworkElement.MaxHeightProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxHeightProperty
  nameWithType: FrameworkElement.MaxHeightProperty
  fullName: System.Windows.FrameworkElement.MaxHeightProperty
- uid: System.Windows.FrameworkElement.MaxWidth
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxWidth
  nameWithType: FrameworkElement.MaxWidth
  fullName: System.Windows.FrameworkElement.MaxWidth
- uid: System.Windows.FrameworkElement.MaxWidthProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxWidthProperty
  nameWithType: FrameworkElement.MaxWidthProperty
  fullName: System.Windows.FrameworkElement.MaxWidthProperty
- uid: System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MeasureCore(Size)
  nameWithType: FrameworkElement.MeasureCore(Size)
  fullName: System.Windows.FrameworkElement.MeasureCore(Size)
- uid: System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: FrameworkElement.MeasureOverride(Size)
  fullName: System.Windows.FrameworkElement.MeasureOverride(Size)
- uid: System.Windows.FrameworkElement.MinHeight
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinHeight
  nameWithType: FrameworkElement.MinHeight
  fullName: System.Windows.FrameworkElement.MinHeight
- uid: System.Windows.FrameworkElement.MinHeightProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinHeightProperty
  nameWithType: FrameworkElement.MinHeightProperty
  fullName: System.Windows.FrameworkElement.MinHeightProperty
- uid: System.Windows.FrameworkElement.MinWidth
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinWidth
  nameWithType: FrameworkElement.MinWidth
  fullName: System.Windows.FrameworkElement.MinWidth
- uid: System.Windows.FrameworkElement.MinWidthProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinWidthProperty
  nameWithType: FrameworkElement.MinWidthProperty
  fullName: System.Windows.FrameworkElement.MinWidthProperty
- uid: System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: FrameworkElement.MoveFocus(TraversalRequest)
  fullName: System.Windows.FrameworkElement.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.FrameworkElement.Name
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Name
  nameWithType: FrameworkElement.Name
  fullName: System.Windows.FrameworkElement.Name
- uid: System.Windows.FrameworkElement.NameProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: NameProperty
  nameWithType: FrameworkElement.NameProperty
  fullName: System.Windows.FrameworkElement.NameProperty
- uid: System.Windows.FrameworkElement.OnApplyTemplate
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnApplyTemplate()
  nameWithType: FrameworkElement.OnApplyTemplate()
  fullName: System.Windows.FrameworkElement.OnApplyTemplate()
- uid: System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnContextMenuClosing(ContextMenuEventArgs)
  nameWithType: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)
  fullName: System.Windows.FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)
- uid: System.Windows.Controls.ContextMenuEventArgs
  parent: System.Windows.Controls
  isExternal: false
  name: ContextMenuEventArgs
  nameWithType: ContextMenuEventArgs
  fullName: System.Windows.Controls.ContextMenuEventArgs
- uid: System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnContextMenuOpening(ContextMenuEventArgs)
  nameWithType: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)
  fullName: System.Windows.FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)
- uid: System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: FrameworkElement.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.FrameworkElement.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnInitialized(EventArgs)
  nameWithType: FrameworkElement.OnInitialized(EventArgs)
  fullName: System.Windows.FrameworkElement.OnInitialized(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)
  nameWithType: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnRenderSizeChanged(SizeChangedInfo)
  nameWithType: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)
  fullName: System.Windows.FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)
- uid: System.Windows.SizeChangedInfo
  parent: System.Windows
  isExternal: false
  name: SizeChangedInfo
  nameWithType: SizeChangedInfo
  fullName: System.Windows.SizeChangedInfo
- uid: System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnStyleChanged(Style,Style)
  nameWithType: FrameworkElement.OnStyleChanged(Style,Style)
  fullName: System.Windows.FrameworkElement.OnStyleChanged(Style,Style)
- uid: System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnToolTipClosing(ToolTipEventArgs)
  nameWithType: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)
  fullName: System.Windows.FrameworkElement.OnToolTipClosing(ToolTipEventArgs)
- uid: System.Windows.Controls.ToolTipEventArgs
  parent: System.Windows.Controls
  isExternal: false
  name: ToolTipEventArgs
  nameWithType: ToolTipEventArgs
  fullName: System.Windows.Controls.ToolTipEventArgs
- uid: System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnToolTipOpening(ToolTipEventArgs)
  nameWithType: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)
  fullName: System.Windows.FrameworkElement.OnToolTipOpening(ToolTipEventArgs)
- uid: System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: FrameworkElement.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.FrameworkElement.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.FrameworkElement.OverridesDefaultStyle
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OverridesDefaultStyle
  nameWithType: FrameworkElement.OverridesDefaultStyle
  fullName: System.Windows.FrameworkElement.OverridesDefaultStyle
- uid: System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OverridesDefaultStyleProperty
  nameWithType: FrameworkElement.OverridesDefaultStyleProperty
  fullName: System.Windows.FrameworkElement.OverridesDefaultStyleProperty
- uid: System.Windows.FrameworkElement.Parent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Parent
  nameWithType: FrameworkElement.Parent
  fullName: System.Windows.FrameworkElement.Parent
- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ParentLayoutInvalidated(UIElement)
  nameWithType: FrameworkElement.ParentLayoutInvalidated(UIElement)
  fullName: System.Windows.FrameworkElement.ParentLayoutInvalidated(UIElement)
- uid: System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: FrameworkElement.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.FrameworkElement.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RegisterName(String,Object)
  nameWithType: FrameworkElement.RegisterName(String,Object)
  fullName: System.Windows.FrameworkElement.RegisterName(String,Object)
- uid: System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RemoveLogicalChild(Object)
  nameWithType: FrameworkElement.RemoveLogicalChild(Object)
  fullName: System.Windows.FrameworkElement.RemoveLogicalChild(Object)
- uid: System.Windows.FrameworkElement.RequestBringIntoView
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RequestBringIntoView
  nameWithType: FrameworkElement.RequestBringIntoView
  fullName: System.Windows.FrameworkElement.RequestBringIntoView
- uid: System.Windows.RequestBringIntoViewEventHandler
  parent: System.Windows
  isExternal: false
  name: RequestBringIntoViewEventHandler
  nameWithType: RequestBringIntoViewEventHandler
  fullName: System.Windows.RequestBringIntoViewEventHandler
- uid: System.Windows.FrameworkElement.RequestBringIntoViewEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RequestBringIntoViewEvent
  nameWithType: FrameworkElement.RequestBringIntoViewEvent
  fullName: System.Windows.FrameworkElement.RequestBringIntoViewEvent
- uid: System.Windows.FrameworkElement.Resources
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Resources
  nameWithType: FrameworkElement.Resources
  fullName: System.Windows.FrameworkElement.Resources
- uid: System.Windows.ResourceDictionary
  parent: System.Windows
  isExternal: false
  name: ResourceDictionary
  nameWithType: ResourceDictionary
  fullName: System.Windows.ResourceDictionary
- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetBinding(DependencyProperty,String)
  nameWithType: FrameworkElement.SetBinding(DependencyProperty,String)
  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,String)
- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetBinding(DependencyProperty,BindingBase)
  nameWithType: FrameworkElement.SetBinding(DependencyProperty,BindingBase)
  fullName: System.Windows.FrameworkElement.SetBinding(DependencyProperty,BindingBase)
- uid: System.Windows.Data.BindingExpressionBase
  parent: System.Windows.Data
  isExternal: false
  name: BindingExpressionBase
  nameWithType: BindingExpressionBase
  fullName: System.Windows.Data.BindingExpressionBase
- uid: System.Windows.Data.BindingBase
  parent: System.Windows.Data
  isExternal: false
  name: BindingBase
  nameWithType: BindingBase
  fullName: System.Windows.Data.BindingBase
- uid: System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetFlowDirection(DependencyObject,FlowDirection)
  nameWithType: FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)
  fullName: System.Windows.FrameworkElement.SetFlowDirection(DependencyObject,FlowDirection)
- uid: System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetResourceReference(DependencyProperty,Object)
  nameWithType: FrameworkElement.SetResourceReference(DependencyProperty,Object)
  fullName: System.Windows.FrameworkElement.SetResourceReference(DependencyProperty,Object)
- uid: System.Windows.FrameworkElement.ShouldSerializeResources
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeResources()
  nameWithType: FrameworkElement.ShouldSerializeResources()
  fullName: System.Windows.FrameworkElement.ShouldSerializeResources()
- uid: System.Windows.FrameworkElement.ShouldSerializeStyle
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeStyle()
  nameWithType: FrameworkElement.ShouldSerializeStyle()
  fullName: System.Windows.FrameworkElement.ShouldSerializeStyle()
- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeTriggers()
  nameWithType: FrameworkElement.ShouldSerializeTriggers()
  fullName: System.Windows.FrameworkElement.ShouldSerializeTriggers()
- uid: System.Windows.FrameworkElement.SizeChanged
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SizeChanged
  nameWithType: FrameworkElement.SizeChanged
  fullName: System.Windows.FrameworkElement.SizeChanged
- uid: System.Windows.SizeChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: SizeChangedEventHandler
  nameWithType: SizeChangedEventHandler
  fullName: System.Windows.SizeChangedEventHandler
- uid: System.Windows.FrameworkElement.SizeChangedEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SizeChangedEvent
  nameWithType: FrameworkElement.SizeChangedEvent
  fullName: System.Windows.FrameworkElement.SizeChangedEvent
- uid: System.Windows.FrameworkElement.SourceUpdated
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SourceUpdated
  nameWithType: FrameworkElement.SourceUpdated
  fullName: System.Windows.FrameworkElement.SourceUpdated
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.FrameworkElement.Style
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Style
  nameWithType: FrameworkElement.Style
  fullName: System.Windows.FrameworkElement.Style
- uid: System.Windows.FrameworkElement.StyleProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: StyleProperty
  nameWithType: FrameworkElement.StyleProperty
  fullName: System.Windows.FrameworkElement.StyleProperty
- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
  fullName: System.Windows.FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(String)
- uid: System.Windows.FrameworkElement.Tag
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Tag
  nameWithType: FrameworkElement.Tag
  fullName: System.Windows.FrameworkElement.Tag
- uid: System.Windows.FrameworkElement.TagProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TagProperty
  nameWithType: FrameworkElement.TagProperty
  fullName: System.Windows.FrameworkElement.TagProperty
- uid: System.Windows.FrameworkElement.TargetUpdated
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TargetUpdated
  nameWithType: FrameworkElement.TargetUpdated
  fullName: System.Windows.FrameworkElement.TargetUpdated
- uid: System.Windows.FrameworkElement.TemplatedParent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TemplatedParent
  nameWithType: FrameworkElement.TemplatedParent
  fullName: System.Windows.FrameworkElement.TemplatedParent
- uid: System.Windows.FrameworkElement.ToolTip
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTip
  nameWithType: FrameworkElement.ToolTip
  fullName: System.Windows.FrameworkElement.ToolTip
- uid: System.Windows.FrameworkElement.ToolTipClosing
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTipClosing
  nameWithType: FrameworkElement.ToolTipClosing
  fullName: System.Windows.FrameworkElement.ToolTipClosing
- uid: System.Windows.Controls.ToolTipEventHandler
  parent: System.Windows.Controls
  isExternal: false
  name: ToolTipEventHandler
  nameWithType: ToolTipEventHandler
  fullName: System.Windows.Controls.ToolTipEventHandler
- uid: System.Windows.FrameworkElement.ToolTipClosingEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTipClosingEvent
  nameWithType: FrameworkElement.ToolTipClosingEvent
  fullName: System.Windows.FrameworkElement.ToolTipClosingEvent
- uid: System.Windows.FrameworkElement.ToolTipOpening
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTipOpening
  nameWithType: FrameworkElement.ToolTipOpening
  fullName: System.Windows.FrameworkElement.ToolTipOpening
- uid: System.Windows.FrameworkElement.ToolTipOpeningEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTipOpeningEvent
  nameWithType: FrameworkElement.ToolTipOpeningEvent
  fullName: System.Windows.FrameworkElement.ToolTipOpeningEvent
- uid: System.Windows.FrameworkElement.ToolTipProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTipProperty
  nameWithType: FrameworkElement.ToolTipProperty
  fullName: System.Windows.FrameworkElement.ToolTipProperty
- uid: System.Windows.FrameworkElement.Triggers
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Triggers
  nameWithType: FrameworkElement.Triggers
  fullName: System.Windows.FrameworkElement.Triggers
- uid: System.Windows.TriggerCollection
  parent: System.Windows
  isExternal: false
  name: TriggerCollection
  nameWithType: TriggerCollection
  fullName: System.Windows.TriggerCollection
- uid: System.Windows.FrameworkElement.TryFindResource(System.Object)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TryFindResource(Object)
  nameWithType: FrameworkElement.TryFindResource(Object)
  fullName: System.Windows.FrameworkElement.TryFindResource(Object)
- uid: System.Windows.FrameworkElement.Unloaded
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Unloaded
  nameWithType: FrameworkElement.Unloaded
  fullName: System.Windows.FrameworkElement.Unloaded
- uid: System.Windows.FrameworkElement.UnloadedEvent
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UnloadedEvent
  nameWithType: FrameworkElement.UnloadedEvent
  fullName: System.Windows.FrameworkElement.UnloadedEvent
- uid: System.Windows.FrameworkElement.UnregisterName(System.String)
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UnregisterName(String)
  nameWithType: FrameworkElement.UnregisterName(String)
  fullName: System.Windows.FrameworkElement.UnregisterName(String)
- uid: System.Windows.FrameworkElement.UpdateDefaultStyle
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UpdateDefaultStyle()
  nameWithType: FrameworkElement.UpdateDefaultStyle()
  fullName: System.Windows.FrameworkElement.UpdateDefaultStyle()
- uid: System.Windows.FrameworkElement.UseLayoutRounding
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UseLayoutRounding
  nameWithType: FrameworkElement.UseLayoutRounding
  fullName: System.Windows.FrameworkElement.UseLayoutRounding
- uid: System.Windows.FrameworkElement.UseLayoutRoundingProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UseLayoutRoundingProperty
  nameWithType: FrameworkElement.UseLayoutRoundingProperty
  fullName: System.Windows.FrameworkElement.UseLayoutRoundingProperty
- uid: System.Windows.FrameworkElement.VerticalAlignment
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: VerticalAlignment
  nameWithType: FrameworkElement.VerticalAlignment
  fullName: System.Windows.FrameworkElement.VerticalAlignment
- uid: System.Windows.VerticalAlignment
  parent: System.Windows
  isExternal: false
  name: VerticalAlignment
  nameWithType: VerticalAlignment
  fullName: System.Windows.VerticalAlignment
- uid: System.Windows.FrameworkElement.VerticalAlignmentProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: VerticalAlignmentProperty
  nameWithType: FrameworkElement.VerticalAlignmentProperty
  fullName: System.Windows.FrameworkElement.VerticalAlignmentProperty
- uid: System.Windows.FrameworkElement.VisualChildrenCount
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: VisualChildrenCount
  nameWithType: FrameworkElement.VisualChildrenCount
  fullName: System.Windows.FrameworkElement.VisualChildrenCount
- uid: System.Windows.FrameworkElement.Width
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Width
  nameWithType: FrameworkElement.Width
  fullName: System.Windows.FrameworkElement.Width
- uid: System.Windows.FrameworkElement.WidthProperty
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: WidthProperty
  nameWithType: FrameworkElement.WidthProperty
  fullName: System.Windows.FrameworkElement.WidthProperty
- uid: System.Windows.FrameworkElement.#ctor*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement.FrameworkElement
- uid: System.Windows.FrameworkElement.ActualHeight*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualHeight
  nameWithType: FrameworkElement.ActualHeight
- uid: System.Windows.FrameworkElement.ActualWidth*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ActualWidth
  nameWithType: FrameworkElement.ActualWidth
- uid: System.Windows.FrameworkElement.AddLogicalChild*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: AddLogicalChild
  nameWithType: FrameworkElement.AddLogicalChild
- uid: System.Windows.FrameworkElement.ApplyTemplate*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ApplyTemplate
  nameWithType: FrameworkElement.ApplyTemplate
- uid: System.Windows.FrameworkElement.ArrangeCore*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ArrangeCore
  nameWithType: FrameworkElement.ArrangeCore
- uid: System.Windows.FrameworkElement.ArrangeOverride*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ArrangeOverride
  nameWithType: FrameworkElement.ArrangeOverride
- uid: System.Windows.FrameworkElement.BeginInit*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginInit
  nameWithType: FrameworkElement.BeginInit
- uid: System.Windows.FrameworkElement.BeginStoryboard*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BeginStoryboard
  nameWithType: FrameworkElement.BeginStoryboard
- uid: System.Windows.FrameworkElement.BindingGroup*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BindingGroup
  nameWithType: FrameworkElement.BindingGroup
- uid: System.Windows.FrameworkElement.BringIntoView*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: BringIntoView
  nameWithType: FrameworkElement.BringIntoView
- uid: System.Windows.FrameworkElement.ContextMenu*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ContextMenu
  nameWithType: FrameworkElement.ContextMenu
- uid: System.Windows.FrameworkElement.Cursor*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Cursor
  nameWithType: FrameworkElement.Cursor
- uid: System.Windows.FrameworkElement.DataContext*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DataContext
  nameWithType: FrameworkElement.DataContext
- uid: System.Windows.FrameworkElement.DefaultStyleKey*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: DefaultStyleKey
  nameWithType: FrameworkElement.DefaultStyleKey
- uid: System.Windows.FrameworkElement.EndInit*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: EndInit
  nameWithType: FrameworkElement.EndInit
- uid: System.Windows.FrameworkElement.FindName*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FindName
  nameWithType: FrameworkElement.FindName
- uid: System.Windows.FrameworkElement.FindResource*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FindResource
  nameWithType: FrameworkElement.FindResource
- uid: System.Windows.FrameworkElement.FlowDirection*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FlowDirection
  nameWithType: FrameworkElement.FlowDirection
- uid: System.Windows.FrameworkElement.FocusVisualStyle*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: FocusVisualStyle
  nameWithType: FrameworkElement.FocusVisualStyle
- uid: System.Windows.FrameworkElement.ForceCursor*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ForceCursor
  nameWithType: FrameworkElement.ForceCursor
- uid: System.Windows.FrameworkElement.GetBindingExpression*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetBindingExpression
  nameWithType: FrameworkElement.GetBindingExpression
- uid: System.Windows.FrameworkElement.GetFlowDirection*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetFlowDirection
  nameWithType: FrameworkElement.GetFlowDirection
- uid: System.Windows.FrameworkElement.GetLayoutClip*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetLayoutClip
  nameWithType: FrameworkElement.GetLayoutClip
- uid: System.Windows.FrameworkElement.GetTemplateChild*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetTemplateChild
  nameWithType: FrameworkElement.GetTemplateChild
- uid: System.Windows.FrameworkElement.GetUIParentCore*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetUIParentCore
  nameWithType: FrameworkElement.GetUIParentCore
- uid: System.Windows.FrameworkElement.GetVisualChild*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: GetVisualChild
  nameWithType: FrameworkElement.GetVisualChild
- uid: System.Windows.FrameworkElement.Height*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Height
  nameWithType: FrameworkElement.Height
- uid: System.Windows.FrameworkElement.HorizontalAlignment*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: HorizontalAlignment
  nameWithType: FrameworkElement.HorizontalAlignment
- uid: System.Windows.FrameworkElement.InheritanceBehavior*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: InheritanceBehavior
  nameWithType: FrameworkElement.InheritanceBehavior
- uid: System.Windows.FrameworkElement.InputScope*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: InputScope
  nameWithType: FrameworkElement.InputScope
- uid: System.Windows.FrameworkElement.IsInitialized*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: IsInitialized
  nameWithType: FrameworkElement.IsInitialized
- uid: System.Windows.FrameworkElement.IsLoaded*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: IsLoaded
  nameWithType: FrameworkElement.IsLoaded
- uid: System.Windows.FrameworkElement.Language*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Language
  nameWithType: FrameworkElement.Language
- uid: System.Windows.FrameworkElement.LayoutTransform*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LayoutTransform
  nameWithType: FrameworkElement.LayoutTransform
- uid: System.Windows.FrameworkElement.LogicalChildren*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: LogicalChildren
  nameWithType: FrameworkElement.LogicalChildren
- uid: System.Windows.FrameworkElement.Margin*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Margin
  nameWithType: FrameworkElement.Margin
- uid: System.Windows.FrameworkElement.MaxHeight*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxHeight
  nameWithType: FrameworkElement.MaxHeight
- uid: System.Windows.FrameworkElement.MaxWidth*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MaxWidth
  nameWithType: FrameworkElement.MaxWidth
- uid: System.Windows.FrameworkElement.MeasureCore*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MeasureCore
  nameWithType: FrameworkElement.MeasureCore
- uid: System.Windows.FrameworkElement.MeasureOverride*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MeasureOverride
  nameWithType: FrameworkElement.MeasureOverride
- uid: System.Windows.FrameworkElement.MinHeight*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinHeight
  nameWithType: FrameworkElement.MinHeight
- uid: System.Windows.FrameworkElement.MinWidth*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MinWidth
  nameWithType: FrameworkElement.MinWidth
- uid: System.Windows.FrameworkElement.MoveFocus*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: MoveFocus
  nameWithType: FrameworkElement.MoveFocus
- uid: System.Windows.FrameworkElement.Name*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Name
  nameWithType: FrameworkElement.Name
- uid: System.Windows.FrameworkElement.OnApplyTemplate*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnApplyTemplate
  nameWithType: FrameworkElement.OnApplyTemplate
- uid: System.Windows.FrameworkElement.OnContextMenuClosing*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnContextMenuClosing
  nameWithType: FrameworkElement.OnContextMenuClosing
- uid: System.Windows.FrameworkElement.OnContextMenuOpening*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnContextMenuOpening
  nameWithType: FrameworkElement.OnContextMenuOpening
- uid: System.Windows.FrameworkElement.OnGotFocus*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnGotFocus
  nameWithType: FrameworkElement.OnGotFocus
- uid: System.Windows.FrameworkElement.OnInitialized*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnInitialized
  nameWithType: FrameworkElement.OnInitialized
- uid: System.Windows.FrameworkElement.OnPropertyChanged*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnPropertyChanged
  nameWithType: FrameworkElement.OnPropertyChanged
- uid: System.Windows.FrameworkElement.OnRenderSizeChanged*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnRenderSizeChanged
  nameWithType: FrameworkElement.OnRenderSizeChanged
- uid: System.Windows.FrameworkElement.OnStyleChanged*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnStyleChanged
  nameWithType: FrameworkElement.OnStyleChanged
- uid: System.Windows.FrameworkElement.OnToolTipClosing*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnToolTipClosing
  nameWithType: FrameworkElement.OnToolTipClosing
- uid: System.Windows.FrameworkElement.OnToolTipOpening*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnToolTipOpening
  nameWithType: FrameworkElement.OnToolTipOpening
- uid: System.Windows.FrameworkElement.OnVisualParentChanged*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: FrameworkElement.OnVisualParentChanged
- uid: System.Windows.FrameworkElement.OverridesDefaultStyle*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: OverridesDefaultStyle
  nameWithType: FrameworkElement.OverridesDefaultStyle
- uid: System.Windows.FrameworkElement.Parent*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Parent
  nameWithType: FrameworkElement.Parent
- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ParentLayoutInvalidated
  nameWithType: FrameworkElement.ParentLayoutInvalidated
- uid: System.Windows.FrameworkElement.PredictFocus*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: PredictFocus
  nameWithType: FrameworkElement.PredictFocus
- uid: System.Windows.FrameworkElement.RegisterName*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RegisterName
  nameWithType: FrameworkElement.RegisterName
- uid: System.Windows.FrameworkElement.RemoveLogicalChild*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: RemoveLogicalChild
  nameWithType: FrameworkElement.RemoveLogicalChild
- uid: System.Windows.FrameworkElement.Resources*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Resources
  nameWithType: FrameworkElement.Resources
- uid: System.Windows.FrameworkElement.SetBinding*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetBinding
  nameWithType: FrameworkElement.SetBinding
- uid: System.Windows.FrameworkElement.SetFlowDirection*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetFlowDirection
  nameWithType: FrameworkElement.SetFlowDirection
- uid: System.Windows.FrameworkElement.SetResourceReference*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: SetResourceReference
  nameWithType: FrameworkElement.SetResourceReference
- uid: System.Windows.FrameworkElement.ShouldSerializeResources*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeResources
  nameWithType: FrameworkElement.ShouldSerializeResources
- uid: System.Windows.FrameworkElement.ShouldSerializeStyle*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeStyle
  nameWithType: FrameworkElement.ShouldSerializeStyle
- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ShouldSerializeTriggers
  nameWithType: FrameworkElement.ShouldSerializeTriggers
- uid: System.Windows.FrameworkElement.Style*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Style
  nameWithType: FrameworkElement.Style
- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
  nameWithType: FrameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable
- uid: System.Windows.FrameworkElement.Tag*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Tag
  nameWithType: FrameworkElement.Tag
- uid: System.Windows.FrameworkElement.TemplatedParent*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TemplatedParent
  nameWithType: FrameworkElement.TemplatedParent
- uid: System.Windows.FrameworkElement.ToolTip*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: ToolTip
  nameWithType: FrameworkElement.ToolTip
- uid: System.Windows.FrameworkElement.Triggers*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Triggers
  nameWithType: FrameworkElement.Triggers
- uid: System.Windows.FrameworkElement.TryFindResource*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: TryFindResource
  nameWithType: FrameworkElement.TryFindResource
- uid: System.Windows.FrameworkElement.UnregisterName*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UnregisterName
  nameWithType: FrameworkElement.UnregisterName
- uid: System.Windows.FrameworkElement.UpdateDefaultStyle*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UpdateDefaultStyle
  nameWithType: FrameworkElement.UpdateDefaultStyle
- uid: System.Windows.FrameworkElement.UseLayoutRounding*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: UseLayoutRounding
  nameWithType: FrameworkElement.UseLayoutRounding
- uid: System.Windows.FrameworkElement.VerticalAlignment*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: VerticalAlignment
  nameWithType: FrameworkElement.VerticalAlignment
- uid: System.Windows.FrameworkElement.VisualChildrenCount*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: VisualChildrenCount
  nameWithType: FrameworkElement.VisualChildrenCount
- uid: System.Windows.FrameworkElement.Width*
  parent: System.Windows.FrameworkElement
  isExternal: false
  name: Width
  nameWithType: FrameworkElement.Width
