### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaValidator
  id: XmlSchemaValidator
  children:
  - System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)
  - System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaValidator.EndValidation
  - System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes
  - System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles
  - System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
  - System.Xml.Schema.XmlSchemaValidator.Initialize
  - System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)
  - System.Xml.Schema.XmlSchemaValidator.LineInfoProvider
  - System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.SourceUri
  - System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)
  - System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)
  - System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
  - System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)
  - System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)
  - System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)
  - System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
  - System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler
  - System.Xml.Schema.XmlSchemaValidator.ValidationEventSender
  - System.Xml.Schema.XmlSchemaValidator.XmlResolver
  langs:
  - csharp
  name: XmlSchemaValidator
  nameWithType: XmlSchemaValidator
  fullName: System.Xml.Schema.XmlSchemaValidator
  type: Class
  summary: "表示一个 XML 架构定义语言 (XSD) 架构验证引擎。 XmlSchemaValidator 类不能被继承。"
  remarks: "> [!IMPORTANT]1>-不要使用来自未知或不受信任的源或位置的架构。 这样会危及你的代码的安全性。   1>-（包括内联架构） 的 XML 架构的本质上就容易受到拒绝服务攻击;不要在不受信任的情况下接受它们。   1>-架构验证错误消息和异常可能会公开有关内容模型或架构文件的 URI 路径的敏感信息。 请注意不要公开此信息来不受信任的调用方。       XmlSchemaValidator 类提供了一种高效、 高性能的机制，以验证基于推送的方式针对 XML 架构的 XML 数据。 例如，XmlSchemaValidator 类可以验证 XML 信息集就地而无需将它序列化为 XML 文档，然后重新分析使用验证 XML 读取器的文档。 XmlSchemaValidator 类还可用来在自定义 XML 数据源或作为一种方式生成验证 XML 写入器生成验证引擎。       XmlSchemaValidator 类有关的详细信息，请参阅[XmlSchemaValidator 基于推送的验证](~/add/includes/ajax-current-ext-md.md)主题。      1> [!IMPORTANT]&1;><xref:System.Xml.Schema.XmlSchemaValidationFlags>和<xref:System.Xml.Schema.XmlSchemaValidationFlags>验证标志 XmlSchemaValidator 对象未设置为默认值。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaValidationFlags> 此外， <xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A>XmlSchemaValidator 对象的属性是`null`默认情况下。</xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> 因此，在中引用的外部架构包括，导入或重新定义元素则不解析默认情况下。"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the XmlSchemaValidator class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_19_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_19_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_19_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/t-system.xml.schema.xmls_19_3.xsd)]"
  syntax:
    content: public sealed class XmlSchemaValidator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)
  id: '#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)'
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
  nameWithType: XmlSchemaValidator.XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
  fullName: System.Xml.Schema.XmlSchemaValidator.XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>类。"
  remarks: "以下是使用 XmlSchemaValidator 构造函数时要考虑的重要说明。      -的内容<xref:System.Xml.Schema.XmlSchemaSet>参数复制到内部<xref:System.Xml.Schema.XmlSchemaSet>对象时<xref:System.Xml.Schema.XmlSchemaValidationFlags>或<xref:System.Xml.Schema.XmlSchemaValidationFlags>设置验证选项。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> 因此，更改为输入<xref:System.Xml.Schema.XmlSchemaSet>验证过程的对象不会影响的验证结果。</xref:System.Xml.Schema.XmlSchemaSet>      -如果<xref:System.Xml.Schema.XmlSchemaSet>未编译指定的参数，其<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>调用方法。</xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> </xref:System.Xml.Schema.XmlSchemaSet>      -<xref:System.Xml.IXmlNamespaceResolver>参数是用于验证尤其重要`xs:QName`类型。</xref:System.Xml.IXmlNamespaceResolver> <xref:System.Xml.Schema.XmlSchemaValidator>类不会复制<xref:System.Xml.IXmlNamespaceResolver>对象，但改为包含对它的引用</xref:System.Xml.IXmlNamespaceResolver>的范围内命名空间</xref:System.Xml.Schema.XmlSchemaValidator> 这允许新的命名空间添加到<xref:System.Xml.IXmlNamespaceResolver>在验证过程的对象。</xref:System.Xml.IXmlNamespaceResolver>      1> [!IMPORTANT]&1;><xref:System.Xml.Schema.XmlSchemaValidationFlags>和<xref:System.Xml.Schema.XmlSchemaValidationFlags>验证标志<xref:System.Xml.Schema.XmlSchemaValidator>对象不是设置为默认值。</xref:System.Xml.Schema.XmlSchemaValidator> </xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaValidationFlags> 此外，<xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A>属性<xref:System.Xml.Schema.XmlSchemaValidator>对象是`null`默认情况下。</xref:System.Xml.Schema.XmlSchemaValidator> </xref:System.Xml.Schema.XmlSchemaValidator.XmlResolver%2A> 因此，在中引用的外部架构包括，导入或重新定义元素则不解析默认情况下。"
  example:
  - For an example of the XmlSchemaValidator constructor, see the <xref:System.Xml.Schema.XmlSchemaValidator> class reference topic.
  syntax:
    content: public XmlSchemaValidator (System.Xml.XmlNameTable nameTable, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.IXmlNamespaceResolver namespaceResolver, System.Xml.Schema.XmlSchemaValidationFlags validationFlags);
    parameters:
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "<xref:System.Xml.XmlNameTable>对象，其中包含元素和属性名称作为原子化字符串。</xref:System.Xml.XmlNameTable>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>对象，其中包含用于验证的 XML 架构定义语言 (XSD) 架构。"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "<xref:System.Xml.IXmlNamespaceResolver>对象用于解析在验证过程中遇到的命名空间。</xref:System.Xml.IXmlNamespaceResolver>"
    - id: validationFlags
      type: System.Xml.Schema.XmlSchemaValidationFlags
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaValidationFlags&quot;> </xref>值，该值指定架构验证选项。"
  overload: System.Xml.Schema.XmlSchemaValidator.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或多个指定的参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "编译中的架构时出错<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>参数。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)
  id: AddSchema(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: AddSchema(XmlSchema)
  nameWithType: XmlSchemaValidator.AddSchema(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaValidator.AddSchema(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将 XML 架构定义语言 (XSD) 架构添加到用于验证的架构集。"
  remarks: "以下是使用 AddSchema 方法时要考虑的重要说明。      -AddSchema 方法可以用于模拟的遇到内联 XML 架构中被验证的 XML 文档的效果。      -的目标命名空间<xref:System.Xml.Schema.XmlSchema>参数无法匹配的任何元素或属性已遇到<xref:System.Xml.Schema.XmlSchemaValidator>对象。</xref:System.Xml.Schema.XmlSchemaValidator> </xref:System.Xml.Schema.XmlSchema>      -如果<xref:System.Xml.Schema.XmlSchemaValidationFlags>未设置验证选项，AddSchema 方法不执行任何操作。</xref:System.Xml.Schema.XmlSchemaValidationFlags>"
  syntax:
    content: public void AddSchema (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象将添加到用于验证的架构集。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaValidator.AddSchema*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>所指定参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "目标命名空间<xref:System.Xml.Schema.XmlSchema>参数与匹配的任何元素或属性已遇到<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象。</xref:System.Xml.Schema.XmlSchema>"
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "<xref:System.Xml.Schema.XmlSchema>参数无效。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.EndValidation
  id: EndValidation
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: EndValidation()
  nameWithType: XmlSchemaValidator.EndValidation()
  fullName: System.Xml.Schema.XmlSchemaValidator.EndValidation()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "结束验证并检查整个 XML 文档的标识约束。"
  remarks: "EndValidation 方法结束验证并检查整个 XML 文档的标识约束，如果<xref:System.Xml.Schema.XmlSchemaValidationFlags>设置验证选项。</xref:System.Xml.Schema.XmlSchemaValidationFlags>"
  syntax:
    content: public void EndValidation ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaValidator.EndValidation*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 文档中找到一个标识约束错误。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes
  id: GetExpectedAttributes
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: GetExpectedAttributes()
  nameWithType: XmlSchemaValidator.GetExpectedAttributes()
  fullName: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回当前元素上下文的期望的属性。"
  remarks: "以下是使用 GetExpectedAttributes 方法时要考虑的重要说明。      -如果 GetExpectedAttributes 方法之后，立即调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A>方法，将返回会出现在 XML 文档中的所有属性。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateElement%2A>      -如果在一个或多个调用之后调用 GetExpectedAttributes 方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法，将返回尚未验证当前元素的属性。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaAttribute[] GetExpectedAttributes ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchemaAttribute[]
      description: "数组<xref href=&quot;System.Xml.Schema.XmlSchemaAttribute&quot;></xref>对象或如果没有预期的属性为空数组。"
  overload: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles
  id: GetExpectedParticles
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: GetExpectedParticles()
  nameWithType: XmlSchemaValidator.GetExpectedParticles()
  fullName: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回当前元素上下文中预计的粒子。"
  remarks: "可以由 GetExpectedParticles 方法返回的有效粒子是的实例<xref:System.Xml.Schema.XmlSchemaElement>和<xref:System.Xml.Schema.XmlSchemaAny>类。</xref:System.Xml.Schema.XmlSchemaAny> </xref:System.Xml.Schema.XmlSchemaElement>       当内容模型的复合器是`xs:sequence`，返回仅序列中的下一个粒子。 如果内容模型的复合器是`xs:all`或`xs:choice`，则返回当前元素上下文中可能出现的所有有效粒子。       例如，在 XML 架构定义语言 (XSD) 架构和 XML 文档后面之后验证,`book`元素，`book`元素是当前元素上下文。 GetExpectedParticles 方法返回一个数组，包含单个<xref:System.Xml.Schema.XmlSchemaElement>对象，表示`title`元素。</xref:System.Xml.Schema.XmlSchemaElement> 如果验证上下文是`title`元素，GetExpectedParticles 方法返回一个空数组。 如果之后调用 GetExpectedParticles 方法`title`之前验证元素`description`元素已进行验证，它将返回一个数组，包含单个<xref:System.Xml.Schema.XmlSchemaElement>对象，表示`description`元素。</xref:System.Xml.Schema.XmlSchemaElement> 如果之后调用 GetExpectedParticles 方法`description`元素已进行验证，则它返回数组，其中包含单个<xref:System.Xml.Schema.XmlSchemaAny>表示通配符的对象。</xref:System.Xml.Schema.XmlSchemaAny>      ```vb#   Dim reader As XmlReader =  XmlReader.Create(&quot;input.xml&quot;)       Dim schemaSet As XmlSchemaSet =  New XmlSchemaSet()    schemaSet.Add(Nothing, &quot;schema.xsd&quot;)   Dim manager As XmlNamespaceManager =  New XmlNamespaceManager(reader.NameTable)       Dim validator As XmlSchemaValidator =  New XmlSchemaValidator(reader.NameTable,schemaSet,manager,XmlSchemaValidationFlags.None)   validator.Initialize()      validator.ValidateElement(&quot;book&quot;, &quot;&quot;, Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement(&quot;title&quot;, &quot;&quot;, Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next   validator.ValidateEndElement(Nothing)      For Each element As XmlSchemaElement In validator.GetExpectedParticles()       Console.WriteLine(element.Name)   Next      validator.ValidateElement(&quot;description&quot;, &quot;&quot;, Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      For Each particle As XmlSchemaParticle In validator.GetExpectedParticles()       Console.WriteLine(particle.GetType())   Next      validator.ValidateElement(&quot;namespace&quot;, &quot;&quot;, Nothing)   validator.GetUnspecifiedDefaultAttributes(New ArrayList())   validator.ValidateEndOfAttributes(Nothing)   validator.ValidateEndElement(Nothing)      validator.ValidateEndElement(Nothing)   ```      ```c#   XmlReader reader = XmlReader.Create(&quot;input.xml&quot;);      XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(null, &quot;schema.xsd&quot;);   XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);      XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);   validator.Initialize();      validator.ValidateElement(&quot;book&quot;, &quot;&quot;, null);      validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement(&quot;title&quot;, &quot;&quot;, null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }   validator.ValidateEndElement(null);      foreach (XmlSchemaElement element in validator.GetExpectedParticles())   {       Console.WriteLine(element.Name);   }      validator.ValidateElement(&quot;description&quot;, &quot;&quot;, null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      foreach (XmlSchemaParticle particle in validator.GetExpectedParticles())   {       Console.WriteLine(particle.GetType());   }      validator.ValidateElement(&quot;namespace&quot;, &quot;&quot;, null);   validator.GetUnspecifiedDefaultAttributes(new ArrayList());   validator.ValidateEndOfAttributes(null);   validator.ValidateEndElement(null);      validator.ValidateEndElement(null);   ```该示例使用下面的 XML 作为输入。       `<xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;>`       `<xs:element name=&quot;book&quot;>`       `<xs:complexType>`       `<xs:sequence>`       `<xs:element name=&quot;title&quot; type=&quot;xs:string&quot; />`       `<xs:element name=&quot;description&quot; type=&quot;xs:string&quot; />`       `<xs:any processContents =&quot;lax&quot;/>`       `</xs:sequence>`       `</xs:complexType>`       `</xs:element>`       `</xs:schema>`该示例使用下面的 XSD 架构作为输入。       `<book>`       `<title>My Book</title>`       `<description>My Book&quot;s Description</description>`       `<namespace>System.Xml.Schema</namespace>`       `</book>`"
  syntax:
    content: public System.Xml.Schema.XmlSchemaParticle[] GetExpectedParticles ();
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchemaParticle[]
      description: "数组<xref href=&quot;System.Xml.Schema.XmlSchemaParticle&quot;></xref>对象或如果没有任何预计的粒子的空数组。"
  overload: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
  id: GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: GetUnspecifiedDefaultAttributes(ArrayList)
  nameWithType: XmlSchemaValidator.GetUnspecifiedDefaultAttributes(ArrayList)
  fullName: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(ArrayList)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证默认属性上的标识约束并填充<xref href=&quot;System.Collections.ArrayList&quot;></xref>指定<xref href=&quot;System.Xml.Schema.XmlSchemaAttribute&quot;></xref>任何属性未经过以前验证使用的默认值的对象<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>元素上下文中的方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>"
  remarks: "验证与当前元素的所有属性后，必须调用 GetUnspecifiedDefaultAttributes 方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> GetUnspecifiedDefaultAttributes 方法用于确定要插入正在验证的 XML 文档的默认属性。"
  syntax:
    content: public void GetUnspecifiedDefaultAttributes (System.Collections.ArrayList defaultAttributes);
    parameters:
    - id: defaultAttributes
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref>要填充<xref href=&quot;System.Xml.Schema.XmlSchemaAttribute&quot;></xref>尚未元素上下文中的验证过程中遇到任何属性的对象。"
  overload: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.Initialize
  id: Initialize
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: Initialize()
  nameWithType: XmlSchemaValidator.Initialize()
  fullName: System.Xml.Schema.XmlSchemaValidator.Initialize()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的状态<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象。"
  remarks: "Initialize 方法才有效在构造之后立即调用<xref:System.Xml.Schema.XmlSchemaValidator>对象或调用了<xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A>.</xref:System.Xml.Schema.XmlSchemaValidator.EndValidation%2A> </xref:System.Xml.Schema.XmlSchemaValidator>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/m-system.xml.schema.xmls_4_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/m-system.xml.schema.xmls_4_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/m-system.xml.schema.xmls_4_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/m-system.xml.schema.xmls_4_3.xsd)]"
  syntax:
    content: public void Initialize ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaValidator.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 方法是有效的构造后立即<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象或之后调用<> *1> 仅。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)
  id: Initialize(System.Xml.Schema.XmlSchemaObject)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: Initialize(XmlSchemaObject)
  nameWithType: XmlSchemaValidator.Initialize(XmlSchemaObject)
  fullName: System.Xml.Schema.XmlSchemaValidator.Initialize(XmlSchemaObject)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的状态<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象使用<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref>指定以进行部分验证。"
  remarks: "采用的 Initialize 方法<xref:System.Xml.Schema.XmlSchemaObject>如参数初始化<xref:System.Xml.Schema.XmlSchemaValidator>对象为起始状态，以进行部分验证。</xref:System.Xml.Schema.XmlSchemaValidator> </xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "In the following example, an <xref:System.Xml.Schema.XmlSchemaObject> is initialized for partial validation using the Initialize method. The `orderNumber` schema element is passed by selecting the schema element by <xref:System.Xml.XmlQualifiedName> in the <xref:System.Xml.Schema.XmlSchemaObjectTable> collection returned by the <xref:System.Xml.Schema.XmlSchemaSet.GlobalElements%2A> property of the <xref:System.Xml.Schema.XmlSchemaSet> object. The <xref:System.Xml.Schema.XmlSchemaValidator> object then validates this specific element.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(Nothing, \"schema.xsd\")  \nschemaSet.Compile()  \nDim nameTable As NameTable = New NameTable()  \nDim manager As XmlNamespaceManager = New XmlNamespaceManager(nameTable)  \n  \nDim validator As XmlSchemaValidator = New XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None)  \nvalidator.Initialize(schemaSet.GlobalElements.Item(New XmlQualifiedName(\"orderNumber\")))  \n  \nvalidator.ValidateElement(\"orderNumber\", \"\", Nothing)  \nvalidator.GetUnspecifiedDefaultAttributes(New ArrayList())  \nvalidator.ValidateEndOfAttributes(Nothing)  \nvalidator.ValidateText(\"123\")  \nvalidator.ValidateEndElement(Nothing)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(null, \"schema.xsd\");  \nschemaSet.Compile();  \nNameTable nameTable = new NameTable();  \nXmlNamespaceManager manager = new XmlNamespaceManager(nameTable);  \n  \nXmlSchemaValidator validator = new XmlSchemaValidator(nameTable, schemaSet, manager, XmlSchemaValidationFlags.None);  \nvalidator.Initialize(schemaSet.GlobalElements[new XmlQualifiedName(\"orderNumber\")]);  \n  \nvalidator.ValidateElement(\"orderNumber\", \"\", null);  \nvalidator.GetUnspecifiedDefaultAttributes(new ArrayList());  \nvalidator.ValidateEndOfAttributes(null);  \nvalidator.ValidateText(\"123\");  \nvalidator.ValidateEndElement(null);  \n```  \n  \n The example takes the following XML schema as input.  \n  \n `<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">`  \n  \n `<xs:element name=\"orderNumber\" type=\"xs:int\" />`  \n  \n `</xs:schema>`"
  syntax:
    content: public void Initialize (System.Xml.Schema.XmlSchemaObject partialValidationType);
    parameters:
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;> </xref>， <xref href=&quot;System.Xml.Schema.XmlSchemaAttribute&quot;> </xref>，或<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>用于初始化的验证上下文对象<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象以进行部分验证。"
  overload: System.Xml.Schema.XmlSchemaValidator.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 方法是有效的构造后立即<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象或之后调用<> *1> 仅。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref> parameter is not an <xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;></xref>, <xref href=&quot;System.Xml.Schema.XmlSchemaAttribute&quot;></xref>, or <xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref> object."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref>参数不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider
  id: LineInfoProvider
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: LineInfoProvider
  nameWithType: XmlSchemaValidator.LineInfoProvider
  fullName: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置所验证的 XML 节点的行号信息。"
  remarks: "-   报告的任何行信息<xref:System.Xml.Schema.XmlSchemaValidationException>验证过程中引发。</xref:System.Xml.Schema.XmlSchemaValidationException>      的默认值<xref:System.Xml.IXmlLineInfo>对象返回的属性返回 0 LineInfoProvider<xref:System.Xml.IXmlLineInfo.LineNumber%2A>和<xref:System.Xml.IXmlLineInfo.LinePosition%2A>属性。</xref:System.Xml.IXmlLineInfo.LinePosition%2A> </xref:System.Xml.IXmlLineInfo.LineNumber%2A> </xref:System.Xml.IXmlLineInfo>"
  syntax:
    content: public System.Xml.IXmlLineInfo LineInfoProvider { get; set; }
    return:
      type: System.Xml.IXmlLineInfo
      description: "<xref:System.Xml.IXmlLineInfo>对象。</xref:System.Xml.IXmlLineInfo>"
  overload: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
  id: SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: SkipToEndElement(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.SkipToEndElement(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "跳过当前元素内容的验证并准备<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象以验证父元素的上下文中的内容。"
  remarks: "以下是使用 SkipToEndElement 方法时要考虑的重要说明。      -SkipToEndElement 方法跳过当前元素内容的验证并准备<xref:System.Xml.Schema.XmlSchemaValidator>对象，以验证父元素的上下文中的内容; 它等效于跳过当前元素的所有子级的验证，然后再调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> </xref:System.Xml.Schema.XmlSchemaValidator>      -如果已成功跳过当前元素内容，<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定）<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>。</xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo>      1> [!NOTE]&1;> 上跳过的内容未报告任何验证错误。"
  syntax:
    content: public void SkipToEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>设置其属性，如果已成功跳过当前元素内容的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "SkipToEndElement 方法未以正确的顺序调用。 例如，调用之后调用 SkipToEndElement SkipToEndElement。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.SourceUri
  id: SourceUri
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: SourceUri
  nameWithType: XmlSchemaValidator.SourceUri
  fullName: System.Xml.Schema.XmlSchemaValidator.SourceUri
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置所验证的 XML 节点的源 URI。"
  remarks: "-   URI 报告的任何源<xref:System.Xml.Schema.XmlSchemaValidationException>验证过程中引发。</xref:System.Xml.Schema.XmlSchemaValidationException>      -如果未设置 SourceUri 属性，XML 文档的文件名称是<xref:System.String.Empty>验证错误消息中。</xref:System.String.Empty>"
  syntax:
    content: public Uri SourceUri { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>对象表示所验证的 XML 节点的源 URI; 默认值为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Uri>"
  overload: System.Xml.Schema.XmlSchemaValidator.SourceUri*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  id: ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateAttribute(String,String,String,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateAttribute(String,String,String,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(String,String,String,XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证的属性名称、 命名空间 URI 和当前元素上下文中的值。"
  remarks: "以下是使用 ValidateAttribute 方法时要考虑的重要说明。      -<xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>验证具有的当前元素的所有属性后，必须调用方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> </xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>      -如果<xref:System.Xml.Schema.XmlSchemaAttribute>对象传递给<xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>方法，ValidateAttribute 方法用于验证针对属性<xref:System.Xml.Schema.XmlSchemaAttribute>对象。</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> </xref:System.Xml.Schema.XmlSchemaAttribute>      -如果在当前元素上下文中，成功验证该属性，则<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A> </xref:System.Xml.Schema.XmlSchemaInfo>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/a1f6d4e1-a580-41fa-b406-_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/a1f6d4e1-a580-41fa-b406-_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/a1f6d4e1-a580-41fa-b406-_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/a1f6d4e1-a580-41fa-b406-_3.xsd)]"
  syntax:
    content: public object ValidateAttribute (string localName, string namespaceUri, string attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: localName
      type: System.String
      description: "要验证的属性本地名称。"
    - id: namespaceUri
      type: System.String
      description: "命名空间 URI 的属性验证。"
    - id: attributeValue
      type: System.String
      description: "要验证的属性的值。"
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功验证的属性设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "验证的属性的值。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "该属性不为在当前元素上下文中有效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如，调用<> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*>后"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或多个指定的参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)
  id: ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证的属性名称、 命名空间 URI 和当前元素上下文中的值。"
  remarks: "以下是使用 ValidateAttribute 方法时要考虑的重要说明。      -<xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>验证具有的当前元素的所有属性后，必须调用方法<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A>方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute%2A> </xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>      -如果<xref:System.Xml.Schema.XmlSchemaAttribute>对象传递给<xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A>方法，ValidateAttribute 方法用于验证针对属性<xref:System.Xml.Schema.XmlSchemaAttribute>对象。</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Schema.XmlSchemaValidator.Initialize%2A> </xref:System.Xml.Schema.XmlSchemaAttribute>      -如果在当前元素上下文中，成功验证该属性，则<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute%2A> </xref:System.Xml.Schema.XmlSchemaInfo>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/bdf9cba1-e5e2-4a4d-8a5a-_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/bdf9cba1-e5e2-4a4d-8a5a-_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/bdf9cba1-e5e2-4a4d-8a5a-_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/bdf9cba1-e5e2-4a4d-8a5a-_3.xsd)]"
  syntax:
    content: public object ValidateAttribute (string localName, string namespaceUri, System.Xml.Schema.XmlValueGetter attributeValue, System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: localName
      type: System.String
      description: "要验证的属性本地名称。"
    - id: namespaceUri
      type: System.String
      description: "命名空间 URI 的属性验证。"
    - id: attributeValue
      type: System.Xml.Schema.XmlValueGetter
      description: "<xref href=&quot;System.Xml.Schema.XmlValueGetter&quot;> </xref> <xref uid=&quot;langword_csharp_delegate&quot; name=&quot;delegate&quot; href=&quot;&quot;> </xref>用于将作为公共语言运行时 (CLR) 类型的属性的值传递与该属性的 XML 架构定义语言 (XSD) 类型兼容。"
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功验证的属性设置其属性的对象。 此参数可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "验证的属性的值。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "该属性不为在当前元素上下文中有效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如，调用<> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*>后"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或多个指定的参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  id: ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateElement(String,String,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证当前上下文中的元素。"
  remarks: "以下是使用 ValidateElement 方法时要考虑的重要说明。      -如果在当前上下文中，成功验证的元素名称<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A> </xref:System.Xml.Schema.XmlSchemaInfo>      -如果元素名称或任何其特性是无效的当前上下文中，<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>; 否则为<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>。</xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/0c1583e7-54af-4d75-b62c-_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/0c1583e7-54af-4d75-b62c-_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/0c1583e7-54af-4d75-b62c-_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/0c1583e7-54af-4d75-b62c-_3.xsd)]"
  syntax:
    content: public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: localName
      type: System.String
      description: "要验证的元素的本地名称。"
    - id: namespaceUri
      type: System.String
      description: "命名空间 URI 的元素的验证。"
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功地验证元素的名称设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateElement*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "此元素的名称在当前上下文中无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如， <> </> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)
  id: ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
  nameWithType: XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证与当前上下文中的元素`xsi:Type`， `xsi:Nil`， `xsi:SchemaLocation`，和`xsi:NoNamespaceSchemaLocation`属性指定的值。"
  remarks: "以下是使用 ValidateElement 方法时要考虑的重要说明。      -如果在当前上下文中，成功验证的元素名称<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaElement%2A> </xref:System.Xml.Schema.XmlSchemaInfo.SchemaType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.IsNil%2A> </xref:System.Xml.Schema.XmlSchemaInfo>      -如果元素名称或任何其属性是在当前上下文中，无效<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>; 否则为<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>。</xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>      -如果<xref:System.Xml.Schema.XmlSchemaValidationFlags>值未传递作为参数传递给<xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A>构造函数，`xsi:SchemaLocation`和`xsi:NoNamespaceSchemaLocation`属性值将被忽略。</xref:System.Xml.Schema.XmlSchemaValidator.%23ctor%2A> </xref:System.Xml.Schema.XmlSchemaValidationFlags>"
  syntax:
    content: public void ValidateElement (string localName, string namespaceUri, System.Xml.Schema.XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);
    parameters:
    - id: localName
      type: System.String
      description: "要验证的元素的本地名称。"
    - id: namespaceUri
      type: System.String
      description: "命名空间 URI 的元素的验证。"
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功地验证元素的名称设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: xsiType
      type: System.String
      description: "`xsi:Type`属性的元素的值。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: xsiNil
      type: System.String
      description: "`xsi:Nil`属性的元素的值。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: xsiSchemaLocation
      type: System.String
      description: "`xsi:SchemaLocation`属性的元素的值。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: xsiNoNamespaceSchemaLocation
      type: System.String
      description: "`xsi:NoNamespaceSchemaLocation`属性的元素的值。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateElement*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "此元素的名称在当前上下文中无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如， <> </> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
  id: ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateEndElement(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证元素的文本内容是否有效元素具有简单内容，其数据类型和验证当前元素的内容是否完成，但复杂内容的元素。"
  remarks: "以下是使用 ValidateEndElement 方法时要考虑的重要说明。      -对于具有简单内容的元素，方法验证元素的文本内容符合其数据类型，并且返回的已分析 ValidateEndElement 类型化值。 元素的文本内容通过到<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>以前的调用的结果      -对于具有复杂内容的元素，ValidateEndElement 方法验证当前元素的内容是否完整。      -如果元素具有默认值，从 ValidateEndElement 方法返回的值是元素的默认值。      -如果<xref:System.Xml.Schema.XmlSchemaValidator>对象使用构造<xref:System.Xml.Schema.XmlSchemaValidationFlags>作为参数，该 ValidateEndElement 方法检查 identity 约束规则 （如果有），将应用于元素的值。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaValidator>      -如果在当前上下文中，已成功验证元素<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A> </xref:System.Xml.Schema.XmlSchemaInfo>"
  syntax:
    content: public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功验证的元素设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "已分析，类型化的元素的文本值，如果元素具有简单内容。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "元素的内容不是有效的。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如，如果<> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*>.</xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*>后调用方法"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)
  id: ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateEndElement(XmlSchemaInfo,Object)
  nameWithType: XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo,Object)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo,Object)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证指定的元素的文本内容是否有效根据其数据类型。"
  remarks: "> [!IMPORTANT]1> 如果验证所依据`xs:key`， `xs:keyref`，或`xs:unique`标识约束，不使用 ValidateEndElement 方法重载。 而应调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>方法并将其传递的元素的值。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A> 然后调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法重载，它采用<xref:System.Xml.Schema.XmlSchemaInfo>作为参数，以验证元素的文本内容是否符合其数据类型。</xref:System.Xml.Schema.XmlSchemaInfo> </xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>       以下是使用 ValidateEndElement 方法时要考虑的重要说明。      -对于具有简单内容的元素，方法验证元素的文本内容符合其数据类型，并且返回的已分析 ValidateEndElement 类型化值。 从类型化的内容作为参数传递获取元素的文本内容。      -如果调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>以前完成方法后，<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Xml.Schema.XmlSchemaValidator.ValidateText%2A>      -如果元素具有复杂内容<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException>      -如果<xref:System.Xml.Schema.XmlSchemaValidator>对象使用构造<xref:System.Xml.Schema.XmlSchemaValidationFlags>作为参数，该 ValidateEndElement 方法检查 identity 约束规则 （如果有），将应用于元素的值。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.Schema.XmlSchemaValidator>      -如果在当前上下文中，已成功验证元素<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定） <xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A>， <xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A>，和<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性将使用验证结果进行设置。</xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo.MemberType%2A> </xref:System.Xml.Schema.XmlSchemaInfo.IsDefault%2A> </xref:System.Xml.Schema.XmlSchemaInfo>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/2cd331b9-caa2-4647-acb8-_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/2cd331b9-caa2-4647-acb8-_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/2cd331b9-caa2-4647-acb8-_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/2cd331b9-caa2-4647-acb8-_3.xsd)]"
  syntax:
    content: public object ValidateEndElement (System.Xml.Schema.XmlSchemaInfo schemaInfo, object typedValue);
    parameters:
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功地验证元素的文本内容设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: typedValue
      type: System.Object
      description: "元素的类型化的文本内容。"
    return:
      type: System.Object
      description: "已分析的类型化简单内容的元素。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "元素的文本内容不是有效的。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 未以正确的顺序调用方法 (例如，如果<> *1> 方法在调用之后调用<> *1>)，调用<> *1> 之前进行了方法，或者元素的复杂内容。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "键入的文本内容参数不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
  id: ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateEndOfAttributes(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateEndOfAttributes(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(XmlSchemaInfo)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证是否所有必需的属性元素上下文中是否存在并准备<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>好验证元素的子内容的对象。"
  remarks: "以下是使用 ValidateEndOfAttributes 方法时要考虑的重要说明。      -<xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>方法之前，应始终调用 ValidateEndOfAttributes。</xref:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes%2A>      必须在继续进行验证的元素的内容之前调用-ValidateEndOfAttributes 方法。      -如果元素上下文中的所有必需的特性是否存在，<xref:System.Xml.Schema.XmlSchemaInfo>对象的 （如果指定）<xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A>属性设置为<xref:System.Xml.Schema.XmlSchemaValidity>。</xref:System.Xml.Schema.XmlSchemaValidity> </xref:System.Xml.Schema.XmlSchemaInfo.Validity%2A> </xref:System.Xml.Schema.XmlSchemaInfo>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/2739ac73-0581-4d83-ad9c-_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/2739ac73-0581-4d83-ad9c-_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/2739ac73-0581-4d83-ad9c-_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/2739ac73-0581-4d83-ad9c-_3.xsd)]"
  syntax:
    content: public void ValidateEndOfAttributes (System.Xml.Schema.XmlSchemaInfo schemaInfo);
    parameters:
    - id: schemaInfo
      type: System.Xml.Schema.XmlSchemaInfo
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaInfo&quot;> </xref>成功验证元素上下文中的所有必需的特性是否存在所设置其属性的对象。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "找不到一个或多个当前元素上下文中必需的属性。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "ValidateEndOfAttributes 方法未以正确的顺序调用。 例如，在调用<xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*>.</xref:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*>之后调用 ValidateEndOfAttributes"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或多个指定的参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)
  id: ValidateText(System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateText(String)
  nameWithType: XmlSchemaValidator.ValidateText(String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateText(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证是否文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>指定允许在当前元素上下文中，并累积文本，以验证当前元素是否包含简单内容。"
  remarks: "以下是使用 ValidateText 方法时要考虑的重要说明。      -如果元素具有简单内容，文本`string`指定直到 ValidateText 方法每次调用串联<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>调用方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 当<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法被调用时，验证所有文本。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>      -如果元素具有复杂内容，则会不发生任何文本串联。"
  syntax:
    content: public void ValidateText (string elementValue);
    parameters:
    - id: elementValue
      type: System.String
      description: "文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>以验证当前元素上下文中。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateText*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>指定不允许在当前元素上下文中。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如， <> </> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>参数不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)
  id: ValidateText(System.Xml.Schema.XmlValueGetter)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateText(XmlValueGetter)
  nameWithType: XmlSchemaValidator.ValidateText(XmlValueGetter)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateText(XmlValueGetter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证是否返回的文本<xref href=&quot;System.Xml.Schema.XmlValueGetter&quot;></xref>对象指定允许在当前元素上下文中，并累积文本，以验证是否当前元素具有简单内容。"
  remarks: "以下是使用 ValidateText 方法时要考虑的重要说明。      -如果元素具有简单内容，文本`string`指定直到 ValidateText 方法每次调用串联<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>调用方法。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A> 当<xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>方法被调用时，验证所有文本。</xref:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement%2A>      -如果元素具有复杂内容，则会不发生任何文本串联。"
  syntax:
    content: public void ValidateText (System.Xml.Schema.XmlValueGetter elementValue);
    parameters:
    - id: elementValue
      type: System.Xml.Schema.XmlValueGetter
      description: "<xref href=&quot;System.Xml.Schema.XmlValueGetter&quot;> </xref> <xref uid=&quot;langword_csharp_delegate&quot; name=&quot;delegate&quot; href=&quot;&quot;> </xref>用于将作为公共语言运行时 (CLR) 类型的文本值传递与该属性的 XML 架构定义语言 (XSD) 类型兼容。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateText*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>指定不允许在当前元素上下文中。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如， <> </> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "文本<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>参数不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)
  id: ValidateWhitespace(System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateWhitespace(String)
  nameWithType: XmlSchemaValidator.ValidateWhitespace(String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证是否中的空白<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>指定允许在当前元素上下文中，并累积空白以进行验证，如果当前元素具有简单内容。"
  syntax:
    content: public void ValidateWhitespace (string elementValue);
    parameters:
    - id: elementValue
      type: System.String
      description: "空白<xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>以验证当前元素上下文中。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "当前元素上下文中不允许有空格。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如，如果<> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
  id: ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidateWhitespace(XmlValueGetter)
  nameWithType: XmlSchemaValidator.ValidateWhitespace(XmlValueGetter)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(XmlValueGetter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "验证是否返回空白<xref href=&quot;System.Xml.Schema.XmlValueGetter&quot;></xref>指定对象允许在当前元素上下文中，并累积空白以进行验证，如果当前元素具有简单内容。"
  syntax:
    content: public void ValidateWhitespace (System.Xml.Schema.XmlValueGetter elementValue);
    parameters:
    - id: elementValue
      type: System.Xml.Schema.XmlValueGetter
      description: "<xref href=&quot;System.Xml.Schema.XmlValueGetter&quot;> </xref> <xref uid=&quot;langword_csharp_delegate&quot; name=&quot;delegate&quot; href=&quot;&quot;> </xref>用于将作为公共语言运行时 (CLR) 类型的空白值传递与该属性的 XML 架构定义语言 (XSD) 类型兼容。"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "当前元素上下文中不允许有空格。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<> </> *1> 方法未调用正确的顺序。例如，如果<> *1> 调用<xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>.</xref:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*>后调用方法"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler
  id: ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidationEventHandler
  nameWithType: XmlSchemaValidator.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>接收在架构验证警告和架构验证过程中遇到的错误。"
  remarks: "如果没有<xref:System.Xml.Schema.ValidationEventHandler>指定，则<xref:System.Xml.Schema.XmlSchemaValidationException>对于具有<xref:System.Xml.Schema.XmlSeverityType><xref:System.Xml.Schema.XmlSeverityType>.</xref:System.Xml.Schema.XmlSeverityType>值</xref:System.Xml.Schema.XmlSeverityType>的所有架构验证错误，将引发</xref:System.Xml.Schema.XmlSchemaValidationException></xref:System.Xml.Schema.ValidationEventHandler> <xref:System.Xml.Schema.XmlSchemaValidationException>不会引发具有<xref:System.Xml.Schema.XmlSeverityType><xref:System.Xml.Schema.XmlSeverityType>.</xref:System.Xml.Schema.XmlSeverityType>值</xref:System.Xml.Schema.XmlSeverityType>的验证警告</xref:System.Xml.Schema.XmlSchemaValidationException>"
  example:
  - "The following example validates the `contosoBooks.xml` file against the `contosoBooks.xsd` schema. The example uses the <xref:System.Xml.Serialization.XmlSerializer> class to deserialize the `contosoBooks.xml` file and pass the value of the nodes to the methods of the <xref:System.Xml.Schema.XmlSchemaValidator> class.  \n  \n [!code-cs[XmlSchemaValidatorExamples#1](~/add/codesnippet/csharp/e-system.xml.schema.xmls_0_1.cs)]\n [!code-vb[XmlSchemaValidatorExamples#1](~/add/codesnippet/visualbasic/e-system.xml.schema.xmls_0_1.vb)]  \n  \n The example takes the `contosoBooks.xml` file as input.  \n  \n [!code-xml[XPathXMLExamples#2](~/add/codesnippet/xml/e-system.xml.schema.xmls_0_2.xml)]  \n  \n The example also takes the `contosoBooks.xsd` as an input.  \n  \n [!code-xml[XPathXMLExamples#3](~/add/codesnippet/xml/e-system.xml.schema.xmls_0_3.xsd)]"
  syntax:
    content: public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;
    return:
      type: System.Xml.Schema.ValidationEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender
  id: ValidationEventSender
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: ValidationEventSender
  nameWithType: XmlSchemaValidator.ValidationEventSender
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置作为验证事件的发件人对象发送的对象。"
  remarks: ''
  example:
  - For an example of a validation event, see the <xref:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler> event.
  syntax:
    content: public object ValidationEventSender { get; set; }
    return:
      type: System.Object
      description: "<xref:System.Object>; 这是默认值<xref href=&quot;System.Xml.Schema.XmlSchemaValidator&quot;></xref>对象。</xref:System.Object>"
  overload: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaValidator.XmlResolver
  id: XmlResolver
  parent: System.Xml.Schema.XmlSchemaValidator
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlSchemaValidator.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaValidator.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "集<xref href=&quot;System.Xml.XmlResolver&quot;></xref>对象用于解析`xs:import`和`xs:include`元素，以及`xsi:schemaLocation`和`xsi:noNamespaceSchemaLocation`属性。"
  remarks: >-
    > [!IMPORTANT]

    >  The <xref:System.Xml.Schema.XmlSchemaValidationFlags> and <xref:System.Xml.Schema.XmlSchemaValidationFlags> validation flags of an <xref:System.Xml.Schema.XmlSchemaValidator> object are not set be default. Additionally, the XmlResolver property of an <xref:System.Xml.Schema.XmlSchemaValidator> object is `null` by default. As a result, external schemas referenced in include, imports, or redefine elements are not resolved by default.
  syntax:
    content: public System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>对象，默认值是<xref href=&quot;System.Xml.XmlUrlResolver&quot;></xref>对象。"
  overload: System.Xml.Schema.XmlSchemaValidator.XmlResolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Schema.XmlSchemaException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaException
  nameWithType: XmlSchemaException
  fullName: System.Xml.Schema.XmlSchemaException
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
  nameWithType: XmlSchemaValidator.XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
  fullName: System.Xml.Schema.XmlSchemaValidator.XmlSchemaValidator(XmlNameTable,XmlSchemaSet,IXmlNamespaceResolver,XmlSchemaValidationFlags)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: true
  name: IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Xml.Schema.XmlSchemaValidationFlags
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationFlags
  nameWithType: XmlSchemaValidationFlags
  fullName: System.Xml.Schema.XmlSchemaValidationFlags
- uid: System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: AddSchema(XmlSchema)
  nameWithType: XmlSchemaValidator.AddSchema(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaValidator.AddSchema(XmlSchema)
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema.XmlSchemaValidator.EndValidation
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: EndValidation()
  nameWithType: XmlSchemaValidator.EndValidation()
  fullName: System.Xml.Schema.XmlSchemaValidator.EndValidation()
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetExpectedAttributes()
  nameWithType: XmlSchemaValidator.GetExpectedAttributes()
  fullName: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes()
- uid: System.Xml.Schema.XmlSchemaAttribute[]
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaAttribute
  nameWithType: XmlSchemaAttribute
  fullName: System.Xml.Schema.XmlSchemaAttribute[]
  spec.csharp:
  - uid: System.Xml.Schema.XmlSchemaAttribute
    name: XmlSchemaAttribute
    nameWithType: XmlSchemaAttribute
    fullName: XmlSchemaAttribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetExpectedParticles()
  nameWithType: XmlSchemaValidator.GetExpectedParticles()
  fullName: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles()
- uid: System.Xml.Schema.XmlSchemaParticle[]
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaParticle
  nameWithType: XmlSchemaParticle
  fullName: System.Xml.Schema.XmlSchemaParticle[]
  spec.csharp:
  - uid: System.Xml.Schema.XmlSchemaParticle
    name: XmlSchemaParticle
    nameWithType: XmlSchemaParticle
    fullName: XmlSchemaParticle[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetUnspecifiedDefaultAttributes(ArrayList)
  nameWithType: XmlSchemaValidator.GetUnspecifiedDefaultAttributes(ArrayList)
  fullName: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(ArrayList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Xml.Schema.XmlSchemaValidator.Initialize
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: Initialize()
  nameWithType: XmlSchemaValidator.Initialize()
  fullName: System.Xml.Schema.XmlSchemaValidator.Initialize()
- uid: System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: Initialize(XmlSchemaObject)
  nameWithType: XmlSchemaValidator.Initialize(XmlSchemaObject)
  fullName: System.Xml.Schema.XmlSchemaValidator.Initialize(XmlSchemaObject)
- uid: System.Xml.Schema.XmlSchemaObject
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObject
  nameWithType: XmlSchemaObject
  fullName: System.Xml.Schema.XmlSchemaObject
- uid: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: LineInfoProvider
  nameWithType: XmlSchemaValidator.LineInfoProvider
  fullName: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider
- uid: System.Xml.IXmlLineInfo
  parent: System.Xml
  isExternal: true
  name: IXmlLineInfo
  nameWithType: IXmlLineInfo
  fullName: System.Xml.IXmlLineInfo
- uid: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: SkipToEndElement(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.SkipToEndElement(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(XmlSchemaInfo)
- uid: System.Xml.Schema.XmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaInfo
  nameWithType: XmlSchemaInfo
  fullName: System.Xml.Schema.XmlSchemaInfo
- uid: System.Xml.Schema.XmlSchemaValidator.SourceUri
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: SourceUri
  nameWithType: XmlSchemaValidator.SourceUri
  fullName: System.Xml.Schema.XmlSchemaValidator.SourceUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateAttribute(String,String,String,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateAttribute(String,String,String,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(String,String,String,XmlSchemaInfo)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(String,String,XmlValueGetter,XmlSchemaInfo)
- uid: System.Xml.Schema.XmlValueGetter
  parent: System.Xml.Schema
  isExternal: false
  name: XmlValueGetter
  nameWithType: XmlValueGetter
  fullName: System.Xml.Schema.XmlValueGetter
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateElement(String,String,XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
  nameWithType: XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateElement(String,String,XmlSchemaInfo,String,String,String,String)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateEndElement(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateEndElement(XmlSchemaInfo,Object)
  nameWithType: XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo,Object)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(XmlSchemaInfo,Object)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateEndOfAttributes(XmlSchemaInfo)
  nameWithType: XmlSchemaValidator.ValidateEndOfAttributes(XmlSchemaInfo)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(XmlSchemaInfo)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateText(String)
  nameWithType: XmlSchemaValidator.ValidateText(String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateText(String)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateText(XmlValueGetter)
  nameWithType: XmlSchemaValidator.ValidateText(XmlValueGetter)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateText(XmlValueGetter)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateWhitespace(String)
  nameWithType: XmlSchemaValidator.ValidateWhitespace(String)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(String)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateWhitespace(XmlValueGetter)
  nameWithType: XmlSchemaValidator.ValidateWhitespace(XmlValueGetter)
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(XmlValueGetter)
- uid: System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidationEventHandler
  nameWithType: XmlSchemaValidator.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidationEventSender
  nameWithType: XmlSchemaValidator.ValidationEventSender
  fullName: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender
- uid: System.Xml.Schema.XmlSchemaValidator.XmlResolver
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaValidator.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaValidator.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.Schema.XmlSchemaValidator.#ctor*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: XmlSchemaValidator
  nameWithType: XmlSchemaValidator.XmlSchemaValidator
- uid: System.Xml.Schema.XmlSchemaValidator.AddSchema*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: AddSchema
  nameWithType: XmlSchemaValidator.AddSchema
- uid: System.Xml.Schema.XmlSchemaValidator.EndValidation*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: EndValidation
  nameWithType: XmlSchemaValidator.EndValidation
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetExpectedAttributes
  nameWithType: XmlSchemaValidator.GetExpectedAttributes
- uid: System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetExpectedParticles
  nameWithType: XmlSchemaValidator.GetExpectedParticles
- uid: System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: GetUnspecifiedDefaultAttributes
  nameWithType: XmlSchemaValidator.GetUnspecifiedDefaultAttributes
- uid: System.Xml.Schema.XmlSchemaValidator.Initialize*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: Initialize
  nameWithType: XmlSchemaValidator.Initialize
- uid: System.Xml.Schema.XmlSchemaValidator.LineInfoProvider*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: LineInfoProvider
  nameWithType: XmlSchemaValidator.LineInfoProvider
- uid: System.Xml.Schema.XmlSchemaValidator.SkipToEndElement*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: SkipToEndElement
  nameWithType: XmlSchemaValidator.SkipToEndElement
- uid: System.Xml.Schema.XmlSchemaValidator.SourceUri*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: SourceUri
  nameWithType: XmlSchemaValidator.SourceUri
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateAttribute*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateAttribute
  nameWithType: XmlSchemaValidator.ValidateAttribute
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateElement*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateElement
  nameWithType: XmlSchemaValidator.ValidateElement
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndElement*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateEndElement
  nameWithType: XmlSchemaValidator.ValidateEndElement
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateEndOfAttributes
  nameWithType: XmlSchemaValidator.ValidateEndOfAttributes
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateText*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateText
  nameWithType: XmlSchemaValidator.ValidateText
- uid: System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidateWhitespace
  nameWithType: XmlSchemaValidator.ValidateWhitespace
- uid: System.Xml.Schema.XmlSchemaValidator.ValidationEventSender*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: ValidationEventSender
  nameWithType: XmlSchemaValidator.ValidationEventSender
- uid: System.Xml.Schema.XmlSchemaValidator.XmlResolver*
  parent: System.Xml.Schema.XmlSchemaValidator
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaValidator.XmlResolver
