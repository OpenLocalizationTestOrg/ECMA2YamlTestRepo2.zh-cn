### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Information
  id: Information
  children:
  - Microsoft.VisualBasic.Information.Erl
  - Microsoft.VisualBasic.Information.Err
  - Microsoft.VisualBasic.Information.IsArray(System.Object)
  - Microsoft.VisualBasic.Information.IsDate(System.Object)
  - Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  - Microsoft.VisualBasic.Information.IsError(System.Object)
  - Microsoft.VisualBasic.Information.IsNothing(System.Object)
  - Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  - Microsoft.VisualBasic.Information.IsReference(System.Object)
  - Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.QBColor(System.Int32)
  - Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  - Microsoft.VisualBasic.Information.TypeName(System.Object)
  - Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  - Microsoft.VisualBasic.Information.VarType(System.Object)
  - Microsoft.VisualBasic.Information.VbTypeName(System.String)
  langs:
  - csharp
  name: Information
  nameWithType: Information
  fullName: Microsoft.VisualBasic.Information
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Information&quot; name=&quot;Information&quot; href=&quot;&quot;> </xref>模块包含用于返回、 测试，或验证信息的过程。"
  remarks: "此模块支持的 Visual Basic 语言关键字和运行时库成员，它们提供的错误信息，验证数据、 确定数组界限，并检索数据类型和颜色信息。"
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n```  \nDim sysDateName As String = \"System.DateTime\"  \nDim sysShortName As String = \"Int16\"  \nDim sysBadName As String = \"Nonsense\"  \nDim testVbName As String  \ntestVbName = VbTypeName(sysDateName)   \n' Returns \"Date\".  \ntestVbName = VbTypeName(sysShortName)   \n' Returns \"Short\".  \ntestVbName = VbTypeName(sysBadName)   \n' Returns Nothing.  \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Information
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Erl
  id: Erl
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，指示上次执行的语句的行号。 只读。"
  remarks: "如果 Visual Basic 遇到无行号，则返回 0。"
  example:
  - "This example uses the `Erl` property to indicate the line number.  \n  \n [!code-vb[VbVbalrErrorHandling#6](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._209_1.vb)]"
  syntax:
    content: public static int Erl ();
    parameters: []
    return:
      type: System.Int32
      description: "返回一个整数，指示上次执行的语句的行号。 只读。"
  overload: Microsoft.VisualBasic.Information.Erl*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.Err
  id: Err
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "包含有关运行时错误的信息。"
  remarks: "属性`Err`对象设置的错误生成器-Visual Basic、 对象或程序员。       运行时错误发生时，属性`Err`对象的唯一标识错误的信息填充，并可用于处理错误。 若要在代码中生成运行时错误，请使用`Raise`方法。       `Err`对象的属性被重置为零个或零长度字符串 (&quot;&quot;) 后`Exit Sub`， `Exit Function`， `Exit Property`，或`Resume Next`错误处理例程中的语句。 使用任何形式的`Resume`语句在错误处理例程之外不会重置`Err`对象的属性。 你可以使用`Clear`方法来显式重置`Err`。       使用`Raise`方法而不是`Error`语句以生成运行时错误的系统错误，并类模块。 你决定是否使用`Raise`中其他代码的方法取决于你想要返回的信息的丰富功能。       `Err`对象是具有全局作用域的内部对象。 因此，不需要在你的代码中创建它的实例。"
  example:
  - "This example uses the properties of the `Err` object in constructing an error-message dialog box. Notice that if you use the `Clear` method first, when you generate a Visual Basic error with the `Raise` method, Visual Basic's default values become the properties of the `Err` object.  \n  \n [!code-vb[VbVbalrErrorHandling#3](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._32_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.ErrObject Err ();
    parameters: []
    return:
      type: Microsoft.VisualBasic.ErrObject
      description: "包含有关运行时错误的信息。"
  overload: Microsoft.VisualBasic.Information.Err*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  id: IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示变量是否指向数组。"
  remarks: '`IsArray`返回`True`如果变量指向数组中; 否则，它将返回`False`。 `IsArray`对于具有可能包含数组的对象尤其有用。'
  example:
  - "This example uses the `IsArray` function to check if several variables refer to an array.  \n  \n [!code-vb[VbVbalrFunctions#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._76_1.vb)]"
  syntax:
    content: public static bool IsArray (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>变量。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示变量是否指向数组。"
  overload: Microsoft.VisualBasic.Information.IsArray*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  id: IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否表示有效<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "`IsDate`返回`True`如果`Expression`的<xref:System.DateTime>数据类型或可被转换为它; 否则为它将返回`False`。</xref:System.DateTime>       <xref:System.DateTime>数据类型支持的日期值和时间值。</xref:System.DateTime> `IsDate`返回`True`如果`Expression`表示有效的日期、 有效的时间，或有效的日期和时间。"
  example:
  - "The following example uses the `IsDate` function to determine if several variables represent valid <xref:System.DateTime> values.  \n  \n [!code-vb[VbVbalrFunctions#35](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._9_1.vb)]  \n  \n In the preceding example, `IsDate` returns `True` for the first four calls and `False` for the last call."
  syntax:
    content: public static bool IsDate (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否表示有效<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.Information.IsDate*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  id: IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式的计算结果是否为<xref href=&quot;System.DBNull&quot;></xref>类。"
  remarks: "`IsDBNull`返回`True`如果的数据类型`Expression`计算结果为<xref:System.DBNull>类型; 否则为`IsDBNull`返回`False`。</xref:System.DBNull>       <xref:System.DBNull?displayProperty=fullName>值，指示`Object`表示缺失或不存在的数据。</xref:System.DBNull?displayProperty=fullName> `DBNull`不能与相同`Nothing`，指示尚未初始化变量。 `DBNull`也不是零长度字符串相同 (`&quot;&quot;`)，这有时称为 null 字符串。"
  example:
  - "This example uses the `IsDBNull` function to determine if a variable evaluates to `DBNull`.  \n  \n [!code-vb[VbVbalrFunctions#36](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._101_1.vb)]"
  syntax:
    content: public static bool IsDBNull (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式的计算结果是否为<xref href=&quot;System.DBNull&quot;></xref>类。"
  overload: Microsoft.VisualBasic.Information.IsDBNull*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  id: IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否异常类型。"
  remarks: "`IsError`返回`True`如果表达式表示`Object`派生自的变量<xref:System.Exception>类<xref:System>命名空间。</xref:System> </xref:System.Exception>       派生自的异常<xref:System.Exception?displayProperty=fullName>可捕获与`Try...Catch...Finally`语句。</xref:System.Exception?displayProperty=fullName>"
  example:
  - "The following example uses the `IsError` function to check if an expression represents a system exception.  \n  \n [!code-vb[VbVbalrFunctions#37](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._164_1.vb)]"
  syntax:
    content: public static bool IsError (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否异常类型。"
  overload: Microsoft.VisualBasic.Information.IsError*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  id: IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否具有分配给它没有任何对象。"
  remarks: "`IsNothing`返回`True`如果表达式表示的对象变量的当前未包含任何对象分配给它; 否则为它将返回`False`。       `IsNothing`旨在作用于引用类型。 值类型不能包含的一个值，和将恢复为其默认值，如果将分配`Nothing`到它。 如果提供中的值类型`Expression`，`IsNothing`始终返回`False`。"
  example:
  - "The following example uses the `IsNothing` function to determine if an object variable is associated with any object instance.  \n  \n [!code-vb[VbVbalrFunctions#38](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._149_1.vb)]"
  syntax:
    content: public static bool IsNothing (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否具有分配给它没有任何对象。"
  overload: Microsoft.VisualBasic.Information.IsNothing*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  id: IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否可以计算为数字。"
  remarks: "`IsNumeric`returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. 它还返回`True`如果`Expression`是`Char`， `String`，或`Object`可以成功转换为数字。 `Expression`可以包含非数字字符。 `IsNumeric`返回`True`如果`Expression`是包含一个有效的十六进制或八进制数字的字符串。 `IsNumeric`也会返回`True`如果`Expression`包含有效的数值表达式开头 +、-字符或包含逗号。       `IsNumeric`返回`False`如果`Expression`的数据类型`Date`。 它将返回`False`如果`Expression`是`Char`， `String`，或`Object`无法成功转换为数字。"
  example:
  - "The following example uses the `IsNumeric` function to determine if the contents of a variable can be evaluated as a number.  \n  \n [!code-vb[VbVbalrFunctions#39](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._137_1.vb)]"
  syntax:
    content: public static bool IsNumeric (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式是否可以计算为数字。"
  overload: Microsoft.VisualBasic.Information.IsNumeric*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  id: IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式的计算结果是否为引用类型。"
  remarks: "`IsReference`返回`True`如果`Expression`表示引用类型，如类实例，`String`类型或数组的任何类型; 否则，它将返回`False`。       引用类型包含在其他位置存储在内存中数据的指针。 值类型包含其自己的数据。"
  example:
  - "This example uses the `IsReference` function to check if several variables refer to reference types.  \n  \n [!code-vb[VbVbalrFunctions#40](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._142_1.vb)]  \n  \n In the preceding example, the first three calls to `IsReference` return `True`. The last call returns `False`, because `Integer` is a value type, not a reference type."
  syntax:
    content: public static bool IsReference (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示表达式的计算结果是否为引用类型。"
  overload: Microsoft.VisualBasic.Information.IsReference*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  id: LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回最小可用的指定维数的数组下标。"
  remarks: "由于数组下标从 0 开始，每一维度最小可用下标始终是 0。       对于具有以下维度的数组`LBound`下表中返回的值︰ ```vb#   Dim a(100, 5, 4) As Byte   ``` |调用 LBound |返回值 |  |--------------------|------------------|  |`LBound(a, 1)`|0|  |`LBound(a, 2)`|0|  |`LBound(a, 3)`|0|"
  example:
  - "The following example uses the `LBound` function to determine the lowest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#41](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._241_1.vb)]"
  syntax:
    content: public static int LBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "必需。 任何数据类型的数组。 要在其中查找维度最小可用下标的数组。"
    - id: Rank
      type: System.Int32
      description: "可选。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 为返回最小可用下标维度。 使用 1 表示第一个维度，为第二种，2，依此类推。 如果`Rank`是省略，则假定为 1。"
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 指定维度的下标可以包含最小值。 <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref>始终返回 0 长达<code> Array </code>已初始化，即使它不包含任何元素，例如，如果它是零长度字符串。 If <code>Array</code> is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_LBound&quot; name=&quot;LBound&quot; href=&quot;&quot;></xref> throws an <xref:System.ArgumentNullException>.</xref:System.ArgumentNullException>"
  overload: Microsoft.VisualBasic.Information.LBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>小于 1，或<code>Rank</code>大于的秩<code>Array</code>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  id: QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示与指定对应的 RGB 颜色代码颜色数。"
  remarks: "从最低有效字节开始，返回的值指定用于在 Visual Basic 语言由使用的 RGB 系统中设置适当的颜色的红色、 绿色和蓝色值。       `Color`自变量具有这些设置。      |数 |颜色 |数 |颜色 |  |------------|-----------|------------|-----------|  |&0; |黑色 |&8; |灰色 |  |&1; |蓝色 |&9; |浅蓝色 |  |&2; |绿色 |&10; |浅绿色 |  |&3; |青色 |&11; |浅蓝 |  |&4; |红色 |&12; |浅红色 |  |&5; |洋红色 |&13; |浅洋红色 |  |&6; |黄色 |&14; |浅黄色 |  |&7; |空白 |&15; |亮白色 |"
  example:
  - "This example uses the `QBColor` function to change to the color indicated by `colorInteger`. `QBColor` accepts integer values between 0 and 15.  \n  \n [!code-vb[VbVbalrCatRef#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._29_1.vb)]"
  syntax:
    content: public static int QBColor (int Color);
    parameters:
    - id: Color
      type: System.Int32
      description: "必需。 0-15 范围内的整数。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示与指定对应的 RGB 颜色代码颜色数。"
  overload: Microsoft.VisualBasic.Information.QBColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Color</code>是范围 0 到 15 之间，非独占之外。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  id: RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示从一组的红色、 绿色和蓝色颜色组件的 RGB 颜色值。"
  remarks: "应用程序方法和属性接受颜色规范预期规范是一个数字，表示 RGB 颜色值。 RGB 颜色值指定相对的红色、 绿色和蓝色的导致要显示的特定颜色强度。       如果任何参数的值`RGB`大于 255，255 使用。       下表列出一些标准颜色以及它们包括在红色、 绿色和蓝色值。      |颜色 |红色值 |绿色值 |蓝色值 |  |-----------|---------------|-----------------|----------------|  |黑色 |&0; |&0; |&0; |  |蓝色 |&0; |&0; |&255; |  |绿色 |&0; |&255; |&0; |  |青色 |&0; |&255; |&255; |  |红色 |&255; |&0; |&0; |  |洋红色 |&255; |&0; |&255; |  |黄色 |&255; |&255; |&0; |  |空白 |&255; |&255; |&255; |"
  example:
  - "This example shows how the `RGB` function is used to return a whole number representing an `RGB` color value.  \n  \n [!code-vb[VbVbalrCatRef#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._89_1.vb)]"
  syntax:
    content: public static int RGB (int Red, int Green, int Blue);
    parameters:
    - id: Red
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255，（含)，范围内，它表示颜色中红色部分的强度。"
    - id: Green
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255，（含)，范围内，它表示颜色中绿色部分的强度。"
    - id: Blue
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 – 255，（含)，范围内，它表示颜色中蓝色部分的强度。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示从一组的红色、 绿色和蓝色颜色组件的 RGB 颜色值。"
  overload: Microsoft.VisualBasic.Information.RGB*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Green</code><code>Blue</code>，或<code>Red</code>范围 0 到 255，之外。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  id: SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含系统数据类型名称的变量值。"
  remarks: '`SystemTypeName`返回的完全限定公共语言运行时 (CLR) 类型名称对应于 Visual Basic 类型名称。 例如，如果`VbName`包含&quot;日期&quot;`SystemTypeName`返回&quot;System.DateTime&quot;。 如果`SystemTypeName`无法识别的值`VbName`，它将返回`Nothing`(不是字符串&quot;Nothing&quot;)。'
  example:
  - "The following example uses the `SystemTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#49](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._174_1.vb)]"
  syntax:
    content: public static string SystemTypeName (string VbName);
    parameters:
    - id: VbName
      type: System.String
      description: "必需。 A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含 Visual Basic 类型名称的变量。"
    return:
      type: System.String
      description: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含系统数据类型名称的变量值。"
  overload: Microsoft.VisualBasic.Information.SystemTypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  id: TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含有关变量的数据类型信息。"
  remarks: "下表显示`String`返回的值`TypeName`的不同内容`VarName`。      |`VarName`内容 |返回字符串 |  |------------------------|---------------------|  | 16 位`True`或`False`值类型 |&quot;布尔&quot;|  | 8 位二进制值类型 |&quot;字节&quot;|  | 16 位字符值类型 |&quot;Char&quot;|  | 64 位日期和时间值类型 |&quot;日期&quot;|  |引用类型，该值指示缺少或不存在数据 |&quot;DBNull&quot;|  | 128 位定点数值类型 |&quot;十进制&quot;|  | 64 位浮点型数值类型 |&quot;双精度&quot;|  | 32 位整数值类型 |&quot;整数&quot;|  |引用指向未专用化的对象类型 |&quot;对象&quot;|  |引用指向从类创建专用的对象的类型*objectclass*|&quot;*objectclass*&quot;|  | 64 位整数值类型 |&quot;长&quot;|  |与当前分配给它没有任何对象引用类型 |&quot;执行任何操作&quot;|  | 8 位有符号的整数值类型 |&quot;SByte&quot;|  | 16 位整数值类型 |&quot;短&quot;|  | 32 位浮点型数值类型 |&quot;单个&quot;|  |引用指向 16 位字符的字符串类型 |&quot;字符串&quot;|  | 32 位无符号的整数值类型 |&quot;UInteger&quot;|  | 64 位无符号的整数值类型 |&quot;ULong&quot;|  | 16 位无符号的整数值类型 |&quot;UShort&quot;|      如果`VarName`是一个数组，则返回的字符串可以是任何一种使用追加的空括号前面的表中的字符串。 例如，如果`VarName`指向一个整数，数组`TypeName`返回&quot;Integer()&quot;。       当`TypeName`返回引用类型的名称例如类，它将返回仅名称本身，而不是限定名称。 例如，如果`VarName`指向类的对象<xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>，`TypeName`返回&quot;PaperSource&quot;。</xref:System.Drawing.Printing.PaperSource?displayProperty=fullName> 请注意，如果变量被声明为特定类类型的但没有向它分配、 对象`TypeName`返回&quot;Nothing&quot;。"
  example:
  - "The following example uses the `TypeName` function to return data type information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#52](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._131_1.vb)]"
  syntax:
    content: public static string TypeName (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>变量。 如果<xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;></xref>是<xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>，你可以将变量传递的结构之外的任何数据类型。"
    return:
      type: System.String
      description: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含有关变量的数据类型信息。"
  overload: Microsoft.VisualBasic.Information.TypeName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  id: UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回指定维度的数组的最高可用的下标。"
  remarks: "Since array subscripts start at 0, the length of a dimension is greater by one than the highest available subscript for that dimension.  \n  \n For an array with the following dimensions, `UBound` returns the values in the following table:  \n  \n```vb#  \nDim a(100, 5, 4) As Byte  \n```  \n  \n|Call to UBound|Return value|  \n|--------------------|------------------|  \n|`UBound(a, 1)`|100|  \n|`UBound(a, 2)`|5|  \n|`UBound(a, 3)`|4|  \n  \n You can use `UBound` to determine the total number of elements in an array, but you must adjust the value it returns to account for the fact that the subscripts start at 0. The following example calculates the total size of the array `a` in the preceding example:  \n  \n```vb#  \nDim total As Integer  \ntotal = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  \n```  \n  \n The value calculated for `total` is 3030, which is 101 * 6 \\* 5."
  example:
  - "The following example uses the `UBound` function to determine the highest available subscript for the indicated dimension of an array.  \n  \n [!code-vb[VbVbalrFunctions#53](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._136_1.vb)]"
  syntax:
    content: public static int UBound (Array Array, int Rank = 1);
    parameters:
    - id: Array
      type: System.Array
      description: "必需。 任何数据类型的数组。 要在其中查找维度的最大可能下标的数组。"
    - id: Rank
      type: System.Int32
      description: "可选。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 为返回的最大可能下标维度。 使用 1 表示第一个维度，为第二种，2，依此类推。 如果`Rank`是省略，则假定为 1。"
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 为指定维度的下标可以包含的最大值。 如果<code> Array </code>具有只有一个元素， <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref>返回 0。 如果<code> Array </code>没有元素，例如，如果它是零长度字符串， <xref uid=&quot;langword_csharp_UBound&quot; name=&quot;UBound&quot; href=&quot;&quot;> </xref>返回-1。"
  overload: Microsoft.VisualBasic.Information.UBound*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Array</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>Rank</code>小于 1，或<code>Rank</code>大于的秩<code>Array</code>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  id: VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含变量的数据类型分类。"
  remarks: "返回的整数值`VarType`是<xref:Microsoft.VisualBasic.VariantType>.</xref:Microsoft.VisualBasic.VariantType>的成员       下表显示返回的值`VarType`的特殊情况的`VarName`。      |数据类型由`VarName`|返回值`VarType`|  |----------------------------------------|---------------------------------|  |[Nothing](~/add/includes/ajax-current-ext-md.md)|`VariantType.Object`|  |<xref:System.DBNull>|`VariantType.Null`|  |枚举 |Underlying data type (`SByte`, `Byte`, `Short`, `UShort`, `Integer`, `UInteger`, `Long`, or `ULong`)|  |数组 |按位或数组元素类型和`VariantType.Array`|  |数组的数组 |按位或`VariantType.Object`和`VariantType.Array`|  |结构 (<xref:System.ValueType?displayProperty=fullName>) |`VariantType.UserDefinedType`|  |<xref:System.Exception>|`VariantType.Error`|  |未知 |`VariantType.Object`|</xref:System.Exception></xref:System.ValueType?displayProperty=fullName></xref:System.DBNull>"
  example:
  - "The following example uses the `VarType` function to return data type classification information about several variables.  \n  \n [!code-vb[VbVbalrFunctions#55](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._179_1.vb)]"
  syntax:
    content: public static Microsoft.VisualBasic.VariantType VarType (object VarName);
    parameters:
    - id: VarName
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>变量。 如果<xref uid=&quot;langword_csharp_Option Strict&quot; name=&quot;Option Strict&quot; href=&quot;&quot;></xref>是<xref uid=&quot;langword_csharp_Off&quot; name=&quot;Off&quot; href=&quot;&quot;> </xref>，你可以将变量传递的结构之外的任何数据类型。"
    return:
      type: Microsoft.VisualBasic.VariantType
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含变量的数据类型分类。"
  overload: Microsoft.VisualBasic.Information.VarType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  id: VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  langs:
  - csharp
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含 Visual Basic 数据类型名称的变量值。"
  remarks: "`VbTypeName`返回与公共语言运行时类型名称对应的 Visual Basic 类型名称。 例如，如果`UrtName`包含&quot;Int32&quot;或&quot;System.Int32&quot;`VbTypeName`返回&quot;整数&quot;。 如果`VbTypeName`无法识别的值`UrtName`，它将返回`Nothing`(不是字符串&quot;Nothing&quot;)。       中的类型名称`UrtName`可从各种源，例如从<xref:System.Reflection.MemberInfo.Name%2A>属性<xref:System.Reflection.MemberInfo>的<xref:System.Type>类。</xref:System.Type>数组</xref:System.Reflection.MemberInfo>中</xref:System.Reflection.MemberInfo.Name%2A>获取"
  example:
  - "The following example uses the `VbTypeName` function to return data type names for several variables.  \n  \n [!code-vb[VbVbalrFunctions#56](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._152_1.vb)]"
  syntax:
    content: public static string VbTypeName (string UrtName);
    parameters:
    - id: UrtName
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含由公共语言运行时类型名称的变量。"
    return:
      type: System.String
      description: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含 Visual Basic 数据类型名称的变量值。"
  overload: Microsoft.VisualBasic.Information.VbTypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.RankException
  isExternal: true
  name: System.RankException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: Microsoft.VisualBasic.Information.Erl
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl()
  nameWithType: Information.Erl()
  fullName: Microsoft.VisualBasic.Information.Erl()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.Information.Err
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err()
  nameWithType: Information.Err()
  fullName: Microsoft.VisualBasic.Information.Err()
- uid: Microsoft.VisualBasic.ErrObject
  parent: Microsoft.VisualBasic
  isExternal: false
  name: ErrObject
  nameWithType: ErrObject
  fullName: Microsoft.VisualBasic.ErrObject
- uid: Microsoft.VisualBasic.Information.IsArray(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray(Object)
  nameWithType: Information.IsArray(Object)
  fullName: Microsoft.VisualBasic.Information.IsArray(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Information.IsDate(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate(Object)
  nameWithType: Information.IsDate(Object)
  fullName: Microsoft.VisualBasic.Information.IsDate(Object)
- uid: Microsoft.VisualBasic.Information.IsDBNull(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull(Object)
  nameWithType: Information.IsDBNull(Object)
  fullName: Microsoft.VisualBasic.Information.IsDBNull(Object)
- uid: Microsoft.VisualBasic.Information.IsError(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError(Object)
  nameWithType: Information.IsError(Object)
  fullName: Microsoft.VisualBasic.Information.IsError(Object)
- uid: Microsoft.VisualBasic.Information.IsNothing(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing(Object)
  nameWithType: Information.IsNothing(Object)
  fullName: Microsoft.VisualBasic.Information.IsNothing(Object)
- uid: Microsoft.VisualBasic.Information.IsNumeric(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric(Object)
  nameWithType: Information.IsNumeric(Object)
  fullName: Microsoft.VisualBasic.Information.IsNumeric(Object)
- uid: Microsoft.VisualBasic.Information.IsReference(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference(Object)
  nameWithType: Information.IsReference(Object)
  fullName: Microsoft.VisualBasic.Information.IsReference(Object)
- uid: Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound(Array,Int32)
  nameWithType: Information.LBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.LBound(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: Microsoft.VisualBasic.Information.QBColor(System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor(Int32)
  nameWithType: Information.QBColor(Int32)
  fullName: Microsoft.VisualBasic.Information.QBColor(Int32)
- uid: Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB(Int32,Int32,Int32)
  nameWithType: Information.RGB(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.Information.RGB(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.Information.SystemTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName(String)
  nameWithType: Information.SystemTypeName(String)
  fullName: Microsoft.VisualBasic.Information.SystemTypeName(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Information.TypeName(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName(Object)
  nameWithType: Information.TypeName(Object)
  fullName: Microsoft.VisualBasic.Information.TypeName(Object)
- uid: Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound(Array,Int32)
  nameWithType: Information.UBound(Array,Int32)
  fullName: Microsoft.VisualBasic.Information.UBound(Array,Int32)
- uid: Microsoft.VisualBasic.Information.VarType(System.Object)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType(Object)
  nameWithType: Information.VarType(Object)
  fullName: Microsoft.VisualBasic.Information.VarType(Object)
- uid: Microsoft.VisualBasic.VariantType
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VariantType
  nameWithType: VariantType
  fullName: Microsoft.VisualBasic.VariantType
- uid: Microsoft.VisualBasic.Information.VbTypeName(System.String)
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName(String)
  nameWithType: Information.VbTypeName(String)
  fullName: Microsoft.VisualBasic.Information.VbTypeName(String)
- uid: Microsoft.VisualBasic.Information.Erl*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Erl
  nameWithType: Information.Erl
- uid: Microsoft.VisualBasic.Information.Err*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: Err
  nameWithType: Information.Err
- uid: Microsoft.VisualBasic.Information.IsArray*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsArray
  nameWithType: Information.IsArray
- uid: Microsoft.VisualBasic.Information.IsDate*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDate
  nameWithType: Information.IsDate
- uid: Microsoft.VisualBasic.Information.IsDBNull*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsDBNull
  nameWithType: Information.IsDBNull
- uid: Microsoft.VisualBasic.Information.IsError*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsError
  nameWithType: Information.IsError
- uid: Microsoft.VisualBasic.Information.IsNothing*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNothing
  nameWithType: Information.IsNothing
- uid: Microsoft.VisualBasic.Information.IsNumeric*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsNumeric
  nameWithType: Information.IsNumeric
- uid: Microsoft.VisualBasic.Information.IsReference*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: IsReference
  nameWithType: Information.IsReference
- uid: Microsoft.VisualBasic.Information.LBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: LBound
  nameWithType: Information.LBound
- uid: Microsoft.VisualBasic.Information.QBColor*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: QBColor
  nameWithType: Information.QBColor
- uid: Microsoft.VisualBasic.Information.RGB*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: RGB
  nameWithType: Information.RGB
- uid: Microsoft.VisualBasic.Information.SystemTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: SystemTypeName
  nameWithType: Information.SystemTypeName
- uid: Microsoft.VisualBasic.Information.TypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: TypeName
  nameWithType: Information.TypeName
- uid: Microsoft.VisualBasic.Information.UBound*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: UBound
  nameWithType: Information.UBound
- uid: Microsoft.VisualBasic.Information.VarType*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VarType
  nameWithType: Information.VarType
- uid: Microsoft.VisualBasic.Information.VbTypeName*
  parent: Microsoft.VisualBasic.Information
  isExternal: false
  name: VbTypeName
  nameWithType: Information.VbTypeName
