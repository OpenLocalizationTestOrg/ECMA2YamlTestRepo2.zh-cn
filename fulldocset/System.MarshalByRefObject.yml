### YamlMime:ManagedReference
items:
- uid: System.MarshalByRefObject
  id: MarshalByRefObject
  children:
  - System.MarshalByRefObject.#ctor
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  langs:
  - csharp
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
  type: Class
  summary: "启用访问对象跨应用程序中的应用程序域边界支持远程处理。"
  remarks: "应用程序域是在一个或多个应用程序所在位置的操作系统进程中的分区。 在同一应用程序域中的对象直接进行通信。 不同的应用程序域中的对象进行通信的传输对象的副本跨应用程序域边界进行，或通过使用代理服务器来交换消息。       MarshalByRefObject 是跨应用程序域边界通过交换消息使用的代理进行通信的对象的基类。 对象不是继承自 MarshalByRefObject 的隐式是按值封送。 当远程应用程序引用封送值对象时，跨应用程序域边界传递对象的副本。       直接在本地应用程序域的边界内访问 MarshalByRefObject 对象。 第一次远程应用程序域中的应用程序访问 MarshalByRefObject，代理将传递到远程应用程序。 代理上的后续调用将封送回驻留在本地应用程序域中的对象。       类型使用跨应用程序域边界进行，并且不得复制对象的状态，因为对象的成员不在其创建位置的应用程序域之外使用时，类型必须从 MarshalByRefObject 中继承。       当你对象从 MarshalByRefObject 中派生用于跨应用程序域边界时，不应重写任何的成员，也不应直接调用其方法。 运行时识别应跨应用程序域边界进行封送类派生自 MarshalByRefObject。"
  example:
  - "This section contains two code examples. The first code example shows how to create an instance of a class in another application domain. The second code example shows a simple class that can be used for remoting.  \n  \n **Example 1**  \n  \n The following code example shows the simplest way to execute code in another application domain. The example defines a class named `Worker` that inherits MarshalByRefObject, with a method that displays the name of the application domain in which it is executing. The example creates instances of `Worker` in the default application domain and in a new application domain.  \n  \n> [!NOTE]\n>  The assembly that contains `Worker` must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.  \n  \n [!code-cpp[CreateInstanceAndUnwrap2#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_1.cpp)]\n [!code-cs[CreateInstanceAndUnwrap2#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_1.cs)]\n [!code-vb[CreateInstanceAndUnwrap2#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_1.vb)]  \n  \n **Example 2**  \n  \n The following example demonstrates a class derived from MarshalByRefObject that is used later in remoting.  \n  \n [!code-cpp[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/cpp/t-system.marshalbyrefobj_2.cpp)]\n [!code-cs[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/csharp/t-system.marshalbyrefobj_2.cs)]\n [!code-vb[RemotingServices.SetObjectUriForMarshal#1](~/add/codesnippet/visualbasic/t-system.marshalbyrefobj_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class MarshalByRefObject
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.MarshalByRefObject.#ctor
  id: '#ctor'
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.MarshalByRefObject&quot;></xref>类。"
  syntax:
    content: protected MarshalByRefObject ();
    parameters: []
  overload: System.MarshalByRefObject.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  id: CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "创建包含所有生成代理用于与远程对象进行通信所需的相关信息的对象。"
  remarks: "由远程对象创建方法，如<xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>和<xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName>.</xref:System.AppDomain.CreateInstanceAndUnwrap%2A?displayProperty=fullName></xref:System.AppDomain.CreateInstance%2A?displayProperty=fullName>调用 TheCreateObjRef 方法 在大多数情况下，没有无需重写此方法。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);
    parameters:
    - id: requestedType
      type: System.Type
      description: "<xref:System.Type>的对象的新<xref href=&quot;System.Runtime.Remoting.ObjRef&quot;></xref>将引用。</xref:System.Type>"
    return:
      type: System.Runtime.Remoting.ObjRef
      description: "生成代理所需的信息。"
  overload: System.MarshalByRefObject.CreateObjRef*
  exceptions:
  - type: System.Runtime.Remoting.RemotingException
    commentId: T:System.Runtime.Remoting.RemotingException
    description: "此实例不是有效的远程处理对象。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直接调用方没有基础结构权限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.GetLifetimeService
  id: GetLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "检索当前生存期服务对象，用于控制此实例的生存期策略。"
  remarks: "生存期服务有关的详细信息，请参阅<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>类。</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>"
  syntax:
    content: public object GetLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "类型的对象<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>用于控制此实例的生存期策略。"
  overload: System.MarshalByRefObject.GetLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直接调用方没有基础结构权限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取要控制此实例的生存期策略生存期服务对象。"
  remarks: "生存期服务有关的详细信息，请参阅<xref:System.Runtime.Remoting.Lifetime.LifetimeServices>类。</xref:System.Runtime.Remoting.Lifetime.LifetimeServices>"
  example:
  - "The following code example demonstrates creating a lease.  \n  \n [!code-cpp[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/cpp/m-system.marshalbyrefobj_1.cpp)]\n [!code-vb[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/visualbasic/m-system.marshalbyrefobj_1.vb)]\n [!code-cs[Classic MarshalByRefObject.InitializeLifetimeService Example#1](~/add/codesnippet/csharp/m-system.marshalbyrefobj_1.cs)]"
  syntax:
    content: public virtual object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "类型的对象<xref href=&quot;System.Runtime.Remoting.Lifetime.ILease&quot;></xref>用于控制此实例的生存期策略。 这是此实例，如果一个服务对象存在，则当前生存期否则，新生存期服务对象初始化的值为&lt;xref:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime%2A?displayProperty=fullName&gt;属性。"
  overload: System.MarshalByRefObject.InitializeLifetimeService*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "直接调用方没有基础结构权限。"
  platform:
  - net462
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  id: MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  langs:
  - csharp
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "创建当前的浅表副本<xref href=&quot;System.MarshalByRefObject&quot;></xref>对象。"
  remarks: "MemberwiseClone 方法创建的浅表副本通过创建一个新<xref:System.MarshalByRefObject>对象，然后再复制当前的非静态字段<xref:System.MarshalByRefObject>到新的对象的对象。</xref:System.MarshalByRefObject> </xref:System.MarshalByRefObject> 如果字段是值类型，则执行字段的按位复制。 如果字段是引用类型，引用将复制，但被引用的对象不;因此，原始对象和其克隆引用同一对象。       例如，考虑<xref:System.MarshalByRefObject>对象被称为引用对象 A 和 B，反过来，X 引用对象 c。X 的浅表副本创建新的对象 X2 也引用对象 A 和 b。与此相反，X 的深层副本创建新对象 X2 引用 A2 和 B2，是的一个副本的新对象并 B.B2，反过来，引用副本 C.使用实现的类的新对象 C2，<xref:System.ICloneable>接口来执行对象的深度或浅表副本。</xref:System.ICloneable> </xref:System.MarshalByRefObject>       标识<xref:System.MarshalByRefObject>对象定义为目标的远程客户端调用的远程服务器对象。</xref:System.MarshalByRefObject> 默认情况下，成员副本<xref:System.MarshalByRefObject>对象具有与原始对象，并通常不会跨客户端为远程处理边界封送的服务器端对象的克隆是正确行为相同的标识。</xref:System.MarshalByRefObject> 指定`false`，这是通常适当，从而删除克隆的标识，并且导致跨远程处理边界，封送克隆时要分配的新标识或`true`导致克隆以保留原始标识<xref:System.MarshalByRefObject>对象。</xref:System.MarshalByRefObject> MemberwiseClone 方法旨在实现远程服务器对象的开发人员可使用。"
  syntax:
    content: protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);
    parameters:
    - id: cloneIdentity
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要删除当前<xref href=&quot;System.MarshalByRefObject&quot;></xref>对象的标识，这将导致要跨远程处理边界封送时，将分配新标识的对象。 值为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>通常比较合适。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要复制当前<xref href=&quot;System.MarshalByRefObject&quot;></xref>到它的克隆，这将导致远程客户端调用路由到的远程服务器对象的对象的标识。"
    return:
      type: System.MarshalByRefObject
      description: "当前的浅表副本<xref href=&quot;System.MarshalByRefObject&quot;></xref>对象。"
  overload: System.MarshalByRefObject.MemberwiseClone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Remoting.RemotingException
  parent: System.Runtime.Remoting
  isExternal: false
  name: RemotingException
  nameWithType: RemotingException
  fullName: System.Runtime.Remoting.RemotingException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.MarshalByRefObject.#ctor
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject()
  nameWithType: MarshalByRefObject.MarshalByRefObject()
  fullName: System.MarshalByRefObject.MarshalByRefObject()
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(Type)
- uid: System.Runtime.Remoting.ObjRef
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjRef
  nameWithType: ObjRef
  fullName: System.Runtime.Remoting.ObjRef
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(Boolean)
- uid: System.MarshalByRefObject
  parent: System
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.MarshalByRefObject.#ctor*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject.MarshalByRefObject
- uid: System.MarshalByRefObject.CreateObjRef*
  parent: System.MarshalByRefObject
  isExternal: false
  name: CreateObjRef
  nameWithType: MarshalByRefObject.CreateObjRef
- uid: System.MarshalByRefObject.GetLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: GetLifetimeService
  nameWithType: MarshalByRefObject.GetLifetimeService
- uid: System.MarshalByRefObject.InitializeLifetimeService*
  parent: System.MarshalByRefObject
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: MarshalByRefObject.InitializeLifetimeService
- uid: System.MarshalByRefObject.MemberwiseClone*
  parent: System.MarshalByRefObject
  isExternal: false
  name: MemberwiseClone
  nameWithType: MarshalByRefObject.MemberwiseClone
