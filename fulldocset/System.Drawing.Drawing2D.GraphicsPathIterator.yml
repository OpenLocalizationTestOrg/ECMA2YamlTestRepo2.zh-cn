### YamlMime:ManagedReference
items:
- uid: System.Drawing.Drawing2D.GraphicsPathIterator
  id: GraphicsPathIterator
  children:
  - System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Count
  - System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  - System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  - System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  - System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  - System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  langs:
  - csharp
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator
  type: Class
  summary: "提供的功能来循环访问中的子路径<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>和测试的每个子路径中包含的形状的类型。 此类不能被继承。"
  syntax:
    content: 'public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  id: '#ctor(System.Drawing.Drawing2D.GraphicsPath)'
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>使用指定的类<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>对象。"
  syntax:
    content: public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>为初始化此帮助器类的对象。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  id: CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "副本<> *1> 属性和<> *1> 的关联的属性数组<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到两个指定的数组。"
  remarks: "使用`startIndex`和`endIndex`复制路径数据的一系列指定的参数。"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the CopyData method to copy the path data contained between the start and end indexes to the points and types arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/visualbasic/b1ea0b64-123f-4dcb-86c3-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/cpp/b1ea0b64-123f-4dcb-86c3-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/add/codesnippet/csharp/b1ea0b64-123f-4dcb-86c3-_1.cs)]"
  syntax:
    content: public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "返回时，包含的数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示要在路径中的点。"
    - id: types
      type: System.Byte[]
      description: "返回时，包含表示在路径中的点的类型的字节数组。"
    - id: startIndex
      type: System.Int32
      description: "指定数组的起始索引。"
    - id: endIndex
      type: System.Int32
      description: "指定数组的结束索引。"
    return:
      type: System.Int32
      description: "复制的点的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  id: Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取在路径中的点的数目。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "在路径中的点的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  id: Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "释放所有资源由此<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>对象。"
  remarks: "调用`Dispose`允许使用的资源<xref:System.Drawing.Drawing2D.GraphicsPathIterator>对象可以重新分配用于其他目的。</xref:System.Drawing.Drawing2D.GraphicsPathIterator>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  id: Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "副本<> *1> 属性和<> *1> 的关联的属性数组<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到两个指定的数组。"
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a graphics path.  \n  \n-   Populates it with several primitives and some markers.  \n  \n-   Lists the path data on the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   Increments the path data index to the second marker.  \n  \n-   Calls the Enumerate method to copy the path data to the `points` and `types` arrays.  \n  \n-   Lists this copied data on the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/visualbasic/5dbb8a2f-b3c5-4d23-b81d-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/cpp/5dbb8a2f-b3c5-4d23-b81d-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/add/codesnippet/csharp/5dbb8a2f-b3c5-4d23-b81d-_1.cs)]"
  syntax:
    content: public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);
    parameters:
    - id: points
      type: System.Drawing.PointF[]
      description: "返回时，包含的数组<xref href=&quot;System.Drawing.PointF&quot;></xref>这些结构表示要在路径中的点。"
    - id: types
      type: System.Byte[]
      description: "返回时，包含表示在路径中的点的类型的字节数组。"
    return:
      type: System.Int32
      description: "复制的点的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  id: Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "允许该对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~GraphicsPathIterator ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  id: HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "指示与此关联的路径是否<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>包含一条曲线。"
  remarks: "路径中的所有曲线的贝塞尔样条序列作为都存储。 例如，当将一个椭圆添加到的路径，你指定的左上角、 宽度和椭圆的边框的高度。 这些数字 （左上角、 宽度和高度） 不存储在路径;替换;椭圆转换为四个贝塞尔样条序列。 路径存储终结点和这些贝塞尔样条的控制点。       一个路径存储数据点的数组，其中每个属于一行或的贝塞尔样条。 如果某些数组中的点属于贝塞尔样条，则 HasCurve 返回`true`。 如果数组中的所有点都属于行，则 HasCurve 返回`false`。       某些方法平展的路径，这意味着在路径中的所有曲线将都转换为的行的序列。 已合并路径后，将始终返回 HasCurve `false`。 调用<xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>， <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>，或<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A>方法的<xref:System.Drawing.Drawing2D.GraphicsPath>类将平展一个路径。</xref:System.Drawing.Drawing2D.GraphicsPath> </xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A> </xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPath`.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object for `myPath`.  \n  \n-   Tests to see if the current path `myPath` contains a curve.  \n  \n-   Shows the result of the test in a message box.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/visualbasic/m-system.drawing.drawing_17_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/cpp/m-system.drawing.drawing_17_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/add/codesnippet/csharp/m-system.drawing.drawing_17_1.cs)]"
  syntax:
    content: public bool HasCurve ();
    parameters: []
    return:
      type: System.Boolean
      description: "此方法返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前的子路径包含一条曲线; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  id: NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "这<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>对象具有<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>对象与之关联。 NextMarker 方法递增关联<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>到其路径和第二个包含当前标记和下一个标记 （或路径的末尾） 之间的所有点的副本中的下一个标记<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>对象中传递给参数。"
  remarks: "使用<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>方法以设置标记中的路径。</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> 标记用于创建组的子路径。 一个或多个子路径可以是两个标记之间。"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextMarker method, which iterates to the first marker and copies all the points contained between that marker and the next to `myPathSection`.  \n  \n-   Returns the number of points copied to `markerPoints`.  \n  \n-   Lists the marker number (the first marker) and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/visualbasic/8b47b275-716e-4cd3-9f07-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/cpp/8b47b275-716e-4cd3-9f07-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/add/codesnippet/csharp/8b47b275-716e-4cd3-9f07-_1.cs)]"
  syntax:
    content: public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref>点将复制到对象。"
    return:
      type: System.Int32
      description: "此标记和下一步之间的点的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  id: NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "增量<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>到的路径和返回通过 [out] 参数的开始和停止索引中的下一个标记。"
  remarks: "使用<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>方法以设置标记中的路径。</xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> 标记用于创建组的子路径。 一个或多个子路径可以是两个标记之间。"
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse ¾ with markers between each.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextMarker method.  \n  \n-   Uses the values returned from the iterative calls to NextMarker to draw the start and stop points for each marker to the screen.  \n  \n-   Draws the value for the total number of points to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/visualbasic/2a36a4b2-3946-4c96-a406-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/cpp/2a36a4b2-3946-4c96-a406-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/add/codesnippet/csharp/2a36a4b2-3946-4c96-a406-_1.cs)]"
  syntax:
    content: public int NextMarker (out int startIndex, out int endIndex);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out]提供给此参数的整数引用接收启动子路径的点的索引。'
    - id: endIndex
      type: System.Int32
      description: '[out]提供给此参数的整数引用接收的结束到的子路径的点索引`startIndex`点。'
    return:
      type: System.Int32
      description: "此标记和下一步之间的点的数目。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  id: NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取的起始索引和下一组数据的结束索引点所有具有相同的类型。"
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Lists the values of all the points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> and rewinds it.  \n  \n-   In a `for` loop, iterates through the points using the NextPathType and NextPathType methods.  \n  \n-   Uses the values returned from the iterative calls to list the subpath number, the number of points in it, and the type of the path points to the right side of the screen.  \n  \n-   Displays the value for the total number of points to the screen.  \n  \n Note that `ListPathPoints` is a helper function that separates most (not all) of the display code from the graphics path code.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/visualbasic/95680980-3c12-42ae-ac98-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/cpp/95680980-3c12-42ae-ac98-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/add/codesnippet/csharp/95680980-3c12-42ae-ac98-_1.cs)]"
  syntax:
    content: public int NextPathType (out byte pathType, out int startIndex, out int endIndex);
    parameters:
    - id: pathType
      type: System.Byte
      description: '[out]接收组中的所有点由共享点类型。 可能的类型可以从检索<xref href=&quot;System.Drawing.Drawing2D.PathPointType&quot;></xref>枚举。'
    - id: startIndex
      type: System.Int32
      description: '[out]接收的一组点的起始索引。'
    - id: endIndex
      type: System.Int32
      description: '[out]接收的一组点的结束索引。'
    return:
      type: System.Int32
      description: "此方法返回组中的数据点数目。 如果路径中没有多个组，此方法将返回 0。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  id: NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取下一步图 （子路径） 的关联路径<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, an ellipse, and two markers.  \n  \n-   Lists the values of all the path's points to the left side of the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object, `myPathSection`, to receive copied points.  \n  \n-   Calls the NextSubpath method, which iterates to the third subpath (figure) and copies all the points contained in that subpath to the `myPathSection` path, and also returns the number of points copied to `subpathPoints`.  \n  \n-   Lists the subpath number and number of points it contains to the right side of the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/visualbasic/fe78f5d8-9a93-4fb0-b017-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/cpp/fe78f5d8-9a93-4fb0-b017-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/add/codesnippet/csharp/fe78f5d8-9a93-4fb0-b017-_1.cs)]"
  syntax:
    content: public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);
    parameters:
    - id: path
      type: System.Drawing.Drawing2D.GraphicsPath
      description: "A <xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;> </xref> ，它用于对其数据点的设置相匹配的检索到的图形 （子路径） 的数据点，此迭代器。"
    - id: isClosed
      type: System.Boolean
      description: '[out]指示是否已关闭的当前子路径。 它是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 if 图是关闭，否则它是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。'
    return:
      type: System.Int32
      description: "检索图 （子路径） 中的数据点数目。 如果不有任何更多的图形，以检索，则返回零。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  id: NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "将移动<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>到路径中的下一步子路径。 [Out] 参数中包含的起始索引和的下一步的子路径的结束索引。"
  remarks: ''
  example:
  - "The following example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, an <xref:System.Windows.Forms.Form.OnPaint%2A> event object. The code performs the following actions:  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPath> object.  \n  \n-   Adds three lines, a rectangle, and an ellipse.  \n  \n-   Draws the values for the array of points to the screen.  \n  \n-   Creates a <xref:System.Drawing.Drawing2D.GraphicsPathIterator> object.  \n  \n-   Calls the NextSubpath method.  \n  \n-   Uses the values returned from the iterative calls to NextSubpath to draw the start and stop values for each subpath to the screen.  \n  \n-   Draws the value for the total number of subpaths to the screen.  \n  \n [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/visualbasic/63165689-53f3-4b43-b800-_1.vb)]\n [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/cpp/63165689-53f3-4b43-b800-_1.cpp)]\n [!code-cs[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/add/codesnippet/csharp/63165689-53f3-4b43-b800-_1.cs)]"
  syntax:
    content: public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);
    parameters:
    - id: startIndex
      type: System.Int32
      description: '[out]接收的下一步的子路径的起始索引。'
    - id: endIndex
      type: System.Int32
      description: '[out]接收的下一步的子路径的结束索引。'
    - id: isClosed
      type: System.Boolean
      description: '[out]指示是否已关闭的子路径。'
    return:
      type: System.Int32
      description: "中的子路径数<xref href=&quot;System.Drawing.Drawing2D.GraphicsPath&quot;></xref>对象。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  id: Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "重绕次数这<xref href=&quot;System.Drawing.Drawing2D.GraphicsPathIterator&quot;></xref>到其关联路径的开头。"
  remarks: "第一次你调用的<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>方法的迭代器，它获取该迭代器的关联路径。 第一张图 （子路径）</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> 第二次，它获取第二个图中，依次类推。 在调用后退方法时，该序列开始，通过;也就是说，调用后退后，下一次调用到<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>获取第一个图中的路径。</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>和<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>方法的行为类似。</xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> </xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>"
  syntax:
    content: public void Rewind ();
    parameters: []
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  id: SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  langs:
  - csharp
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Drawing2D
  summary: "获取在路径中的子路径数。"
  syntax:
    content: public int SubpathCount { get; }
    return:
      type: System.Int32
      description: "在路径中的子路径数。"
  overload: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator(GraphicsPath)
  nameWithType: GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.GraphicsPathIterator(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPath
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: GraphicsPath
  nameWithType: GraphicsPath
  fullName: System.Drawing.Drawing2D.GraphicsPath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData(PointF[],Byte[],Int32,Int32)
  nameWithType: GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(PointF[],Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Drawing.PointF[]
  parent: System.Drawing
  isExternal: false
  name: PointF
  nameWithType: PointF
  fullName: System.Drawing.PointF[]
  spec.csharp:
  - uid: System.Drawing.PointF
    name: PointF
    nameWithType: PointF
    fullName: PointF[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose()
  nameWithType: GraphicsPathIterator.Dispose()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate(PointF[],Byte[])
  nameWithType: GraphicsPathIterator.Enumerate(PointF[],Byte[])
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(PointF[],Byte[])
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize()
  nameWithType: GraphicsPathIterator.Finalize()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve()
  nameWithType: GraphicsPathIterator.HasCurve()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(GraphicsPath)
  nameWithType: GraphicsPathIterator.NextMarker(GraphicsPath)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(GraphicsPath)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker(Int32,Int32)
  nameWithType: GraphicsPathIterator.NextMarker(Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(Int32,Int32)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType(Byte,Int32,Int32)
  nameWithType: GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(Byte,Int32,Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(GraphicsPath,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(GraphicsPath,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath(Int32,Int32,Boolean)
  nameWithType: GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(Int32,Int32,Boolean)
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind()
  nameWithType: GraphicsPathIterator.Rewind()
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind()
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
  fullName: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.#ctor*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: GraphicsPathIterator
  nameWithType: GraphicsPathIterator.GraphicsPathIterator
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.CopyData*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: CopyData
  nameWithType: GraphicsPathIterator.CopyData
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Count*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Count
  nameWithType: GraphicsPathIterator.Count
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Dispose*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Dispose
  nameWithType: GraphicsPathIterator.Dispose
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Enumerate
  nameWithType: GraphicsPathIterator.Enumerate
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Finalize*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Finalize
  nameWithType: GraphicsPathIterator.Finalize
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: HasCurve
  nameWithType: GraphicsPathIterator.HasCurve
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextMarker
  nameWithType: GraphicsPathIterator.NextMarker
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextPathType
  nameWithType: GraphicsPathIterator.NextPathType
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: NextSubpath
  nameWithType: GraphicsPathIterator.NextSubpath
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.Rewind*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: Rewind
  nameWithType: GraphicsPathIterator.Rewind
- uid: System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount*
  parent: System.Drawing.Drawing2D.GraphicsPathIterator
  isExternal: false
  name: SubpathCount
  nameWithType: GraphicsPathIterator.SubpathCount
