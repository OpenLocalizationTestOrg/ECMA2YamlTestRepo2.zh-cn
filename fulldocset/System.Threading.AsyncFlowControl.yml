### YamlMime:ManagedReference
items:
- uid: System.Threading.AsyncFlowControl
  id: AsyncFlowControl
  children:
  - System.Threading.AsyncFlowControl.Dispose
  - System.Threading.AsyncFlowControl.Equals(System.Object)
  - System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.GetHashCode
  - System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  - System.Threading.AsyncFlowControl.Undo
  langs:
  - csharp
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
  type: Struct
  summary: "提供要还原的迁移或流的执行上下文在线程之间的功能。"
  remarks: "执行上下文包含逻辑线程的所有与执行相关信息。 通过使用可以防止到其他线程的执行上下文的流动<xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>方法，它返回 AsyncFlowControl 结构。</xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName> <xref:System.Threading.AsyncFlowControl.Undo%2A>返回的 AsyncFlowControl 结构的方法可以用于撤消流动禁止。</xref:System.Threading.AsyncFlowControl.Undo%2A> 必须在其创建在同一线程上使用 AsyncFlowControl 结构。"
  syntax:
    content: 'public struct AsyncFlowControl : IDisposable'
  inheritance:
  - System.ValueType
  implements:
  - System.IDisposable
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Dispose
  id: Dispose
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>类。"
  remarks: "调用`Dispose`在完成使用<xref:System.Threading.AsyncFlowControl>.</xref:System.Threading.AsyncFlowControl>时 `Dispose`方法使<xref:System.Threading.AsyncFlowControl>中不可用状态。</xref:System.Threading.AsyncFlowControl> 在调用`Dispose`，必须释放对所有引用<xref:System.Threading.AsyncFlowControl>以便垃圾回收器才能回收的内存，<xref:System.Threading.AsyncFlowControl>占用。</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.AsyncFlowControl>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用`Dispose`在发布到<xref:System.Threading.AsyncFlowControl>。</xref:System.Threading.AsyncFlowControl>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Threading.AsyncFlowControl>对象的`Finalize`方法。</xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构未使用的线程上创建它。       -或- <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构具有用于调用 Dispose 或<xref:System.Threading.AsyncFlowControl.Undo*>。</xref:System.Threading.AsyncFlowControl.Undo*>"
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "确定指定的对象是否等于当前<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与当前结构进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>是<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构并且是否等于当前<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  id: Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "确定是否指定<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构是否等于当前<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构。"
  syntax:
    content: public bool Equals (System.Threading.AsyncFlowControl obj);
    parameters:
    - id: obj
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构要与当前结构进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>等同于当前<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Threading.AsyncFlowControl.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.GetHashCode
  id: GetHashCode
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "获取当前的哈希代码<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构。"
  overload: System.Threading.AsyncFlowControl.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "比较两个<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构，以确定它们是否相等。"
  syntax:
    content: public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构。"
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个结构相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Threading.AsyncFlowControl.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  id: op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "比较两个<xref href=&quot;System.Threading.AsyncFlowControl&quot;></xref>结构，以确定它们是否不相等。"
  syntax:
    content: public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);
    parameters:
    - id: a
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构。"
    - id: b
      type: System.Threading.AsyncFlowControl
      description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个结构不相等;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Threading.AsyncFlowControl.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Threading.AsyncFlowControl.Undo
  id: Undo
  parent: System.Threading.AsyncFlowControl
  langs:
  - csharp
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "还原执行上下文在线程之间的流。"
  remarks: "<xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>方法返回<xref:System.Threading.AsyncFlowControl>用于还原流的结构。</xref:System.Threading.AsyncFlowControl> </xref:System.Threading.ExecutionContext.SuppressFlow%2A?displayProperty=fullName>       Undo 方法必须仅能对调用<xref:System.Threading.AsyncFlowControl>返回由其关联的结构<xref:System.Threading.ExecutionContext.SuppressFlow%2A>方法。</xref:System.Threading.ExecutionContext.SuppressFlow%2A> </xref:System.Threading.AsyncFlowControl>"
  syntax:
    content: public void Undo ();
    parameters: []
  overload: System.Threading.AsyncFlowControl.Undo*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构未使用的线程上创建它。       -或- <xref href=&quot;System.Threading.AsyncFlowControl&quot;> </xref>结构具有用于调用<xref:System.Threading.AsyncFlowControl.Dispose*>或撤消。</xref:System.Threading.AsyncFlowControl.Dispose*>"
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Threading.AsyncFlowControl.Dispose
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose()
  nameWithType: AsyncFlowControl.Dispose()
  fullName: System.Threading.AsyncFlowControl.Dispose()
- uid: System.Threading.AsyncFlowControl.Equals(System.Object)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(Object)
  nameWithType: AsyncFlowControl.Equals(Object)
  fullName: System.Threading.AsyncFlowControl.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.AsyncFlowControl.Equals(System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals(AsyncFlowControl)
  nameWithType: AsyncFlowControl.Equals(AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.Equals(AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl
  parent: System.Threading
  isExternal: false
  name: AsyncFlowControl
  nameWithType: AsyncFlowControl
  fullName: System.Threading.AsyncFlowControl
- uid: System.Threading.AsyncFlowControl.GetHashCode
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode()
  nameWithType: AsyncFlowControl.GetHashCode()
  fullName: System.Threading.AsyncFlowControl.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.AsyncFlowControl.op_Equality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Equality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.op_Inequality(System.Threading.AsyncFlowControl,System.Threading.AsyncFlowControl)
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality(AsyncFlowControl,AsyncFlowControl)
  nameWithType: AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
  fullName: System.Threading.AsyncFlowControl.op_Inequality(AsyncFlowControl,AsyncFlowControl)
- uid: System.Threading.AsyncFlowControl.Undo
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo()
  nameWithType: AsyncFlowControl.Undo()
  fullName: System.Threading.AsyncFlowControl.Undo()
- uid: System.Threading.AsyncFlowControl.Dispose*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Dispose
  nameWithType: AsyncFlowControl.Dispose
- uid: System.Threading.AsyncFlowControl.Equals*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Equals
  nameWithType: AsyncFlowControl.Equals
- uid: System.Threading.AsyncFlowControl.GetHashCode*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: GetHashCode
  nameWithType: AsyncFlowControl.GetHashCode
- uid: System.Threading.AsyncFlowControl.op_Equality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Equality
  nameWithType: AsyncFlowControl.op_Equality
- uid: System.Threading.AsyncFlowControl.op_Inequality*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: op_Inequality
  nameWithType: AsyncFlowControl.op_Inequality
- uid: System.Threading.AsyncFlowControl.Undo*
  parent: System.Threading.AsyncFlowControl
  isExternal: false
  name: Undo
  nameWithType: AsyncFlowControl.Undo
