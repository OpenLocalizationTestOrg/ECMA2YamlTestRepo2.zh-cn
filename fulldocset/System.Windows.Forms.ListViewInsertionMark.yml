### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.ListViewInsertionMark
  id: ListViewInsertionMark
  children:
  - System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem
  - System.Windows.Forms.ListViewInsertionMark.Bounds
  - System.Windows.Forms.ListViewInsertionMark.Color
  - System.Windows.Forms.ListViewInsertionMark.Index
  - System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)
  langs:
  - csharp
  name: ListViewInsertionMark
  nameWithType: ListViewInsertionMark
  fullName: System.Windows.Forms.ListViewInsertionMark
  type: Class
  summary: "用于指示预期的放置位置时某一项拖动到新位置中, <xref href=&quot;System.Windows.Forms.ListView&quot;> </xref>控件。 此功能是仅适用于 Windows XP 及更高版本。"
  remarks: "你可以检索从 ListViewInsertionMark<xref:System.Windows.Forms.ListView.InsertionMark%2A>属性<xref:System.Windows.Forms.ListView>控件，并使用它以视觉方式指示拖放操作中的预期的放置位置时某一项拖动到新位置,。</xref:System.Windows.Forms.ListView> </xref:System.Windows.Forms.ListView.InsertionMark%2A>       此功能时才起作用<xref:System.Windows.Forms.ListView.AutoArrange%2A?displayProperty=fullName>属性设置为`true`以及何时<xref:System.Windows.Forms.ListView>控件不会自动对项。</xref:System.Windows.Forms.ListView> </xref:System.Windows.Forms.ListView.AutoArrange%2A?displayProperty=fullName> 若要防止自动排序<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=fullName>属性必须设置为<xref:System.Windows.Forms.SortOrder?displayProperty=fullName>和<xref:System.Windows.Forms.ListView.View%2A?displayProperty=fullName>属性必须设置为<xref:System.Windows.Forms.View?displayProperty=fullName>， <xref:System.Windows.Forms.View?displayProperty=fullName>，或<xref:System.Windows.Forms.View?displayProperty=fullName>。</xref:System.Windows.Forms.View?displayProperty=fullName> </xref:System.Windows.Forms.View?displayProperty=fullName> </xref:System.Windows.Forms.View?displayProperty=fullName> </xref:System.Windows.Forms.ListView.View%2A?displayProperty=fullName> </xref:System.Windows.Forms.SortOrder?displayProperty=fullName> </xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=fullName> 此外，不能插入标记功能与使用<xref:System.Windows.Forms.ListView>分组功能，因为通过组成员身份对项进行分组功能排列。</xref:System.Windows.Forms.ListView>       处理程序中通常使用 ListViewInsertionMark 类<xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=fullName>事件来更新插入标记的位置，如某一项拖动。</xref:System.Windows.Forms.Control.MouseMove?displayProperty=fullName> </xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> 处理程序中还使用它<xref:System.Windows.Forms.Control.DragDrop?displayProperty=fullName>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=fullName>事件以在正确的位置插入拖动的项。</xref:System.Windows.Forms.Control.MouseUp?displayProperty=fullName> </xref:System.Windows.Forms.Control.DragDrop?displayProperty=fullName>       若要更新插入标记的位置，请按照下列步骤︰ 1。  中的处理程序<xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName>或<xref:System.Windows.Forms.Control.MouseMove?displayProperty=fullName>事件，使用<xref:System.Windows.Forms.ListView.InsertionMark%2A?displayProperty=fullName>属性来访问与关联的 ListViewInsertionMark 对象<xref:System.Windows.Forms.ListView>控件。</xref:System.Windows.Forms.ListView> </xref:System.Windows.Forms.ListView.InsertionMark%2A?displayProperty=fullName> </xref:System.Windows.Forms.Control.MouseMove?displayProperty=fullName> </xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName>      2.  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索鼠标指针距离最近的项的索引。</xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>      3.  传递到的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=fullName>方法来检索项的边框。</xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=fullName>      4.  如果鼠标指针是否位于的边界的矩形的中点左侧，设置<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性`false`; 否则为将其设置为`true`。</xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>      5.  设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性检索到的索引值从<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法。</xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A> </xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> 指定的索引，请对左侧或右侧，具体取决于项的旁边，插入标记将显示<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性值。</xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> 如果某项拖动到其本身，索引为-1，并且插入标记为隐藏。       若要在正确的位置插入所拖动的项，请按照下列步骤︰ 1。  中的处理程序<xref:System.Windows.Forms.Control.DragDrop?displayProperty=fullName>或<xref:System.Windows.Forms.Control.MouseUp?displayProperty=fullName>事件，使用<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性以确定插入标记的当前位置。</xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> </xref:System.Windows.Forms.Control.MouseUp?displayProperty=fullName> </xref:System.Windows.Forms.Control.DragDrop?displayProperty=fullName> 将存储此值，以更高版本用作插入索引。      2.  如果<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`true`，递增存储的插入索引值。</xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>      3.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Insert%2A?displayProperty=fullName>方法插入到所拖动的项的复本<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName>集合中存储的插入索引处。</xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName> </xref:System.Windows.Forms.ListView.ListViewItemCollection.Insert%2A?displayProperty=fullName>      4.  使用<xref:System.Windows.Forms.ListView.ListViewItemCollection.Remove%2A?displayProperty=fullName>方法移除所拖动的项的原始副本。</xref:System.Windows.Forms.ListView.ListViewItemCollection.Remove%2A?displayProperty=fullName>       因此中的索引值中移除的原始副本之前，必须将插入所拖动的项的复本<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName>集合不会更改在进行插入之前。</xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName>       若要确保的项将显示在它们的索引值的顺序相同，必须设置<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A?displayProperty=fullName>属性的实现<xref:System.Collections.IComparer>按索引值对项进行排序的接口。</xref:System.Collections.IComparer> </xref:System.Windows.Forms.ListView.ListViewItemSorter%2A?displayProperty=fullName> 有关详细信息，请参阅示例部分。       你可以通过使用修改插入标记的颜色<xref:System.Windows.Forms.ListViewInsertionMark.Color%2A>属性。</xref:System.Windows.Forms.ListViewInsertionMark.Color%2A> 如果你需要的大小或插入标记的位置，你可以通过获取其边界的矩形<xref:System.Windows.Forms.ListViewInsertionMark.Bounds%2A>属性。</xref:System.Windows.Forms.ListViewInsertionMark.Bounds%2A>      1> [!NOTE] 1> 插入标记功能则仅在 Windows XP 和 Windows Server 2003 系列上可用的当你的应用程序调用<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName>方法。</xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=fullName> 在早期的操作系统上将忽略与插入标记相关的任何代码，并且插入标记将不会出现。 因此，取决于插入标记功能的任何代码可能无法正常工作。 你可能想要包括的测试，确定是否可用，插入标记功能和不可用时提供备用的功能。 例如，你可能想要绕过实现拖放项重新定位时不支持插入标记的操作系统上运行的所有代码。   >> 由同一个库提供操作系统主题功能提供插入标记功能。 若要检查此库的可用性，请调用<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName>方法重载并传入<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName>值。</xref:System.Windows.Forms.OSFeature.Themes?displayProperty=fullName> </xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView> insertion mark feature and implements drag-and-drop item reordering using the standard drag events. The position of the insertion mark is updated in a handler for the <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> event. In this handler, the position of the mouse pointer is compared to the midpoint of the nearest item, and the result is used to determine whether the insertion mark appears to the left or the right of the item.  \n  \n [!code-cs[System.Windows.Forms.ListView.InsertionMark#1](~/add/codesnippet/csharp/t-system.windows.forms.l_14_1.cs)]\n [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/add/codesnippet/visualbasic/t-system.windows.forms.l_14_1.vb)]\n [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/add/codesnippet/cpp/t-system.windows.forms.l_14_1.cpp)]"
  syntax:
    content: public sealed class ListViewInsertionMark
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem
  id: AppearsAfterItem
  parent: System.Windows.Forms.ListViewInsertionMark
  langs:
  - csharp
  name: AppearsAfterItem
  nameWithType: ListViewInsertionMark.AppearsAfterItem
  fullName: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置一个值，该值指示是否插入标记与由指定的索引项右侧显示<xref:System.Windows.Forms.ListViewInsertionMark.Index*>属性。</xref:System.Windows.Forms.ListViewInsertionMark.Index*>"
  remarks: "<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法使你可以找到项最接近鼠标指针，但必须执行自己的计算来确定是否应显示插入标记，此选项之前或之后。</xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>       若要计算 AppearsAfterItem 属性所需的值，请按照下列步骤︰ 1。  使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索鼠标指针距离最近的项的索引。</xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>      2.  传递到的索引值<xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=fullName>方法来检索项的边框。</xref:System.Windows.Forms.ListView.GetItemRect%2A?displayProperty=fullName>      3.  如果鼠标指针是否位于的边界的矩形的中点左侧，AppearsAfterItem 属性设置为`false`; 否则为将其设置为`true`。       有关详细信息，请参阅<xref:System.Windows.Forms.ListViewInsertionMark>概述参考主题。</xref:System.Windows.Forms.ListViewInsertionMark>"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView> insertion mark feature and implements drag-and-drop item reordering using the standard drag events. The position of the insertion mark is updated in a handler for the <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> event. In this handler, the position of the mouse pointer is compared to the midpoint of the nearest item, and the result is used to determine whether the insertion mark appears to the left or the right of the item.  \n  \n For the complete example, see the <xref:System.Windows.Forms.ListViewInsertionMark> overview reference topic.  \n  \n [!code-cs[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/csharp/p-system.windows.forms.l_57_1.cs)]\n [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/visualbasic/p-system.windows.forms.l_57_1.vb)]\n [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/cpp/p-system.windows.forms.l_57_1.cpp)]"
  syntax:
    content: public bool AppearsAfterItem { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果与由指定的索引，插入标记将显示项右侧<xref:System.Windows.Forms.ListViewInsertionMark.Index*>属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Forms.ListViewInsertionMark.Index*> 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.ListViewInsertionMark.Bounds
  id: Bounds
  parent: System.Windows.Forms.ListViewInsertionMark
  langs:
  - csharp
  name: Bounds
  nameWithType: ListViewInsertionMark.Bounds
  fullName: System.Windows.Forms.ListViewInsertionMark.Bounds
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取插入标记的边框。"
  remarks: "中插入标记边框的坐标是相对于窗口左上角<xref:System.Windows.Forms.ListView>控件。</xref:System.Windows.Forms.ListView>"
  syntax:
    content: public System.Drawing.Rectangle Bounds { get; }
    return:
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref>表示的位置和大小的插入标记。"
  overload: System.Windows.Forms.ListViewInsertionMark.Bounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.ListViewInsertionMark.Color
  id: Color
  parent: System.Windows.Forms.ListViewInsertionMark
  langs:
  - csharp
  name: Color
  nameWithType: ListViewInsertionMark.Color
  fullName: System.Windows.Forms.ListViewInsertionMark.Color
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置插入标记的颜色。"
  remarks: "使用此属性将插入标记颜色设置以外的前景色的值为<xref:System.Windows.Forms.ListView>控件。</xref:System.Windows.Forms.ListView>"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView> insertion mark feature and implements drag-and-drop item reordering using the standard drag events. The position of the insertion mark is updated in a handler for the <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> event. In this handler, the position of the mouse pointer is compared to the midpoint of the nearest item, and the result is used to determine whether the insertion mark appears to the left or the right of the item.  \n  \n For the complete example, see the <xref:System.Windows.Forms.ListViewInsertionMark> overview reference topic.  \n  \n [!code-cs[System.Windows.Forms.ListView.InsertionMark#2](~/add/codesnippet/csharp/p-system.windows.forms.l_71_1.cs)]\n [!code-vb[System.Windows.Forms.ListView.InsertionMark#2](~/add/codesnippet/visualbasic/p-system.windows.forms.l_71_1.vb)]\n [!code-cpp[System.Windows.Forms.ListView.InsertionMark#2](~/add/codesnippet/cpp/p-system.windows.forms.l_71_1.cpp)]"
  syntax:
    content: public System.Drawing.Color Color { get; set; }
    return:
      type: System.Drawing.Color
      description: "A <xref href=&quot;System.Drawing.Color&quot;> </xref>值，该值表示插入标记的颜色。 默认值为的值&lt;xref:System.Windows.Forms.ListView.ForeColor%2A?displayProperty=fullName&gt;属性。"
  overload: System.Windows.Forms.ListViewInsertionMark.Color*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.ListViewInsertionMark.Index
  id: Index
  parent: System.Windows.Forms.ListViewInsertionMark
  langs:
  - csharp
  name: Index
  nameWithType: ListViewInsertionMark.Index
  fullName: System.Windows.Forms.ListViewInsertionMark.Index
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置的项的旁边插入标记时出现的索引。"
  remarks: "如果，插入标记将显示具有指定索引的项的左侧<xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A>属性设置为`false`; 否则为它显示项的右侧。</xref:System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem%2A> 插入标记将自动消失拖动的项插入到<xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName>集合。</xref:System.Windows.Forms.ListView.Items%2A?displayProperty=fullName> 插入标记手动删除，例如，拖动到自身或拖出控件项时，设置为-1 的索引值。       使用<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>方法来检索与指定的位置，例如鼠标指针拖放操作中定位某个项时的位置最接近的项的索引。</xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A>"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView> insertion mark feature and implements drag-and-drop item reordering using the standard drag events. The position of the insertion mark is updated in a handler for the <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> event. In this handler, the position of the mouse pointer is compared to the midpoint of the nearest item, and the result is used to determine whether the insertion mark appears to the left or the right of the item.  \n  \n For the complete example, see the <xref:System.Windows.Forms.ListViewInsertionMark> overview reference topic.  \n  \n [!code-cs[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/csharp/p-system.windows.forms.l_67_1.cs)]\n [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/visualbasic/p-system.windows.forms.l_67_1.vb)]\n [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/cpp/p-system.windows.forms.l_67_1.cpp)]"
  syntax:
    content: public int Index { get; set; }
    return:
      type: System.Int32
      description: "下一步项的索引插入标记显示或隐藏插入标记时为-1。"
  overload: System.Windows.Forms.ListViewInsertionMark.Index*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)
  id: NearestIndex(System.Drawing.Point)
  parent: System.Windows.Forms.ListViewInsertionMark
  langs:
  - csharp
  name: NearestIndex(Point)
  nameWithType: ListViewInsertionMark.NearestIndex(Point)
  fullName: System.Windows.Forms.ListViewInsertionMark.NearestIndex(Point)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "检索与指定的点最接近的项的索引。"
  remarks: "此方法可让你执行拖放操作时找到鼠标指针距离最近的项。 使用索引值返回设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性。</xref:System.Windows.Forms.ListViewInsertionMark.Index%2A> 鼠标指针距离最近的项时要拖动的项，则此方法的返回值为-1。 在这种情况下，设置<xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>属性为此值将会隐藏插入标记。</xref:System.Windows.Forms.ListViewInsertionMark.Index%2A>       此方法找到最近的项而不考虑鼠标指针的位置，同时<xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=fullName>方法返回的项位于指定位置，或`null`如果在该位置没有项。</xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=fullName> <xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=fullName>方法返回`null`，例如，当鼠标指针是否位于两个项目间。</xref:System.Windows.Forms.ListView.GetItemAt%2A?displayProperty=fullName> 为此，你始终应使用 NearestIndex 方法时使用拖放操作来定位项。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.ListView> insertion mark feature and implements drag-and-drop item reordering using the standard drag events. The position of the insertion mark is updated in a handler for the <xref:System.Windows.Forms.Control.DragOver?displayProperty=fullName> event. In this handler, the position of the mouse pointer is compared to the midpoint of the nearest item, and the result is used to determine whether the insertion mark appears to the left or the right of the item.  \n  \n For the complete example, see the <xref:System.Windows.Forms.ListViewInsertionMark> overview reference topic.  \n  \n [!code-cs[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/csharp/m-system.windows.forms.l_23_1.cs)]\n [!code-vb[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/visualbasic/m-system.windows.forms.l_23_1.vb)]\n [!code-cpp[System.Windows.Forms.ListView.InsertionMark#3](~/add/codesnippet/cpp/m-system.windows.forms.l_23_1.cpp)]"
  syntax:
    content: public int NearestIndex (System.Drawing.Point pt);
    parameters:
    - id: pt
      type: System.Drawing.Point
      description: "A <xref href=&quot;System.Drawing.Point&quot;> </xref>表示从中查找最近的项的位置。"
    return:
      type: System.Int32
      description: "指定的点或最近的项是当前拖动的项时为-1 到距离最近的项的索引。"
  overload: System.Windows.Forms.ListViewInsertionMark.NearestIndex*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: AppearsAfterItem
  nameWithType: ListViewInsertionMark.AppearsAfterItem
  fullName: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.ListViewInsertionMark.Bounds
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Bounds
  nameWithType: ListViewInsertionMark.Bounds
  fullName: System.Windows.Forms.ListViewInsertionMark.Bounds
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.ListViewInsertionMark.Color
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Color
  nameWithType: ListViewInsertionMark.Color
  fullName: System.Windows.Forms.ListViewInsertionMark.Color
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Windows.Forms.ListViewInsertionMark.Index
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Index
  nameWithType: ListViewInsertionMark.Index
  fullName: System.Windows.Forms.ListViewInsertionMark.Index
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.ListViewInsertionMark.NearestIndex(System.Drawing.Point)
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: NearestIndex(Point)
  nameWithType: ListViewInsertionMark.NearestIndex(Point)
  fullName: System.Windows.Forms.ListViewInsertionMark.NearestIndex(Point)
- uid: System.Drawing.Point
  parent: System.Drawing
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Drawing.Point
- uid: System.Windows.Forms.ListViewInsertionMark.AppearsAfterItem*
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: AppearsAfterItem
  nameWithType: ListViewInsertionMark.AppearsAfterItem
- uid: System.Windows.Forms.ListViewInsertionMark.Bounds*
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Bounds
  nameWithType: ListViewInsertionMark.Bounds
- uid: System.Windows.Forms.ListViewInsertionMark.Color*
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Color
  nameWithType: ListViewInsertionMark.Color
- uid: System.Windows.Forms.ListViewInsertionMark.Index*
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: Index
  nameWithType: ListViewInsertionMark.Index
- uid: System.Windows.Forms.ListViewInsertionMark.NearestIndex*
  parent: System.Windows.Forms.ListViewInsertionMark
  isExternal: false
  name: NearestIndex
  nameWithType: ListViewInsertionMark.NearestIndex
