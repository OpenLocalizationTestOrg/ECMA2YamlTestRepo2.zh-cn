### YamlMime:ManagedReference
items:
- uid: System.Configuration.LocalFileSettingsProvider
  id: LocalFileSettingsProvider
  children:
  - System.Configuration.LocalFileSettingsProvider.#ctor
  - System.Configuration.LocalFileSettingsProvider.ApplicationName
  - System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  - System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  - System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  - System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  langs:
  - csharp
  name: LocalFileSettingsProvider
  nameWithType: LocalFileSettingsProvider
  fullName: System.Configuration.LocalFileSettingsProvider
  type: Class
  summary: "提供对应用程序设置类暂留。"
  remarks: "设置提供程序定义用于存储在应用程序设置体系结构中使用的配置数据的机制。 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]包含一个默认设置提供程序，LocalFileSettingsProvider，它存储到本地文件系统的配置数据。 应用程序设置属性组关联到特定的设置提供程序通过<xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute>使用       通常情况下，客户端程序不会显式访问此类;相反，应用程序设置体系结构会自动调用适当的设置提供程序需要其服务时。 例如，有许多的成员<xref:System.Configuration.ApplicationSettingsBase>将其工作委托给关联的设置提供程序。</xref:System.Configuration.ApplicationSettingsBase>       LocalFileSettingsProvider 将设置保存到配置文件具有扩展名`.config`。 配置文件的内容组织为 XML 文档。 具体取决于是否设置在应用程序级别或用户级别设置了范围，配置数据存储中的元素作为`<applicationSettings>`或`<userSettings>`节组，分别。 每个部分组都由相应<xref:System.Configuration.AppSettingsSection>或<xref:System.Configuration.ClientSettingsSection>分别。</xref:System.Configuration.ClientSettingsSection> </xref:System.Configuration.AppSettingsSection> 每个部分对象拥有和管理通过一个配置节处理程序，它是一个对象类型<xref:System.Configuration.IConfigurationSectionHandler>.</xref:System.Configuration.IConfigurationSectionHandler>       应用程序范围的设置和默认用户范围设置存储在名为的文件`application.exe.config`，这在可执行文件所在的同一目录中创建。 应用程序配置设置是只读的。 特定用户数据存储在名为的文件`user.config`、 存储在用户的主目录下。 如果启用漫游配置文件，则可能存在的用户配置文件的两个版本。 在这种情况下，漫游的版本中的条目优先于本地用户配置文件中的重复项。       有关应用程序设置的详细信息，请参阅[应用程序设置 Windows 窗体](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: 'public class LocalFileSettingsProvider : System.Configuration.SettingsProvider, System.Configuration.IApplicationSettingsProvider'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  - System.Configuration.SettingsProvider
  implements:
  - System.Configuration.IApplicationSettingsProvider
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: LocalFileSettingsProvider()
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider()
  fullName: System.Configuration.LocalFileSettingsProvider.LocalFileSettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "初始化的新实例<xref href=&quot;System.Configuration.LocalFileSettingsProvider&quot;></xref>类。"
  remarks: "默认构造函数设置<xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A>到<xref:System.String.Empty>。</xref:System.String.Empty>属性</xref:System.Configuration.LocalFileSettingsProvider.ApplicationName%2A>"
  syntax:
    content: public LocalFileSettingsProvider ();
    parameters: []
  overload: System.Configuration.LocalFileSettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
  fullName: System.Configuration.LocalFileSettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置当前正在运行的应用程序的名称。"
  remarks: "应用程序名称和<xref:System.Configuration.Provider.ProviderBase.Name%2A>属性帮助消除在不同的应用程序中命名的设置属性同样的歧义。</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "包含应用程序的显示名称的字符串。"
  overload: System.Configuration.LocalFileSettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  id: GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: GetPreviousVersion(SettingsContext,SettingsProperty)
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "返回同一个应用程序的以前版本的命名的设置属性的值。"
  remarks: "GetPreviousVersion 方法通常与结合使用<xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>方法在应用程序的新版本的安装过程中迁移应用程序设置时。</xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A> 有关详细信息，请参阅<xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>方法。</xref:System.Configuration.LocalFileSettingsProvider.Upgrade%2A>"
  syntax:
    content: public System.Configuration.SettingsPropertyValue GetPreviousVersion (System.Configuration.SettingsContext context, System.Configuration.SettingsProperty property);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref> ，介绍使用应用程序设置属性的位置。"
    - id: property
      type: System.Configuration.SettingsProperty
      description: "<xref href=&quot;System.Configuration.SettingsProperty&quot;> </xref>其值是要返回。"
    return:
      type: System.Configuration.SettingsPropertyValue
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValue&quot;> </xref>表示应用程序设置，如果找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "返回指定的应用程序实例和设置属性组设置属性值的集合。"
  remarks: "GetPropertyValues 方法还管理特殊应用程序设置类型<xref:System.Configuration.SpecialSetting>.</xref:System.Configuration.SpecialSetting> 连接字符串存储在配置文件元素分隔的一个特殊的段`<connectionstrings>`。      1> [!CAUTION]&1;><xref:System.Configuration.LocalFileSettingsProvider>不使用加密来保存任何设置。</xref:System.Configuration.LocalFileSettingsProvider> 因此，不要存储纯文本密码或其他不采取其他预防措施，例如单独加密配置文件中的信息的情况下使用此提供程序的敏感信息。 有关详细信息，请参阅[加密配置信息使用受保护的配置](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前应用程序使用情况。"
    - id: properties
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref>包含其值是要检索的设置属性组。"
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>包含指定的设置属性组的值。"
  overload: System.Configuration.LocalFileSettingsProvider.GetPropertyValues*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。"
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "初始化提供程序。"
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection values);
    parameters:
    - id: name
      type: System.String
      description: "提供程序的友好名称。"
    - id: values
      type: System.Collections.Specialized.NameValueCollection
      description: "表示此提供程序的配置中指定的提供程序特定属性的名称/值对的集合。"
  overload: System.Configuration.LocalFileSettingsProvider.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  id: Reset(System.Configuration.SettingsContext)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Reset(SettingsContext)
  nameWithType: LocalFileSettingsProvider.Reset(SettingsContext)
  fullName: System.Configuration.LocalFileSettingsProvider.Reset(SettingsContext)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "重置为其默认值指定的应用程序与关联的所有应用程序设置属性。"
  remarks: "重置方法还原指定的应用程序设置组的存储的值。 重置的操作取决于应用程序设置属性的作用域:-应用程序范围的设置不会受到影响。      -用户范围的设置将重置为默认值为只读的条目，在应用程序配置文件中，存储`application.exe.config`。 如果正在使用漫游配置文件，漫游配置文件中的任何应用程序设置值优先于在本地配置文件中找到重复项。       请注意，是否使用漫游配置文件，可以有两个`user.config`文件，一个用于本地设置，一个漫游配置文件。"
  syntax:
    content: public void Reset (System.Configuration.SettingsContext context);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前应用程序使用情况。"
  overload: System.Configuration.LocalFileSettingsProvider.Reset*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。"
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "设置指定组的属性设置的值。"
  remarks: "设置包装类，派生自<xref:System.Configuration.ApplicationSettingsBase>，包含<xref:System.Configuration.ApplicationSettingsBase.Save%2A>方法，调用以保留所有其设置属性的值。</xref:System.Configuration.ApplicationSettingsBase.Save%2A> </xref:System.Configuration.ApplicationSettingsBase> 此方法枚举通过所有设置提供程序调用其设置属性，与关联<xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>方法为每个<xref:System.Configuration.SettingsProvider>执行实际的序列化操作。</xref:System.Configuration.SettingsProvider> </xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>       SetPropertyValues 单独序列化到其相应的应用程序，在相应设置每个用户范围的应用程序设置属性`user.config`配置文件。       默认情况下，SetPropertyValues 方法将使用以下逻辑顺序对以确定序列化方案，具体取决于设置属性类型︰ 1。  如果该类型具有一个关联<xref:System.ComponentModel.TypeConverter>与<xref:System.ComponentModel.TypeConverter.ConvertToString%2A>使用方法实现，此转换。</xref:System.ComponentModel.TypeConverter.ConvertToString%2A> </xref:System.ComponentModel.TypeConverter>      2.  使用 XML 序列化。       但是，你可以通过使用<xref:System.Configuration.SettingsSerializeAsAttribute>。</xref:System.Configuration.SettingsSerializeAsAttribute>指定首选的序列化机制 <xref:System.Configuration.LocalFileSettingsProvider>不支持中的二进制序列化[!INCLUDE[vsprvslong](~/add/includes/ajax-current-ext-md.md)]。</xref:System.Configuration.LocalFileSettingsProvider>       如果用户范围的设置属性重新设置为其默认值显式，则本地文件设置提供程序将从用户配置文件中删除关联的设置的项。 对此属性的下一步读取访问权限只需将使用默认值。      1> [!CAUTION]&1;><xref:System.Configuration.LocalFileSettingsProvider>不使用加密来保存任何设置。</xref:System.Configuration.LocalFileSettingsProvider> 因此，不要存储纯文本密码或其他不采取其他预防措施，例如单独加密配置文件中的信息的情况下使用此提供程序的敏感信息。 有关详细信息，请参阅[加密配置信息使用受保护的配置](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection values);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前应用程序使用情况。"
    - id: values
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>表示要设置的属性设置的组。"
  overload: System.Configuration.LocalFileSettingsProvider.SetPropertyValues*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。       -或者-出现常规故障将设置保存到配置文件。"
  platform:
  - net462
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  langs:
  - csharp
  name: Upgrade(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "尝试从同一个应用程序的早期版本迁移以前用户范围的设置。"
  remarks: "<xref:System.Configuration.LocalFileSettingsProvider>迁移中单独的操作的本地和漫游设置。</xref:System.Configuration.LocalFileSettingsProvider>       升级方法则会取消对已<xref:System.Configuration.NoSettingsVersionUpgradeAttribute>应用到它，或整个设置包装类，派生自<xref:System.Configuration.ApplicationSettingsBase>.</xref:System.Configuration.ApplicationSettingsBase>的</xref:System.Configuration.NoSettingsVersionUpgradeAttribute>每个应用程序设置       调用此方法通过这种方式取决于正在升级的应用程序的类型:-每个版本的[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]应用程序存储在其自己的独立的安装目录。 新版本后[!INCLUDE[ndptecclick](~/add/includes/ndptecclick-md.md)]应用程序已安装，并且当首次运行新版本，内部逻辑将自动调用以将所有常见的应用程序设置迁移到新版本的升级。 有关详细信息，请参阅[ClickOnce 和应用程序设置](~/add/includes/ajax-current-ext-md.md)。      -标准 Windows 窗体和控制台应用程序必须手动调用升级，因为没有任何常规的自动化的方法来确定此类应用程序首次运行时。 执行此操作通过安装程序或从应用程序本身，并使用保存的属性，使用两种常见方式通常命名为类似`IsFirstRun`。       请注意，若要迁移应用程序设置的较新版本，它必须能也加载和读取应用程序设置的较旧版本。 因此，它必须包含与应用程序的新的和以前版本兼容的包装类。"
  syntax:
    content: public void Upgrade (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection properties);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前应用程序使用情况。"
    - id: properties
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref>包含其值是要检索的设置属性组。"
  overload: System.Configuration.LocalFileSettingsProvider.Upgrade*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。       -或者-无法访问配置文件的以前版本。"
  platform:
  - net462
references:
- uid: System.Configuration.SettingsProvider
  isExternal: false
  name: System.Configuration.SettingsProvider
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Configuration.LocalFileSettingsProvider.#ctor
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: LocalFileSettingsProvider()
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider()
  fullName: System.Configuration.LocalFileSettingsProvider.LocalFileSettingsProvider()
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
  fullName: System.Configuration.LocalFileSettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPreviousVersion(SettingsContext,SettingsProperty)
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(SettingsContext,SettingsProperty)
- uid: System.Configuration.SettingsPropertyValue
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValue
  nameWithType: SettingsPropertyValue
  fullName: System.Configuration.SettingsPropertyValue
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsProperty
  parent: System.Configuration
  isExternal: false
  name: SettingsProperty
  nameWithType: SettingsProperty
  fullName: System.Configuration.SettingsProperty
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: LocalFileSettingsProvider.Initialize(String,NameValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Reset(SettingsContext)
  nameWithType: LocalFileSettingsProvider.Reset(SettingsContext)
  fullName: System.Configuration.LocalFileSettingsProvider.Reset(SettingsContext)
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Upgrade(SettingsContext,SettingsPropertyCollection)
  nameWithType: LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.LocalFileSettingsProvider.Upgrade(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.LocalFileSettingsProvider.#ctor*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: LocalFileSettingsProvider
  nameWithType: LocalFileSettingsProvider.LocalFileSettingsProvider
- uid: System.Configuration.LocalFileSettingsProvider.ApplicationName*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: LocalFileSettingsProvider.ApplicationName
- uid: System.Configuration.LocalFileSettingsProvider.GetPreviousVersion*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPreviousVersion
  nameWithType: LocalFileSettingsProvider.GetPreviousVersion
- uid: System.Configuration.LocalFileSettingsProvider.GetPropertyValues*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: LocalFileSettingsProvider.GetPropertyValues
- uid: System.Configuration.LocalFileSettingsProvider.Initialize*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Initialize
  nameWithType: LocalFileSettingsProvider.Initialize
- uid: System.Configuration.LocalFileSettingsProvider.Reset*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Reset
  nameWithType: LocalFileSettingsProvider.Reset
- uid: System.Configuration.LocalFileSettingsProvider.SetPropertyValues*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: LocalFileSettingsProvider.SetPropertyValues
- uid: System.Configuration.LocalFileSettingsProvider.Upgrade*
  parent: System.Configuration.LocalFileSettingsProvider
  isExternal: false
  name: Upgrade
  nameWithType: LocalFileSettingsProvider.Upgrade
