### YamlMime:ManagedReference
items:
- uid: System.Globalization.JapaneseCalendar
  id: JapaneseCalendar
  children:
  - System.Globalization.JapaneseCalendar.#ctor
  - System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.JapaneseCalendar.AlgorithmType
  - System.Globalization.JapaneseCalendar.Eras
  - System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  - System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  - System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  - System.Globalization.JapaneseCalendar.MinSupportedDateTime
  - System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.JapaneseCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: JapaneseCalendar
  nameWithType: JapaneseCalendar
  fullName: System.Globalization.JapaneseCalendar
  type: Class
  summary: "表示日本历。"
  remarks: "日语日历，这是也称为 Wareki 日历，工作方式与公历，完全相同，只的年份和纪元不相同。      1> [!NOTE]&1;> 在.NET Framework 中使用 JapaneseCalendar 类和其他日历类的信息，请参阅[使用日历](~/add/includes/ajax-current-ext-md.md)。       日语日历识别为每个皇帝 reign 一个纪元。 当前纪元是平成纪元，始于公历 1989 年。 纪元名称通常会显示在年的前面。 例如，公历 2001 年为日语日历年平成 13。 请注意，第一年的纪元称为&quot;元年。&quot; 因此，公历 1989 年的日语日历平成元年。       此类将分配数字向纪元，如下所示: |GetEra 值 |纪元名称 |纪元缩写 |公历日期 |  |------------------|--------------|----------------------|---------------------|  | 4 | 平成 （平成） | 平 (H，h) |年 1 月 8，1989 呈现 |  | 3 | 昭和 (Showa) | 昭 （S、 s） |1926 年 12 月 25，1989 年 1 月 7 日到 |  | 2 | 大正 (Taisho) | 大 （T、 t） |1912 年 7 月 30 日到 1926 年 12 月 24，|  | 1 | 明治 （明治） | 明 （M、 m） |1868 年 9 月 8 日至 1912 年 7 月 29 日 |      此类处理从 9 月 8 （在公历日历，1868 年 9 月 8 日） 的年份明治 1 中的日期。 尽管日本历切换从阴历太阳能日历年明治 6 (1873 的公历) 中，此实现基于太阳能日历。       闰年日语日历中对应于为公历日历中的相同闰年。 闰年公历日历中定义为公历年份整除的由 4 个，但如果它是由 100 可除外。 但是，可被被 400 的公历年是闰年。 平 365 年天并且初始屏幕闰年有 366 天。       日本历有 28 到 31 天的 12 个月: |GetMonth 值 |月 |英语 |天数在平年 |闰年中的天 |  |--------------------|-----------|-------------|--------------------------|------------------------|  | 1 | 1月 (Ichigatsu) |年 1 月 | 31 | 31 |  | 2 | 2月 (Nigatsu) |年 2 月 | 28 | 29 |  | 3 | 3月 (Sangatsu) |年 3 月 | 31 | 31 |  | 4 | 4月 (Shigatsu) |年 4 月 | 30 | 30 |  | 5 | 5月 (Gogatsu) |可能 | 31 | 31 |  | 6 | 6月 (Rokugatsu) |年 6 月 | 30 | 30 |  | 7 | 7月 (Shichigatsu) |年 7 月 | 31 | 31 |  | 8 |8月 (Hachigatsu) |年 8 月 | 31 | 31 |  | 9 | 9月 (Kugatsu) |年 9 月 | 30 | 30 |  | 10 | 10月 (Juugatsu) |年 10 月 | 31 | 31 |  | 11 | 11月 (Juuichigatsu) |年 11 月 | 30 | 30 |  | 12 | 12月 (Juunigatsu) |年 12 月 | 31 | 31 |      Nigatsu，相当于年 2 月的公历月份，具有在闰年 29 天和 28 在平年。       日期到公元 2001 年 1 月 1 日 在公历日历中相当 Ichigatsu 日语日历中每年平成 13 中的第一天。       如果应用程序使用 JapaneseCalendar 类，<xref:System.DateTime.Parse%2A?displayProperty=fullName>识别年份前面的纪元缩写。</xref:System.DateTime.Parse%2A?displayProperty=fullName> 缩写是单字符不区分大小写拉丁字母缩写或单字符日文汉字缩写。       每个<xref:System.Globalization.CultureInfo>对象支持一组的日历。</xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.Calendar%2A>属性返回区域性的默认日历和<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>属性返回一个包含所有支持的区域性的日历数组。</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> 若要更改使用的<xref:System.Globalization.CultureInfo>，应用程序应设置此<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>为新的<xref:System.Globalization.Calendar>。</xref:System.Globalization.Calendar></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName></xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.Globalization.CultureInfo>的日历"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class JapaneseCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: JapaneseCalendar()
  nameWithType: JapaneseCalendar.JapaneseCalendar()
  fullName: System.Globalization.JapaneseCalendar.JapaneseCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新实例<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类。"
  syntax:
    content: public JapaneseCalendar ();
    parameters: []
  overload: System.Globalization.JapaneseCalendar.#ctor*
  exceptions:
  - type: System.TypeInitializationException
    commentId: T:System.TypeInitializationException
    description: "无法初始化<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>由于缺少区域性信息的对象。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: JapaneseCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JapaneseCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个<xref:System.DateTime>，它是指定的指定<xref:System.DateTime>。</xref:System.DateTime>离开的月数</xref:System.DateTime>"
  remarks: "日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 它将更改为在生成每年的生成的每月最后一个有效的一天。 <xref:System.DateTime>如果外部的指定<xref:System.DateTime>。</xref:System.DateTime>年，则结果月份影响</xref:System.DateTime>生成的年份部分 <xref:System.DateTime>如果结果年份是外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元影响</xref:System.DateTime>生成的纪元数值部分 时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       例如，如果指定的月份是 Juugatsu （年 10 月），有 31 天，则指定的日期是该月第 31 天和`months`为 6，则结果年份是一个超过指定的年份，结果月份是 Shigatsu （年 4 月） 和结果的日期是 30 日，即 Shigatsu （年 4 月） 的最后一天。       如果`months`为负，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.j_17_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.j_17_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_17_2.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_17_2.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_17_2.vb)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>向其添加月数。</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "要添加的月份数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>添加指定的月数到指定<xref:System.DateTime>。</xref:System.DateTime>而产生</xref:System.DateTime>"
  overload: System.Globalization.JapaneseCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "生成<xref:System.DateTime>超出支持的范围。</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>小于-120000。       -或-<code>months</code>大于 120000。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: JapaneseCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JapaneseCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个<xref:System.DateTime>，它是指定的指定<xref:System.DateTime>。</xref:System.DateTime>离开的年数</xref:System.DateTime>"
  remarks: "日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 它将更改为在生成每年的生成的每月最后一个有效的一天。 月部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime> <xref:System.DateTime>如果结果年份是外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元影响</xref:System.DateTime>生成的纪元数值部分 时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       例如，Nigatsu （年 2 月） 具有 28 天除外，在闰年时它有 29 天。 如果指定的日期是闰年和的值的 Nigatsu （年 2 月） 29 日`years`为 1，则得到的日期将在下一年的 28 天的 Nigatsu （年 2 月）。       如果`years`为负，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.j_14_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.j_14_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_14_2.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_14_2.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_14_2.vb)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>向其添加年。</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "若要添加的年份数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>添加指定的到指定<xref:System.DateTime>。</xref:System.DateTime>的年数而产生</xref:System.DateTime>"
  overload: System.Globalization.JapaneseCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "生成<xref:System.DateTime>超出支持的范围。</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>超出了支持的范围<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类型。       -或-<code>years</code>小于-10000 或大于 10000。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: JapaneseCalendar.AlgorithmType
  fullName: System.Globalization.JapaneseCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。"
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.j_5_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.j_5_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "始终返回<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>。"
  overload: System.Globalization.JapaneseCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.Eras
  id: Eras
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: JapaneseCalendar.Eras
  fullName: System.Globalization.JapaneseCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取中的纪元列表<xref href=&quot;System.Globalization.JapaneseCalendar&quot;> </xref>。"
  remarks: "日语日历识别为每个皇帝 reign 一个纪元。 当前纪元是平成纪元，始于公历 1989 年。 纪元名称通常会显示在年的前面。 例如，公历 2001 年为日语日历年平成 13。 请注意，第一年的纪元称为&quot;元年。&quot; 因此，公历 1989 年的日语日历平成元年。       此类将分配数字向纪元，如下所示: |GetEra 值 |纪元名称 |纪元缩写 |公历日期 |  |------------------|--------------|----------------------|---------------------|  | 4 | 平成 （平成） | 平 (H，h) |年 1 月 8，1989 呈现 |  | 3 | 昭和 (Showa) | 昭 （S、 s） |1926 年 12 月 25，1989 年 1 月 7 日到 |  | 2 | 大正 (Taisho) | 大 （T、 t） |1912 年 7 月 30 日到 1926 年 12 月 24，|  | 1 | 明治 （明治） | 明 （M、 m） |1868 年 9 月 8 日至 1912 年 7 月 29 日 |      此类处理从 9 月月 8 日的年份明治 1 (年 1 月 1，1868 公历) 中的日期。 尽管日本历切换从阴历太阳能日历年明治 6 (1873 的公历) 中，此实现基于太阳能日历。      1> [!NOTE]&1;> 应在将来添加其他纪元，应用程序可能会遇到多个预期为日语日历的四个纪元。 应用程序应进行测试，以确保它们持续这种情况下; 中的工作请参阅[纪元处理为日语日历](http://go.microsoft.com/fwlink/p/?LinkId=239618)。"
  example:
  - "The following example displays the values contained in the Eras property.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/csharp/p-system.globalization.j_4_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/visualbasic/p-system.globalization.j_4_1.vb)]\n [!code-cpp[System.Globalization.JapaneseCalendar.Eras#1](~/add/codesnippet/cpp/p-system.globalization.j_4_1.cpp)]"
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "表示中的纪元的整数的数组<xref href=&quot;System.Globalization.JapaneseCalendar&quot;> </xref>。"
  overload: System.Globalization.JapaneseCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定<xref:System.DateTime>.</xref:System.DateTime>中的每月天数"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_13_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_13_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_13_1.vb)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个从 1 到 31 之间的整数，表示在指定<xref:System.DateTime>。</xref:System.DateTime>每月的某"
  overload: System.Globalization.JapaneseCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>星期几"
  remarks: "<xref:System.DayOfWeek>值如下: |DayOfWeek 值 | 指示 |  |---------------------|---------------------|  |星期日 | 日曜日 (Nichiyoubi) |  |星期一 | 月曜日 (Getsuyoubi) |  |星期二 | 火曜日 (Kayoubi) |  |星期三 | 水曜日 (Suiyoubi) |  |星期四 | 木曜日 (Mokuyoubi) |  |星期五 | 金曜日 (Kinyoubi) |  |星期六 | 土曜日 (Doyoubi) |</xref:System.DayOfWeek>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_9_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_9_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_9_1.vb)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "一个<xref:System.DayOfWeek>值，它表示日期中的指定<xref:System.DateTime>。</xref:System.DateTime>星期几</xref:System.DayOfWeek>"
  overload: System.Globalization.JapaneseCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>年的某一天"
  remarks: "每年的日期被指从该年度的第一天的天数。 例如，第一个月的第一天的 GetDayOfYear 返回 1，和上个月的最后一天的 GetDayOfYear 这一年，这是相同的值返回的<xref:System.Globalization.JapaneseCalendar.GetDaysInYear%2A>.</xref:System.Globalization.JapaneseCalendar.GetDaysInYear%2A>返回总天数"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_5_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_5_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_5_1.vb)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个从 1 和 366 之间的整数，表示的年份中的指定<xref:System.DateTime>。</xref:System.DateTime>的第一天"
  overload: System.Globalization.JapaneseCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中的指定年份的指定月份的天数。"
  remarks: "例如，此方法为 Nigatsu 返回 28 或 29 (年 2 月， `month` = 2)，具体取决于`year`是否为闰年。"
  example:
  - "The following code example calls GetDaysInMonth for the second month in each of five years in each era.  \n  \n [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/50a0d95d-a5e5-49bd-9864-_1.vb)]\n [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/50a0d95d-a5e5-49bd-9864-_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/50a0d95d-a5e5-49bd-9864-_1.cs)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "从 1 到 12 的整数，表示的月份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "指定纪元中的指定年份中指定的月份的天数。"
  overload: System.Globalization.JapaneseCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>month</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JapaneseCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中指定年份中的天数。"
  remarks: "例如，此方法返回 365 或 366，具体取决于是否`year`是否为闰年。"
  example:
  - "The following example calls GetDaysInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.j_4_1.cs)]\n [!code-cpp[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.j_4_1.cpp)]\n [!code-vb[System.Globalization.JapaneseCalendar.GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_4_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "指定纪元中的指定年份的天数。"
  overload: System.Globalization.JapaneseCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: JapaneseCalendar.GetEra(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>纪元"
  remarks: "日语日历识别为每个皇帝 reign 一个纪元。 当前纪元是平成纪元，始于公历 1989 年。 纪元名称通常会显示在年的前面。 例如，公历 2001 年为日语日历年平成 13。 请注意，第一年的纪元称为&quot;元年。&quot; 因此，公历 1989 年的日语日历平成元年。       此类将分配数字向纪元，如下所示: |GetEra 值 |纪元名称 |纪元缩写 |公历日期 |  |------------------|--------------|----------------------|---------------------|  | 4 | 平成 （平成） | 平 (H，h) |年 1 月 8，1989 呈现 |  | 3 | 昭和 (Showa) | 昭 （S、 s） |1926 年 12 月 25，1989 年 1 月 7 日到 |  | 2 | 大正 (Taisho) | 大 （T、 t） |1912 年 7 月 30 日到 1926 年 12 月 24，|  | 1 | 明治 （明治） | 明 （M、 m） |1868 年 9 月 8 日至 1912 年 7 月 29 日 |      通常，<xref:System.Globalization.JapaneseCalendar>类支持在年明治 1 (年 9 月 8，1868 公历)，即的值从 9 月 8 日期的<xref:System.Globalization.JapaneseCalendar.MinSupportedDateTime%2A>属性。</xref:System.Globalization.JapaneseCalendar.MinSupportedDateTime%2A> </xref:System.Globalization.JapaneseCalendar> 但是，GetEra 方法成功返回日期纪元从到 9 月 7 日明治 1 年 1 月 1 日 (1868 年 1 月 1，通过 1868 在公历日历年 9 月 7 日)。 对于早于 1868 年 1 月 1 日公历日期，该方法将引发<xref:System.ArgumentOutOfRangeException>异常。</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_10_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_10_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_10_1.vb)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个整数，表示在指定<xref:System.DateTime>。</xref:System.DateTime>纪元"
  overload: System.Globalization.JapaneseCalendar.GetEra*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "生成<xref:System.DateTime>超出支持的范围。</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JapaneseCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的年和纪元的闰月。"
  remarks: "在日历中支持闰月的概念，在某个特定的月份之后或在每一年中的任何月份之后发生的闰月。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法返回一个数字，介于 1 和 13，该值指示指定的日期与关联的月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 如果一年中，在第八个和第 9 个月之间存在闰月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法闰第八个月的 9 和 10 第 9 个月的第八个月份返回 8。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "每一年。"
    - id: era
      type: System.Int32
      description: "纪元。"
    return:
      type: System.Int32
      description: "返回值始终是 0 因为<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类型不支持闰月这一概念。"
  overload: System.Globalization.JapaneseCalendar.GetLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了支持的范围<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类型。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: JapaneseCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定<xref:System.DateTime>。</xref:System.DateTime>中返回的月份"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_18_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_18_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_18_1.vb)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "从 1 到 12 的整数，表示在指定<xref:System.DateTime>。</xref:System.DateTime>月份"
  overload: System.Globalization.JapaneseCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JapaneseCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中指定年份中的月数。"
  remarks: ''
  example:
  - "The following code example calls GetMonthsInYear for five years in each era.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/0687c0ba-842c-4e70-872b-_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/0687c0ba-842c-4e70-872b-_1.vb)]\n [!code-cpp[System.Globalization.JapaneseCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/0687c0ba-842c-4e70-872b-_1.cpp)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "返回值始终是 12。"
  overload: System.Globalization.JapaneseCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: JapaneseCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.JapaneseCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回包括指定<xref:System.DateTime>.</xref:System.DateTime>中的日期的年份的某一周"
  remarks: "此方法可以用于通过设置确定的年份中的周数`time`年份的最后一天的参数。       <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>属性包含可用于的区域性特定值`rule`和`firstDayOfWeek`参数。</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>       <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>包含<xref:System.DayOfWeek>表示特定区域性，使用日历周的第一天的值在<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>属性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>中指定</xref:System.DayOfWeek>的默认</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>属性</xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>       <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>包含<xref:System.Globalization.CalendarWeekRule>的值，它定义的特定区域性，使用日历一个日历周<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A><xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>属性</xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>中指定</xref:System.Globalization.CalendarWeekRule>的默认</xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>属性</xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>       例如，在<xref:System.Globalization.GregorianCalendar>、<xref:System.Globalization.Calendar.GetWeekOfYear%2A>的 1 月 1 日的方法返回 1。</xref:System.Globalization.Calendar.GetWeekOfYear%2A> </xref:System.Globalization.GregorianCalendar>"
  example:
  - "The following code example shows how the result of <xref:System.Globalization.Calendar.GetWeekOfYear%2A> varies depending on the <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> and <xref:System.Globalization.CalendarWeekRule> values used. If the specified date is the last day of the year, <xref:System.Globalization.Calendar.GetWeekOfYear%2A> returns the total number of weeks in that year.  \n  \n [!code-cs[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/csharp/ef15d25f-af8b-4734-b15e-_1.cs)]\n [!code-vb[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/visualbasic/ef15d25f-af8b-4734-b15e-_1.vb)]\n [!code-cpp[System.Globalization.Calendar.GetWeekOfYear#1](~/add/codesnippet/cpp/ef15d25f-af8b-4734-b15e-_1.cpp)]"
  syntax:
    content: public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    - id: rule
      type: System.Globalization.CalendarWeekRule
      description: "之一<xref:System.Globalization.CalendarWeekRule>定义一个日历周的值。</xref:System.Globalization.CalendarWeekRule>"
    - id: firstDayOfWeek
      type: System.DayOfWeek
      description: "之一<xref:System.DayOfWeek>这些值表示一周的第一天。</xref:System.DayOfWeek>"
    return:
      type: System.Int32
      description: "一个表示包括中的日期的年份的某一周的基于 1 的整数<code> time </code>参数。"
  overload: System.Globalization.JapaneseCalendar.GetWeekOfYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>或<code>firstDayOfWeek</code>超出所日历支持的范围。       -<code>rule</code>不是有效<xref:System.Globalization.CalendarWeekRule>值。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: JapaneseCalendar.GetYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定<xref:System.DateTime>.</xref:System.DateTime>中的年份"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Japanese calendar.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.j_16_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.j_16_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.j_16_1.vb)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个整数，表示的年份中的指定<xref:System.DateTime>。</xref:System.DateTime>"
  overload: System.Globalization.JapaneseCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中指定的日期是否为闰日。"
  remarks: "闰年日语日历中对应于为公历日历中的相同闰年。 闰年公历日历中定义为公历年份整除的由 4 个，但如果它是由 100 可除外。 但是，可被被 400 的公历年是闰年。 平 365 年天并且初始屏幕闰年有 366 天。       闰日是仅在闰年中发生了一天。 例如，Nigatsu （年 2 月） 29 日是唯一的闰日。"
  example:
  - "The following example calls IsLeapDay for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/csharp/98bd79da-f987-41c7-8e4e-_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/98bd79da-f987-41c7-8e4e-_1.vb)]\n [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapDay#1](~/add/codesnippet/cpp/98bd79da-f987-41c7-8e4e-_1.cpp)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "从 1 到 12 的整数，表示的月份。"
    - id: day
      type: System.Int32
      description: "一个从 1 到 31 之间的整数，表示日期。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的日期是闰日，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.JapaneseCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>month</code>超出所日历支持的范围。       -或-<code>day</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中的指定年份中的指定的月份是否为闰月。"
  remarks: "闰年日语日历中对应于为公历日历中的相同闰年。 闰年公历日历中定义为公历年份整除的由 4 个，但如果它是由 100 可除外。 但是，可被被 400 的公历年是闰年。 平 365 年天并且初始屏幕闰年有 366 天。       闰月是仅在闰年中发生的整月。 日本历没有闰月。"
  example:
  - "The following example calls IsLeapMonth for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/6e9c4cc5-e550-476d-bf72-_1.cpp)]\n [!code-cs[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/6e9c4cc5-e550-476d-bf72-_1.cs)]\n [!code-vb[System.Globalization.JapaneseCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/6e9c4cc5-e550-476d-bf72-_1.vb)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "从 1 到 12 的整数，表示的月份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "此方法始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，除非由派生类中重写。"
  overload: System.Globalization.JapaneseCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>month</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中的指定的年份是否为闰年。"
  remarks: "闰年日语日历中对应于为公历日历中的相同闰年。 闰年公历日历中定义为公历年份整除的由 4 个，但如果它是由 100 可除外。 但是，可被被 400 的公历年是闰年。 平 365 年天并且初始屏幕闰年有 366 天。"
  example:
  - "The following example calls IsLeapYear for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.j_2_1.cs)]\n [!code-cpp[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.j_2_1.cpp)]\n [!code-vb[System.Globalization.JapaneseCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.j_2_1.vb)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的年是闰年，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.JapaneseCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: JapaneseCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取最新的日期和时间受当前<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>对象。"
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_0_1.cs)]\n [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_0_1.cpp)]\n [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_0_1.vb)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最新的日期和时间受<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类型，等效于的那一刻年 12 月 31 日公元 9999 年 在公历日历中。"
  overload: System.Globalization.JapaneseCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: JapaneseCalendar.MinSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取最早的日期和时间由当前支持<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>对象。"
  remarks: "支持的最早日期<xref:System.Globalization.JapaneseCalendar>类是年 9 月 8，为公元 1868，明治纪元的第一年。</xref:System.Globalization.JapaneseCalendar> 通常，日期和时间使用的操作<xref:System.Globalization.JapaneseCalendar>类引发<xref:System.ArgumentOutOfRangeException>异常在此日期之前的日期。</xref:System.ArgumentOutOfRangeException> </xref:System.Globalization.JapaneseCalendar> 但是，某些成员，如<xref:System.Globalization.JapaneseCalendar.GetEra%2A>方法，在年明治 1 支持从 1868 年 1 月 1 日到年 9 月月 7 日的日期。</xref:System.Globalization.JapaneseCalendar.GetEra%2A>"
  example:
  - "The following example gets the earliest and latest dates supported by the calendar.  \n  \n [!code-cs[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.j_1_1.cs)]\n [!code-cpp[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.j_1_1.cpp)]\n [!code-vb[System.Globalization.JapaneseCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.j_1_1.vb)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最早的日期和时间受<xref href=&quot;System.Globalization.JapaneseCalendar&quot;></xref>类型，等效于公元 1868 年 9 月 8 日的那一刻 在公历日历中。"
  overload: System.Globalization.JapaneseCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回<xref:System.DateTime>它被设置为指定的日期和指定纪元中的时间。</xref:System.DateTime>"
  remarks: "都传递很有用，因为它可以将当前日历中的任何日期转换为公历日期。 公历日期可以随后用于，例如，比较不同日历中的日期或在特定日历中创建等效的日期。"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "从 1 到 12 的整数，表示的月份。"
    - id: day
      type: System.Int32
      description: "一个从 1 到 31 之间的整数，表示日期。"
    - id: hour
      type: System.Int32
      description: "一个从 0 到 23 之间的整数，表示小时。"
    - id: minute
      type: System.Int32
      description: "从 0 到 59 之间的整数，表示分钟。"
    - id: second
      type: System.Int32
      description: "从 0 到 59 之间的整数，表示第二个。"
    - id: millisecond
      type: System.Int32
      description: "从 0 到 999 之间的整数，表示毫秒。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>，设置为指定的日期和时间以当前纪元。</xref:System.DateTime>"
  overload: System.Globalization.JapaneseCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。       -或-<code>month</code>超出所日历支持的范围。       -或-<code>day</code>超出所日历支持的范围。       -或-<code>hour</code>小于零或大于 23。       -或-<code>minute</code>小于零或大于 59。       -或-<code>second</code>小于零或大于 59。       -或-<code>millisecond</code>小于零或大于 999。       -或-<code>era</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: JapaneseCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JapaneseCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "将指定的年份转换为四位数年份，通过使用<xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax*>属性来确定相应的纪元。</xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax*>"
  remarks: "此方法实现<xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>.</xref:System.Globalization.Calendar.ToFourDigitYear%2A?displayProperty=fullName>       因为日语日历中的每年通常少于四位数，此实现始终返回的值`year`参数。       ToFourDigitYear 支持两位数年份或四位数年份。 但是，有效年份通常表示为两个数字 (小于 100) 中。 将两位数年份值传递会导致方法的值转换为一个四位数字值根据<xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax%2A>值，该值表示相应的纪元。</xref:System.Globalization.JapaneseCalendar.TwoDigitYearMax%2A> 如果应用程序提供了四位数字的值或者它会提供零或负值，ToFourDigitYear 引发异常。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数 （通常两位数字），表示要转换的年份。"
    return:
      type: System.Int32
      description: "一个整数，包含的四位数字表示形式<code> year </code>。"
  overload: System.Globalization.JapaneseCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出所日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.JapaneseCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.JapaneseCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: JapaneseCalendar.TwoDigitYearMax
  fullName: System.Globalization.JapaneseCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取或设置可以用两位数年份表示的 100 年范围内的最后一年。"
  remarks: "此属性实现<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>.</xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName>       此实现因为日语日历中的每年通常少于四位数，默认情况下返回 99，不影响<xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A>.</xref:System.Globalization.JapaneseCalendar.ToFourDigitYear%2A>的返回值"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "可以用两位数年份表示的 100 年范围内的最后一年。"
  overload: System.Globalization.JapaneseCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中指定的值是小于 99。       -或-指定在集运算中的值大于 8011 (或<xref uid=&quot;langword_csharp_MaxSupportedDateTime.Year&quot; name=&quot;MaxSupportedDateTime.Year&quot; href=&quot;&quot;> </xref>)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在集运算中，当前实例是只读的。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.TypeInitializationException
  isExternal: true
  name: System.TypeInitializationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.JapaneseCalendar.#ctor
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: JapaneseCalendar()
  nameWithType: JapaneseCalendar.JapaneseCalendar()
  fullName: System.Globalization.JapaneseCalendar.JapaneseCalendar()
- uid: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: JapaneseCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.JapaneseCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: JapaneseCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.JapaneseCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.JapaneseCalendar.AlgorithmType
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JapaneseCalendar.AlgorithmType
  fullName: System.Globalization.JapaneseCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.JapaneseCalendar.Eras
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: Eras
  nameWithType: JapaneseCalendar.Eras
  fullName: System.Globalization.JapaneseCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: JapaneseCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: JapaneseCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: JapaneseCalendar.GetEra(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetEra(DateTime)
- uid: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: JapaneseCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: JapaneseCalendar.GetMonth(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetMonth(DateTime)
- uid: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: JapaneseCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  nameWithType: JapaneseCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
  fullName: System.Globalization.JapaneseCalendar.GetWeekOfYear(DateTime,CalendarWeekRule,DayOfWeek)
- uid: System.Globalization.CalendarWeekRule
  parent: System.Globalization
  isExternal: true
  name: CalendarWeekRule
  nameWithType: CalendarWeekRule
  fullName: System.Globalization.CalendarWeekRule
- uid: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: JapaneseCalendar.GetYear(DateTime)
  fullName: System.Globalization.JapaneseCalendar.GetYear(DateTime)
- uid: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: JapaneseCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JapaneseCalendar.MaxSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MaxSupportedDateTime
- uid: System.Globalization.JapaneseCalendar.MinSupportedDateTime
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JapaneseCalendar.MinSupportedDateTime
  fullName: System.Globalization.JapaneseCalendar.MinSupportedDateTime
- uid: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: JapaneseCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.JapaneseCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: JapaneseCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.JapaneseCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.JapaneseCalendar.TwoDigitYearMax
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JapaneseCalendar.TwoDigitYearMax
  fullName: System.Globalization.JapaneseCalendar.TwoDigitYearMax
- uid: System.Globalization.JapaneseCalendar.#ctor*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: JapaneseCalendar
  nameWithType: JapaneseCalendar.JapaneseCalendar
- uid: System.Globalization.JapaneseCalendar.AddMonths*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AddMonths
  nameWithType: JapaneseCalendar.AddMonths
- uid: System.Globalization.JapaneseCalendar.AddYears*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AddYears
  nameWithType: JapaneseCalendar.AddYears
- uid: System.Globalization.JapaneseCalendar.AlgorithmType*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: JapaneseCalendar.AlgorithmType
- uid: System.Globalization.JapaneseCalendar.Eras*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: Eras
  nameWithType: JapaneseCalendar.Eras
- uid: System.Globalization.JapaneseCalendar.GetDayOfMonth*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: JapaneseCalendar.GetDayOfMonth
- uid: System.Globalization.JapaneseCalendar.GetDayOfWeek*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: JapaneseCalendar.GetDayOfWeek
- uid: System.Globalization.JapaneseCalendar.GetDayOfYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: JapaneseCalendar.GetDayOfYear
- uid: System.Globalization.JapaneseCalendar.GetDaysInMonth*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: JapaneseCalendar.GetDaysInMonth
- uid: System.Globalization.JapaneseCalendar.GetDaysInYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: JapaneseCalendar.GetDaysInYear
- uid: System.Globalization.JapaneseCalendar.GetEra*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetEra
  nameWithType: JapaneseCalendar.GetEra
- uid: System.Globalization.JapaneseCalendar.GetLeapMonth*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: JapaneseCalendar.GetLeapMonth
- uid: System.Globalization.JapaneseCalendar.GetMonth*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetMonth
  nameWithType: JapaneseCalendar.GetMonth
- uid: System.Globalization.JapaneseCalendar.GetMonthsInYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: JapaneseCalendar.GetMonthsInYear
- uid: System.Globalization.JapaneseCalendar.GetWeekOfYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetWeekOfYear
  nameWithType: JapaneseCalendar.GetWeekOfYear
- uid: System.Globalization.JapaneseCalendar.GetYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: GetYear
  nameWithType: JapaneseCalendar.GetYear
- uid: System.Globalization.JapaneseCalendar.IsLeapDay*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: JapaneseCalendar.IsLeapDay
- uid: System.Globalization.JapaneseCalendar.IsLeapMonth*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: JapaneseCalendar.IsLeapMonth
- uid: System.Globalization.JapaneseCalendar.IsLeapYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: JapaneseCalendar.IsLeapYear
- uid: System.Globalization.JapaneseCalendar.MaxSupportedDateTime*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: JapaneseCalendar.MaxSupportedDateTime
- uid: System.Globalization.JapaneseCalendar.MinSupportedDateTime*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: JapaneseCalendar.MinSupportedDateTime
- uid: System.Globalization.JapaneseCalendar.ToDateTime*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: JapaneseCalendar.ToDateTime
- uid: System.Globalization.JapaneseCalendar.ToFourDigitYear*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: JapaneseCalendar.ToFourDigitYear
- uid: System.Globalization.JapaneseCalendar.TwoDigitYearMax*
  parent: System.Globalization.JapaneseCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: JapaneseCalendar.TwoDigitYearMax
