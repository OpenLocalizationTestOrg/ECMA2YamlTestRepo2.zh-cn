### YamlMime:ManagedReference
items:
- uid: System.ServiceProcess.ServiceProcessInstaller
  id: ServiceProcessInstaller
  children:
  - System.ServiceProcess.ServiceProcessInstaller.#ctor
  - System.ServiceProcess.ServiceProcessInstaller.Account
  - System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  - System.ServiceProcess.ServiceProcessInstaller.HelpText
  - System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Password
  - System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  - System.ServiceProcess.ServiceProcessInstaller.Username
  langs:
  - csharp
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller
  fullName: System.ServiceProcess.ServiceProcessInstaller
  type: Class
  summary: "安装包含扩展的类的可执行文件<xref href=&quot;System.ServiceProcess.ServiceBase&quot;> </xref>。 安装服务应用程序时，将由安装实用工具，例如 InstallUtil.exe，调用此类。"
  remarks: "ServiceProcessInstaller 工作原理普遍适用于所有服务的可执行文件。 安装实用程序使用它来写入与你想要安装的服务关联的注册表值。       若要安装服务，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>，并设置<xref:System.ComponentModel.RunInstallerAttribute>到类上`true`。</xref:System.ComponentModel.RunInstallerAttribute> </xref:System.Configuration.Install.Installer> 在项目中，实例化每个服务应用程序的一个 ServiceProcessInstaller 实例和一个<xref:System.ServiceProcess.ServiceInstaller>应用程序中每个服务的实例。</xref:System.ServiceProcess.ServiceInstaller> 最后，添加 ServiceProcessInstaller 实例和<xref:System.ServiceProcess.ServiceInstaller>实例为项目安装程序类。</xref:System.ServiceProcess.ServiceInstaller>       InstallUtil.exe 运行时，该实用程序中寻找与服务程序集中的类<xref:System.ComponentModel.RunInstallerAttribute>设置为`true`。</xref:System.ComponentModel.RunInstallerAttribute> 通过将它们添加到类添加到服务程序集<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序与关联的集合。</xref:System.Configuration.Install.Installer.Installers%2A> 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，则安装实用工具忽略项目安装程序。</xref:System.ComponentModel.RunInstallerAttribute>       对于 ServiceProcessInstaller 的实例，你可以修改的属性包括指定登录的用户以外的帐户下运行的服务应用程序。 你可以指定特定<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对在其下运行该服务，也可以使用<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>来指定服务计算机的系统帐户、 本地或网络服务帐户或用户帐户下运行。</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>      1> [!NOTE]&1;> 计算机的系统帐户不是管理员帐户相同。       通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用工具。</xref:System.ServiceProcess.ServiceInstaller> 安装实用程序将自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>在安装过程中的方法。</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) 上所有以前安装的组件。</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>       应用程序的安装例程维护自动有关组件已安装，使用项目安装<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>的信息 此状态信息将持续更新作为 ServiceProcessInstaller 实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。</xref:System.ServiceProcess.ServiceInstaller> 它是通常情况下不必为你的代码来显式修改此状态信息。       进行实例化 ServiceProcessInstaller 使基类构造函数，<xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>调用。</xref:System.Configuration.Install.ComponentInstaller.%23ctor%2A>"
  example:
  - "The following example creates a project installer called MyProjectInstaller, which inherits from <xref:System.Configuration.Install.Installer>. It is assumed there is a service executable that contains two services, \"Hello-World Service 1\" and \"Hello-World Service 2\". Within the constructor for MyProjectInstaller (which would be called by the install utility), <xref:System.ServiceProcess.ServiceInstaller> objects are created for each service, and a ServiceProcessInstaller is created for the executable. For the install utility to recognize MyProjectInstaller as a valid installer, the <xref:System.ComponentModel.RunInstallerAttribute> attribute is set to `true`.  \n  \n Optional properties are set on the process installer and the service installers before the installers are added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection. When the install utility accesses MyProjectInstaller, the objects added to the <xref:System.Configuration.Install.Installer.Installers%2A> collection through a call to <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=fullName> will be installed in turn. During the process, the installer maintains state information indicating which objects have been installed, so each object can be backed out in turn in case of an installation failure.  \n  \n Normally, you would not instantiate your project installer class explicitly. You would create it and add the <xref:System.ComponentModel.RunInstallerAttribute>, but the install utility actually calls, and therefore instantiates, the class.  \n  \n [!code-cpp[Classic ServiceInstaller Example#1](~/add/codesnippet/cpp/t-system.serviceprocess._0_1.cpp)]\n [!code-cs[Classic ServiceInstaller Example#1](~/add/codesnippet/csharp/t-system.serviceprocess._0_1.cs)]\n [!code-vb[Classic ServiceInstaller Example#1](~/add/codesnippet/visualbasic/t-system.serviceprocess._0_1.vb)]"
  syntax:
    content: 'public class ServiceProcessInstaller : System.Configuration.Install.ComponentInstaller'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Configuration.Install.Installer
  - System.Configuration.Install.ComponentInstaller
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)
  - System.Configuration.Install.Installer.AfterInstall
  - System.Configuration.Install.Installer.AfterRollback
  - System.Configuration.Install.Installer.AfterUninstall
  - System.Configuration.Install.Installer.BeforeInstall
  - System.Configuration.Install.Installer.BeforeRollback
  - System.Configuration.Install.Installer.BeforeUninstall
  - System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Committed
  - System.Configuration.Install.Installer.Committing
  - System.Configuration.Install.Installer.Context
  - System.Configuration.Install.Installer.Installers
  - System.Configuration.Install.Installer.OnAfterInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnAfterUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeInstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeRollback(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnBeforeUninstall(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitted(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.OnCommitting(System.Collections.IDictionary)
  - System.Configuration.Install.Installer.Parent
  - System.Configuration.Install.Installer.Uninstall(System.Collections.IDictionary)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  id: '#ctor'
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
  type: Constructor
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "创建的新实例<xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;></xref>类。"
  syntax:
    content: public ServiceProcessInstaller ();
    parameters: []
  overload: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  id: Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置要运行此服务应用程序在其下的帐户的类型。"
  remarks: "当帐户属性是`User`、<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>属性用于定义在其下运行服务应用程序的帐户。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       <xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对允许服务在系统帐户之外的帐户下运行。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 这可以例如，允许在无用户登录时自动启动在重新启动，该服务。 如果将<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>为空，并将帐户设置为`User`，系统将提示你输入有效的用户名和密码在安装。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       你还可以指定本地系统帐户或本地运行的服务或网络服务。 请参阅<xref:System.ServiceProcess.ServiceAccount>枚举有关类型的帐户的详细信息。</xref:System.ServiceProcess.ServiceAccount>"
  syntax:
    content: public System.ServiceProcess.ServiceAccount Account { get; set; }
    return:
      type: System.ServiceProcess.ServiceAccount
      description: "A <xref href=&quot;System.ServiceProcess.ServiceAccount&quot;> </xref>定义系统运行此服务帐户的类型。 默认值是<xref uid=&quot;langword_csharp_User&quot; name=&quot;User&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceProcess.ServiceProcessInstaller.Account*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  id: CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "实现的基类&lt;xref:System.Configuration.Install.ComponentInstaller.CopyFromComponent%2A?displayProperty=fullName&gt;方法没有<xref href=&quot;System.ServiceProcess.ServiceProcessInstaller&quot;></xref>类特定的行为。"
  remarks: "不应在代码中调用此方法。 基类方法上的<xref:System.Configuration.Install.ComponentInstaller>是`abstract`，因此此处派生类中实现它</xref:System.Configuration.Install.ComponentInstaller> 但是，没有任何<xref:System.ServiceProcess.ServiceProcessInstaller>类特定的方法的实现中处理。</xref:System.ServiceProcess.ServiceProcessInstaller>"
  syntax:
    content: public override void CopyFromComponent (System.ComponentModel.IComponent comp);
    parameters:
    - id: comp
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>表示服务进程。"
  overload: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  id: HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取帮助针对服务安装选项显示的文本。"
  remarks: "手动启动服务时，可以使用此帮助文本。 它指示用户如何输入用户名和密码信息。"
  syntax:
    content: public override string HelpText { get; }
    return:
      type: System.String
      description: "帮助文本，用于设置用户名和密码才能运行下一个特定帐户的服务提供的步骤的说明。"
  overload: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  id: Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "将服务应用程序信息写入注册表。 此方法旨在可供安装工具，自动调用适当的方法。"
  remarks: "通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceProcessInstaller>在代码中; 它们是通常只能由调用安装实用工具。</xref:System.ServiceProcess.ServiceProcessInstaller> 安装实用程序在安装过程中自动调用安装方法。 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>上所有以前安装的组件。</xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 此方法将安装传递给基类<xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>方法。</xref:System.Configuration.Install.Installer.Install%2A?displayProperty=fullName>       通常情况下，你将不调用对象方法<xref:System.ServiceProcess.ServiceInstaller>在代码中; 它们是通常只能由调用安装实用工具。</xref:System.ServiceProcess.ServiceInstaller> 安装实用程序将自动调用安装和<xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName>在安装过程中的方法。</xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=fullName> 如有必要，它退出故障，通过调用<xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A>(或<xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName>) 在所有以前安装的组件上的应用程序安装例程会维护有关使用项目安装<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>的组件已安装，自动信息</xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> 此状态信息传递到会安装为`stateSaver`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 它是通常情况下不必为你的代码来显式修改此状态信息。       安装将传递给调用的方法引发基类方法的任何异常或<xref:System.Configuration.Install.Installer.BeforeInstall>/<xref:System.Configuration.Install.Installer.AfterInstall>事件处理程序。</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Install (System.Collections.IDictionary stateSaver);
    parameters:
    - id: stateSaver
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>，包含与安装关联的上下文信息。</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Install*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>stateSaver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  id: Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置与服务应用程序运行的用户帐户关联的密码。"
  remarks: "密码和<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>对允许服务在系统帐户之外的帐户下运行。</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 这可以例如，允许在无用户登录时自动启动在重新启动，该服务。       密码和<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>处理以安全的方式，因为它们永远不会序列化或保存到的安装状态 (项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) 或其他位置使用公共访问权限。</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       设置<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和密码允许要在安装时自动与服务相关联的帐户。</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> 如果将<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>或密码为空，并且已设置<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，系统将提示你输入有效的用户名和密码在安装。</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>       运行单独的帐户下的服务的另一种方法是使用计算机的系统帐户。 该帐户，这是不同于管理员帐户，不需要密码。 系统帐户特权可能超过当前登录的用户。 在系统帐户而不是用户帐户下的运行可避免因缺少如果需要执行此服务的权限的用户的问题<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>是任何值，而不`User`，会使用指定帐户 （本地或网络服务或本地系统），即使<xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A>和填充密码属性。</xref:System.ServiceProcess.ServiceProcessInstaller.Username%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Password { get; set; }
    return:
      type: System.String
      description: "与服务应运行的帐户关联的密码。 默认值为空字符串 (&quot;&quot;)。 该属性不是公共的并永远不会序列化。"
  overload: System.ServiceProcess.ServiceProcessInstaller.Password*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  id: Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
  type: Method
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "回滚服务应用程序信息写入注册表的安装过程。 此方法旨在用于安装工具，可自动处理适当的方法。"
  remarks: "通常情况下，不调用方法上<xref:System.ServiceProcess.ServiceProcessInstaller>在代码中; 它们是通常只能由调用安装实用工具。</xref:System.ServiceProcess.ServiceProcessInstaller> 安装实用程序将自动调用<xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName>在安装过程中的方法。</xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=fullName> 它退出故障，如果有必要，请通过在对象上调用回滚生成异常。       应用程序的安装例程维护自动有关组件已安装，使用项目安装<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>.</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>的信息 此状态信息传递到作为回滚`savedState`参数，将持续更新作为<xref:System.ServiceProcess.ServiceProcessInstaller>实例和每个<xref:System.ServiceProcess.ServiceInstaller>由实用工具安装实例。</xref:System.ServiceProcess.ServiceInstaller> </xref:System.ServiceProcess.ServiceProcessInstaller> 它是通常情况下不必为你的代码来显式修改此状态信息。       回滚将传递给调用的方法引发基类方法的任何异常或<xref:System.Configuration.Install.Installer.BeforeInstall>/<xref:System.Configuration.Install.Installer.AfterInstall>事件处理程序。</xref:System.Configuration.Install.Installer.AfterInstall> </xref:System.Configuration.Install.Installer.BeforeInstall>"
  syntax:
    content: public override void Rollback (System.Collections.IDictionary savedState);
    parameters:
    - id: savedState
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>，包含与安装关联的上下文信息。</xref:System.Collections.IDictionary>"
  overload: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>savedState</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或- <code> savedState </code>损坏或不存在。"
  platform:
  - net462
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  id: Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  langs:
  - csharp
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
  type: Property
  assemblies:
  - System.ServiceProcess
  namespace: System.ServiceProcess
  summary: "获取或设置将在其下运行服务应用程序的用户帐户。"
  remarks: "用户名和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>对允许服务在系统帐户之外的帐户下运行。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 这可以例如，允许在无用户登录时自动启动在重新启动，该服务。       <xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>并且可以用户名进行处理以安全的方式，因为它们永远不会序列化或保存到的安装状态 (项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName>) 或其他位置使用公共访问权限。</xref:System.Configuration.Install.Installer.Context%2A?displayProperty=fullName></xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       设置用户名和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>允许要在安装时自动与服务相关联的帐户。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> 如果你离开任一的用户名或<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>空，并且已设置<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>到`User`，系统将提示你输入有效的用户名和密码在安装。</xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>       运行单独的帐户下的服务的另一种方法是使用计算机的系统帐户。 该帐户，这是不同于管理员帐户，不需要密码。 系统帐户特权可能超过当前登录的用户。 在系统帐户而不是用户帐户下的运行可避免因缺少如果需要执行此服务的权限的用户的问题<xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>是任何值，而不`User`，会使用指定的帐户 （本地或网络服务或本地系统），即使用户名和<xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A>填充属性。</xref:System.ServiceProcess.ServiceProcessInstaller.Password%2A> </xref:System.ServiceProcess.ServiceProcessInstaller.Account%2A>"
  syntax:
    content: public string Username { get; set; }
    return:
      type: System.String
      description: "服务应运行的帐户。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.ServiceProcess.ServiceProcessInstaller.Username*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Install.ComponentInstaller
  isExternal: false
  name: System.Configuration.Install.ComponentInstaller
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller()
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller()
  fullName: System.ServiceProcess.ServiceProcessInstaller.ServiceProcessInstaller()
- uid: System.ServiceProcess.ServiceProcessInstaller.Account
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
  fullName: System.ServiceProcess.ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceAccount
  parent: System.ServiceProcess
  isExternal: false
  name: ServiceAccount
  nameWithType: ServiceAccount
  fullName: System.ServiceProcess.ServiceAccount
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent(IComponent)
  nameWithType: ServiceProcessInstaller.CopyFromComponent(IComponent)
  fullName: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
  fullName: System.ServiceProcess.ServiceProcessInstaller.HelpText
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceProcess.ServiceProcessInstaller.Install(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install(IDictionary)
  nameWithType: ServiceProcessInstaller.Install(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Install(IDictionary)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ServiceProcess.ServiceProcessInstaller.Password
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
  fullName: System.ServiceProcess.ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback(IDictionary)
  nameWithType: ServiceProcessInstaller.Rollback(IDictionary)
  fullName: System.ServiceProcess.ServiceProcessInstaller.Rollback(IDictionary)
- uid: System.ServiceProcess.ServiceProcessInstaller.Username
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
  fullName: System.ServiceProcess.ServiceProcessInstaller.Username
- uid: System.ServiceProcess.ServiceProcessInstaller.#ctor*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: ServiceProcessInstaller
  nameWithType: ServiceProcessInstaller.ServiceProcessInstaller
- uid: System.ServiceProcess.ServiceProcessInstaller.Account*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Account
  nameWithType: ServiceProcessInstaller.Account
- uid: System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: CopyFromComponent
  nameWithType: ServiceProcessInstaller.CopyFromComponent
- uid: System.ServiceProcess.ServiceProcessInstaller.HelpText*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: HelpText
  nameWithType: ServiceProcessInstaller.HelpText
- uid: System.ServiceProcess.ServiceProcessInstaller.Install*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Install
  nameWithType: ServiceProcessInstaller.Install
- uid: System.ServiceProcess.ServiceProcessInstaller.Password*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Password
  nameWithType: ServiceProcessInstaller.Password
- uid: System.ServiceProcess.ServiceProcessInstaller.Rollback*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Rollback
  nameWithType: ServiceProcessInstaller.Rollback
- uid: System.ServiceProcess.ServiceProcessInstaller.Username*
  parent: System.ServiceProcess.ServiceProcessInstaller
  isExternal: false
  name: Username
  nameWithType: ServiceProcessInstaller.Username
