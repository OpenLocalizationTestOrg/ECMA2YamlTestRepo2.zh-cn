### YamlMime:ManagedReference
items:
- uid: System.Windows.CoerceValueCallback
  id: CoerceValueCallback
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
  type: Delegate
  summary: "每当重新计算的依赖项属性值，或强制专门请求就会调用的方法，提供了一个模板。"
  remarks: "基于 CoerceValueCallback 回调可以分配给通过多种不同的方法的依赖项属性。 上述每种方法，你首先需要创建新的属性元数据对象 (<xref:System.Windows.PropertyMetadata>，或某个派生的类，如<xref:System.Windows.FrameworkPropertyMetadata>)。</xref:System.Windows.FrameworkPropertyMetadata> </xref:System.Windows.PropertyMetadata> 创建元数据对象使用构造函数签名，它带有`coerceValueCallback`参数，并将该参数分配给回调处理程序。 构造通过任何签名并集的元数据或<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>属性，然后将元数据放在使用。</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       此元数据后，你可以:-上使用的任一签名的新类定义新的依赖项属性<xref:System.Windows.DependencyProperty.Register%2A>，将该元数据作为`typeMetadata`值。</xref:System.Windows.DependencyProperty.Register%2A>      -重写元数据 (调用<xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>) 对于现有依赖项属性，当你从拥有依赖项属性的类派生。</xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>      -将现有的依赖项属性添加到新<xref:System.Windows.DependencyObject>类，使用新的元数据，通过调用<xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> </xref:System.Windows.DependencyObject>       此回调的实现应签入的值`baseValue`并确定基于值或类型，这是否是一个值，需要进一步进行强制转换。       <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>依赖项属性调用属性系统或其他任何调用方调用任何时间<xref:System.Windows.DependencyObject.CoerceValue%2A>上<xref:System.Windows.DependencyObject>实例，它指定该属性的标识符，则为`dp`。</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.CoerceValue%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>       为属性值的更改可能具有来自属性系统中任何可能的参与者。 这包括样式、 泛型失效、 触发器、 属性值继承和本地值设置。       通常，应避免指定多个<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>为任意给定的依赖项属性 (重写或添加新的元数据的一个依赖项属性，已经有<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>)。</xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> </xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 只有一个回调将能够执行操作。 行动回调将被应用到相比继承中的大多数派生类的一个<xref:System.Windows.DependencyObject>调用方。</xref:System.Windows.DependencyObject> 元数据中重写时，将替换其他回调由于分配给依赖项属性的元数据所有者层次结构中存在更高版本。"
  example:
  - "The following example includes an implementation of this callback to coerce the stored value of a dependency property based on other inputs, such as another property's value. In this case, the callback checks to see whether the `ShirtType` property corresponds to a type of shirt that has buttons; if so it establishes a starting default color for the `ButtonColor`, if the shirt type has no buttons, it coerces the `ButtonColor` value back to a starting value, which causes the [!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)] (not shown) to remove that dropdown from the effective choices.  \n  \n [!code-cs[DPCustom#CoerceValueCallback](~/add/codesnippet/csharp/DPCustom/default.xaml.cs#coercevaluecallback)]\n [!code-vb[DPCustom#CoerceValueCallback](~/add/codesnippet/visualbasic/dpcustom/default.xaml.vb#coercevaluecallback)]"
  syntax:
    content: public delegate object CoerceValueCallback(DependencyObject d, object baseValue);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
