### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior
  id: ServiceAuthorizationBehavior
  children:
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  langs:
  - csharp
  name: ServiceAuthorizationBehavior
  nameWithType: ServiceAuthorizationBehavior
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior
  type: Class
  summary: "提供与服务授权行为相关的属性。"
  remarks: "授权发生在服务级别和操作级别。 此类包含与在服务级别的授权相关的属性。"
  syntax:
    content: 'public sealed class ServiceAuthorizationBehavior : System.ServiceModel.Description.IServiceBehavior'
  inheritance:
  - System.Object
  implements:
  - System.ServiceModel.Description.IServiceBehavior
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ServiceAuthorizationBehavior()
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationBehavior()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationBehavior()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Description.ServiceAuthorizationBehavior&quot;></xref>类。"
  remarks: "通常情况下，应用程序请勿直接调用构造函数。 而是通过调用检索此类的实例，它们`ServiceHostBase.Description.Behaviors.Find<ServiceAuthorizationBehavior>`。"
  example:
  - "The following code shows how to retrieve an instance of this class.  \n  \n [!code-vb[c_ImpersonationAndDelegation#3](~/add/codesnippet/visualbasic/m-system.servicemodel.de_6_1.vb)]\n [!code-cs[c_ImpersonationAndDelegation#3](~/add/codesnippet/csharp/m-system.servicemodel.de_6_1.cs)]"
  syntax:
    content: public ServiceAuthorizationBehavior ();
    parameters: []
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  id: ExternalAuthorizationPolicies
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ExternalAuthorizationPolicies
  nameWithType: ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置外部授权策略的集合。"
  remarks: "外部授权策略可参与导致用户<xref:System.ServiceModel.ServiceSecurityContext>.</xref:System.ServiceModel.ServiceSecurityContext>的策略评估过程"
  example:
  - "The following code shows how to set this property to use a set of external authorization policies.  \n  \n [!code-cs[PrincipalPermissionMode#3](~/add/codesnippet/csharp/afaf6251-be20-495c-ad4d-_1.cs)]\n [!code-vb[PrincipalPermissionMode#3](~/add/codesnippet/visualbasic/afaf6251-be20-495c-ad4d-_1.vb)]"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy> ExternalAuthorizationPolicies { get; set; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
      description: "外部授权策略的集合。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "行为是只读的。"
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  id: ImpersonateCallerForAllOperations
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ImpersonateCallerForAllOperations
  nameWithType: ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置一个值，该值指示服务是否模拟它支持的所有操作。"
  remarks: "值为`false`指示，指定每个操作的模拟。"
  example:
  - "This code shows how to set this property.  \n  \n [!code-vb[c_ImpersonationAndDelegation#3](~/add/codesnippet/visualbasic/3f7065e9-a4c7-4253-9e00-_1.vb)]\n [!code-cs[c_ImpersonationAndDelegation#3](~/add/codesnippet/csharp/3f7065e9-a4c7-4253-9e00-_1.cs)]"
  syntax:
    content: public bool ImpersonateCallerForAllOperations { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果服务模拟它支持; 的所有操作，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "行为是只读的。"
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  id: ImpersonateOnSerializingReply
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ImpersonateOnSerializingReply
  nameWithType: ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置一个值，该值指示服务是否在序列化答复执行模拟。"
  syntax:
    content: public bool ImpersonateOnSerializingReply { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果服务模拟上序列化答复;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode
  id: PrincipalPermissionMode
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: PrincipalPermissionMode
  nameWithType: ServiceAuthorizationBehavior.PrincipalPermissionMode
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置主体权限模式。"
  remarks: "此属性包含的成员之一<xref:System.ServiceModel.Description.PrincipalPermissionMode>枚举。</xref:System.ServiceModel.Description.PrincipalPermissionMode> 有效值为:- <xref:System.ServiceModel.Description.PrincipalPermissionMode>.</xref:System.ServiceModel.Description.PrincipalPermissionMode> 自定义`IAuthorizationPolicy`实现用来填充`Thread.CurrentPrincipal`。      -   <xref:System.ServiceModel.Description.PrincipalPermissionMode>.</xref:System.ServiceModel.Description.PrincipalPermissionMode> `Thread.CurrentPrincipal`未设置属性。      -   <xref:System.ServiceModel.Description.PrincipalPermissionMode>.</xref:System.ServiceModel.Description.PrincipalPermissionMode> `Thread.CurrentPrincipal`属性设置为`IPrincipal`根据 ASP.NET 角色信息。      -   <xref:System.ServiceModel.Description.PrincipalPermissionMode>.</xref:System.ServiceModel.Description.PrincipalPermissionMode> `Thread.CurrentPrincipal`属性设置为`WindowsPrincipal`根据传入消息的用户凭据。"
  example:
  - "This code shows how to set this property.  \n  \n [!code-vb[c_PrincipalPermissionAttribute#3](~/add/codesnippet/visualbasic/ed4c65e4-2594-4bf5-91f6-_1.vb)]\n [!code-cs[c_PrincipalPermissionAttribute#3](~/add/codesnippet/csharp/ed4c65e4-2594-4bf5-91f6-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Description.PrincipalPermissionMode PrincipalPermissionMode { get; set; }
    return:
      type: System.ServiceModel.Description.PrincipalPermissionMode
      description: "主体权限模式。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider
  id: RoleProvider
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: RoleProvider
  nameWithType: ServiceAuthorizationBehavior.RoleProvider
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置自定义角色提供程序。"
  remarks: "返回<xref:System.Web.Security.RoleProvider>对象是自定义角色提供程序的实现。</xref:System.Web.Security.RoleProvider>"
  example:
  - "The following code shows how to get this property.  \n  \n [!code-cs[PrincipalPermissionMode#6](~/add/codesnippet/csharp/p-system.servicemodel.de_25_1.cs)]\n [!code-vb[PrincipalPermissionMode#6](~/add/codesnippet/visualbasic/p-system.servicemodel.de_25_1.vb)]"
  syntax:
    content: public System.Web.Security.RoleProvider RoleProvider { get; set; }
    return:
      type: System.Web.Security.RoleProvider
      description: "自定义角色提供程序。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "行为是只读的。"
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager
  id: ServiceAuthorizationManager
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationManager
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置服务授权管理器。"
  remarks: "<xref:System.ServiceModel.ServiceAuthorizationManager>类负责评估所有策略、 链接向前和向后，可以选择连接生成<xref:System.IdentityModel.Policy.AuthorizationContext>到<xref:System.ServiceModel.ServiceSecurityContext>并返回的授权决定`true`或`false`若要允许或拒绝访问。</xref:System.ServiceModel.ServiceSecurityContext> </xref:System.IdentityModel.Policy.AuthorizationContext> </xref:System.ServiceModel.ServiceAuthorizationManager>"
  example:
  - "The following code shows how to set this property to use a custom service authorization manager.  \n  \n [!code-cs[PrincipalPermissionMode#3](~/add/codesnippet/csharp/195deeee-7ce7-41ce-9ad6-_1.cs)]\n [!code-vb[PrincipalPermissionMode#3](~/add/codesnippet/visualbasic/195deeee-7ce7-41ce-9ad6-_1.vb)]"
  syntax:
    content: public System.ServiceModel.ServiceAuthorizationManager ServiceAuthorizationManager { get; set; }
    return:
      type: System.ServiceModel.ServiceAuthorizationManager
      description: "服务授权管理器。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies
  id: ShouldSerializeExternalAuthorizationPolicies
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ShouldSerializeExternalAuthorizationPolicies()
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*>"
  syntax:
    content: public bool ShouldSerializeExternalAuthorizationPolicies ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*>"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager
  id: ShouldSerializeServiceAuthorizationManager
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: ShouldSerializeServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*>"
  syntax:
    content: public bool ShouldSerializeServiceAuthorizationManager ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*>"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  id: System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  isEii: true
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "提供将自定义数据传递到绑定元素以支持协定实现的功能。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>实例被强制转换为<xref:System.ServiceModel.Description.IServiceBehavior>接口。</xref:System.ServiceModel.Description.IServiceBehavior> </xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>"
  syntax:
    content: void IServiceBehavior.AddBindingParameters (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection parameters);
    parameters:
    - id: description
      type: System.ServiceModel.Description.ServiceDescription
      description: "服务的服务说明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "服务宿主。"
    - id: endpoints
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
      description: "服务终结点。"
    - id: parameters
      type: System.ServiceModel.Channels.BindingParameterCollection
      description: "自定义对象的绑定元素可访问。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  isEii: true
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "定义将调度行为将绑定配置添加的显式接口实现。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>实例被强制转换为<xref:System.ServiceModel.Description.IServiceBehavior>接口。</xref:System.ServiceModel.Description.IServiceBehavior> </xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>"
  syntax:
    content: void IServiceBehavior.ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: description
      type: System.ServiceModel.Description.ServiceDescription
      description: "服务说明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "当前正在生成的主机。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  id: System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  isEii: true
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  langs:
  - csharp
  name: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "提供用于检查服务主机和服务说明，从而确定服务可以成功运行。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>实例被强制转换为<xref:System.ServiceModel.Description.IServiceBehavior>接口。</xref:System.ServiceModel.Description.IServiceBehavior> </xref:System.ServiceModel.Description.ServiceAuthorizationBehavior>"
  syntax:
    content: void IServiceBehavior.Validate (System.ServiceModel.Description.ServiceDescription description, System.ServiceModel.ServiceHostBase serviceHostBase);
    parameters:
    - id: description
      type: System.ServiceModel.Description.ServiceDescription
      description: "服务说明。"
    - id: serviceHostBase
      type: System.ServiceModel.ServiceHostBase
      description: "当前正在构建服务主机。"
  overload: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ServiceAuthorizationBehavior()
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationBehavior()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationBehavior()
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ExternalAuthorizationPolicies
  nameWithType: ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.Policy.IAuthorizationPolicy}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<IAuthorizationPolicy>
  nameWithType: ReadOnlyCollection<IAuthorizationPolicy>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.Policy.IAuthorizationPolicy>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Policy.IAuthorizationPolicy
    name: IAuthorizationPolicy
    nameWithType: IAuthorizationPolicy
    fullName: IAuthorizationPolicy
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ImpersonateCallerForAllOperations
  nameWithType: ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ImpersonateOnSerializingReply
  nameWithType: ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: PrincipalPermissionMode
  nameWithType: ServiceAuthorizationBehavior.PrincipalPermissionMode
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode
- uid: System.ServiceModel.Description.PrincipalPermissionMode
  parent: System.ServiceModel.Description
  isExternal: false
  name: PrincipalPermissionMode
  nameWithType: PrincipalPermissionMode
  fullName: System.ServiceModel.Description.PrincipalPermissionMode
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: RoleProvider
  nameWithType: ServiceAuthorizationBehavior.RoleProvider
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider
- uid: System.Web.Security.RoleProvider
  parent: System.Web.Security
  isExternal: true
  name: RoleProvider
  nameWithType: RoleProvider
  fullName: System.Web.Security.RoleProvider
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationManager
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager
- uid: System.ServiceModel.ServiceAuthorizationManager
  parent: System.ServiceModel
  isExternal: false
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationManager
  fullName: System.ServiceModel.ServiceAuthorizationManager
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ShouldSerializeExternalAuthorizationPolicies()
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies()
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ShouldSerializeServiceAuthorizationManager()
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager()
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager()
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription,ServiceHostBase,Collection<ServiceEndpoint>,BindingParameterCollection)
- uid: System.ServiceModel.Description.ServiceDescription
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceDescription
  nameWithType: ServiceDescription
  fullName: System.ServiceModel.Description.ServiceDescription
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ServiceEndpoint>
  nameWithType: Collection<ServiceEndpoint>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ServiceEndpoint>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ServiceEndpoint>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ServiceEndpoint
    name: ServiceEndpoint
    nameWithType: ServiceEndpoint
    fullName: ServiceEndpoint
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Channels.BindingParameterCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingParameterCollection
  nameWithType: BindingParameterCollection
  fullName: System.ServiceModel.Channels.BindingParameterCollection
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
  fullName: System.ServiceModel.Description.ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription,ServiceHostBase)
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.#ctor*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ServiceAuthorizationBehavior
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationBehavior
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ExternalAuthorizationPolicies*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ExternalAuthorizationPolicies
  nameWithType: ServiceAuthorizationBehavior.ExternalAuthorizationPolicies
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ImpersonateCallerForAllOperations
  nameWithType: ServiceAuthorizationBehavior.ImpersonateCallerForAllOperations
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ImpersonateOnSerializingReply*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ImpersonateOnSerializingReply
  nameWithType: ServiceAuthorizationBehavior.ImpersonateOnSerializingReply
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.PrincipalPermissionMode*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: PrincipalPermissionMode
  nameWithType: ServiceAuthorizationBehavior.PrincipalPermissionMode
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.RoleProvider*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: RoleProvider
  nameWithType: ServiceAuthorizationBehavior.RoleProvider
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ServiceAuthorizationManager*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ServiceAuthorizationManager
  nameWithType: ServiceAuthorizationBehavior.ServiceAuthorizationManager
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ShouldSerializeExternalAuthorizationPolicies
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeExternalAuthorizationPolicies
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: ShouldSerializeServiceAuthorizationManager
  nameWithType: ServiceAuthorizationBehavior.ShouldSerializeServiceAuthorizationManager
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#AddBindingParameters*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.AddBindingParameters
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.AddBindingParameters
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#ApplyDispatchBehavior*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior
- uid: System.ServiceModel.Description.ServiceAuthorizationBehavior.System#ServiceModel#Description#IServiceBehavior#Validate*
  parent: System.ServiceModel.Description.ServiceAuthorizationBehavior
  isExternal: false
  name: System.ServiceModel.Description.IServiceBehavior.Validate
  nameWithType: ServiceAuthorizationBehavior.System.ServiceModel.Description.IServiceBehavior.Validate
