### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptor
  id: TypeDescriptor
  children:
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  - System.ComponentModel.TypeDescriptor.ComObjectType
  - System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  - System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  - System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  - System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  - System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  - System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  - System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  - System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptor.InterfaceType
  - System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  - System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  - System.ComponentModel.TypeDescriptor.Refreshed
  - System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  - System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  langs:
  - csharp
  name: TypeDescriptor
  nameWithType: TypeDescriptor
  fullName: System.ComponentModel.TypeDescriptor
  type: Class
  summary: "对于组件，例如其特性、 属性和事件提供有关特征的信息。 此类不能被继承。"
  remarks: ".NET Framework 提供了两种方法可以访问的类型的元数据︰ 反射<xref:System.Reflection?displayProperty=fullName>命名空间和 TypeDescriptor 类</xref:System.Reflection?displayProperty=fullName>中提供的 API 反射是适用于所有类型的通用机制，因为其 foundation 建立在<xref:System.Object.GetType%2A>方法的根<xref:System.Object>类。</xref:System.Object> </xref:System.Object.GetType%2A> 在于不能修改它的目标类型的编译完成后，是不可扩展的它将返回为某一类型的信息。 有关详细信息，请参阅中的主题[反射](~/add/includes/ajax-current-ext-md.md)。       与此相反，TypeDescriptor 是组件用于可扩展检查机制︰ 那些类，该实现<xref:System.ComponentModel.IComponent>接口。</xref:System.ComponentModel.IComponent> 与不同的是反射，它并不检查方法。 通过多个服务可通过目标组件<xref:System.ComponentModel.Component.Site%2A>.</xref:System.ComponentModel.Component.Site%2A>可以动态扩展 TypeDescriptor 下表显示了这些服务。      |服务名称 |说明 |  |------------------|-----------------|  |<xref:System.ComponentModel.IExtenderProvider>|另一个类，如<xref:System.Windows.Forms.ToolTip>，可提供给组件的额外属性。 |  |<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|使另一个对象以修改由组件公开的标准元数据。 |  |<xref:System.ComponentModel.ICustomTypeDescriptor>|支持的一类用于完全且动态地指定其自己的元数据，替换 TypeDescriptor 的标准检查机制。 |      提供的 TypeDescriptor 扩展性允许不同于其实际运行时表示形式，它使得 TypeDescriptor 对于构建基础结构设计时非常有用的组件的设计时表示。</xref:System.ComponentModel.ICustomTypeDescriptor> </xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.Windows.Forms.ToolTip> </xref:System.ComponentModel.IExtenderProvider>       TypeDescriptor 中的所有方法都是`static`。 无法创建此类的实例，不能继承此类。       你可以设置属性和事件值两种不同方式︰ 在组件类中指定它们，或在设计时更改它们。 你可以设置这些值通过两种方式，因为 TypeDescriptor 的重载的方法均采用两种不同类型的参数︰ 类类型或对象实例。       你想要访问 TypeDescriptor 信息，则可以使用的对象实例时使用的组件调用的方法。 使用仅在没有对象的实例时，为类类型调用方法。       属性和事件进行缓存 TypeDescriptor 的速度。 通常情况下，它们是常量对象的生存期内。 但是，扩展程序提供程序和设计器可以更改对象上的属性的集。 如果出现这种情况，则<xref:System.ComponentModel.TypeDescriptor.Refresh%2A>必须调用方法以更新缓存。</xref:System.ComponentModel.TypeDescriptor.Refresh%2A>"
  syntax:
    content: public sealed class TypeDescriptor
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  id: AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "向目标组件实例添加类级别属性。"
  remarks: "AddAttributes 方法添加到组件的指定实例的类级别属性。 因为这是使用应用程序的一个常见要求[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]Windows 窗体设计器和属性窗口中，此方法提供一种快捷方式︰ 创建合并所提供的特性与类已存在的属性的类型说明提供。 返回值是用于添加特性的类型说明提供。 此提供程序更高版本可以传递给<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>方法时不再需要添加的属性。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (object instance, Attribute[] attributes);
    parameters:
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
    - id: attributes
      type: System.Attribute[]
      description: "一个数组<xref:System.Attribute>对象将添加到组件的类。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "新创建<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>用于添加指定的属性。"
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  id: AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "向目标组件类型添加类级别属性。"
  remarks: "AddAttributes 方法向指定类型的一个组件添加类级别属性。 因为这是使用应用程序的一个常见要求[!INCLUDE[vsprvs](~/add/includes/vsprvs-md.md)]Windows 窗体设计器和属性窗口中，此方法提供一种快捷方式︰ 创建合并所提供的特性与类已存在的属性的类型说明提供。 返回值是用于添加特性的类型说明提供。 此提供程序更高版本可以传递给<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>时不再需要添加的属性的方法。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider AddAttributes (Type type, Attribute[] attributes);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "一个数组<xref:System.Attribute>对象将添加到组件的类。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "新创建<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>用于添加指定的属性。"
  overload: System.ComponentModel.TypeDescriptor.AddAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  id: AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "添加编辑器表对于给定的编辑器基类型。"
  remarks: "AddEditorTable 方法添加编辑器表对于给定的编辑器基类型。 通常情况下，编辑器指定为在组件上的元数据。 但是，如果没有元数据请求的编辑器基类型可以找到该组件上，关联<xref:System.ComponentModel.TypeDescriptor>如果可以找到一个将搜索编辑器类型，编辑器表。</xref:System.ComponentModel.TypeDescriptor> 到类型描述符添加编辑器表后, 它不能删除，并拥有的类型描述符。 类型描述符自由地可能会使对此表进行修改。       编辑器表的格式使用的数据类型作为键，使用编辑器作为值。 表中的条目的值部分表示的编辑器实例。 它可以具有三个值之一。 如果它包含一个字符串，类型描述符将假设这是对象的类型，然后加载该类型的完全限定的名称。 如果其包含类型，则将创建此类型的实例以获取编辑器。 最后中的值部分可能包含实际的编辑器实例。 如果类型描述符解析为实例的编辑器，它将存储回供将来使用该表的实例。"
  syntax:
    content: public static void AddEditorTable (Type editorBaseType, System.Collections.Hashtable table);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "要添加编辑器表的编辑器基类型。 如果此类型已存在的表，此方法将不执行任何操作。"
    - id: table
      type: System.Collections.Hashtable
      description: "The <xref href=&quot;System.Collections.Hashtable&quot;></xref> to add."
  overload: System.ComponentModel.TypeDescriptor.AddEditorTable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将添加的类型说明提供程序组件的单个实例。"
  remarks: "AddProvider 方法将添加类型说明提供程序提供类型的组件的单个实例的信息。 如果此方法，该提供程序的添加提供程序<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>将不调用方法，因为该实例已经存在。</xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A>       此方法不维护对该组件的硬引用，因此不会阻止该组件正在最后完成。       它是可以添加多个类型说明提供程序的相同类型或对象。 如果发生这种情况，将以独占方式使用的第一个类型说明提供遇到提供类型信息。 由于类型信息提供程序存储堆栈中，添加的最后一个提供将第一个查询。 此行为能让 AddProvider 和<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>方法用于进行推送和弹出类型说明提供程序所需的特定方案。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       如果成功，此方法调用<xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>方法`instance`参数。</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Object%29>      1> [!NOTE]&1;> 此方法的两个版本生成和不同作用域的结果。 <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>采用的方法<xref:System.Object>参数只影响该单个实例的指定的组件。</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 与此相反，另一重载，它将采用<xref:System.Type>参数，会影响该类型所描述的组件的所有实例。</xref:System.Type>       使用<xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>方法如果你需要从部分受信任代码调用。</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将添加的类型说明提供程序的组件类。"
  remarks: "AddProvider 方法添加类型说明提供程序指定的类、 派生的类和这些类型的所有实例的该提供类型信息。      1> [!NOTE]&1;>`type`参数可以是任何类型，包括一个接口。 例如，若要提供自定义类型和实例的所有组件的信息，应指定`typeof(IComponent)`。 传递`typeof(object)`将调用提供程序提供所有类型的类型信息。       此方法不维护对任何对象的硬引用，因此不会阻止对象正在最后完成。       它是可以添加多个类型说明提供程序的相同类型或对象。 如果发生这种情况，将以独占方式使用的第一个类型说明提供遇到提供类型信息。 由于类型信息提供程序存储在堆栈中，添加的最后一个提供将第一个查询。 此行为能让 AddProvider 和<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>方法用于进行推送和弹出类型说明提供程序所需的特定方案。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%2A>       如果成功，此方法调用<xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>方法`type`参数。</xref:System.ComponentModel.TypeDescriptor.Refresh%28System.Type%29>      1> [!NOTE]&1;> 此方法的两个版本生成和不同作用域的结果。 <xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>采用的方法<xref:System.Object>参数只影响该单个实例的指定的组件。</xref:System.Object> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 与此相反，另一重载，它将采用<xref:System.Type>参数，会影响该类型所描述的组件的所有实例。</xref:System.Type>       使用<xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>方法如果你需要从部分受信任代码调用。</xref:System.ComponentModel.TypeDescriptor.AddProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将添加的类型说明提供程序组件的单个实例。"
  remarks: "从部分受信任的代码可以调用此方法。 如果<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>是定义，调用方可以注册的提供程序的指定实例如果其类型也为部分受信任。</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       使用<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>如果不需要从部分受信任代码调用的方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将添加的类型说明提供程序的组件类。"
  remarks: "从部分受信任的代码可以调用此方法。 如果<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>是定义，调用方可以注册的提供程序的指定类型是否也部分受信任。</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       使用<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>如果不需要从部分受信任代码调用的方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void AddProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "The <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref> to add."
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  id: ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取或设置用于目标组件的组件对象模型 (COM) 类型信息的提供程序。"
  remarks: "ComNativeDescriptorHandler 属性和<xref:System.ComponentModel.IComNativeDescriptorHandler>接口已过时。</xref:System.ComponentModel.IComNativeDescriptorHandler> 有关详细信息，请参阅<xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>属性。</xref:System.ComponentModel.TypeDescriptor.ComObjectType%2A>"
  syntax:
    content: public static System.ComponentModel.IComNativeDescriptorHandler ComNativeDescriptorHandler { get; set; }
    return:
      type: System.ComponentModel.IComNativeDescriptorHandler
      description: "<xref href=&quot;System.ComponentModel.IComNativeDescriptorHandler&quot;> </xref>表示 COM 类型信息提供程序的实例。"
  overload: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  id: ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取由目标组件表示的组件对象模型 (COM) 对象的类型。"
  remarks: "ComObjectType 属性返回类型，可传递给<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>方法用来定义 COM 类型的类型说明提供。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>       ComObjectType 属性和其他此类中的成员替换中的过时的功能<xref:System.ComponentModel.IComNativeDescriptorHandler>接口。</xref:System.ComponentModel.IComNativeDescriptorHandler> 若要实现 COM 对象之间的映射层和<xref:System.ComponentModel.TypeDescriptor>，添加<xref:System.ComponentModel.TypeDescriptionProvider>到句柄类型 ComObjectType。</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static Type ComObjectType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>由此组件表示的 COM 对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>非 COM 对象。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.ComObjectType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  id: CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建两个对象之间的主要和辅助关联。"
  remarks: "CreateAssociation 方法创建一个主和辅助对象之间的关联。 一旦创建关联时，设计器或其他筛选机制可以添加到主对象的属性集路由到任一对象的属性。 当针对主对象，进行属性调用<xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>将调用方法，以解决与其类型参数的实际对象实例。</xref:System.ComponentModel.TypeDescriptor.GetAssociation%2A>       A<xref:System.WeakReference>用于维护主要和辅助对象之间的关联; 因此，此方法不会阻止任一对象从已完成并通过垃圾回收回收。</xref:System.WeakReference>"
  syntax:
    content: public static void CreateAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "主<xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "辅助<xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.CreateAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>primary</code>等同于<code>secondary</code>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建与指定组件关联的设计器和设计器的指定类型的实例。"
  remarks: "如果此方法找不到有效<xref:System.ComponentModel.DesignerAttribute>，它将为使设计器的类层次结构向上搜索。</xref:System.ComponentModel.DesignerAttribute> 如果它找不到类层次结构中的设计器，它将返回`null`。"
  syntax:
    content: public static System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, Type designerBaseType);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref> ，它指定要与设计器关联的组件。"
    - id: designerBaseType
      type: System.Type
      description: "A<xref:System.Type>表示设计器创建的类型。</xref:System.Type>"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "<xref href=&quot;System.ComponentModel.Design.IDesigner&quot;> </xref> ，它是该组件的设计器的实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到设计器。"
  overload: System.ComponentModel.TypeDescriptor.CreateDesigner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  id: CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建等同于现有事件描述符，当传递现有的新事件描述符<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, System.ComponentModel.EventDescriptor oldEventDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "要为其创建新的事件的组件的类型。"
    - id: oldEventDescriptor
      type: System.ComponentModel.EventDescriptor
      description: "现有的事件信息。"
    - id: attributes
      type: System.Attribute[]
      description: "新的特性。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "一个新<xref href=&quot;System.ComponentModel.EventDescriptor&quot;></xref>与现有的元数据属性指定的元数据属性进行合并。"
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建动态从上一种类型的指定事件生成描述符信息的是与现有事件描述符相同的新事件描述符。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor CreateEvent (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "组件事件的类型位于上。"
    - id: name
      type: System.String
      description: "事件的名称。"
    - id: type
      type: System.Type
      description: "处理事件的委托类型。"
    - id: attributes
      type: System.Attribute[]
      description: "此事件的特性。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>绑定到类型。"
  overload: System.ComponentModel.TypeDescriptor.CreateEvent*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建可替换为另一种数据类型的对象。"
  remarks: "CreateInstance 方法将搜索<xref:System.ComponentModel.TypeDescriptionProvider>指定与该键相关联`objectType`数据类型。</xref:System.ComponentModel.TypeDescriptionProvider> 此方法首先尝试获取的类型说明提供程序`provider`参数。 如果此操作失败，搜索其自己的内部表的提供程序 (这些项已创建的以前调用通过<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>)。</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 如果找到一个提供程序，此方法会将委托给该对象的创建调用。"
  syntax:
    content: public static object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "服务提供的提供程序<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>服务。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: objectType
      type: System.Type
      description: "<xref:System.Type>要创建的对象。</xref:System.Type>"
    - id: argTypes
      type: System.Type[]
      description: "可选参数类型数组传递给对象的构造函数。 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或零长度的数组。"
    - id: args
      type: System.Object[]
      description: "要传递给对象的构造函数的参数值的可选数组。 如果不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、 的数量的元素必须相同`argTypes`。"
    return:
      type: System.Object
      description: "如果一个关联的替代数据类型的实例<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeDescriptor.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, or <code>args</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref> when <code>argTypes</code> is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>argTypes</code>和<code>args</code>具有不同数目的元素。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  id: CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "从现有的属性描述符，使用指定的现有创建新的属性描述符<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>和特性数组。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, System.ComponentModel.PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>的属性是成员的组件。</xref:System.Type>"
    - id: oldPropertyDescriptor
      type: System.ComponentModel.PropertyDescriptor
      description: "现有的属性描述符。"
    - id: attributes
      type: System.Attribute[]
      description: "此属性的新特性。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "一个新<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>具有与现有的元数据属性合并的指定的元数据属性。"
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  id: CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建并动态地绑定到类型，使用指定的属性名称、 类型和特性数组的属性描述符。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor CreateProperty (Type componentType, string name, Type type, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>的属性是成员的组件。</xref:System.Type>"
    - id: name
      type: System.String
      description: "属性的名称。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>的属性。</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "此属性的新特性。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>绑定到指定的类型和指定的元数据属性与现有的元数据属性进行合并。"
  overload: System.ComponentModel.TypeDescriptor.CreateProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  id: GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回与指定的主要对象关联的类型的实例。"
  remarks: "如果已为进行了以前的关联`type`参数使用<xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>方法，则 GetAssociation 方法返回正确的辅助对象，来为请求的类型调用。</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A> 否则，GetAssociation 搜索兼容的设计器中，为`type`并返回设计器，如果找到一个。 此方法从不返回`null`。       A<xref:System.WeakReference>用于维护主要和辅助对象之间的关联; 因此，此方法不会阻止主或辅助对象从已完成并通过垃圾回收回收。</xref:System.WeakReference>"
  syntax:
    content: public static object GetAssociation (Type type, object primary);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    - id: primary
      type: System.Object
      description: "在关联的主对象。"
    return:
      type: System.Object
      description: "如果存在关联; 已与主要对象关联的辅助类型的实例否则为<code> primary </code>如果不指定存在关联。"
  overload: System.ComponentModel.TypeDescriptor.GetAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  id: GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的属性集合。"
  remarks: "返回的属性<xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>方法可能会从原始组件的源列表，请按扩展程序提供程序进行动态修改 (<xref:System.ComponentModel.IExtenderProvider>)，筛选服务 (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>)，和属性筛选器。</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       当你定义的自定义属性<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>设置为`true`，必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性以确保其唯一性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> 如果特性的所有实例都是唯一的重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回特性的对象标识。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 如果只有特性的一些实例是唯一的返回一个介于<xref:System.Attribute.TypeId%2A?displayProperty=fullName>，将在这些情况下返回相等性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 例如，有些属性禁用了用作唯一键的构造函数参数。 对于这些特性，返回从构造函数参数的值<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      1> [!NOTE]&1;> 的默认实现<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回而不考虑的值的类型标识<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性。</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> 若要返回的多个实例<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性从<xref:System.ComponentModel.AttributeCollection>，特性必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.AttributeCollection.Matches%2A> method.
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component);
    parameters:
    - id: component
      type: System.Object
      description: "你要为其获取特性的组件。"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>包含组件的属性。 如果<code> component </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，此方法返回一个空集合。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  id: GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件类型的特性的集合。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       有关使用属性<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>设置为`true`，属性集合中删除重复的实例。</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> 这些是在其中实例<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性返回相等的值。</xref:System.Attribute.TypeId%2A?displayProperty=fullName>       当你定义的自定义属性<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>设置为`true`，必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性以确保其唯一性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> 如果特性的所有实例都是唯一的重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回特性的对象标识。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 如果只有特性的一些实例是唯一的返回一个介于<xref:System.Attribute.TypeId%2A?displayProperty=fullName>，将在这些情况下返回相等性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 例如，有些属性禁用了用作唯一键的构造函数参数。 对于这些特性，返回从构造函数参数的值<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      1> [!NOTE]&1;> 的默认实现<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回而不考虑的值的类型标识<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性。</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> 若要返回的多个实例<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性从<xref:System.ComponentModel.AttributeCollection>，特性必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>个分量的类型的属性。 如果组件为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，此方法返回一个空集合。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  id: GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定的组件和一个布尔值，该值指示已创建的自定义类型描述符的属性的集合。"
  remarks: "返回的属性<xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>方法可能会从原始的组件源列表，请按扩展程序提供程序进行动态修改 (<xref:System.ComponentModel.IExtenderProvider>)，筛选服务 (<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>)，和属性筛选器。</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> </xref:System.ComponentModel.IExtenderProvider> </xref:System.ComponentModel.TypeDescriptor.GetAttributes%2A>       当你定义的自定义属性<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>设置为`true`，必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性以确保其唯一性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> 如果特性的所有实例都是唯一的重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回特性的对象标识。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 如果只有特性的一些实例是唯一的返回一个介于<xref:System.Attribute.TypeId%2A?displayProperty=fullName>，将在这些情况下返回相等性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> 例如，有些属性禁用了用作唯一键的构造函数参数。 对于这些特性，返回从构造函数参数的值<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName>      1> [!NOTE]&1;> 的默认实现<xref:System.Attribute.TypeId%2A?displayProperty=fullName>返回而不考虑的值的类型标识<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性。</xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName> </xref:System.Attribute.TypeId%2A?displayProperty=fullName> 若要返回的多个实例<xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>属性从<xref:System.ComponentModel.AttributeCollection>，特性必须重写<xref:System.Attribute.TypeId%2A?displayProperty=fullName>属性。</xref:System.Attribute.TypeId%2A?displayProperty=fullName> </xref:System.ComponentModel.AttributeCollection> </xref:System.AttributeUsageAttribute.AllowMultiple%2A?displayProperty=fullName>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection GetAttributes (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "你要为其获取特性的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要使用自定义类型说明符中特性的基准要求集，如果`component`属于类型<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>与组件的属性。 如果组件为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，此方法返回一个空集合。"
  overload: System.ComponentModel.TypeDescriptor.GetAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  id: GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用默认类型描述符的指定组件的类的名称。"
  remarks: "通常情况下，此方法返回完整<xref:System.Type>名称`component`参数类型。</xref:System.Type> 例如，一个按钮的类名称是&quot;System.Windows.Forms.Button&quot;。 如果`component`实现<xref:System.ComponentModel.ICustomTypeDescriptor>，它可返回的备用名称。</xref:System.ComponentModel.ICustomTypeDescriptor>       此方法相当于重载<xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>方法的第二个参数替换`false`。</xref:System.ComponentModel.TypeDescriptor.GetClassName%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static string GetClassName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>需要为其类名。</xref:System.Object>"
    return:
      type: System.String
      description: "A<xref:System.String>包含指定组件的类的名称。</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  id: GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的类的名称。"
  remarks: "此方法使用的指定类型的缓存的自定义类型描述符来发现的关联的类名称。"
  syntax:
    content: public static string GetClassName (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.String
      description: "A<xref:System.String>包含指定的组件类型的类的名称。</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  id: GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用自定义类型描述符的指定组件的类的名称。"
  remarks: "通常情况下，此方法返回完整<xref:System.Type>名称`component`参数类型。</xref:System.Type> 例如，一个按钮的类名称是&quot;System.Windows.Forms.Button&quot;。 如果`component`参数实现<xref:System.ComponentModel.ICustomTypeDescriptor>，它可返回的备用名称。</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetClassName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>需要为其类名。</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "A<xref:System.String>包含指定组件的类的名称。</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetClassName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  id: GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用默认类型描述符的指定组件的名称。"
  remarks: "通常情况下，如果存在此方法将返回该组件的站点的名称。 例如，一个按钮的类名称是&quot;System.Windows.Forms.Button&quot;。       此方法相当于重载<xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>其中第二个参数的方法`false`。</xref:System.ComponentModel.TypeDescriptor.GetComponentName%28System.Object%2CSystem.Boolean%29>       此方法用于在设计时检索的组件的实例的名称。"
  syntax:
    content: public static string GetComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>需要为其类名。</xref:System.Object>"
    return:
      type: System.String
      description: "A<xref:System.String>包含的指定组件的名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有任何组件名。</xref:System.String>"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  id: GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用自定义类型描述符的指定组件的名称。"
  remarks: "此方法用于在设计时检索的组件的实例的名称。 通常情况下，如果存在此方法将返回该组件的站点的名称。 例如，一个按钮的类名称是&quot;System.Windows.Forms.Button&quot;。 如果该组件实现<xref:System.ComponentModel.ICustomTypeDescriptor>接口，它可以返回的备用名称。</xref:System.ComponentModel.ICustomTypeDescriptor>"
  syntax:
    content: public static string GetComponentName (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "<xref:System.Object>需要为其类名。</xref:System.Object>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "对于指定的组件中，类的名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有任何组件名。"
  overload: System.ComponentModel.TypeDescriptor.GetComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  id: GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件类型的类型转换器。"
  remarks: "此方法通过一种<xref:System.ComponentModel.TypeConverterAttribute>。</xref:System.ComponentModel.TypeConverterAttribute>查找来查找相应的类型转换器 如果找不到<xref:System.ComponentModel.TypeConverterAttribute>，它遍历类的基类层次结构，直到它找到的基元类型。</xref:System.ComponentModel.TypeConverterAttribute>       此方法相当于重载<xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>方法的第二个参数替换`false`。</xref:System.ComponentModel.TypeDescriptor.GetConverter%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.TypeConverter> class.
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要为其获取转换器的组件。"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定组件。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  id: GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的类型转换器。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       此方法通过一种<xref:System.ComponentModel.TypeConverterAttribute>。</xref:System.ComponentModel.TypeConverterAttribute>查找来查找适当的类型转换器 如果找不到<xref:System.ComponentModel.TypeConverterAttribute>，它遍历类的基类层次结构，直到它找到的基元类型。</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定类型。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  id: GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有自定义类型描述符的指定组件类型的类型转换器。"
  remarks: "此方法通过尝试查找<xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute>查找适当的类型转换器 如果找不到<xref:System.ComponentModel.TypeConverterAttribute>，它遍历类的基类层次结构，直到它找到的基元类型。</xref:System.ComponentModel.TypeConverterAttribute>"
  syntax:
    content: public static System.ComponentModel.TypeConverter GetConverter (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要为其获取转换器的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>指定组件。"
  overload: System.ComponentModel.TypeDescriptor.GetConverter*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  id: GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的默认事件。"
  remarks: "此方法相当于重载<xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>方法的第二个参数替换`false`。</xref:System.ComponentModel.TypeDescriptor.GetDefaultEvent%28System.Object%2CSystem.Boolean%29>"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其事件的组件。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>与默认事件，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否存在任何事件。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  id: GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的组件的默认事件。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>与默认事件，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否存在任何事件。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  id: GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有自定义类型描述符的组件的默认事件。"
  syntax:
    content: public static System.ComponentModel.EventDescriptor GetDefaultEvent (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其事件的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.EventDescriptor
      description: "<xref href=&quot;System.ComponentModel.EventDescriptor&quot;> </xref>与默认事件，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是否存在任何事件。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  id: GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的默认属性。"
  remarks: "如果`component`参数是`null`，此方法返回`null`。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其默认属性的组件。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>具有默认属性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有属性。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  id: GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的组件的默认属性。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       如果`componentType`参数是`null`，此方法返回`null`。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>它表示要获取属性为的类</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>具有默认属性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有属性。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  id: GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回自定义类型描述符的指定组件的默认属性。"
  remarks: "如果`component`参数是`null`，此方法返回`null`。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptor GetDefaultProperty (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其默认属性的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>具有默认属性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有属性。"
  overload: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  id: GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取具有指定的基类型指定组件的编辑器。"
  remarks: "一种`editorBaseType`通常是<xref:System.Drawing.Design.UITypeEditor>，但你也可以使用其他类型 (例如，<xref:System.ComponentModel.ComponentEditor>和<xref:System.ComponentModel.InstanceCreationEditor>)。</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       你可以定义多个属性编辑器。 使用此方法以选择你想要使用的编辑器。"
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType);
    parameters:
    - id: component
      type: System.Object
      description: "要获取的编辑器的组件。"
    - id: editorBaseType
      type: System.Type
      description: "A<xref:System.Type>表示你想要查找的编辑器基类型。</xref:System.Type>"
    return:
      type: System.Object
      description: "可以强制转换为指定的编辑器类型，编辑器的一个实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到请求类型的编辑器。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  id: GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回与指定类型的指定基类型的编辑器。"
  remarks: "一种`editorBaseType`通常是<xref:System.Drawing.Design.UITypeEditor>，但你也可以使用其他类型 (例如<xref:System.ComponentModel.ComponentEditor>和<xref:System.ComponentModel.InstanceCreationEditor>)。</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       你可以定义多个类型的编辑器。 使用此方法以选择你想要使用的一个。       仅当没有对象的实例时，请调用此方法的此版本。"
  syntax:
    content: public static object GetEditor (Type type, Type editorBaseType);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    - id: editorBaseType
      type: System.Type
      description: "A <xref:System.Type>，它表示要查找的编辑器的基类型。</xref:System.Type>"
    return:
      type: System.Object
      description: "可以强制转换为给定的基类型，编辑器对象的实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到请求类型的编辑器。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  id: GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回与指定的基类型和指定组件的自定义类型描述符的编辑器。"
  remarks: "一种`editorBaseType`通常是<xref:System.Drawing.Design.UITypeEditor>，但你也可以使用其他类型 (例如<xref:System.ComponentModel.ComponentEditor>和<xref:System.ComponentModel.InstanceCreationEditor>)。</xref:System.ComponentModel.InstanceCreationEditor> </xref:System.ComponentModel.ComponentEditor> </xref:System.Drawing.Design.UITypeEditor>       你可以定义多个属性编辑器。 使用此方法以选择你想要使用的编辑器。"
  syntax:
    content: public static object GetEditor (object component, Type editorBaseType, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取的编辑器的组件。"
    - id: editorBaseType
      type: System.Type
      description: "A<xref:System.Type>表示你想要查找的编辑器基类型。</xref:System.Type>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "一个标志，用于指示是否应考虑自定义类型说明信息。"
    return:
      type: System.Object
      description: "可以强制转换为指定的编辑器类型，编辑器的一个实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到请求类型的编辑器。"
  overload: System.ComponentModel.TypeDescriptor.GetEditor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>editorBaseType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  id: GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的事件的集合。"
  remarks: "检索事件的集合，给定`component`参数实例提供。 此集合可以与此类提供的事件集不同。 如果`component`占位参数，则该位置可以添加或删除其他事件。       如果`component`是`null`，则返回空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  example:
  - For an example of this method, see the <xref:System.ComponentModel.EventDescriptorCollection.Count%2A> property.
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要获取事件的组件。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有此组件的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  id: GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有指定类型的组件的事件的集合。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       如果`componentType`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有此组件的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  id: GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件使用指定的属性数组作为筛选器的事件的集合。"
  remarks: "有关事件`component`参数可以与不同，事件的类，因为该位置可以添加或删除事件，如果`component`放置参数。       `attributes`数组可以包含多种<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>视为通配符; 它与具有任何事件匹配<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果事件没有<xref:System.Attribute>的同一个类，事件不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，事件必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认事件，它包括在返回的数组，即使不没有的任何实例<xref:System.Attribute>的事件中。</xref:System.Attribute> </xref:System.Attribute>       如果`component`是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "要获取事件的组件。"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>可以用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有匹配此组件指定的属性的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  id: GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有自定义类型描述符的指定组件的事件的集合。"
  remarks: "此方法检索的事件的集合，给定`component`参数实例提供。 这可能不同于类提供的事件集。 如果`component`占位参数，则该位置可以添加或删除其他事件。       如果`component`是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取事件的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有此组件的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  id: GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有指定类型的组件使用指定的属性数组作为筛选器的事件的集合。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       `attributes`参数数组可以包含多种<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>视为通配符; 它与具有任何事件匹配<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果事件没有<xref:System.Attribute>的同一个类，事件不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，事件必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认事件，它包括在返回的数组，即使不没有的任何实例<xref:System.Attribute>的事件中。</xref:System.Attribute> </xref:System.Attribute>       如果`componentType`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>可以用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有匹配此组件指定的属性的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  id: GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用指定的属性数组作为筛选器并使用自定义类型描述符的指定组件的事件的集合。"
  remarks: "有关事件`component`参数可以与不同，事件的类，因为该位置可以添加或删除事件，如果`component`放置参数。       `attributes`参数数组可以包含多种<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>视为通配符; 它与具有任何事件匹配<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果事件没有<xref:System.Attribute>的同一个类，事件不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，事件必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认事件，它包括在返回的数组，即使不没有的任何实例<xref:System.Attribute>的事件中。</xref:System.Attribute> </xref:System.Attribute>       如果`component`是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.EventDescriptorCollection GetEvents (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取事件的组件。"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.EventDescriptorCollection
      description: "<xref href=&quot;System.ComponentModel.EventDescriptorCollection&quot;> </xref>具有匹配此组件指定的属性的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetEvents*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回组件的完全限定的名称。"
  remarks: "在许多情况下，GetFullComponentName 方法将返回相同的值<xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A>方法。</xref:System.ComponentModel.TypeDescriptor.GetComponentName%2A> 但是，如果该组件位于嵌套容器，或者具有其他嵌套的语义，它可能返回不同的完全限定的名称。"
  syntax:
    content: public static string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "<xref href=&quot;System.ComponentModel.Component&quot;> </xref>若要查找的名称。"
    return:
      type: System.String
      description: "指定的组件的完全限定的名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果该组件没有名称。"
  overload: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的属性集合。"
  remarks: "组件的属性可能与不同的属性类，因为该位置可以添加或删除属性，如果组件所在。       如果`component`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  example:
  - "The following code example demonstrates the use of the GetProperties method to access the properties of a control. This code example is part of a larger example provided for the <xref:System.ComponentModel.Design.ComponentDesigner> class.  \n  \n [!code-vb[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/visualbasic/m-system.componentmodel._38_1.vb)]\n [!code-cs[System.ComponentModel.Design.DesignerServices#8](~/add/codesnippet/csharp/m-system.componentmodel._38_1.cs)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其属性的组件。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>具有指定组件的属性。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  id: GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有指定类型的组件的属性的集合。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       如果`componentType`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>表示要获取属性为的组件</xref:System.Type>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>具有指定类型的组件的属性。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  id: GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件使用指定的属性数组作为筛选器的属性的集合。"
  remarks: "属性`component`参数可以不同于类的属性，因为该位置可以添加或删除属性，如果`component`放置参数。       `attributes`参数数组用于筛选数组。 筛选由以下规则定义:-如果属性不具有<xref:System.Attribute>的同一个类，该属性不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，该属性必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认属性，它也包括在返回的数组，即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>      -如果`attributes`具有默认属性，GetProperties 方法匹配大小写，如果属性不具有应用的属性。       如果`component`是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/0d160e65-8e23-4623-ad72-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/0d160e65-8e23-4623-ad72-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/0d160e65-8e23-4623-ad72-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其属性的组件。"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>与相匹配的指定组件的指定的属性的属性。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  id: GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件使用的默认类型描述符的属性的集合。"
  remarks: "属性`component`参数可以不同于类的属性，因为该位置可以添加或删除属性，如果`component`放置参数。       如果`component`是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其属性的组件。"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若不考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>具有指定组件的属性。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  id: GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回具有指定类型的组件使用指定的属性数组作为筛选器的属性的集合。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       `attributes`参数数组用于筛选数组。 筛选由以下规则定义:-如果属性不具有<xref:System.Attribute>的同一个类，该属性不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，该属性必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认属性，它也包括在返回的数组，即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>      -如果`attributes`具有默认属性，GetProperties 方法匹配大小写，如果属性不具有应用的属性。       如果`componentType`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  example:
  - "The following code example demonstrates how to implement the <xref:System.Windows.Forms.Design.PropertyTab.GetProperties%2A> method. This code example is part of a larger example provided for the <xref:System.Windows.Forms.Design.PropertyTab> class.  \n  \n [!code-cs[PropertyTabExample#2](~/add/codesnippet/csharp/af245915-0d17-4307-99bf-_1.cs)]\n [!code-cpp[PropertyTabExample#2](~/add/codesnippet/cpp/af245915-0d17-4307-99bf-_1.cpp)]\n [!code-vb[PropertyTabExample#2](~/add/codesnippet/visualbasic/af245915-0d17-4307-99bf-_1.vb)]"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (Type componentType, Attribute[] attributes);
    parameters:
    - id: componentType
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>与匹配这种类型的组件指定的属性的属性。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  id: GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用指定的属性数组作为筛选器并使用自定义类型描述符的指定组件的属性的集合。"
  remarks: "属性`component`可以不同于类的属性，因为该位置可以添加或删除属性，如果`component`占位。       `attributes`参数数组用于筛选数组。 筛选由以下规则定义:-如果属性不具有<xref:System.Attribute>的同一个类，该属性不包括在返回数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>类，该属性必须是完全匹配，或它不包括在返回的数组。</xref:System.Attribute>      -如果<xref:System.Attribute>指定实例和它是默认属性，它也包括在返回的数组，即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>      -如果`attributes`具有默认属性，GetProperties 方法匹配大小写，如果属性不具有应用的属性。       如果`component`参数是`null`，返回一个空集合。       返回的集合的顺序是不能保证是调用之间完全相同，因此总是在使用之前进行排序。"
  syntax:
    content: public static System.ComponentModel.PropertyDescriptorCollection GetProperties (object component, Attribute[] attributes, bool noCustomTypeDesc);
    parameters:
    - id: component
      type: System.Object
      description: "要获取其属性的组件。"
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    - id: noCustomTypeDesc
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要考虑自定义类型说明信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>具有指定组件的指定的属性相匹配的事件。"
  overload: System.ComponentModel.TypeDescriptor.GetProperties*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>component</code>是一个跨进程进行远程处理对象。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  id: GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定组件的类型说明提供。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>方法将始终返回的类型说明提供。</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> 即使默认<xref:System.ComponentModel.TypeDescriptor>实现基于一种<xref:System.ComponentModel.TypeDescriptionProvider>。</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>与指定组件关联。"
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  id: GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的类型说明提供。"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetProvider%2A>方法将始终返回的类型说明提供。</xref:System.ComponentModel.TypeDescriptor.GetProvider%2A> 即使默认<xref:System.ComponentModel.TypeDescriptor>实现基于一种<xref:System.ComponentModel.TypeDescriptionProvider>。</xref:System.ComponentModel.TypeDescriptionProvider> </xref:System.ComponentModel.TypeDescriptor>"
  syntax:
    content: public static System.ComponentModel.TypeDescriptionProvider GetProvider (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.ComponentModel.TypeDescriptionProvider
      description: "A <xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>与指定类型关联。"
  overload: System.ComponentModel.TypeDescriptor.GetProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref:System.Type>可以用于执行反射，给定对象。</xref:System.Type>"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>方法是低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>通常用于执行与对象的标准反射，如果没有自定义类型描述符可以为其所在。</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
    return:
      type: System.Type
      description: "A<xref:System.Type>指定的对象。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref:System.Type>可以用于执行反射，给定类类型。</xref:System.Type>"
  remarks: "<xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>方法是低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A> <xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>通常用于执行根据某个类的标准反射，如果没有自定义类型描述符可以找到它。</xref:System.ComponentModel.TypeDescriptor.GetReflectionType%2A>"
  syntax:
    content: public static Type GetReflectionType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
    return:
      type: System.Type
      description: "<xref:System.Type>的指定的类。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  id: InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取表示所有接口类型的类型说明提供一个类型。"
  remarks: "InterfaceType 属性获取<xref:System.Type>可以将传递到的对象<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>方法来定义的类型说明提供程序接口类型。</xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> </xref:System.Type>"
  syntax:
    content: public static Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>对所有接口类型表示的自定义类型说明提供程序。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.InterfaceType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  id: Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "清除的属性和从缓存指定组件的事件。"
  remarks: "通过缓存属性和事件<xref:System.ComponentModel.TypeDescriptor>的速度。</xref:System.ComponentModel.TypeDescriptor> 通常情况下，它们是常量对象的生存期内。 但是，扩展程序提供程序和设计器可以更改对象上的属性的集。 如果他们这样做，它们应调用此方法以清除该对象的属性和事件描述符。 此方法仅在设计时使用。 在运行时不使用它。       此方法也会引发<xref:System.ComponentModel.TypeDescriptor.Refreshed>事件的属性或事件的组件更改时。</xref:System.ComponentModel.TypeDescriptor.Refreshed> 如果没有调用仅将引发此事件<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>或<xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>缓存信息的方法。</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  example:
  - For an example of using this method, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static void Refresh (object component);
    parameters:
    - id: component
      type: System.Object
      description: "更改具有属性或事件的组件。"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  id: Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定程序集，从缓存中清除的属性和事件。"
  remarks: "通过缓存属性和事件<xref:System.ComponentModel.TypeDescriptor>的速度。</xref:System.ComponentModel.TypeDescriptor> 通常情况下，它们是常量对象的生存期内。 但是，扩展程序提供程序和设计器可以更改对象上的属性的集。 如果他们这样做，它们可以调用此方法以清除该对象的属性和事件描述符。 此方法仅在设计时使用。 在运行时不使用它。       在进行调用之前<xref:System.ComponentModel.TypeDescriptor.Refresh%2A>方法来清除缓存中，你需要调用<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>要首先缓存该信息的特定程序集的方法。</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       此方法也会引发<xref:System.ComponentModel.TypeDescriptor.Refreshed>事件来通知想要将属性设置的组件更改通知的所有类。</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Assembly assembly);
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "<xref:System.Reflection.Assembly>，它表示要刷新的程序集。</xref:System.Reflection.Assembly> 每个<xref:System.Type>此程序集中将刷新。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  id: Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "清除的属性和从缓存指定模块的事件。"
  remarks: "通过缓存属性和事件<xref:System.ComponentModel.TypeDescriptor>的速度。</xref:System.ComponentModel.TypeDescriptor> 通常情况下，它们是常量对象的生存期内。 但是，扩展程序提供程序和设计器可以更改对象上的属性的集。 如果他们这样做，它们可以调用此方法以清除该对象的属性和事件描述符。 此方法仅在设计时使用。 在运行时不使用它。       在进行调用之前<xref:System.ComponentModel.TypeDescriptor.Refresh%2A>方法来清除缓存中，你需要调用<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>为特定的模块，以首先缓存信息的方法。</xref:System.ComponentModel.TypeDescriptor.GetProperties%2A> </xref:System.ComponentModel.TypeDescriptor.Refresh%2A>       此方法也会引发<xref:System.ComponentModel.TypeDescriptor.Refreshed>事件来通知想要将属性设置的组件更改通知的所有类。</xref:System.ComponentModel.TypeDescriptor.Refreshed>"
  syntax:
    content: public static void Refresh (System.Reflection.Module module);
    parameters:
    - id: module
      type: System.Reflection.Module
      description: "<xref:System.Reflection.Module>，表示要刷新的模块。</xref:System.Reflection.Module> 每个<xref:System.Type>在此模块将刷新。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  id: Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "清除的属性和从缓存的组件的指定类型的事件。"
  remarks: "仅当没有对象的实例时，请调用此方法的此版本。       通过缓存属性和事件<xref:System.ComponentModel.TypeDescriptor>的速度。</xref:System.ComponentModel.TypeDescriptor> 通常情况下，它们是常量对象的生存期内。 但是，扩展程序提供程序和设计器可以更改对象上的属性的集。 如果他们这样做，它们可以调用此方法以清除该对象的属性和事件描述符。 此方法仅在设计时使用。 在运行时不使用它。       此方法也会引发<xref:System.ComponentModel.TypeDescriptor.Refreshed>事件的属性或事件的组件更改时。</xref:System.ComponentModel.TypeDescriptor.Refreshed> 如果没有调用仅将引发此事件<xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>或<xref:System.ComponentModel.TypeDescriptor.GetEvents%2A>缓存信息的方法。</xref:System.ComponentModel.TypeDescriptor.GetEvents%2A> </xref:System.ComponentModel.TypeDescriptor.GetProperties%2A>"
  syntax:
    content: public static void Refresh (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.Refresh*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  id: Refreshed
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "清除组件的缓存时发生。"
  remarks: '有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  example:
  - For an example of using this event, see the <xref:System.ComponentModel.RefreshEventHandler> class.
  syntax:
    content: public static event System.ComponentModel.RefreshEventHandler Refreshed;
    return:
      type: System.ComponentModel.RefreshEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  id: RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除两个对象之间的关联。"
  remarks: "RemoveAssociation 方法删除由构成的两个对象之间的关联<xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>方法。</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       A<xref:System.WeakReference>用于维护主要和辅助对象之间的关联; 因此，此方法不会影响时终止或通过垃圾回收回收可能是对象。</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociation (object primary, object secondary);
    parameters:
    - id: primary
      type: System.Object
      description: "主<xref:System.Object>.</xref:System.Object>"
    - id: secondary
      type: System.Object
      description: "辅助<xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  id: RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除主要对象的所有关联。"
  remarks: "RemoveAssociations 方法中删除所有关联的主对象和所有辅助对象，通过调用之间<xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>方法。</xref:System.ComponentModel.TypeDescriptor.CreateAssociation%2A>       A<xref:System.WeakReference>用于维护主要和辅助对象之间的关联; 因此，，此方法不会影响何时完成或通过垃圾回收回收辅助对象主。</xref:System.WeakReference>"
  syntax:
    content: public static void RemoveAssociations (object primary);
    parameters:
    - id: primary
      type: System.Object
      description: "主<xref:System.Object>关联中。</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>primary</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除以前添加的类型说明提供程序与指定的对象相关联。"
  remarks: "此方法可以删除以前添加的类型说明提供<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> 删除一个提供程序会导致<xref:System.ComponentModel.TypeDescriptor.Refreshed>关联的对象引发的事件。</xref:System.ComponentModel.TypeDescriptor.Refreshed>       使用<xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>如果你需要从部分受信任代码调用的方法。</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>删除。"
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "移除以前添加的类型说明提供程序与指定的类型相关联。"
  remarks: "此方法可以删除以前添加的类型说明提供<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> 删除一个提供程序会导致<xref:System.ComponentModel.TypeDescriptor.Refreshed>关联的类型中引发的事件。</xref:System.ComponentModel.TypeDescriptor.Refreshed>       使用<xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>方法如果你需要从部分受信任代码调用。</xref:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProvider (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>删除。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProvider*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "删除以前添加的类型说明提供程序与指定的对象相关联。"
  remarks: "此方法可以删除以前添加的类型说明提供<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29> 删除一个提供程序会导致<xref:System.ComponentModel.TypeDescriptor.Refreshed>关联的对象引发的事件。</xref:System.ComponentModel.TypeDescriptor.Refreshed>       从部分受信任的代码可以调用此方法。 如果<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>是定义，调用方可以注册的提供程序的指定实例如果其类型也为部分受信任。</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       使用<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>如果不需要从部分受信任代码调用的方法。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Object%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, object instance);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>删除。"
    - id: instance
      type: System.Object
      description: "目标组件的实例。"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  id: RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "移除以前添加的类型说明提供程序与指定的类型相关联。"
  remarks: "此方法可以删除以前添加的类型说明提供<xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>方法。</xref:System.ComponentModel.TypeDescriptor.AddProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29> 删除一个提供程序会导致<xref:System.ComponentModel.TypeDescriptor.Refreshed>关联的类型中引发的事件。</xref:System.ComponentModel.TypeDescriptor.Refreshed>       从部分受信任的代码可以调用此方法。 如果<xref:System.Security.Permissions.TypeDescriptorPermissionFlags>是定义，调用方可以取消注册的提供程序的指定类型是否也部分受信任。</xref:System.Security.Permissions.TypeDescriptorPermissionFlags>       使用<xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>如果不需要从部分受信任代码调用的方法。</xref:System.ComponentModel.TypeDescriptor.RemoveProvider%28System.ComponentModel.TypeDescriptionProvider%2CSystem.Type%29>"
  syntax:
    content: public static void RemoveProviderTransparent (System.ComponentModel.TypeDescriptionProvider provider, Type type);
    parameters:
    - id: provider
      type: System.ComponentModel.TypeDescriptionProvider
      description: "<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;> </xref>删除。"
    - id: type
      type: System.Type
      description: "<xref:System.Type>目标组件。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  id: SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  langs:
  - csharp
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "使用描述符的名称的描述符进行排序。"
  syntax:
    content: public static void SortDescriptorArray (System.Collections.IList infos);
    parameters:
    - id: infos
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>，其中包含要排序的描述符。</xref:System.Collections.IList>"
  overload: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>infos</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Object,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes(Type,Attribute[])
  nameWithType: TypeDescriptor.AddAttributes(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.AddAttributes(Type,Attribute[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable(Type,Hashtable)
  nameWithType: TypeDescriptor.AddEditorTable(Type,Hashtable)
  fullName: System.ComponentModel.TypeDescriptor.AddEditorTable(Type,Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.AddProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
  fullName: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.IComNativeDescriptorHandler
  parent: System.ComponentModel
  isExternal: false
  name: IComNativeDescriptorHandler
  nameWithType: IComNativeDescriptorHandler
  fullName: System.ComponentModel.IComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
  fullName: System.ComponentModel.TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation(Object,Object)
  nameWithType: TypeDescriptor.CreateAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.CreateAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner(IComponent,Type)
  nameWithType: TypeDescriptor.CreateDesigner(IComponent,Type)
  fullName: System.ComponentModel.TypeDescriptor.CreateDesigner(IComponent,Type)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,EventDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,EventDescriptor,Attribute[])
- uid: System.ComponentModel.EventDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.ComponentModel.EventDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateEvent(Type,String,Type,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptor.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,PropertyDescriptor,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,PropertyDescriptor,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty(Type,String,Type,Attribute[])
  nameWithType: TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.CreateProperty(Type,String,Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation(Type,Object)
  nameWithType: TypeDescriptor.GetAssociation(Type,Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAssociation(Type,Object)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object)
  nameWithType: TypeDescriptor.GetAttributes(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object)
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Type)
  nameWithType: TypeDescriptor.GetAttributes(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Type)
- uid: System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes(Object,Boolean)
  nameWithType: TypeDescriptor.GetAttributes(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetAttributes(Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object)
  nameWithType: TypeDescriptor.GetClassName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Type)
  nameWithType: TypeDescriptor.GetClassName(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Type)
- uid: System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName(Object,Boolean)
  nameWithType: TypeDescriptor.GetClassName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetClassName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object)
  nameWithType: TypeDescriptor.GetComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName(Object,Boolean)
  nameWithType: TypeDescriptor.GetComponentName(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetComponentName(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object)
  nameWithType: TypeDescriptor.GetConverter(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object)
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Type)
  nameWithType: TypeDescriptor.GetConverter(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Type)
- uid: System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter(Object,Boolean)
  nameWithType: TypeDescriptor.GetConverter(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetConverter(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Type)
  nameWithType: TypeDescriptor.GetDefaultEvent(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultEvent(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultEvent(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Type)
  nameWithType: TypeDescriptor.GetDefaultProperty(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Type)
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty(Object,Boolean)
  nameWithType: TypeDescriptor.GetDefaultProperty(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetDefaultProperty(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type)
  nameWithType: TypeDescriptor.GetEditor(Object,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Type,Type)
  nameWithType: TypeDescriptor.GetEditor(Type,Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Type,Type)
- uid: System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor(Object,Type,Boolean)
  nameWithType: TypeDescriptor.GetEditor(Object,Type,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEditor(Object,Type,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object)
  nameWithType: TypeDescriptor.GetEvents(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object)
- uid: System.ComponentModel.EventDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: EventDescriptorCollection
  nameWithType: EventDescriptorCollection
  fullName: System.ComponentModel.EventDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeDescriptor.GetEvents(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Type,Attribute[])
  nameWithType: TypeDescriptor.GetEvents(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetEvents(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptor.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetFullComponentName(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object)
  nameWithType: TypeDescriptor.GetProperties(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeDescriptor.GetProperties(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Type,Attribute[])
  nameWithType: TypeDescriptor.GetProperties(Type,Attribute[])
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Type,Attribute[])
- uid: System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties(Object,Attribute[],Boolean)
  nameWithType: TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
  fullName: System.ComponentModel.TypeDescriptor.GetProperties(Object,Attribute[],Boolean)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Object)
  nameWithType: TypeDescriptor.GetProvider(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Object)
- uid: System.ComponentModel.TypeDescriptor.GetProvider(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider(Type)
  nameWithType: TypeDescriptor.GetProvider(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetProvider(Type)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptor.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptor.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptor.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptor.InterfaceType
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
  fullName: System.ComponentModel.TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Object)
  nameWithType: TypeDescriptor.Refresh(Object)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Object)
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Assembly)
  nameWithType: TypeDescriptor.Refresh(Assembly)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Module)
  nameWithType: TypeDescriptor.Refresh(Module)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Module)
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: true
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.ComponentModel.TypeDescriptor.Refresh(System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh(Type)
  nameWithType: TypeDescriptor.Refresh(Type)
  fullName: System.ComponentModel.TypeDescriptor.Refresh(Type)
- uid: System.ComponentModel.TypeDescriptor.Refreshed
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refreshed
  nameWithType: TypeDescriptor.Refreshed
  fullName: System.ComponentModel.TypeDescriptor.Refreshed
- uid: System.ComponentModel.RefreshEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RefreshEventHandler
  nameWithType: RefreshEventHandler
  fullName: System.ComponentModel.RefreshEventHandler
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation(Object,Object)
  nameWithType: TypeDescriptor.RemoveAssociation(Object,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociation(Object,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations(Object)
  nameWithType: TypeDescriptor.RemoveAssociations(Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveAssociations(Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProvider(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Object)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Object)
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent(TypeDescriptionProvider,Type)
  nameWithType: TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
  fullName: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(TypeDescriptionProvider,Type)
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray(IList)
  nameWithType: TypeDescriptor.SortDescriptorArray(IList)
  fullName: System.ComponentModel.TypeDescriptor.SortDescriptorArray(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.TypeDescriptor.AddAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddAttributes
  nameWithType: TypeDescriptor.AddAttributes
- uid: System.ComponentModel.TypeDescriptor.AddEditorTable*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddEditorTable
  nameWithType: TypeDescriptor.AddEditorTable
- uid: System.ComponentModel.TypeDescriptor.AddProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProvider
  nameWithType: TypeDescriptor.AddProvider
- uid: System.ComponentModel.TypeDescriptor.AddProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: AddProviderTransparent
  nameWithType: TypeDescriptor.AddProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComNativeDescriptorHandler
  nameWithType: TypeDescriptor.ComNativeDescriptorHandler
- uid: System.ComponentModel.TypeDescriptor.ComObjectType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: ComObjectType
  nameWithType: TypeDescriptor.ComObjectType
- uid: System.ComponentModel.TypeDescriptor.CreateAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateAssociation
  nameWithType: TypeDescriptor.CreateAssociation
- uid: System.ComponentModel.TypeDescriptor.CreateDesigner*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateDesigner
  nameWithType: TypeDescriptor.CreateDesigner
- uid: System.ComponentModel.TypeDescriptor.CreateEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateEvent
  nameWithType: TypeDescriptor.CreateEvent
- uid: System.ComponentModel.TypeDescriptor.CreateInstance*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptor.CreateInstance
- uid: System.ComponentModel.TypeDescriptor.CreateProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: CreateProperty
  nameWithType: TypeDescriptor.CreateProperty
- uid: System.ComponentModel.TypeDescriptor.GetAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAssociation
  nameWithType: TypeDescriptor.GetAssociation
- uid: System.ComponentModel.TypeDescriptor.GetAttributes*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetAttributes
  nameWithType: TypeDescriptor.GetAttributes
- uid: System.ComponentModel.TypeDescriptor.GetClassName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetClassName
  nameWithType: TypeDescriptor.GetClassName
- uid: System.ComponentModel.TypeDescriptor.GetComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetComponentName
  nameWithType: TypeDescriptor.GetComponentName
- uid: System.ComponentModel.TypeDescriptor.GetConverter*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetConverter
  nameWithType: TypeDescriptor.GetConverter
- uid: System.ComponentModel.TypeDescriptor.GetDefaultEvent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultEvent
  nameWithType: TypeDescriptor.GetDefaultEvent
- uid: System.ComponentModel.TypeDescriptor.GetDefaultProperty*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetDefaultProperty
  nameWithType: TypeDescriptor.GetDefaultProperty
- uid: System.ComponentModel.TypeDescriptor.GetEditor*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: TypeDescriptor.GetEditor
- uid: System.ComponentModel.TypeDescriptor.GetEvents*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetEvents
  nameWithType: TypeDescriptor.GetEvents
- uid: System.ComponentModel.TypeDescriptor.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptor.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptor.GetProperties*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProperties
  nameWithType: TypeDescriptor.GetProperties
- uid: System.ComponentModel.TypeDescriptor.GetProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetProvider
  nameWithType: TypeDescriptor.GetProvider
- uid: System.ComponentModel.TypeDescriptor.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptor.GetReflectionType
- uid: System.ComponentModel.TypeDescriptor.InterfaceType*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: InterfaceType
  nameWithType: TypeDescriptor.InterfaceType
- uid: System.ComponentModel.TypeDescriptor.Refresh*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: Refresh
  nameWithType: TypeDescriptor.Refresh
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociation*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociation
  nameWithType: TypeDescriptor.RemoveAssociation
- uid: System.ComponentModel.TypeDescriptor.RemoveAssociations*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveAssociations
  nameWithType: TypeDescriptor.RemoveAssociations
- uid: System.ComponentModel.TypeDescriptor.RemoveProvider*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProvider
  nameWithType: TypeDescriptor.RemoveProvider
- uid: System.ComponentModel.TypeDescriptor.RemoveProviderTransparent*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: RemoveProviderTransparent
  nameWithType: TypeDescriptor.RemoveProviderTransparent
- uid: System.ComponentModel.TypeDescriptor.SortDescriptorArray*
  parent: System.ComponentModel.TypeDescriptor
  isExternal: false
  name: SortDescriptorArray
  nameWithType: TypeDescriptor.SortDescriptorArray
