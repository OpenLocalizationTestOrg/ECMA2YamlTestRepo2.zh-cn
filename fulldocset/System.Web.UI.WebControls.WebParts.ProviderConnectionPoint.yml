### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  id: ProviderConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  langs:
  - csharp
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  type: Class
  summary: "定义使服务器控件中充当提供程序以形成与使用者连接的连接点对象。"
  remarks: "在两个服务器控件之间的每个 Web 部件连接，每个控件必须具有 （以及其他要求） 关联的连接点对象，使它可连接到另一个控件并可提供或使用数据，具体取决于是否将控件指定为提供程序或连接的使用者。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含控件可以如何连接到另一个控件，它可以共享的数据的类型的详细信息。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 对于作为连接中的提供程序的控件，其连接点必须 ProviderConnectionPoint 对象。 有关 Web 部件连接和连接点的详细信息，请参阅下面的另请参阅部分中列出的主题。       若要创建 ProviderConnectionPoint 对象，几个步骤是必需的︰ 1。  创建用户界面。 当与使用者提供程序共享数据时，它会以通过获取接口的实例并将该实例返回给使用者。      2.  提供程序中实现的接口。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (任何类型的服务器控件中<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域可用) 将提供程序必须实现的第一步中创建的接口。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart>      3.  标识一个回调方法。 在提供程序方法必须标识为要建立连接的回调方法。 此方法返回给使用者实现的接口的实例。 标识提供程序中的回调方法的 Web 部件方法是将添加`ConnectionProvider`元数据属性 (由定义<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类) 返回的接口实例的方法。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 添加属性后，所需的唯一参数是要使用的提供程序连接点的显示名称。 可选参数也可以添加，例如连接点的 ID。       控件具有已配置为提供者后，该控件可以参与 （假设使用者控制了类似配置并且可用） 的连接。 若要创建的网页上的标记的静态声明性的连接，开发人员可以使用`<asp:webpartconnection>`元素。 如果`ConnectionProvider`标识回叫方法的提供程序源代码中的属性指定的 ID 的连接点，则该值必须分配给`ProviderConnectionPointID`属性中`<asp:webpartconnection>`页面上的元素。 开发人员可能会指定提供程序连接点的 ID 的原因之一是提供者控件中是否存在多个连接点。 如果没有为提供程序控件中的提供程序连接点指定 ID，值没有要分配给`ProviderConnectionPointID`属性页中，因为将使用从获取的默认值创建连接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       若要在代码中创建的连接，开发人员必须创建一个新的 ProviderConnectionPoint 对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法并向其传递提供程序管理，以及的 ID 或索引中的提供者控件的定义 ProviderConnectionPoint 对象的 ID。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 返回的 ProviderConnectionPoint 对象，以及对提供程序控件的引用、 对使用者控件和相应的引用<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象，都传递给<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法来创建一个新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       开发人员可以使用提供程序连接点，以声明方式或以编程方式建立连接的一部分，但用户可以与提供程序连接点建立连接通过用户界面 (UI) 还进行交互。 如果开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件在网页上，它提供对用户创建连接的运行时用户界面。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 如果用户选择为通过单击建立连接的起始点的使用者控制其连接谓词 （它们还可以选择提供程序; 没有任何区别中生成连接），在 UI 中，他们将看到具有可用的提供程序连接点 （或如果有多个快照的点） 的显示名称的下拉列表框控件。 用户必须选择提供程序连接点创建连接。       ProviderConnectionPoint 对象将直接与一个特定的提供程序相关联，并将连接的详细信息存储在它继承自基的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>的属性 例如，在继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性，提供程序连接点保存的提供程序返回的接口的类型。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 如果提供程序和中都使用相同的连接的使用者接口类型，这些控件是兼容并能够建立直接连接。 如果提供程序和使用者不能具有相同的接口类型，它们是不兼容，并且必须使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>要转换的提供程序连接点对象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>值转换为使用者可以使用的类型。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 另一个重要的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性，它提供一个友好名称以显示在 UI 中供用户选择提供程序连接点时创建连接。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 显示名称是必需的参数，开发人员添加时`ConnectionProvider`属性设为提供者控件中的回调方法。 继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性也十分有用，因为上述，由于其提供的唯一标识符的提供程序连接点的事件中某个提供程序具有多个连接点。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 提供程序可以有多个 ProviderConnectionPoint 对象定义中，然后在此情况下，当开发人员将添加`ConnectionProvider`属性到方法时，它们应指定一个要区分每个连接点的 ID 值。 另一个值得注意的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性，用于指示提供程序连接点是否可以同时连接到多个使用者。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 此属性值是`true`默认情况下，提供程序连接点 (而它默认为`false`的使用者连接点)。       ProviderConnectionPoint 类会将多个唯一的方法添加到成员它将继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法检索回调方法将返回给使用者的接口的实例。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>方法检索属于的现有连接的其他消费者接口，但不是接口用于建立连接。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ProviderConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_356_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_356_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Consumer**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Provider** link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Then, click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to once more indicate details about the provider connection point object.  \n  \n The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.WebParts.ProviderConnectionPoint&quot;></xref>类。"
  remarks: "ProviderConnectionPoint 构造函数的<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类只需调用基构造函数，传递到它的各种参数，并初始化基的类。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       基类构造函数检查大量的连接点的参数，并可能会引发几个例外。 有关可能的异常的列表，请参阅异常部分。       你可以调用 ProviderConnectionPoint 构造函数来创建您自己的实例的<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>类。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> 但是，在你所在只需建立的连接并不扩展类的情况下，应调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>方法从提供程序返回现有的连接点对象。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> class, named `TableProviderConnectionPoint`. Note that the constructor of the `TableProviderConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableProviderWebPart` class, the `GetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionProvider` attribute declares the custom `TableProviderConnectionPoint` as a parameter. This demonstrates how to create a custom provider connection point and then associate it with a provider control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web Parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/4405c9d3-e4fd-4235-883f-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "将接口实例返回给使用者以建立的连接提供程序控件中的方法。"
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>的提供程序提供给使用者的接口。</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>提供程序连接点与之关联的提供者控件。</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "用户在连接用户界面 (UI) 中显示的提供程序连接点友好显示名称。"
    - id: id
      type: System.String
      description: "提供程序连接点的唯一标识符。"
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "一个布尔值，该值指示提供程序连接点是否可以具有多个使用者的并发连接。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>不是与提供程序控件相同的类型 （或有效的类派生自它）。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  id: GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "调用中获取要返回给使用者的接口实例提供程序控制的回调方法。"
  remarks: "此方法是用来建立连接的接口的实例的提供程序控件从返回对象。 对象的类型将是接口的实现的类型。 例如，两个连接 Web 部件控件集内的实现的接口为<xref:System.Web.UI.WebControls.WebParts.IWebPartField>和<xref:System.Web.UI.WebControls.WebParts.IWebPartRow>.</xref:System.Web.UI.WebControls.WebParts.IWebPartRow> </xref:System.Web.UI.WebControls.WebParts.IWebPartField> GetObject 方法上的调用时<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，如果关联的提供程序实现这些接口之一，返回的对象将相同的类型。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       GetObject 方法由调用<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象时连接正在激活。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 这是一个关键步骤实际发起的连接并开始过程，从而使两个控件共享数据。       连接中的使用者控件必须能够使用相同类型的接口作为提供程序。 如果不存在，会不兼容的控件和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual object GetObject (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "作为 Web 部件连接中的提供程序的控件。"
    return:
      type: System.Object
      description: "<xref:System.Object>即接口提供程序的实例返回给使用者建立连接。</xref:System.Object>"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  id: GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  langs:
  - csharp
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取可选辅助接口可以支持的提供程序连接点的集合。"
  remarks: "提供程序连接点对象始终具有一个默认接口，用于与使用者建立连接。 通过调用检索默认接口的实例<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>       但是，某些提供程序控件将实现多个接口来作为连接的一部分提供给使用者。 这些接口，不使用默认模板用于建立连接，称为辅助接口。 GetSecondaryInterfaces 方法可以返回就像对辅助接口的引用集合<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>方法返回对默认接口的引用。</xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A>"
  syntax:
    content: public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "作为 Web 部件连接中的提供程序的控件。"
    return:
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref>由控件中充当提供程序提供的其他接口。"
  overload: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.ProviderConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject(Control)
  nameWithType: ProviderConnectionPoint.GetObject(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(Control)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces(Control)
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces(Control)
  fullName: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(Control)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: ProviderConnectionPoint
  nameWithType: ProviderConnectionPoint.ProviderConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetObject
  nameWithType: ProviderConnectionPoint.GetObject
- uid: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces*
  parent: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint
  isExternal: false
  name: GetSecondaryInterfaces
  nameWithType: ProviderConnectionPoint.GetSecondaryInterfaces
