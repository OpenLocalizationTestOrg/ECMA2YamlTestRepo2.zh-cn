### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandBinding
  id: CommandBinding
  children:
  - System.Windows.Input.CommandBinding.#ctor
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandBinding.CanExecute
  - System.Windows.Input.CommandBinding.Command
  - System.Windows.Input.CommandBinding.Executed
  - System.Windows.Input.CommandBinding.PreviewCanExecute
  - System.Windows.Input.CommandBinding.PreviewExecuted
  langs:
  - csharp
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
  type: Class
  summary: "将绑定<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>到实现该命令的事件处理程序。"
  remarks: "CommandBinding 将具有的命令相关联<xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed>和<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute>事件实现并确定命令的状态。</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted>       当<xref:System.Windows.Input.RoutedCommand.Execute%2A>或<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时， <xref:System.Windows.Input.CommandBinding.PreviewExecuted>/<xref:System.Windows.Input.CommandBinding.Executed>或<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>/<xref:System.Windows.Input.CommandBinding.CanExecute>对命令目标引发事件。</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A>  如果对命令目标有命令 CommandBinding，将调用相应的处理程序。  如果对命令目标没有命令 CommandBinding，直到找到具有 CommandBinding 的元素，通过元素树进行路由事件。       CommandBinding 具有有限的使用情况<xref:System.Windows.Input.ICommand>，它是不一<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.ICommand>  这是因为 CommandBinding 绑定到命令<xref:System.Windows.Input.ExecutedRoutedEventHandler>和<xref:System.Windows.Input.CanExecuteRoutedEventHandler>其侦听<xref:System.Windows.Input.CommandManager.Executed>和<xref:System.Windows.Input.CommandManager.CanExecute>路由事件时引发<xref:System.Windows.Input.RoutedCommand.Execute%2A>和<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>称为。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand.Execute%2A> </xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.ExecutedRoutedEventHandler>"
  syntax:
    content: public class CommandBinding
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor
  id: '#ctor'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>类。"
  syntax:
    content: public CommandBinding ();
    parameters: []
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  id: '#ctor(System.Windows.Input.ICommand)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>通过使用指定的<xref:System.Windows.Input.ICommand>。</xref:System.Windows.Input.ICommand>类"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "要基于新的命令<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>上。"
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>使用指定的类<xref:System.Windows.Input.ICommand>和指定<xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref>事件处理程序。</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "要基于新的命令<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>上。"
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "处理程序<xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref>对新的事件<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>。"
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)'
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>使用指定的类<xref:System.Windows.Input.ICommand>和指定<xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref>和<xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;></xref>事件处理程序。</xref:System.Windows.Input.ICommand>"
  syntax:
    content: public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);
    parameters:
    - id: command
      type: System.Windows.Input.ICommand
      description: "要基于新的命令<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>上。"
    - id: executed
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "处理程序<xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref>对新的事件<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>。"
    - id: canExecute
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "处理程序<xref href=&quot;System.Windows.Input.CommandBinding.CanExecute&quot;></xref>对新的事件<xref href=&quot;System.Windows.Input.RoutedCommand&quot;> </xref>。"
  overload: System.Windows.Input.CommandBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.CanExecute
  id: CanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "与此关联的命令时发生<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>启动检查以确定是否可以对命令目标执行该命令。"
  remarks: "当<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时，<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>对命令目标引发事件。</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A>  如果不处理该事件，将引发 CanExecute 事件。  如果对命令目标有<xref:System.Windows.Input.CommandBinding>命令 CanExecute 处理程序，<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  如果命令目标没有<xref:System.Windows.Input.CommandBinding>对于命令，CanExecute 事件树中向上冒泡元素具有的元素，搜索<xref:System.Windows.Input.CommandBinding>与命令关联。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_CanExecute&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|     -相应的隧道事件是<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>.</xref:System.Windows.Input.CommandBinding.PreviewCanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.CanExecuteEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Command
  id: Command
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取或设置<xref:System.Windows.Input.ICommand>与此关联<xref href=&quot;System.Windows.Input.CommandBinding&quot;> </xref>。</xref:System.Windows.Input.ICommand>"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.  \n  \n [!code-cs[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlercanexecutehandler)]\n [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlercanexecutehandler)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public System.Windows.Input.ICommand Command { get; set; }
    return:
      type: System.Windows.Input.ICommand
      description: "与此绑定关联的命令。"
  overload: System.Windows.Input.CommandBinding.Command*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.Executed
  id: Executed
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "与此关联的命令时发生<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>执行。"
  remarks: "当<xref:System.Windows.Input.RoutedCommand>执行，它会发出<xref:System.Windows.Input.CommandBinding.PreviewExecuted>命令目标上的事件。</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.RoutedCommand>  如果<xref:System.Windows.Input.CommandBinding.PreviewExecuted>不处理事件，执行事件引发对命令目标。</xref:System.Windows.Input.CommandBinding.PreviewExecuted>  如果对命令目标有<xref:System.Windows.Input.CommandBinding>对于特定的命令中，执行处理程序，<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  如果命令目标没有<xref:System.Windows.Input.CommandBinding>特定命令执行事件向上元素树搜索具有的元素，该冒泡<xref:System.Windows.Input.CommandBinding>与命令关联。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  如果<xref:System.Windows.Input.CommandBinding>未找到，则该命令未处理。</xref:System.Windows.Input.CommandBinding>      <a name=&quot;routedEventInfo_Executed&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.ExecutedRoutedEventHandler>|     -相应的隧道事件是<xref:System.Windows.Input.CommandBinding.PreviewExecuted>.</xref:System.Windows.Input.CommandBinding.PreviewExecuted> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.ExecutedEvent>"
  example:
  - "The following example creates a <xref:System.Windows.Input.CommandBinding> that maps an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and a <xref:System.Windows.Input.CanExecuteRoutedEventArgs> handler to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.  \n  \n [!code-xml[commandwithhandler#CommandHandlerCommandBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlercommandbinding)]  \n  \n [!code-cs[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/csharp/CommandHandlerProcedural/Window1.xaml.cs#commandhandlerbindinginit)]\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/add/codesnippet/visualbasic/commandhandlerprocedural/window1.xaml.vb#commandhandlerbindinginit)]  \n  \n The following shows the <xref:System.Windows.Input.ExecutedRoutedEventHandler> which creates a <xref:System.Windows.MessageBox> when the command is executed.  \n  \n [!code-cs[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/csharp/commandWithHandler/Window1.xaml.cs#commandhandlerexecutedhandler)]\n [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/add/codesnippet/visualbasic/commandWithHandler/Window1.xaml.vb#commandhandlerexecutedhandler)]"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler Executed;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  id: PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "与此关联的命令时发生<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>启动检查以确定是否可以对当前的命令目标执行该命令。"
  remarks: "当<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法<xref:System.Windows.Input.RoutedCommand>调用时，将引发事件对命令目标命令目标是否 PreviewCanExecute<xref:System.Windows.Input.CommandBinding>命令。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.RoutedCommand.CanExecute%2A> 则<xref:System.Windows.Input.CommandBinding.CanExecute>处理程序<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute>  如果命令目标没有<xref:System.Windows.Input.CommandBinding>对于命令，<xref:System.Windows.Input.CommandBinding.CanExecute>事件气泡搜索具有的元素，在元素树中向上<xref:System.Windows.Input.CommandBinding>与命令关联。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding>  如果不处理该事件，<xref:System.Windows.Input.CommandBinding.CanExecute>引发事件。</xref:System.Windows.Input.CommandBinding.CanExecute>      <a name=&quot;routedEventInfo_PreviewCanExecute&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|     -相应冒泡事件是<xref:System.Windows.Input.CommandBinding.CanExecute>.</xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>"
  syntax:
    content: public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;
    return:
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  id: PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  langs:
  - csharp
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "与此关联的命令时发生<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>执行。"
  remarks: "当<xref:System.Windows.Input.RoutedCommand>执行，它会发出对命令目标上的 PreviewExecuted 事件。</xref:System.Windows.Input.RoutedCommand>  如果对命令目标有<xref:System.Windows.Input.CommandBinding>PreviewExecuted 命令处理程序<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  如果命令目标没有<xref:System.Windows.Input.CommandBinding>命令 PreviewExecuted 事件隧道向下搜索具有的元素，在元素树<xref:System.Windows.Input.CommandBinding>与命令关联。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding>  如果不处理预览事件，<xref:System.Windows.Input.CommandBinding.Executed>命令目标引发事件。</xref:System.Windows.Input.CommandBinding.Executed>      <a name=&quot;routedEventInfo_PreviewExecuted&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.ExecutedRoutedEventHandler>|     -相应冒泡事件是<xref:System.Windows.Input.CommandBinding.Executed>.</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>"
  syntax:
    content: public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;
    return:
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Input.CommandBinding.#ctor
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding()
  nameWithType: CommandBinding.CommandBinding()
  fullName: System.Windows.Input.CommandBinding.CommandBinding()
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand)
  nameWithType: CommandBinding.CommandBinding(ICommand)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand)
- uid: System.Windows.Input.ICommand
  parent: System.Windows.Input
  isExternal: true
  name: ICommand
  nameWithType: ICommand
  fullName: System.Windows.Input.ICommand
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  nameWithType: CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandBinding.CommandBinding(ICommand,ExecutedRoutedEventHandler,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandBinding.CanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CanExecute
  nameWithType: CommandBinding.CanExecute
  fullName: System.Windows.Input.CommandBinding.CanExecute
- uid: System.Windows.Input.CommandBinding.Command
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
  fullName: System.Windows.Input.CommandBinding.Command
- uid: System.Windows.Input.CommandBinding.Executed
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Executed
  nameWithType: CommandBinding.Executed
  fullName: System.Windows.Input.CommandBinding.Executed
- uid: System.Windows.Input.CommandBinding.PreviewCanExecute
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewCanExecute
  nameWithType: CommandBinding.PreviewCanExecute
  fullName: System.Windows.Input.CommandBinding.PreviewCanExecute
- uid: System.Windows.Input.CommandBinding.PreviewExecuted
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: PreviewExecuted
  nameWithType: CommandBinding.PreviewExecuted
  fullName: System.Windows.Input.CommandBinding.PreviewExecuted
- uid: System.Windows.Input.CommandBinding.#ctor*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding.CommandBinding
- uid: System.Windows.Input.CommandBinding.Command*
  parent: System.Windows.Input.CommandBinding
  isExternal: false
  name: Command
  nameWithType: CommandBinding.Command
