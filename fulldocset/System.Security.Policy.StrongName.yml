### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.StrongName
  id: StrongName
  children:
  - System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  - System.Security.Policy.StrongName.Clone
  - System.Security.Policy.StrongName.Copy
  - System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)
  - System.Security.Policy.StrongName.Equals(System.Object)
  - System.Security.Policy.StrongName.GetHashCode
  - System.Security.Policy.StrongName.Name
  - System.Security.Policy.StrongName.PublicKey
  - System.Security.Policy.StrongName.ToString
  - System.Security.Policy.StrongName.Version
  langs:
  - csharp
  name: StrongName
  nameWithType: StrongName
  fullName: System.Security.Policy.StrongName
  type: Class
  summary: "提供作为用于策略评估的证据的代码程序集的强名称。 此类不能被继承。"
  remarks: "StrongName 类表示的唯一的加密型强名称的代码程序集的证据。 强名称组成的公共密钥、 给定名称和版本。 公钥对应于发布服务器的私钥这保密的并与程序集必须签名，以便为有效的强名称。       强名称通常分配给程序集使用<xref:System.Reflection.AssemblyKeyFileAttribute>，<xref:System.Reflection.AssemblyKeyNameAttribute>或<xref:System.Reflection.AssemblyDelaySignAttribute>SN 实用工具结合 (请参阅[Sn.exe （强名称工具）](~/add/includes/ajax-current-ext-md.md))。</xref:System.Reflection.AssemblyDelaySignAttribute> </xref:System.Reflection.AssemblyKeyNameAttribute> </xref:System.Reflection.AssemblyKeyFileAttribute>       <xref:System.Security.Permissions.StrongNameIdentityPermission>使用此类来确认调用的代码在一个特定的具有强名称代码程序集。</xref:System.Security.Permissions.StrongNameIdentityPermission>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StrongName : System.Security.Policy.EvidenceBase, System.Security.Policy.IIdentityPermissionFactory
  inheritance:
  - System.Object
  - System.Security.Policy.EvidenceBase
  implements:
  - System.Security.Policy.IIdentityPermissionFactory
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  id: '#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)'
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: StrongName(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongName.StrongName(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Policy.StrongName.StrongName(StrongNamePublicKeyBlob,String,Version)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "初始化的新实例<xref href=&quot;System.Security.Policy.StrongName&quot;></xref>类强名称公钥 blob、 名称和版本。"
  remarks: "`name`参数可以为`null`，但不是能为空字符串 (&quot;&quot;)。       有关强名称的详细信息，请参阅<xref:System.Security.Permissions.StrongNameIdentityPermission>和<xref:System.Security.Permissions.StrongNamePublicKeyBlob>。</xref:System.Security.Permissions.StrongNamePublicKeyBlob> </xref:System.Security.Permissions.StrongNameIdentityPermission>"
  syntax:
    content: public StrongName (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);
    parameters:
    - id: blob
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "<xref href=&quot;System.Security.Permissions.StrongNamePublicKeyBlob&quot;> </xref>软件发行者。"
    - id: name
      type: System.String
      description: "强名称的简单名称部分。"
    - id: version
      type: System.Version
      description: "<xref:System.Version>的强名称。</xref:System.Version>"
  overload: System.Security.Policy.StrongName.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>blob</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>version</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>参数为空字符串 (&quot;&quot;)。"
  platform:
  - net462
- uid: System.Security.Policy.StrongName.Clone
  id: Clone
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: Clone()
  nameWithType: StrongName.Clone()
  fullName: System.Security.Policy.StrongName.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "创建当前实例副本的新对象。"
  syntax:
    content: public override System.Security.Policy.EvidenceBase Clone ();
    parameters: []
    return:
      type: System.Security.Policy.EvidenceBase
      description: "此实例副本的新对象。"
  overload: System.Security.Policy.StrongName.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.Copy
  id: Copy
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: Copy()
  nameWithType: StrongName.Copy()
  fullName: System.Security.Policy.StrongName.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "创建当前的等效副本<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  syntax:
    content: public object Copy ();
    parameters: []
    return:
      type: System.Object
      description: "完全相同的新副本的当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)
  id: CreateIdentityPermission(System.Security.Policy.Evidence)
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: CreateIdentityPermission(Evidence)
  nameWithType: StrongName.CreateIdentityPermission(Evidence)
  fullName: System.Security.Policy.StrongName.CreateIdentityPermission(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "创建<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>相对应的当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  remarks: "强名称标识权限可以用于确定是否调用代码在特定的具有强命名为代码程序集。"
  syntax:
    content: public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "<xref href=&quot;System.Security.Policy.Evidence&quot;> </xref>从中构造<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;> </xref>。"
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;> </xref>指定<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.CreateIdentityPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: StrongName.Equals(Object)
  fullName: System.Security.Policy.StrongName.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "确定指定的强名称是否等于当前的强名称。"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "要与当前的强名称进行比较的强名称。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的强名称是否等于当前的强名称;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.GetHashCode
  id: GetHashCode
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: StrongName.GetHashCode()
  fullName: System.Security.Policy.StrongName.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取当前的哈希代码<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.Name
  id: Name
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: Name
  nameWithType: StrongName.Name
  fullName: System.Security.Policy.StrongName.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取当前的简单名<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "简单名称部分<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.PublicKey
  id: PublicKey
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: PublicKey
  nameWithType: StrongName.PublicKey
  fullName: System.Security.Policy.StrongName.PublicKey
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取<xref href=&quot;System.Security.Permissions.StrongNamePublicKeyBlob&quot;></xref>的当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  remarks: "Blob 是唯一指定软件发行者的公钥的加密信息。       Blob 不同于证书，因为 blob 仅包含公钥; 有关的信息该证书还包括将与键持有者的名称相关联的信息以及信息来验证的证书。"
  syntax:
    content: public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; }
    return:
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "The <xref href=&quot;System.Security.Permissions.StrongNamePublicKeyBlob&quot;></xref> of the current <xref href=&quot;System.Security.Policy.StrongName&quot;></xref>."
  overload: System.Security.Policy.StrongName.PublicKey*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.ToString
  id: ToString
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: ToString()
  nameWithType: StrongName.ToString()
  fullName: System.Security.Policy.StrongName.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "创建当前的字符串表示<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  remarks: "若要获取的对象的易于理解表示在调试期间，此方法很有用。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "表示形式当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。"
  overload: System.Security.Policy.StrongName.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.StrongName.Version
  id: Version
  parent: System.Security.Policy.StrongName
  langs:
  - csharp
  name: Version
  nameWithType: StrongName.Version
  fullName: System.Security.Policy.StrongName.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取<xref:System.Version>的当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。</xref:System.Version>"
  syntax:
    content: public Version Version { get; }
    return:
      type: System.Version
      description: "<xref:System.Version>的当前<xref href=&quot;System.Security.Policy.StrongName&quot;> </xref>。</xref:System.Version>"
  overload: System.Security.Policy.StrongName.Version*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Policy.EvidenceBase
  isExternal: false
  name: System.Security.Policy.EvidenceBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: StrongName(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongName.StrongName(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Policy.StrongName.StrongName(StrongNamePublicKeyBlob,String,Version)
- uid: System.Security.Permissions.StrongNamePublicKeyBlob
  parent: System.Security.Permissions
  isExternal: false
  name: StrongNamePublicKeyBlob
  nameWithType: StrongNamePublicKeyBlob
  fullName: System.Security.Permissions.StrongNamePublicKeyBlob
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Security.Policy.StrongName.Clone
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Clone()
  nameWithType: StrongName.Clone()
  fullName: System.Security.Policy.StrongName.Clone()
- uid: System.Security.Policy.StrongName.Copy
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Copy()
  nameWithType: StrongName.Copy()
  fullName: System.Security.Policy.StrongName.Copy()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: CreateIdentityPermission(Evidence)
  nameWithType: StrongName.CreateIdentityPermission(Evidence)
  fullName: System.Security.Policy.StrongName.CreateIdentityPermission(Evidence)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.Policy.StrongName.Equals(System.Object)
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Equals(Object)
  nameWithType: StrongName.Equals(Object)
  fullName: System.Security.Policy.StrongName.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.StrongName.GetHashCode
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: GetHashCode()
  nameWithType: StrongName.GetHashCode()
  fullName: System.Security.Policy.StrongName.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Policy.StrongName.Name
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Name
  nameWithType: StrongName.Name
  fullName: System.Security.Policy.StrongName.Name
- uid: System.Security.Policy.StrongName.PublicKey
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: PublicKey
  nameWithType: StrongName.PublicKey
  fullName: System.Security.Policy.StrongName.PublicKey
- uid: System.Security.Policy.StrongName.ToString
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: ToString()
  nameWithType: StrongName.ToString()
  fullName: System.Security.Policy.StrongName.ToString()
- uid: System.Security.Policy.StrongName.Version
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Version
  nameWithType: StrongName.Version
  fullName: System.Security.Policy.StrongName.Version
- uid: System.Security.Policy.StrongName.#ctor*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: StrongName
  nameWithType: StrongName.StrongName
- uid: System.Security.Policy.StrongName.Clone*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Clone
  nameWithType: StrongName.Clone
- uid: System.Security.Policy.StrongName.Copy*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Copy
  nameWithType: StrongName.Copy
- uid: System.Security.Policy.StrongName.CreateIdentityPermission*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: CreateIdentityPermission
  nameWithType: StrongName.CreateIdentityPermission
- uid: System.Security.Policy.StrongName.Equals*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Equals
  nameWithType: StrongName.Equals
- uid: System.Security.Policy.StrongName.GetHashCode*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: GetHashCode
  nameWithType: StrongName.GetHashCode
- uid: System.Security.Policy.StrongName.Name*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Name
  nameWithType: StrongName.Name
- uid: System.Security.Policy.StrongName.PublicKey*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: PublicKey
  nameWithType: StrongName.PublicKey
- uid: System.Security.Policy.StrongName.ToString*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: ToString
  nameWithType: StrongName.ToString
- uid: System.Security.Policy.StrongName.Version*
  parent: System.Security.Policy.StrongName
  isExternal: false
  name: Version
  nameWithType: StrongName.Version
