### YamlMime:ManagedReference
items:
- uid: System.Net.Http.DelegatingHandler
  id: DelegatingHandler
  children:
  - System.Net.Http.DelegatingHandler.#ctor
  - System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  name: DelegatingHandler
  nameWithType: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
  type: Class
  summary: "委托到另一个处理程序的 HTTP 响应消息的处理的 HTTP 处理程序的一种典型称为内部处理程序。"
  remarks: "此应用程序通常对实例化此类，然后设置内部处理程序或提供构造函数中的内部处理程序。       请注意，<xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>属性可能也是委托处理程序。</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A> 此方法允许处理 HTTP 响应消息的处理程序堆栈创建。"
  syntax:
    content: 'public abstract class DelegatingHandler : System.Net.Http.HttpMessageHandler'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "创建的新实例<xref href=&quot;System.Net.Http.DelegatingHandler&quot;></xref>类。"
  remarks: "可以使用<xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>.</xref:System.Net.Http.DelegatingHandler.InnerHandler%2A>设置的内部句柄"
  syntax:
    content: protected DelegatingHandler ();
    parameters: []
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "创建的新实例<xref href=&quot;System.Net.Http.DelegatingHandler&quot;></xref>与特定的内部处理程序类。"
  syntax:
    content: protected DelegatingHandler (System.Net.Http.HttpMessageHandler innerHandler);
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: "内部处理程序即负责处理 HTTP 响应消息。"
  overload: System.Net.Http.DelegatingHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "释放由非托管的资源<xref href=&quot;System.Net.Http.DelegatingHandler&quot;> </xref>，并可根据需要释放托管资源。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>版本仅到非托管资源。"
  overload: System.Net.Http.DelegatingHandler.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  id: InnerHandler
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "获取或设置内部的处理程序，它会处理 HTTP 响应消息。"
  remarks: "只能在使用类之前设置此 InnerHandler 属性 (<xref:System.Net.Http.DelegatingHandler.SendAsync%2A>调用方法)。</xref:System.Net.Http.DelegatingHandler.SendAsync%2A>       虽然这是不常见，请注意 InnerHandler 属性可能也是委托处理程序。 此方法允许 HTTP 响应消息的处理程序堆栈的创建。"
  syntax:
    content: public System.Net.Http.HttpMessageHandler InnerHandler { get; set; }
    return:
      type: System.Net.Http.HttpMessageHandler
      description: "HTTP 响应消息内部处理程序。"
  overload: System.Net.Http.DelegatingHandler.InnerHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 HTTP 请求发送到要发送到与异步操作的服务器的内部处理程序。"
  remarks: "此操作不会阻止。 此可重写实现<xref:System.Net.Http.HttpClientHandler.SendAsync%2A>方法将转发到内部处理程序的 HTTP 请求将发送到服务器以异步操作。</xref:System.Net.Http.HttpClientHandler.SendAsync%2A>       SendAsync 方法主要用于由系统而不是应用程序。 当调用此方法时，它调用 SendAsync 方法内部处理程序。"
  syntax:
    content: protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要向服务器发送的 HTTP 请求消息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要取消操作的取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.DelegatingHandler.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: System.Net.Http.HttpMessageHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Http.DelegatingHandler.#ctor
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler()
  nameWithType: DelegatingHandler.DelegatingHandler()
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler()
- uid: System.Net.Http.DelegatingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler(HttpMessageHandler)
  nameWithType: DelegatingHandler.DelegatingHandler(HttpMessageHandler)
  fullName: System.Net.Http.DelegatingHandler.DelegatingHandler(HttpMessageHandler)
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DelegatingHandler.Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.DelegatingHandler.#ctor*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: DelegatingHandler
  nameWithType: DelegatingHandler.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.Dispose*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: Dispose
  nameWithType: DelegatingHandler.Dispose
- uid: System.Net.Http.DelegatingHandler.InnerHandler*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  nameWithType: DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.SendAsync*
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: SendAsync
  nameWithType: DelegatingHandler.SendAsync
