### YamlMime:ManagedReference
items:
- uid: System.CodeDom.CodeTypeReference
  id: CodeTypeReference
  children:
  - System.CodeDom.CodeTypeReference.#ctor
  - System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)
  - System.CodeDom.CodeTypeReference.#ctor(System.String)
  - System.CodeDom.CodeTypeReference.#ctor(System.Type)
  - System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)
  - System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])
  - System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)
  - System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)
  - System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)
  - System.CodeDom.CodeTypeReference.ArrayElementType
  - System.CodeDom.CodeTypeReference.ArrayRank
  - System.CodeDom.CodeTypeReference.BaseType
  - System.CodeDom.CodeTypeReference.Options
  - System.CodeDom.CodeTypeReference.TypeArguments
  langs:
  - csharp
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
  type: Class
  summary: "表示一种类型的引用。"
  remarks: "CodeTypeReference 对象用于表示 CodeDOM 对象的类型。 当 CodeDOM 类型具有`Type`属性，它是类型 CodeTypeReference。 例如，<xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName>属性是表示字段的数据类型 CodeTypeReference。</xref:System.CodeDom.CodeMemberField.Type%2A?displayProperty=fullName>       可以使用初始化 CodeTypeReference<xref:System.Type>对象或字符串。</xref:System.Type> 通常建议使用<xref:System.Type>为此，尽管它可能始终不可行。</xref:System.Type> 如果初始化此类的一个字符串的实例，强烈建议始终使用完全限定的类型，如&quot;System.Console&quot;而不是只是&quot;控制台&quot;，因为并非所有语言都支持导入的命名空间。 可以通过传递中一个类型对象的数组，或者使用接受级别作为参数的构造函数之一指定数组类型。       <xref:System.CodeDom.CodeTypeReference.BaseType%2A>属性指定要引用的类型的名称。</xref:System.CodeDom.CodeTypeReference.BaseType%2A> 如果引用的数组类型<xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A>属性指示该数组的元素的类型和<xref:System.CodeDom.CodeTypeReference.ArrayRank%2A>属性指示的数组中的维数。</xref:System.CodeDom.CodeTypeReference.ArrayRank%2A> </xref:System.CodeDom.CodeTypeReference.ArrayElementType%2A>"
  example:
  - "The following example demonstrates use of a CodeTypeReference to represent a reference to a type.  \n  \n [!code-cs[CodeTypeOfExample#2](~/add/codesnippet/csharp/t-system.codedom.codetyp_1_1.cs)]\n [!code-vb[CodeTypeOfExample#2](~/add/codesnippet/visualbasic/t-system.codedom.codetyp_1_1.vb)]\n [!code-cpp[CodeTypeOfExample#2](~/add/codesnippet/cpp/t-system.codedom.codetyp_1_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class CodeTypeReference : System.CodeDom.CodeObject
  inheritance:
  - System.Object
  - System.CodeDom.CodeObject
  implements: []
  inheritedMembers:
  - System.CodeDom.CodeObject.UserData
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor
  id: '#ctor'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference()
  nameWithType: CodeTypeReference.CodeTypeReference()
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference()
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类。"
  remarks: "此构造函数创建一个空<xref:System.CodeDom.CodeTypeReference>对象。</xref:System.CodeDom.CodeTypeReference>  如果你使用此构造函数，设置属性以建立类型引用。"
  syntax:
    content: public CodeTypeReference ();
    parameters: []
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)
  id: '#ctor(System.CodeDom.CodeTypeParameter)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(CodeTypeParameter)
  nameWithType: CodeTypeReference.CodeTypeReference(CodeTypeParameter)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(CodeTypeParameter)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的代码的类型参数。"
  syntax:
    content: public CodeTypeReference (System.CodeDom.CodeTypeParameter typeParameter);
    parameters:
    - id: typeParameter
      type: System.CodeDom.CodeTypeParameter
      description: "A <xref href=&quot;System.CodeDom.CodeTypeParameter&quot;> </xref>表示类型参数的类型。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(String)
  nameWithType: CodeTypeReference.CodeTypeReference(String)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的类型名称。"
  remarks: "如果`typeName`参数引用泛型类型，它必须遵循的泛型类型的语法约定。 例如的反射签名<xref:System.Collections.Generic.Dictionary%602>类型，其中`K`是一个字符串和`V`是<xref:System.Collections.Generic.List%601>的整数，表示通过按如下所示的反射 （与删除的程序集信息）︰ `System.Collections.Generic.Dictionary`2[[System.String]，[System.Collections.Generic.List`1[[System.Int32]]]]`。</xref:System.Collections.Generic.List%601> </xref:System.Collections.Generic.Dictionary%602>      1> [!NOTE]&1;> 必须使用方括号 ([]) 和不 C# 命令的尖括号 (<>) 来分隔泛型参数。       若要避免在指定语法犯错误的可能性，请考虑使用接受一个类型作为参数而不是字符串的构造函数。"
  syntax:
    content: public CodeTypeReference (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要引用的类型名称。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(Type)
  nameWithType: CodeTypeReference.CodeTypeReference(Type)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(Type)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的类型。"
  syntax:
    content: public CodeTypeReference (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>为引用。</xref:System.Type>"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)
  id: '#ctor(System.CodeDom.CodeTypeReference,System.Int32)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(CodeTypeReference,Int32)
  nameWithType: CodeTypeReference.CodeTypeReference(CodeTypeReference,Int32)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(CodeTypeReference,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的数组类型和级别。"
  remarks: "此构造函数可用来构造数组的数组按照嵌套<xref:System.CodeDom.CodeTypeReference>对象。</xref:System.CodeDom.CodeTypeReference>"
  syntax:
    content: public CodeTypeReference (System.CodeDom.CodeTypeReference arrayType, int rank);
    parameters:
    - id: arrayType
      type: System.CodeDom.CodeTypeReference
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReference&quot;> </xref> ，该值指示数组的类型。"
    - id: rank
      type: System.Int32
      description: "数组中的维度数。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])
  id: '#ctor(System.String,System.CodeDom.CodeTypeReference[])'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(String,CodeTypeReference[])
  nameWithType: CodeTypeReference.CodeTypeReference(String,CodeTypeReference[])
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,CodeTypeReference[])
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用的指定的类型名称和类型参数。"
  syntax:
    content: public CodeTypeReference (string typeName, System.CodeDom.CodeTypeReference[] typeArguments);
    parameters:
    - id: typeName
      type: System.String
      description: "要引用的类型名称。"
    - id: typeArguments
      type: System.CodeDom.CodeTypeReference[]
      description: "数组<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>值。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)
  id: '#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(String,CodeTypeReferenceOptions)
  nameWithType: CodeTypeReference.CodeTypeReference(String,CodeTypeReferenceOptions)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,CodeTypeReferenceOptions)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的类型名称和代码类型引用选项。"
  syntax:
    content: public CodeTypeReference (string typeName, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);
    parameters:
    - id: typeName
      type: System.String
      description: "要引用的类型名称。"
    - id: codeTypeReferenceOption
      type: System.CodeDom.CodeTypeReferenceOptions
      description: "代码类型引用选项的说明进行操作，其中一个<xref href=&quot;System.CodeDom.CodeTypeReferenceOptions&quot;></xref>值。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(String,Int32)
  nameWithType: CodeTypeReference.CodeTypeReference(String,Int32)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的数组类型名称和级别。"
  syntax:
    content: public CodeTypeReference (string baseType, int rank);
    parameters:
    - id: baseType
      type: System.String
      description: "数组元素的类型的名称。"
    - id: rank
      type: System.Int32
      description: "数组的维度数。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)
  id: '#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)'
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: CodeTypeReference(Type,CodeTypeReferenceOptions)
  nameWithType: CodeTypeReference.CodeTypeReference(Type,CodeTypeReferenceOptions)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(Type,CodeTypeReferenceOptions)
  type: Constructor
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "初始化的新实例<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>类使用指定的类型和代码类型引用。"
  syntax:
    content: public CodeTypeReference (Type type, System.CodeDom.CodeTypeReferenceOptions codeTypeReferenceOption);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>为引用。</xref:System.Type>"
    - id: codeTypeReferenceOption
      type: System.CodeDom.CodeTypeReferenceOptions
      description: "代码类型引用选项的说明进行操作，其中一个<xref href=&quot;System.CodeDom.CodeTypeReferenceOptions&quot;></xref>值。"
  overload: System.CodeDom.CodeTypeReference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.ArrayElementType
  id: ArrayElementType
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: ArrayElementType
  nameWithType: CodeTypeReference.ArrayElementType
  fullName: System.CodeDom.CodeTypeReference.ArrayElementType
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "获取或设置数组中元素的类型。"
  remarks: "这忽略除非<xref:System.CodeDom.CodeTypeReference.ArrayRank%2A>属性为大于或等于 1。</xref:System.CodeDom.CodeTypeReference.ArrayRank%2A>"
  syntax:
    content: public System.CodeDom.CodeTypeReference ArrayElementType { get; set; }
    return:
      type: System.CodeDom.CodeTypeReference
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReference&quot;> </xref> ，该值指示数组元素的类型。"
  overload: System.CodeDom.CodeTypeReference.ArrayElementType*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.ArrayRank
  id: ArrayRank
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: ArrayRank
  nameWithType: CodeTypeReference.ArrayRank
  fullName: System.CodeDom.CodeTypeReference.ArrayRank
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "获取或设置数组的数组秩。"
  syntax:
    content: public int ArrayRank { get; set; }
    return:
      type: System.Int32
      description: "数组的维度数。"
  overload: System.CodeDom.CodeTypeReference.ArrayRank*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.BaseType
  id: BaseType
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: BaseType
  nameWithType: CodeTypeReference.BaseType
  fullName: System.CodeDom.CodeTypeReference.BaseType
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "获取或设置所引用的类型的名称。"
  remarks: "此属性包含类型的名称，除非它是数组类型，在这种情况下它是数组元素类型。      1> [!NOTE]&1;> 属性的名称可能令人误解。 此属性包含只需使用任何数组修饰的类型名称或泛型类型参数中删除，不是基控件或父类型是预期。 例如的 BaseType 值`System.Collections.Generic.Dictionary`2[[System.String]，[System.Collections.Generic.List`1[[System.Int32]]]]`是`System.Collections.Generic.Dictionary`2`.      ## Representation of Generic Types    The information in this section is intended for CodeDom provider developers and only applies to CLS-compliant languages. The return value can contain generic types. Generic types are formatted with the name of the type followed by a grave accent (&quot;`&quot;) 后接一个计数的泛型类型参数。 泛型类型参数可在<xref:System.CodeDom.CodeTypeReferenceCollection>返回<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>属性。</xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> </xref:System.CodeDom.CodeTypeReferenceCollection> 返回 BaseType 和关联的值<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>包含的内容与返回通过反射的类型的值相同。</xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>       例如，构造的<xref:System.Collections.Generic.Dictionary%602>其中`K`是一个字符串和`V`整数构造的<xref:System.Collections.Generic.List%601>表示通过按如下所示的反射 （与删除的程序集信息）︰```   System.Collections.Generic.Dictionary`2[[System.String], [System.Collections.Generic.List`1[[System.Int32]]]]   ```以递归方式分析来自<xref:System.Collections.Generic.Dictionary%602><xref:System.CodeDom.CodeTypeReference>的 BaseType 属性生成与上面的反射表示相同的字符串:-父<xref:System.CodeDom.CodeTypeReference>的 BaseType 属性将返回以下︰ <CodeContentPlaceHolder>1</CodeContentPlaceHolder> -<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>集合中的第一个<xref:System.CodeDom.CodeTypeReference>对象的 BaseType 属性将返回以下: <CodeContentPlaceHolder>2</CodeContentPlaceHolder> -的 BaseType 属性为第二种<xref:System.CodeDom.CodeTypeReference>对象在<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>集合将返回以下︰ <CodeContentPlaceHolder>3</CodeContentPlaceHolder> -<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>中的属性<xref:System.CodeDom.CodeTypeReference>对象`System.Collections.Generic.List`1 将返回以下︰```       System.Int32       ```分析关联时，应使用的类型自变量计数<xref:System.CodeDom.CodeTypeReference.TypeArguments%2A>值。</xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> </xref:System.CodeDom.CodeTypeReference> </xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> </xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> </xref:System.CodeDom.CodeTypeReference>  </xref:System.CodeDom.CodeTypeReference></xref:System.CodeDom.CodeTypeReference.TypeArguments%2A> </xref:System.CodeDom.CodeTypeReference>  </xref:System.CodeDom.CodeTypeReference></xref:System.Collections.Generic.Dictionary%602> </xref:System.Collections.Generic.List%601> </xref:System.Collections.Generic.Dictionary%602> 常见的做法是从生成的代码中，删除类型自变量计数，但此做法是特定的编译器。  请务必请注意，在嵌套的类型名称中找不到类型自变量计数，这种情况下它后跟一个加号 （&quot;+&quot;）。      1> [!NOTE]&1;> 时创建的泛型<xref:System.CodeDom.CodeTypeReference>，建议的做法是指定为<xref:System.CodeDom.CodeTypeReference>对象或使用采用一种<xref:System.Type>。</xref:System.Type>的构造函数</xref:System.CodeDom.CodeTypeReference>的类型参数</xref:System.CodeDom.CodeTypeReference> 使用创建的构造函数<xref:System.CodeDom.CodeTypeReference>从字符串可能导致不可发现的类型参数错误。</xref:System.CodeDom.CodeTypeReference>"
  syntax:
    content: public string BaseType { get; set; }
    return:
      type: System.String
      description: "所引用的类型的名称。"
  overload: System.CodeDom.CodeTypeReference.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.Options
  id: Options
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: Options
  nameWithType: CodeTypeReference.Options
  fullName: System.CodeDom.CodeTypeReference.Options
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "获取或设置的代码类型引用选项。"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceOptions Options { get; set; }
    return:
      type: System.CodeDom.CodeTypeReferenceOptions
      description: "按位组合<xref href=&quot;System.CodeDom.CodeTypeReferenceOptions&quot;></xref>值。"
  overload: System.CodeDom.CodeTypeReference.Options*
  exceptions: []
  platform:
  - net462
- uid: System.CodeDom.CodeTypeReference.TypeArguments
  id: TypeArguments
  parent: System.CodeDom.CodeTypeReference
  langs:
  - csharp
  name: TypeArguments
  nameWithType: CodeTypeReference.TypeArguments
  fullName: System.CodeDom.CodeTypeReference.TypeArguments
  type: Property
  assemblies:
  - System
  namespace: System.CodeDom
  summary: "获取当前泛型类型引用的类型参数。"
  remarks: "TypeArguments 属性是要替换当前泛型类型的类型参数引用的类型引用的集合。 包含所有的嵌套类型的所有类型参数的集合。 有关示例，请参阅<xref:System.CodeDom.CodeTypeReference.BaseType%2A>属性。</xref:System.CodeDom.CodeTypeReference.BaseType%2A>"
  syntax:
    content: public System.CodeDom.CodeTypeReferenceCollection TypeArguments { get; }
    return:
      type: System.CodeDom.CodeTypeReferenceCollection
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReferenceCollection&quot;> </xref>包含当前的类型自变量<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>对象。"
  overload: System.CodeDom.CodeTypeReference.TypeArguments*
  exceptions: []
  platform:
  - net462
references:
- uid: System.CodeDom.CodeObject
  isExternal: false
  name: System.CodeDom.CodeObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.CodeDom.CodeTypeReference.#ctor
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference()
  nameWithType: CodeTypeReference.CodeTypeReference()
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference()
- uid: System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(CodeTypeParameter)
  nameWithType: CodeTypeReference.CodeTypeReference(CodeTypeParameter)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(CodeTypeParameter)
- uid: System.CodeDom.CodeTypeParameter
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeParameter
  nameWithType: CodeTypeParameter
  fullName: System.CodeDom.CodeTypeParameter
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(String)
  nameWithType: CodeTypeReference.CodeTypeReference(String)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.CodeDom.CodeTypeReference.#ctor(System.Type)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(Type)
  nameWithType: CodeTypeReference.CodeTypeReference(Type)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(CodeTypeReference,Int32)
  nameWithType: CodeTypeReference.CodeTypeReference(CodeTypeReference,Int32)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(CodeTypeReference,Int32)
- uid: System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(String,CodeTypeReference[])
  nameWithType: CodeTypeReference.CodeTypeReference(String,CodeTypeReference[])
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,CodeTypeReference[])
- uid: System.CodeDom.CodeTypeReference[]
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference[]
  spec.csharp:
  - uid: System.CodeDom.CodeTypeReference
    name: CodeTypeReference
    nameWithType: CodeTypeReference
    fullName: CodeTypeReference[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(String,CodeTypeReferenceOptions)
  nameWithType: CodeTypeReference.CodeTypeReference(String,CodeTypeReferenceOptions)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,CodeTypeReferenceOptions)
- uid: System.CodeDom.CodeTypeReferenceOptions
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceOptions
  nameWithType: CodeTypeReferenceOptions
  fullName: System.CodeDom.CodeTypeReferenceOptions
- uid: System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(String,Int32)
  nameWithType: CodeTypeReference.CodeTypeReference(String,Int32)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(String,Int32)
- uid: System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference(Type,CodeTypeReferenceOptions)
  nameWithType: CodeTypeReference.CodeTypeReference(Type,CodeTypeReferenceOptions)
  fullName: System.CodeDom.CodeTypeReference.CodeTypeReference(Type,CodeTypeReferenceOptions)
- uid: System.CodeDom.CodeTypeReference.ArrayElementType
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: ArrayElementType
  nameWithType: CodeTypeReference.ArrayElementType
  fullName: System.CodeDom.CodeTypeReference.ArrayElementType
- uid: System.CodeDom.CodeTypeReference.ArrayRank
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: ArrayRank
  nameWithType: CodeTypeReference.ArrayRank
  fullName: System.CodeDom.CodeTypeReference.ArrayRank
- uid: System.CodeDom.CodeTypeReference.BaseType
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: BaseType
  nameWithType: CodeTypeReference.BaseType
  fullName: System.CodeDom.CodeTypeReference.BaseType
- uid: System.CodeDom.CodeTypeReference.Options
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: Options
  nameWithType: CodeTypeReference.Options
  fullName: System.CodeDom.CodeTypeReference.Options
- uid: System.CodeDom.CodeTypeReference.TypeArguments
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: TypeArguments
  nameWithType: CodeTypeReference.TypeArguments
  fullName: System.CodeDom.CodeTypeReference.TypeArguments
- uid: System.CodeDom.CodeTypeReferenceCollection
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReferenceCollection
  nameWithType: CodeTypeReferenceCollection
  fullName: System.CodeDom.CodeTypeReferenceCollection
- uid: System.CodeDom.CodeTypeReference.#ctor*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: CodeTypeReference
  nameWithType: CodeTypeReference.CodeTypeReference
- uid: System.CodeDom.CodeTypeReference.ArrayElementType*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: ArrayElementType
  nameWithType: CodeTypeReference.ArrayElementType
- uid: System.CodeDom.CodeTypeReference.ArrayRank*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: ArrayRank
  nameWithType: CodeTypeReference.ArrayRank
- uid: System.CodeDom.CodeTypeReference.BaseType*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: BaseType
  nameWithType: CodeTypeReference.BaseType
- uid: System.CodeDom.CodeTypeReference.Options*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: Options
  nameWithType: CodeTypeReference.Options
- uid: System.CodeDom.CodeTypeReference.TypeArguments*
  parent: System.CodeDom.CodeTypeReference
  isExternal: false
  name: TypeArguments
  nameWithType: CodeTypeReference.TypeArguments
