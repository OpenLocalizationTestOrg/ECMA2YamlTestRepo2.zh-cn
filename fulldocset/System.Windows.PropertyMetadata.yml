### YamlMime:ManagedReference
items:
- uid: System.Windows.PropertyMetadata
  id: PropertyMetadata
  children:
  - System.Windows.PropertyMetadata.#ctor
  - System.Windows.PropertyMetadata.#ctor(System.Object)
  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  - System.Windows.PropertyMetadata.CoerceValueCallback
  - System.Windows.PropertyMetadata.DefaultValue
  - System.Windows.PropertyMetadata.IsSealed
  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  - System.Windows.PropertyMetadata.PropertyChangedCallback
  langs:
  - csharp
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
  type: Class
  summary: "定义依赖项属性的某些行为方面，如应用于特定类型，包括已注册的条件。"
  remarks: "可以定义的属性元数据，并将其在注册依赖属性过程中调用时使用<xref:System.Windows.DependencyProperty.Register%2A>方法 （或附加的属性或只读依赖属性的变化形式），或在调用时的原始所有者注册后<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>方法。</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.Register%2A> <xref:System.Windows.DependencyProperty.AddOwner%2A>此外接受属性元数据。</xref:System.Windows.DependencyProperty.AddOwner%2A>       此类是一个具体基类，该类可以在其中每一个调用中使用。 但是，它是很常见，用于指定元数据使用派生的类，例如<xref:System.Windows.FrameworkPropertyMetadata>.</xref:System.Windows.FrameworkPropertyMetadata>之一 这些派生的类支持更多详细的元数据作为可用于检测或启用仅实现在某些属性系统和布局行为的布尔属性值来传输[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]framework 级别。       此类的几个属性是读写的对对象模型中，但只能写入之前如<xref:System.Windows.DependencyProperty.Register%2A>或<xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>.</xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A></xref:System.Windows.DependencyProperty.Register%2A>属性系统操作中正在使用的实例 每个这些属性还可能已设置构造函数，但公开，以便<xref:System.Windows.PropertyMetadata.Merge%2A>方法实现可以设置它们。</xref:System.Windows.PropertyMetadata.Merge%2A>      <a name=&quot;xamlTextUsage_PropertyMetadata&quot;></a># # XAML 文本用法这种类型，此类型的成员不通常使用和中[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public class PropertyMetadata
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor
  id: '#ctor'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>类。"
  syntax:
    content: public PropertyMetadata ();
    parameters: []
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>与指定的默认值为此元数据将应用于依赖项属性的类。"
  remarks: "为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于依赖项属性的原始注册中指定的类型。 因为在 （不匹配会引发运行时异常） 的编译期间不能检测到不匹配，是，则可能很难调试，元数据默认值类型和应用于依赖项属性的类型之间的不匹配。       尽管每个无参数构造函数中，默认`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。</xref:System.Windows.DependencyProperty.UnsetValue> 尝试这样做将引发的异常。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "要指定作为某个特定类型的值通常提供的依赖项属性的默认值。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>不能设置为值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 请参阅备注。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>使用指定的类<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>实现引用。"
  remarks: ''
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor1paramcallback](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor1paramcallback)]"
  syntax:
    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "对是有效的属性值发生更改时由属性系统调用处理程序实现的引用。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>与指定的默认值的类和<xref href=&quot;System.Windows.PropertyChangedCallback&quot;></xref>实现引用。"
  remarks: "提供的值的类型`defaultValue`必须匹配或与此元数据将应用于依赖项属性的原始注册中指定的类型。 因为在 （不匹配会引发运行时异常） 的编译期间不能检测到不匹配，是，则可能很难调试，元数据默认值类型和应用于依赖项属性的类型之间的不匹配。       尽管每个无参数构造函数中，默认`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。</xref:System.Windows.DependencyProperty.UnsetValue> 尝试这样做将引发的异常。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor2param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor2param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "依赖项属性，作为某个特定类型的值通常提供默认值。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "对是有效的属性值发生更改时由属性系统调用处理程序实现的引用。"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>不能设置为值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 请参阅备注。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>用指定的默认值和回调的类。"
  remarks: "如果你想要指定<xref:System.Windows.CoerceValueCallback>但不是<xref:System.Windows.PropertyChangedCallback>，可以将传递`null`为`propertyChangedCallback`参数。</xref:System.Windows.PropertyChangedCallback> </xref:System.Windows.CoerceValueCallback>       为提供的值的类型`defaultValue`必须匹配或与此元数据将应用于依赖项属性的原始注册中指定的类型。 因为在 （不匹配会引发运行时异常） 的编译期间不能检测到不匹配，是，则可能很难调试，元数据默认值类型和应用于依赖项属性的类型之间的不匹配。       尽管每个无参数构造函数中，默认`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能指定。</xref:System.Windows.DependencyProperty.UnsetValue> 尝试这样做将引发的异常。"
  example:
  - "[!code-cs[PropertyMetadataAPIs#Initpm](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#initpm)]  \n[!code-cs[PropertyMetadataAPIs#PMCtor3param](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#pmctor3param)]"
  syntax:
    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);
    parameters:
    - id: defaultValue
      type: System.Object
      description: "依赖项属性，作为某个特定类型的值通常提供默认值。"
    - id: propertyChangedCallback
      type: System.Windows.PropertyChangedCallback
      description: "对是有效的属性值发生更改时由属性系统调用处理程序实现的引用。"
    - id: coerceValueCallback
      type: System.Windows.CoerceValueCallback
      description: "引用是每当属性系统调用的处理程序实现<xref:System.Windows.DependencyObject.CoerceValue*>针对此属性。</xref:System.Windows.DependencyObject.CoerceValue*>"
  overload: System.Windows.PropertyMetadata.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>defaultValue</code>不能设置为值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 请参阅备注。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  id: CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置一个引用， <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>此元数据中指定的实现。"
  remarks: "属性元数据中的回调不是上包含的类型，通常公共成员，因此此属性的值并不重要仅仅使用现有依赖项属性的元数据的大多数情况下。 此属性公开的一个原因是，因此，元数据子类可以执行其所需的合并逻辑，如果基本元数据和重写/添加元数据指定一种<xref:System.Windows.CoerceValueCallback>。</xref:System.Windows.CoerceValueCallback> 但是，CoerceValueCallback 的默认合并逻辑是替换前一个。       CoerceValueCallback 对象模型中定义为读写。 这是因此可以初始化后调整 CoerceValueCallback<xref:System.Windows.PropertyMetadata>对象本身。</xref:System.Windows.PropertyMetadata> 但是，作为对的调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和属性都被视为不可变。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 尝试一次设置 CoerceValueCallback<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发的异常。</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }
    return:
      type: System.Windows.CoerceValueCallback
      description: "A <xref href=&quot;System.Windows.CoerceValueCallback&quot;> </xref>实现引用。"
  overload: System.Windows.PropertyMetadata.CoerceValueCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "对依赖属性操作应用后，无法设置元数据属性。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.DefaultValue
  id: DefaultValue
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置依赖项属性的默认值。"
  remarks: "DefaultValue 对象模型中定义为读写。 这是因此可以初始化后调整 DefaultValue<xref:System.Windows.PropertyMetadata>对象本身。</xref:System.Windows.PropertyMetadata> 但是，作为对的调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和属性都被视为不可变。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 尝试一次设置 DefaultValue<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发的异常。</xref:System.Windows.PropertyMetadata.IsSealed%2A>       尽管每个无参数构造函数中，默认`defaultValue`的<xref:System.Windows.DependencyProperty.UnsetValue>不能通过 DefaultValue 或构造函数设置。</xref:System.Windows.DependencyProperty.UnsetValue> 尝试这样做将引发的异常。      <a name=&quot;xamlTextUsage_PropertyChangedCallback&quot;></a># # 此类型的 XAML 文本用法成员通常不使用在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public object DefaultValue { get; set; }
    return:
      type: System.Object
      description: "属性的默认值。 上的默认值<xref href=&quot;System.Windows.PropertyMetadata&quot;></xref>使用无参数构造函数创建的实例将<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>; 请参阅备注。"
  overload: System.Windows.PropertyMetadata.DefaultValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "不能设置为值<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;></xref>后创建; 请参阅备注。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "对依赖属性操作应用后，无法设置元数据属性。"
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.IsSealed
  id: IsSealed
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取一个值，确定是否已将元数据应用到以某种方式，从而导致该元数据实例的不可变状态属性。"
  remarks: "各种属性<xref:System.Windows.PropertyMetadata>，如<xref:System.Windows.PropertyMetadata.DefaultValue%2A>，在为读写模式的对象模型中定义。</xref:System.Windows.PropertyMetadata.DefaultValue%2A> </xref:System.Windows.PropertyMetadata> 这是以便这些属性可进行调整后的初始化<xref:System.Windows.PropertyMetadata>对象本身。</xref:System.Windows.PropertyMetadata> 但是，作为对的调用的一部分应用于依赖属性元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和属性都被视为不可变。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 在这些调用之一时<xref:System.Windows.PropertyMetadata.OnApply%2A>调用时，此属性的值设置为`true`。</xref:System.Windows.PropertyMetadata.OnApply%2A>"
  example:
  - "The following example  checks IsSealed prior to a set operation of a custom metadata property.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected bool IsSealed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元数据实例是不可变;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.PropertyMetadata.IsSealed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "合并的基本元数据与此元数据。"
  remarks: "重写元数据时在内部使用此方法 (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法)。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \n  \n [!code-cs[PropertyMetadataAPIs#MergeImpl](~/add/codesnippet/csharp/PropertyMetadataAPIs/Class1.cs#mergeimpl)]"
  syntax:
    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);
    parameters:
    - id: baseMetadata
      type: System.Windows.PropertyMetadata
      description: "要与此实例的值合并的基本元数据。"
    - id: dp
      type: System.Windows.DependencyProperty
      description: "正在向其应用此元数据依赖项属性。"
  overload: System.Windows.PropertyMetadata.Merge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  id: OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "当此元数据已应用到属性，它指示正在密封元数据时调用。"
  remarks: "子类应确保︰ 数据结构的任何可变性<xref:System.Windows.PropertyMetadata>子类应标记为不可变后调用 OnApply。</xref:System.Windows.PropertyMetadata> 这将调用后对属性系统操作应用了元数据 （注册、 将所有者添加、 重写元数据）。"
  syntax:
    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);
    parameters:
    - id: dp
      type: System.Windows.DependencyProperty
      description: "向其应用了元数据依赖项属性。"
    - id: targetType
      type: System.Type
      description: "如果这是类型特定的元数据与此元数据关联的类型。 如果这是默认元数据，此值为空引用。"
  overload: System.Windows.PropertyMetadata.OnApply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  id: PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  langs:
  - csharp
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置一个引用， <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref>此元数据中指定的实现。"
  remarks: "属性元数据中的回调不是上定义的类型，通常公共成员，因此此属性的值并不重要仅仅使用现有依赖项属性的元数据的大多数情况下。 此属性公开的一个原因是，因此，元数据类可以执行其所需的合并逻辑，如果基本元数据和重写/添加元数据指定一种<xref:System.Windows.PropertyChangedCallback>。</xref:System.Windows.PropertyChangedCallback> 默认合并逻辑是维护表中的所有 PropertyChangedCallback 实现并调用其中，每台运行第一个层次结构中最深的类所建立的回调。       PropertyChangedCallback 对象模型中定义为读写。 这是因此可以初始化后调整 PropertyChangedCallback<xref:System.Windows.PropertyMetadata>对象本身。</xref:System.Windows.PropertyMetadata> 但是，作为对的调用的一部分使用元数据后<xref:System.Windows.DependencyProperty.Register%2A>， <xref:System.Windows.DependencyProperty.AddOwner%2A>，或<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>、 属性系统将密封该元数据实例和属性都被视为不可变。</xref:System.Windows.DependencyProperty.OverrideMetadata%2A> </xref:System.Windows.DependencyProperty.AddOwner%2A> </xref:System.Windows.DependencyProperty.Register%2A> 尝试一次设置 PropertyChangedCallback<xref:System.Windows.PropertyMetadata.IsSealed%2A>是`true`对此元数据实例将引发的异常。</xref:System.Windows.PropertyMetadata.IsSealed%2A>"
  syntax:
    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }
    return:
      type: System.Windows.PropertyChangedCallback
      description: "A <xref href=&quot;System.Windows.PropertyChangedCallback&quot;> </xref>实现引用。"
  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "对依赖属性操作应用后，无法设置元数据属性。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.PropertyMetadata.#ctor
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata()
  nameWithType: PropertyMetadata.PropertyMetadata()
  fullName: System.Windows.PropertyMetadata.PropertyMetadata()
- uid: System.Windows.PropertyMetadata.#ctor(System.Object)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object)
  nameWithType: PropertyMetadata.PropertyMetadata(Object)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object)
- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(PropertyChangedCallback)
- uid: System.Windows.PropertyChangedCallback
  parent: System.Windows
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyChangedCallback
  fullName: System.Windows.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback)
- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  nameWithType: PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
  fullName: System.Windows.PropertyMetadata.PropertyMetadata(Object,PropertyChangedCallback,CoerceValueCallback)
- uid: System.Windows.CoerceValueCallback
  parent: System.Windows
  isExternal: false
  name: CoerceValueCallback
  nameWithType: CoerceValueCallback
  fullName: System.Windows.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.CoerceValueCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
  fullName: System.Windows.PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
  fullName: System.Windows.PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
  fullName: System.Windows.PropertyMetadata.IsSealed
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge(PropertyMetadata,DependencyProperty)
  nameWithType: PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
  fullName: System.Windows.PropertyMetadata.Merge(PropertyMetadata,DependencyProperty)
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply(DependencyProperty,Type)
  nameWithType: PropertyMetadata.OnApply(DependencyProperty,Type)
  fullName: System.Windows.PropertyMetadata.OnApply(DependencyProperty,Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
  fullName: System.Windows.PropertyMetadata.PropertyChangedCallback
- uid: System.Windows.PropertyMetadata.#ctor*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata.PropertyMetadata
- uid: System.Windows.PropertyMetadata.CoerceValueCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: CoerceValueCallback
  nameWithType: PropertyMetadata.CoerceValueCallback
- uid: System.Windows.PropertyMetadata.DefaultValue*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: DefaultValue
  nameWithType: PropertyMetadata.DefaultValue
- uid: System.Windows.PropertyMetadata.IsSealed*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: IsSealed
  nameWithType: PropertyMetadata.IsSealed
- uid: System.Windows.PropertyMetadata.Merge*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: Merge
  nameWithType: PropertyMetadata.Merge
- uid: System.Windows.PropertyMetadata.OnApply*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: OnApply
  nameWithType: PropertyMetadata.OnApply
- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*
  parent: System.Windows.PropertyMetadata
  isExternal: false
  name: PropertyChangedCallback
  nameWithType: PropertyMetadata.PropertyChangedCallback
