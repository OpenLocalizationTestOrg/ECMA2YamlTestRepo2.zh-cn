### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermissionAttribute
  id: ReflectionPermissionAttribute
  children:
  - System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  - System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  - System.Security.Permissions.ReflectionPermissionAttribute.Flags
  - System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  - System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  - System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  langs:
  - csharp
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute
  fullName: System.Security.Permissions.ReflectionPermissionAttribute
  type: Class
  summary: "允许的操作安全<xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;></xref>要应用于使用声明性安全的代码。"
  remarks: "允许声明的范围取决于<xref:System.Security.Permissions.SecurityAction>使用。</xref:System.Security.Permissions.SecurityAction>       通过安全特性声明的安全信息的属性目标的元数据中存储和在运行时访问系统。 安全属性仅用于声明性安全。 对于命令性安全，使用相应的权限类。"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ReflectionPermissionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute
  inheritance:
  - System.Attribute
  - System.Security.Permissions.SecurityAttribute
  - System.Security.Permissions.CodeAccessSecurityAttribute
  implements: []
  inheritedMembers:
  - System.Security.Permissions.SecurityAttribute.Action
  - System.Security.Permissions.SecurityAttribute.Unrestricted
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  id: '#ctor(System.Security.Permissions.SecurityAction)'
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.ReflectionPermissionAttribute&quot;></xref>使用指定的类<xref href=&quot;System.Security.Permissions.SecurityAction&quot;> </xref>。"
  syntax:
    content: public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);
    parameters:
    - id: action
      type: System.Security.Permissions.SecurityAction
      description: "之一<xref href=&quot;System.Security.Permissions.SecurityAction&quot;></xref>值。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  id: CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建并返回一个新<xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>。"
  remarks: "此方法仅应由安全系统中，永远不会由应用程序代码调用。       在编译时，属性将安全声明转换为元数据中序列化形式。 从权限，此方法返回对应于此属性创建元数据中的声明性安全数据。"
  syntax:
    content: public override System.Security.IPermission CreatePermission ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "A <xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>相对应的此属性。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  id: Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置当前允许的反射的使用。"
  syntax:
    content: public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "一个或多个<xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref>使用按位 OR 组合在一起的值。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "尝试将此属性设置为无效值。 请参阅<xref href=&quot;System.Security.Permissions.ReflectionPermissionFlag&quot;></xref>为有效的值。"
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  id: MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置一个值，该值指示是否允许在非公共成员上的调用操作。"
  syntax:
    content: public bool MemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果允许在非公共成员上的调用操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  id: ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置一个值，该值指示是否使用某些功能<xref href=&quot;System.Reflection.Emit&quot;> </xref>，例如允许发出调试符号。"
  remarks: "> [!NOTE]1> 第一页为[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]，发出代码不再需要<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>标志。</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> </xref:System.Security.Permissions.ReflectionPermission> 反射的某些功能发出，如发出调试符号，仍需要<xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName>标志。</xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> (请参阅[反射发出中的安全问题](~/add/includes/ajax-current-ext-md.md)。)  >> 到使用此功能，你的应用程序应面向[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]或更高版本。"
  syntax:
    content: public bool ReflectionEmit { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果允许使用的受影响的功能;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  id: RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置一个值，该值指示是否允许受限制的非公共成员的调用。 受限制的调用意味着，包含正在调用的非公共成员的程序集的授予集必须等于或与调用程序集的授予集的子集。"
  remarks: >-
    > [!NOTE]

    >  This property is introduced in the [!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]. To use this property, your application should target the [!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)] or later.
  syntax:
    content: public bool RestrictedMemberAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果允许受限制的非公共成员的调用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  id: TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  langs:
  - csharp
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置一个值，该值指示是否允许在不可见的成员上的反射。"
  remarks: "此属性现已过时。 反射到不再是不可见的成员的元数据需要<xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission>"
  syntax:
    content: public bool TypeInformation { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果允许在不可见的成员上的反射;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Permissions.CodeAccessSecurityAttribute
  isExternal: false
  name: System.Security.Permissions.CodeAccessSecurityAttribute
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute(SecurityAction)
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionPermissionAttribute(SecurityAction)
- uid: System.Security.Permissions.SecurityAction
  parent: System.Security.Permissions
  isExternal: false
  name: SecurityAction
  nameWithType: SecurityAction
  fullName: System.Security.Permissions.SecurityAction
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission()
  nameWithType: ReflectionPermissionAttribute.CreatePermission()
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation
- uid: System.Security.Permissions.ReflectionPermissionAttribute.#ctor*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionPermissionAttribute
  nameWithType: ReflectionPermissionAttribute.ReflectionPermissionAttribute
- uid: System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: CreatePermission
  nameWithType: ReflectionPermissionAttribute.CreatePermission
- uid: System.Security.Permissions.ReflectionPermissionAttribute.Flags*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: Flags
  nameWithType: ReflectionPermissionAttribute.Flags
- uid: System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionAttribute.MemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionAttribute.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionAttribute.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation*
  parent: System.Security.Permissions.ReflectionPermissionAttribute
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionAttribute.TypeInformation
