### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.DesignSurface
  id: DesignSurface
  children:
  - System.ComponentModel.Design.DesignSurface.#ctor
  - System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  - System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  - System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  - System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  - System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  - System.ComponentModel.Design.DesignSurface.ComponentContainer
  - System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  - System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  - System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  - System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  - System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Design.DesignSurface.Dispose
  - System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  - System.ComponentModel.Design.DesignSurface.Disposed
  - System.ComponentModel.Design.DesignSurface.DtelLoading
  - System.ComponentModel.Design.DesignSurface.Flush
  - System.ComponentModel.Design.DesignSurface.Flushed
  - System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  - System.ComponentModel.Design.DesignSurface.IsLoaded
  - System.ComponentModel.Design.DesignSurface.Loaded
  - System.ComponentModel.Design.DesignSurface.LoadErrors
  - System.ComponentModel.Design.DesignSurface.Loading
  - System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  - System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  - System.ComponentModel.Design.DesignSurface.ServiceContainer
  - System.ComponentModel.Design.DesignSurface.Unloaded
  - System.ComponentModel.Design.DesignSurface.Unloading
  - System.ComponentModel.Design.DesignSurface.View
  - System.ComponentModel.Design.DesignSurface.ViewActivated
  langs:
  - csharp
  name: DesignSurface
  nameWithType: DesignSurface
  fullName: System.ComponentModel.Design.DesignSurface
  type: Class
  summary: "提供用于设计组件的用户界面。"
  remarks: "DesignSurface 类实现用户视为设计器。 DesignSurface 是用户界面用户操作以更改设计时功能。 DesignSurface 提供完全自包含的设计图面。       DesignSurface 类可能使用作为独立的设计器中，或它可能也会使<xref:System.ComponentModel.Design.DesignSurfaceManager>类以提供的应用程序承载多个 DesignSurface 对象通用的实现。</xref:System.ComponentModel.Design.DesignSurfaceManager>       DesignSurface 类可以由本身，或用户可以从它派生新类并增加的行为。       DesignSurface 类自动提供了一些设计时服务。 DesignSurface 类将添加其所有服务在其构造函数。 大多数这些服务可以重写通过替代它们在受保护<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>属性。</xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 若要替换服务，重写构造函数、 调用基类，和通过受保护的任何更改<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>属性。</xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> 所有服务，它添加到服务容器和实现<xref:System.IDisposable>释放设计图面时，将释放。</xref:System.IDisposable> 默认的可替换 DesignSurface 类提供了以下表所示的服务集。      |服务 |说明 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IExtenderProviderService>|允许将不是容器的组件集合，以提供其自己的扩展程序提供程序的一部分的对象。 |  |<xref:System.ComponentModel.Design.IExtenderListService>|使用<xref:System.ComponentModel.TypeDescriptor>来获取扩展程序提供程序的列表。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.Design.IExtenderListService> </xref:System.ComponentModel.Design.IExtenderProviderService> 此服务，通过扩展程序提供程序可以实时容器之外。 |  |<xref:System.ComponentModel.Design.ITypeDescriptorFilterService>|提供了设计器元数据挂钩。</xref:System.ComponentModel.Design.ITypeDescriptorFilterService> 这是元数据筛选的主接口。 |  |<xref:System.ComponentModel.Design.ISelectionService>|使您能够在设计器中选择组件。 |  |<xref:System.ComponentModel.Design.IReferenceService>|提供一种方法来获取对象的名称，即使这些对象位置不正确。 |  |DesignSurface |提供设计图面本身作为服务。 |  |<xref:System.ComponentModel.Design.DesignerOptionService>|提供基本类，用于获取和设置为设计器的选项值。 |      下表显示了默认提供的非可替换服务。</xref:System.ComponentModel.Design.DesignerOptionService> </xref:System.ComponentModel.Design.IReferenceService> </xref:System.ComponentModel.Design.ISelectionService>      |服务 |说明 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IComponentChangeService>|对组件进行更改时引发的事件。 |  |<xref:System.ComponentModel.Design.IDesignerHost>|控制对类型、 服务和事务的访问。</xref:System.ComponentModel.Design.IDesignerHost> </xref:System.ComponentModel.Design.IComponentChangeService> 设计器的主接口。 |  |<xref:System.ComponentModel.IContainer>|正在设计的组件集的所有者。</xref:System.ComponentModel.IContainer> 每个设计器有<xref:System.ComponentModel.IContainer>拥有组件。 |  |<xref:System.ComponentModel.Design.IServiceContainer>|派生自<xref:System.IServiceProvider>并提供了如何添加和从设计器中删除服务。 |      这些服务，除了 DesignSurface 类还提供了可通过组件的站点的单个服务。</xref:System.IServiceProvider> </xref:System.ComponentModel.Design.IServiceContainer> </xref:System.ComponentModel.IContainer> 此服务是唯一的每个组件。 下表显示不能被替换的服务。      |服务 |说明 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IDictionaryService>|可以用于存储有关组件的任意数据的键/值对的泛型字典。 |  |<xref:System.ComponentModel.INestedContainer>|使组件能够将其他子组件添加到设计器的容器。</xref:System.ComponentModel.INestedContainer> </xref:System.ComponentModel.Design.IDictionaryService> 这些组件将作为一部分的设计图面上，但将不参与序列化。 当你想要设计能够公开区域本身在设计器中，某个控件时，这是很有用，但你不想要参与序列化的区域。 |      除了<xref:System.ComponentModel.ISite>，此站点还实现以下接口。</xref:System.ComponentModel.ISite>      1> [!CAUTION]&1;> 检查是否存在这些接口，而不是使用不加选择地强制转换，因为其他站点实现可能不能实现它们。      |服务 |说明 |  |-------------|-----------------|  |<xref:System.ComponentModel.Design.IServiceContainer>|提供一种方法可用于访问特定于站点的服务的容器。</xref:System.ComponentModel.Design.IServiceContainer> 例如，<xref:System.ComponentModel.Design.IDictionaryService>是特定于站点的服务。</xref:System.ComponentModel.Design.IDictionaryService> 使用此服务，你可以添加其他特定于站点的服务。 |"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public class DesignSurface : IDisposable, IServiceProvider
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  - System.IServiceProvider
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface()
  nameWithType: DesignSurface.DesignSurface()
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface()
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>类。"
  syntax:
    content: public DesignSurface ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(IServiceProvider)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>类。"
  remarks: "当`parentProvide`存在，则面中包含的设计器可以从应用程序中检索服务。"
  syntax:
    content: public DesignSurface (IServiceProvider parentProvider);
    parameters:
    - id: parentProvider
      type: System.IServiceProvider
      description: "父服务提供程序，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在父用于解析服务。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(Type)
  nameWithType: DesignSurface.DesignSurface(Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(Type)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>类。"
  remarks: "当你使用 DesignSurface 构造函数时，它会创建简单的设计器加载程序，反过来，创建给定类型的一个组件，并随后结束加载过程。 这是一种简单方法创建设计器中的，假定所有将外部完成保存状态。 在内部，这将调用<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>并将传递根组件类型。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>      1> [!NOTE]&1;> DesignSurface 重载不受<xref:System.Windows.Forms.Design.DesignerOptions>.</xref:System.Windows.Forms.Design.DesignerOptions> <xref:System.Windows.Forms.Design.DesignerOptions>设计图面加载之前必须是服务容器中。</xref:System.Windows.Forms.Design.DesignerOptions> 如果你需要访问<xref:System.Windows.Forms.Design.DesignerOptions>、 调用空构造函数、 添加<xref:System.Windows.Forms.Design.DesignerOptions>到<xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A>并调用<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>与`rootComponentType`。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> </xref:System.ComponentModel.Design.DesignSurface.ServiceContainer%2A> </xref:System.Windows.Forms.Design.DesignerOptions> </xref:System.Windows.Forms.Design.DesignerOptions>"
  syntax:
    content: public DesignSurface (Type rootComponentType);
    parameters:
    - id: rootComponentType
      type: System.Type
      description: "要创建的根组件类型。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  id: '#ctor(System.IServiceProvider,System.Type)'
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DesignSurface(IServiceProvider,Type)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider,Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider,Type)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>类。"
  remarks: "使用 DesignSurface 构造函数创建简单的设计器加载程序创建给定类型的一个组件，随后结束加载过程。 这是一种简单方法创建设计器中的，假定所有将外部完成保存状态。 在内部，这将调用<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>并将传递根组件类型。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>"
  syntax:
    content: public DesignSurface (IServiceProvider parentProvider, Type rootComponentType);
    parameters:
    - id: parentProvider
      type: System.IServiceProvider
      description: "父服务提供程序，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在父用于解析服务。"
    - id: rootComponentType
      type: System.Type
      description: "要创建的根组件类型。"
  overload: System.ComponentModel.Design.DesignSurface.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  id: BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: BeginLoad(DesignerLoader)
  nameWithType: DesignSurface.BeginLoad(DesignerLoader)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(DesignerLoader)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "开始使用给定的设计器加载程序加载过程。"
  remarks: "因此加载可能继续进行此调用已返回后，可以是异步的设计器加载。 附加到事件处理程序<xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>设计图面完成加载时要通知的事件。</xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>       后<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>是调用，还可以立即获得视图设计器中，因为设计器加载程序必须提供至少的根组件在异步加载时。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>"
  syntax:
    content: public void BeginLoad (System.ComponentModel.Design.Serialization.DesignerLoader loader);
    parameters:
    - id: loader
      type: System.ComponentModel.Design.Serialization.DesignerLoader
      description: "用于加载设计器设计器加载程序。"
  overload: System.ComponentModel.Design.DesignSurface.BeginLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>loader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  id: BeginLoad(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: BeginLoad(Type)
  nameWithType: DesignSurface.BeginLoad(Type)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "开始加载过程。"
  remarks: "当`rootComponentType`指定，则默认设计器加载程序，只需创建的实例`rootComponentType`将使用。 因此加载可能继续进行此调用已返回后，可以是异步的设计器加载。 附加到事件处理程序<xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>设计图面完成加载时要通知的事件。</xref:System.ComponentModel.Design.IDesignerHost.LoadComplete>       调用 BeginLoad 之后，你可以立即获得视图设计器中，因为设计器加载程序必须提供至少的根组件在异步加载时。      1> [!NOTE]&1;> BeginLoad 方法创建的组件类型的实例并初始化此实例的设计器。 <xref:System.ComponentModel.Design.DesignSurface.Loaded>此方法返回之前，将引发事件。</xref:System.ComponentModel.Design.DesignSurface.Loaded>"
  syntax:
    content: public void BeginLoad (Type rootComponentType);
    parameters:
    - id: rootComponentType
      type: System.Type
      description: "要在设计模式下创建的组件类型。"
  overload: System.ComponentModel.Design.DesignSurface.BeginLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>rootComponentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer
  id: ComponentContainer
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
  fullName: System.ComponentModel.Design.DesignSurface.ComponentContainer
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取<xref href=&quot;System.ComponentModel.IContainer&quot;></xref>设计图面中的实现。"
  remarks: "ComponentContainer 属性包含目前处于设计模式下的所有对象。 组件将被添加到 ComponentContainer，其设计器中，如果有的话，时加载。 提供到设计图面上的完全访问权限的站点组件所在。"
  syntax:
    content: public System.ComponentModel.IContainer ComponentContainer { get; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>设计图面中的实现。"
  overload: System.ComponentModel.Design.DesignSurface.ComponentContainer*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  id: CreateComponent(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateComponent(Type)
  nameWithType: DesignSurface.CreateComponent(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateComponent(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "创建组件的实例。"
  remarks: "CreateComponent 方法调用在设计图面<xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A>方法来创建组件的实例。</xref:System.ComponentModel.Design.IDesignerHost.CreateComponent%2A> 应创建的组件，并且将其添加到设计图面上的公共容器中。"
  syntax:
    content: protected virtual System.ComponentModel.IComponent CreateComponent (Type componentType);
    parameters:
    - id: componentType
      type: System.Type
      description: "要创建的组件类型。"
    return:
      type: System.ComponentModel.IComponent
      description: "新创建的组件。"
  overload: System.ComponentModel.Design.DesignSurface.CreateComponent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>componentType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  id: CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateDesigner(IComponent,Boolean)
  nameWithType: DesignSurface.CreateDesigner(IComponent,Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.CreateDesigner(IComponent,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "组件添加到容器时，请创建一个设计器。"
  remarks: "CreateDesigner 方法调用在设计图面<xref:System.ComponentModel.IContainer>时组件添加到容器。</xref:System.ComponentModel.IContainer> 此方法创建设计器中，但不对其进行初始化。 当它返回时，由容器初始化设计器。       CreateDesigner 可以创建两个不同类型的设计器︰ 根设计器和普通设计器。 根设计器是用于在设计图面，即通过定义第一个组件添加到容器中的根组件的设计器。 根设计器不同于普通设计器，因为他们负责向最终用户显示的用户界面。 根设计器通常协调与设计图面上的设计器，以提供此接口的其余部分。       此方法的默认实现委托给<xref:System.ComponentModel.TypeDescriptor>，并传入<xref:System.ComponentModel.Design.IRootDesigner>作为根设计器的设计器类型或<xref:System.ComponentModel.Design.IDesigner>作为普通设计器。</xref:System.ComponentModel.Design.IDesigner> </xref:System.ComponentModel.Design.IRootDesigner> </xref:System.ComponentModel.TypeDescriptor> 你可以重写此方法来请求特定类型的设计器。"
  syntax:
    content: protected virtual System.ComponentModel.Design.IDesigner CreateDesigner (System.ComponentModel.IComponent component, bool rootDesigner);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "应为其创建设计器的一个组件。"
    - id: rootDesigner
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要创建根设计器;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>创建正常的设计器。"
    return:
      type: System.ComponentModel.Design.IDesigner
      description: "请求的设计器的实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到任何匹配的设计器。"
  overload: System.ComponentModel.Design.DesignSurface.CreateDesigner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: DesignSurface.CreateInstance(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateInstance(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "创建给定类型的实例。"
  remarks: "如果`type`是<xref:System.ComponentModel.IComponent>，类型的构造函数搜索 CreateInstance<xref:System.ComponentModel.IContainer>首先后, 跟一个空构造函数。</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.IComponent>"
  syntax:
    content: protected virtual object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要创建的类型。"
    return:
      type: System.Object
      description: "新创建的对象。"
  overload: System.ComponentModel.Design.DesignSurface.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  id: CreateNestedContainer(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateNestedContainer(IComponent)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "创建一个容器适用于嵌套控件或组件。"
  remarks: "将组件添加到嵌套容器创建其设计器，并使其适合所有服务可从设计图面。 添加到嵌套容器的组件不参与序列化。"
  syntax:
    content: public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent);
    parameters:
    - id: owningComponent
      type: System.ComponentModel.IComponent
      description: "管理嵌套的容器的组件。"
    return:
      type: System.ComponentModel.INestedContainer
      description: "嵌套的容器。"
  overload: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owningComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  id: CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: CreateNestedContainer(IComponent,String)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent,String)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent,String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "创建一个容器适用于嵌套控件或组件。"
  remarks: "将组件添加到嵌套容器创建其设计器，并使其适合所有服务可从设计图面。 添加到嵌套容器的组件不参与序列化。       你可以通过将传递到值提供 CreateNestedContainer 方法的其他名称`containerName`。"
  syntax:
    content: public System.ComponentModel.INestedContainer CreateNestedContainer (System.ComponentModel.IComponent owningComponent, string containerName);
    parameters:
    - id: owningComponent
      type: System.ComponentModel.IComponent
      description: "管理嵌套的容器的组件。"
    - id: containerName
      type: System.String
      description: "嵌套容器其他名称。"
    return:
      type: System.ComponentModel.INestedContainer
      description: "嵌套的容器。"
  overload: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owningComponent</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Dispose
  id: Dispose
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Dispose()
  nameWithType: DesignSurface.Dispose()
  fullName: System.ComponentModel.Design.DesignSurface.Dispose()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "释放使用的资源<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。"
  remarks: "公共的 Dispose 方法遵循标准<xref:System.IDisposable>模式。</xref:System.IDisposable> 调用此方法将销毁设计图面。 此方法的受保护的版本是`virtual`，它遵循普通<xref:System.IDisposable>模式。</xref:System.IDisposable>      1> [!NOTE]&1;> 由于<xref:System.ComponentModel.Design.DesignSurface>不具有任何本机代码，以清理时，它没有调用<xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>.</xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>终结器</xref:System.ComponentModel.Design.DesignSurface> 如果你需要调用<xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>，你必须自己添加一个终结器。</xref:System.ComponentModel.Design.DesignSurface.Dispose%28System.Boolean%29>       在完成使用<xref:System.ComponentModel.Design.DesignSurface>.</xref:System.ComponentModel.Design.DesignSurface>时调用的 Dispose Dispose 方法离开<xref:System.ComponentModel.Design.DesignSurface>中不可用状态。</xref:System.ComponentModel.Design.DesignSurface> 调用 Dispose 后，必须释放对所有引用<xref:System.ComponentModel.Design.DesignSurface>以便垃圾回收器才能回收的内存，<xref:System.ComponentModel.Design.DesignSurface>占用。</xref:System.ComponentModel.Design.DesignSurface> </xref:System.ComponentModel.Design.DesignSurface> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.ComponentModel.Design.DesignSurface>。</xref:System.ComponentModel.Design.DesignSurface>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.ComponentModel.Design.DesignSurface>对象的`Finalize`方法。</xref:System.ComponentModel.Design.DesignSurface>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DesignSurface.Dispose(Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "释放使用的资源<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。"
  remarks: "公共<xref:System.ComponentModel.Design.DesignSurface.Dispose>方法遵循标准<xref:System.IDisposable>模式。</xref:System.IDisposable> </xref:System.ComponentModel.Design.DesignSurface.Dispose> 调用此方法将销毁设计图面。 此方法的受保护的版本是`virtual`，它遵循普通<xref:System.IDisposable>模式。</xref:System.IDisposable>      1> [!NOTE]&1;> 由于<xref:System.ComponentModel.Design.DesignSurface>不具有任何本机代码，以清理时，它不具有一个调用 Dispose 的终结器。</xref:System.ComponentModel.Design.DesignSurface> 如果你需要调用 Dispose，你必须自己添加一个终结器。       此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.ComponentModel.Design.DesignSurface>引用。</xref:System.ComponentModel.Design.DesignSurface> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.ComponentModel.Design.DesignSurface.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Disposed
  id: Disposed
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Disposed
  nameWithType: DesignSurface.Disposed
  fullName: System.ComponentModel.Design.DesignSurface.Disposed
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "释放设计图面时发生。"
  remarks: "图面是仅释放的在公共<xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>方法<xref:System.ComponentModel.Design.DesignSurface>称为。</xref:System.ComponentModel.Design.DesignSurface> </xref:System.ComponentModel.Design.DesignSurface.Dispose%2A>"
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading
  id: DtelLoading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
  fullName: System.ComponentModel.Design.DesignSurface.DtelLoading
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取一个值，该值指示是否**设计时错误列表**正在加载。"
  syntax:
    content: public bool DtelLoading { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果**设计时错误列表**加载; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.DesignSurface.DtelLoading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Flush
  id: Flush
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Flush()
  nameWithType: DesignSurface.Flush()
  fullName: System.ComponentModel.Design.DesignSurface.Flush()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "序列化到设计图面上的更改。"
  remarks: "可以调用 Flush 方法，以将推送到设计图面下序列化程序所做的更改。 这可确保设计图面和其序列化的状态同步。 此方法的实际实现转发到与设计图面关联的设计器加载程序。 设计器加载程序可以选择用于将更改的延迟，直到调用刷新时，或它也可能选择序列化的数据保留最新的用户的所有更改。 Flush 方法可确保，无论设计器加载程序选择使用的模式，如何序列化的状态同步与实际的设计图面。"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.ComponentModel.Design.DesignSurface.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Flushed
  id: Flushed
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Flushed
  nameWithType: DesignSurface.Flushed
  fullName: System.ComponentModel.Design.DesignSurface.Flushed
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "当调用时发生<xref:System.ComponentModel.Design.DesignSurface.Flush*>方法<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;> </xref>。</xref:System.ComponentModel.Design.DesignSurface.Flush*>"
  remarks: "首先，刷新设计器加载程序，则引发刷新事件。"
  syntax:
    content: public event EventHandler Flushed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: DesignSurface.GetService(Type)
  fullName: System.ComponentModel.Design.DesignSurface.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取从服务容器的服务。"
  remarks: "GetService 方法检索设计图面服务容器中的服务。 此外，这将转发到任何服务提供程序在构造时提供给设计图面。"
  syntax:
    content: public object GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "要检索的服务类型。"
    return:
      type: System.Object
      description: "实现时，或者是的一个派生的类的对象<code> serviceType </code>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果服务不存在服务容器中。"
  overload: System.ComponentModel.Design.DesignSurface.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded
  id: IsLoaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
  fullName: System.ComponentModel.Design.DesignSurface.IsLoaded
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取一个值，该值指示当前加载设计图面。"
  syntax:
    content: public bool IsLoaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前加载设计图面;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.DesignSurface.IsLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Loaded
  id: Loaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Loaded
  nameWithType: DesignSurface.Loaded
  fullName: System.ComponentModel.Design.DesignSurface.Loaded
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "当设计器加载已完成时发生。"
  remarks: "为成功加载，以及失败的情况下，将引发加载的事件。 如果此事件处理程序中的代码引发异常，则设计器将被卸载。       <xref:System.ComponentModel.Design.LoadedEventArgs>对象可以用于确定加载是否成功，并且它还可以为在加载期间发生的错误的列表。</xref:System.ComponentModel.Design.LoadedEventArgs>      1> [!NOTE]&1;> 可能发生错误成功加载，前提是序列化系统可以承受错误。"
  syntax:
    content: public event System.ComponentModel.Design.LoadedEventHandler Loaded;
    return:
      type: System.ComponentModel.Design.LoadedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors
  id: LoadErrors
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
  fullName: System.ComponentModel.Design.DesignSurface.LoadErrors
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "返回的加载错误或 void 集合的集合。"
  syntax:
    content: public System.Collections.ICollection LoadErrors { get; }
    return:
      type: System.Collections.ICollection
      description: "A<xref:System.Collections.ICollection>的加载错误。</xref:System.Collections.ICollection>"
  overload: System.ComponentModel.Design.DesignSurface.LoadErrors*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Loading
  id: Loading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Loading
  nameWithType: DesignSurface.Loading
  fullName: System.ComponentModel.Design.DesignSurface.Loading
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "将要加载设计器时发生。"
  syntax:
    content: public event EventHandler Loading;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  id: OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnLoaded(LoadedEventArgs)
  nameWithType: DesignSurface.OnLoaded(LoadedEventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoaded(LoadedEventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引发<xref href=&quot;System.ComponentModel.Design.DesignSurface.Loaded&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnLoaded (System.ComponentModel.Design.LoadedEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Design.LoadedEventArgs
      description: "A <xref href=&quot;System.ComponentModel.Design.LoadedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.ComponentModel.Design.DesignSurface.OnLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  id: OnLoading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnLoading(EventArgs)
  nameWithType: DesignSurface.OnLoading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoading(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引发<xref href=&quot;System.ComponentModel.Design.DesignSurface.Loading&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnLoading (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnLoading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  id: OnUnloaded(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnUnloaded(EventArgs)
  nameWithType: DesignSurface.OnUnloaded(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloaded(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引发<xref href=&quot;System.ComponentModel.Design.DesignSurface.Unloaded&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnUnloaded (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnUnloaded*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  id: OnUnloading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnUnloading(EventArgs)
  nameWithType: DesignSurface.OnUnloading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloading(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引发<xref href=&quot;System.ComponentModel.Design.DesignSurface.Unloading&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnUnloading (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnUnloading*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  id: OnViewActivate(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: OnViewActivate(EventArgs)
  nameWithType: DesignSurface.OnViewActivate(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnViewActivate(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "引发<xref href=&quot;System.ComponentModel.Design.DesignSurface.ViewActivated&quot;></xref>事件。"
  syntax:
    content: protected virtual void OnViewActivate (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.DesignSurface.OnViewActivate*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer
  id: ServiceContainer
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
  fullName: System.ComponentModel.Design.DesignSurface.ServiceContainer
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取服务容器。"
  remarks: "在构造时<xref:System.ComponentModel.Design.DesignSurface>将默认服务添加到此服务容器。</xref:System.ComponentModel.Design.DesignSurface> 您可以将默认服务留在其当前状态，也可以删除它们并将其替换为你自己。 默认服务是所有按需创建，因此将它们添加在构造时的性能不会丢失。"
  syntax:
    content: protected System.ComponentModel.Design.ServiceContainer ServiceContainer { get; }
    return:
      type: System.ComponentModel.Design.ServiceContainer
      description: "在设计图面中包含的设计器提供的所有服务的服务容器。"
  overload: System.ComponentModel.Design.DesignSurface.ServiceContainer*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Unloaded
  id: Unloaded
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Unloaded
  nameWithType: DesignSurface.Unloaded
  fullName: System.ComponentModel.Design.DesignSurface.Unloaded
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "当设计器已完成的卸载时发生。"
  syntax:
    content: public event EventHandler Unloaded;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.Unloading
  id: Unloading
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: Unloading
  nameWithType: DesignSurface.Unloading
  fullName: System.ComponentModel.Design.DesignSurface.Unloading
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "当设计器是将要卸载时发生。"
  remarks: "当卸载设计器时，被销毁该设计器的整个状态，包括设计器的视图。 此时，该视图应是没有父级。"
  syntax:
    content: public event EventHandler Unloading;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.View
  id: View
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: View
  nameWithType: DesignSurface.View
  fullName: System.ComponentModel.Design.DesignSurface.View
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "获取根设计器的视图。"
  remarks: "<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>必须事先以启动加载过程调用方法。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A> 就可以返回的视图设计器加载程序完成加载因为根设计器中，提供该视图，是由设计器加载程序创建的第一个对象之前。 如果视图是不可用，<xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>引发异常。</xref:System.ComponentModel.Design.DesignSurface.BeginLoad%2A>       视图技术的概念已废弃不用。 但是，其保留在接口中向后兼容性的根设计器。 其用途隐藏的任何人使用<xref:System.ComponentModel.Design.DesignSurface>对象。</xref:System.ComponentModel.Design.DesignSurface> 视图属性通过将受支持的技术传递回根设计器隐藏视图技术。"
  example:
  - "The following code example shows how View hides view technologies.  \n  \n [C#]  \n  \n `IRootDesigner d;`  \n  \n `ViewTechnology[] supported = d.SupportedTechnologies;`  \n  \n `return d.GetView(supported[0]);`"
  syntax:
    content: public object View { get; }
    return:
      type: System.Object
      description: "根设计器的视图。"
  overload: System.ComponentModel.Design.DesignSurface.View*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不加载设计图面、 设计器加载程序尚未创建根设计器，或设计图面完成的负载，但失败。 详细信息可能在可用<xref:System.Exception.InnerException*>。</xref:System.Exception.InnerException*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "设计器加载，但它不提供与此设计图面兼容的视图。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>附加到<xref href=&quot;System.ComponentModel.Design.DesignSurface&quot;></xref>已释放。"
  platform:
  - net462
- uid: System.ComponentModel.Design.DesignSurface.ViewActivated
  id: ViewActivated
  parent: System.ComponentModel.Design.DesignSurface
  langs:
  - csharp
  name: ViewActivated
  nameWithType: DesignSurface.ViewActivated
  fullName: System.ComponentModel.Design.DesignSurface.ViewActivated
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design
  summary: "发生时<xref:System.ComponentModel.Design.IDesignerHost.Activate*>在调用了方法<xref href=&quot;System.ComponentModel.Design.IDesignerHost&quot;> </xref>。</xref:System.ComponentModel.Design.IDesignerHost.Activate*>"
  remarks: "如果你想要支持<xref:System.ComponentModel.Design.IDesignerHost.Activate%2A>方法，事件处理程序应激活此设计图面的窗口。</xref:System.ComponentModel.Design.IDesignerHost.Activate%2A>"
  syntax:
    content: public event EventHandler ViewActivated;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ComponentModel.Design.DesignSurface.#ctor
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface()
  nameWithType: DesignSurface.DesignSurface()
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface()
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(IServiceProvider)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(Type)
  nameWithType: DesignSurface.DesignSurface(Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.DesignSurface.#ctor(System.IServiceProvider,System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface(IServiceProvider,Type)
  nameWithType: DesignSurface.DesignSurface(IServiceProvider,Type)
  fullName: System.ComponentModel.Design.DesignSurface.DesignSurface(IServiceProvider,Type)
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.ComponentModel.Design.Serialization.DesignerLoader)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad(DesignerLoader)
  nameWithType: DesignSurface.BeginLoad(DesignerLoader)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(DesignerLoader)
- uid: System.ComponentModel.Design.Serialization.DesignerLoader
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: DesignerLoader
  nameWithType: DesignerLoader
  fullName: System.ComponentModel.Design.Serialization.DesignerLoader
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad(Type)
  nameWithType: DesignSurface.BeginLoad(Type)
  fullName: System.ComponentModel.Design.DesignSurface.BeginLoad(Type)
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
  fullName: System.ComponentModel.Design.DesignSurface.ComponentContainer
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateComponent(Type)
  nameWithType: DesignSurface.CreateComponent(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateComponent(Type)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner(System.ComponentModel.IComponent,System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateDesigner(IComponent,Boolean)
  nameWithType: DesignSurface.CreateDesigner(IComponent,Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.CreateDesigner(IComponent,Boolean)
- uid: System.ComponentModel.Design.IDesigner
  parent: System.ComponentModel.Design
  isExternal: false
  name: IDesigner
  nameWithType: IDesigner
  fullName: System.ComponentModel.Design.IDesigner
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: DesignSurface.CreateInstance(Type)
  fullName: System.ComponentModel.Design.DesignSurface.CreateInstance(Type)
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer(IComponent)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent)
- uid: System.ComponentModel.INestedContainer
  parent: System.ComponentModel
  isExternal: false
  name: INestedContainer
  nameWithType: INestedContainer
  fullName: System.ComponentModel.INestedContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer(IComponent,String)
  nameWithType: DesignSurface.CreateNestedContainer(IComponent,String)
  fullName: System.ComponentModel.Design.DesignSurface.CreateNestedContainer(IComponent,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Design.DesignSurface.Dispose
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose()
  nameWithType: DesignSurface.Dispose()
  fullName: System.ComponentModel.Design.DesignSurface.Dispose()
- uid: System.ComponentModel.Design.DesignSurface.Dispose(System.Boolean)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DesignSurface.Dispose(Boolean)
  fullName: System.ComponentModel.Design.DesignSurface.Dispose(Boolean)
- uid: System.ComponentModel.Design.DesignSurface.Disposed
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Disposed
  nameWithType: DesignSurface.Disposed
  fullName: System.ComponentModel.Design.DesignSurface.Disposed
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
  fullName: System.ComponentModel.Design.DesignSurface.DtelLoading
- uid: System.ComponentModel.Design.DesignSurface.Flush
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flush()
  nameWithType: DesignSurface.Flush()
  fullName: System.ComponentModel.Design.DesignSurface.Flush()
- uid: System.ComponentModel.Design.DesignSurface.Flushed
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flushed
  nameWithType: DesignSurface.Flushed
  fullName: System.ComponentModel.Design.DesignSurface.Flushed
- uid: System.ComponentModel.Design.DesignSurface.GetService(System.Type)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: GetService(Type)
  nameWithType: DesignSurface.GetService(Type)
  fullName: System.ComponentModel.Design.DesignSurface.GetService(Type)
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
  fullName: System.ComponentModel.Design.DesignSurface.IsLoaded
- uid: System.ComponentModel.Design.DesignSurface.Loaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Loaded
  nameWithType: DesignSurface.Loaded
  fullName: System.ComponentModel.Design.DesignSurface.Loaded
- uid: System.ComponentModel.Design.LoadedEventHandler
  parent: System.ComponentModel.Design
  isExternal: false
  name: LoadedEventHandler
  nameWithType: LoadedEventHandler
  fullName: System.ComponentModel.Design.LoadedEventHandler
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
  fullName: System.ComponentModel.Design.DesignSurface.LoadErrors
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.Design.DesignSurface.Loading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Loading
  nameWithType: DesignSurface.Loading
  fullName: System.ComponentModel.Design.DesignSurface.Loading
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded(System.ComponentModel.Design.LoadedEventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoaded(LoadedEventArgs)
  nameWithType: DesignSurface.OnLoaded(LoadedEventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoaded(LoadedEventArgs)
- uid: System.ComponentModel.Design.LoadedEventArgs
  parent: System.ComponentModel.Design
  isExternal: false
  name: LoadedEventArgs
  nameWithType: LoadedEventArgs
  fullName: System.ComponentModel.Design.LoadedEventArgs
- uid: System.ComponentModel.Design.DesignSurface.OnLoading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoading(EventArgs)
  nameWithType: DesignSurface.OnLoading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnLoading(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloaded(EventArgs)
  nameWithType: DesignSurface.OnUnloaded(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloaded(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloading(EventArgs)
  nameWithType: DesignSurface.OnUnloading(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnUnloading(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate(System.EventArgs)
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnViewActivate(EventArgs)
  nameWithType: DesignSurface.OnViewActivate(EventArgs)
  fullName: System.ComponentModel.Design.DesignSurface.OnViewActivate(EventArgs)
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
  fullName: System.ComponentModel.Design.DesignSurface.ServiceContainer
- uid: System.ComponentModel.Design.ServiceContainer
  parent: System.ComponentModel.Design
  isExternal: false
  name: ServiceContainer
  nameWithType: ServiceContainer
  fullName: System.ComponentModel.Design.ServiceContainer
- uid: System.ComponentModel.Design.DesignSurface.Unloaded
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Unloaded
  nameWithType: DesignSurface.Unloaded
  fullName: System.ComponentModel.Design.DesignSurface.Unloaded
- uid: System.ComponentModel.Design.DesignSurface.Unloading
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Unloading
  nameWithType: DesignSurface.Unloading
  fullName: System.ComponentModel.Design.DesignSurface.Unloading
- uid: System.ComponentModel.Design.DesignSurface.View
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: View
  nameWithType: DesignSurface.View
  fullName: System.ComponentModel.Design.DesignSurface.View
- uid: System.ComponentModel.Design.DesignSurface.ViewActivated
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ViewActivated
  nameWithType: DesignSurface.ViewActivated
  fullName: System.ComponentModel.Design.DesignSurface.ViewActivated
- uid: System.ComponentModel.Design.DesignSurface.#ctor*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DesignSurface
  nameWithType: DesignSurface.DesignSurface
- uid: System.ComponentModel.Design.DesignSurface.BeginLoad*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: BeginLoad
  nameWithType: DesignSurface.BeginLoad
- uid: System.ComponentModel.Design.DesignSurface.ComponentContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ComponentContainer
  nameWithType: DesignSurface.ComponentContainer
- uid: System.ComponentModel.Design.DesignSurface.CreateComponent*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateComponent
  nameWithType: DesignSurface.CreateComponent
- uid: System.ComponentModel.Design.DesignSurface.CreateDesigner*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateDesigner
  nameWithType: DesignSurface.CreateDesigner
- uid: System.ComponentModel.Design.DesignSurface.CreateInstance*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateInstance
  nameWithType: DesignSurface.CreateInstance
- uid: System.ComponentModel.Design.DesignSurface.CreateNestedContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: CreateNestedContainer
  nameWithType: DesignSurface.CreateNestedContainer
- uid: System.ComponentModel.Design.DesignSurface.Dispose*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Dispose
  nameWithType: DesignSurface.Dispose
- uid: System.ComponentModel.Design.DesignSurface.DtelLoading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: DtelLoading
  nameWithType: DesignSurface.DtelLoading
- uid: System.ComponentModel.Design.DesignSurface.Flush*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: Flush
  nameWithType: DesignSurface.Flush
- uid: System.ComponentModel.Design.DesignSurface.GetService*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: GetService
  nameWithType: DesignSurface.GetService
- uid: System.ComponentModel.Design.DesignSurface.IsLoaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: IsLoaded
  nameWithType: DesignSurface.IsLoaded
- uid: System.ComponentModel.Design.DesignSurface.LoadErrors*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: LoadErrors
  nameWithType: DesignSurface.LoadErrors
- uid: System.ComponentModel.Design.DesignSurface.OnLoaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoaded
  nameWithType: DesignSurface.OnLoaded
- uid: System.ComponentModel.Design.DesignSurface.OnLoading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnLoading
  nameWithType: DesignSurface.OnLoading
- uid: System.ComponentModel.Design.DesignSurface.OnUnloaded*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloaded
  nameWithType: DesignSurface.OnUnloaded
- uid: System.ComponentModel.Design.DesignSurface.OnUnloading*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnUnloading
  nameWithType: DesignSurface.OnUnloading
- uid: System.ComponentModel.Design.DesignSurface.OnViewActivate*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: OnViewActivate
  nameWithType: DesignSurface.OnViewActivate
- uid: System.ComponentModel.Design.DesignSurface.ServiceContainer*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: ServiceContainer
  nameWithType: DesignSurface.ServiceContainer
- uid: System.ComponentModel.Design.DesignSurface.View*
  parent: System.ComponentModel.Design.DesignSurface
  isExternal: false
  name: View
  nameWithType: DesignSurface.View
