### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  id: SpeechEventInfo
  children:
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2
  - System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType
  langs:
  - csharp
  name: SpeechEventInfo
  nameWithType: SpeechEventInfo
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  type: Struct
  summary: "使用指定的事件，类型和其自变量 （如果有） 要由自定义的合成语音引擎生成的文本到语音呈现的一部分。"
  remarks: "自定义语音合成引擎通过提供到相应 SpeechEventInfo 实例请求生成的事件在语音平台<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A>的成员<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>引擎站点对象传递给的实现<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>， <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>，和<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>。</xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> </xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> </xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> </xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.AddEvents%2A>"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, SpeechEventInfo, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a SpeechEventInfo instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.ComponentModel.ImmutableObject(true)]

      public struct SpeechEventInfo : IEquatable<System.Speech.Synthesis.TtsEngine.SpeechEventInfo>
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Speech.Synthesis.TtsEngine.SpeechEventInfo>
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)
  id: '#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)'
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: SpeechEventInfo(Int16,Int16,Int32,IntPtr)
  nameWithType: SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "Constucts 适当<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>。"
  remarks: "允许的值用于`parameterType`， `param1`，和`param2`和其含义由所请求的事件的类型所指定的成员的<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>用于`eventId`。</xref:System.Speech.Synthesis.TtsEngine.TtsEventId>       有关详细信息的相应值`parameterType`， `param1`，和`param2`，请参阅<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>通过<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A><xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>.</xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite>合成引擎站点实现的属性</xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A>，可从中获取的事件可以由语音平台基础结构的类型</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>的文档"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public SpeechEventInfo (short eventId, short parameterType, int param1, IntPtr param2);
    parameters:
    - id: eventId
      type: System.Int16
      description: "实例<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEventId&quot;> </xref> ，该值指示语音平台事件的排序<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象是处理。"
    - id: parameterType
      type: System.Int16
      description: "实例<xref href=&quot;System.Speech.Synthesis.TtsEngine.EventParameterType&quot;> </xref> ，该值指示如何<xref uid=&quot;langword_csharp_System.IntPtr&quot; name=&quot;System.IntPtr&quot; href=&quot;&quot;></xref>引用的`param2`解释，并且，通过默示、 使用`param1`。"
    - id: param1
      type: System.Int32
      description: "一个整数值事件请求的实例时要传递给语音平台<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>构造生成。       此整数的确切含义隐式由值`parameterType`。"
    - id: param2
      type: System.IntPtr
      description: "A <xref uid=&quot;langword_csharp_System.IntPtr&quot; name=&quot;System.IntPtr&quot; href=&quot;&quot;> </xref>引用对象的实例。 事件请求的实例时要传递给语音平台<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>构造生成。       通过值显式定义必须引用的类型`parameterType`。 值<xref uid=&quot;langword_csharp_System.IntPtr.Zero&quot; name=&quot;System.IntPtr.Zero&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SpeechEventInfo.Equals(Object)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(Object)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "确定指定的对象是否是实例`SpeechEventInfo`和等于当前实例的`SpeechEventInfo`。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要评估的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>等同于当前<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  id: Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: Equals(SpeechEventInfo)
  nameWithType: SpeechEventInfo.Equals(SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(SpeechEventInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "确定指定`SpeechEventInfo`对象是否等于当前实例的`SpeechEventInfo`。"
  syntax:
    content: public bool Equals (System.Speech.Synthesis.TtsEngine.SpeechEventInfo other);
    parameters:
    - id: other
      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
      description: "<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>要评估对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> other </code>等同于当前<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId
  id: EventId
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: EventId
  nameWithType: SpeechEventInfo.EventId
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "获取和设置的语音平台事件其中的一个实例<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>使用到请求。"
  remarks: ''
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including EventId are used to log the event generated through the `LogSpeechEvent` method.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n         LogSpeechEvent(spEvent.EventId,   \n                        spEvent.ParameterType,   \n                        spEvent.Param1,  \n                        spEvent.Param2);  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public short EventId { get; }
    return:
      type: System.Int16
      description: "返回的成员<xref href=&quot;System.Speech.Synthesis.TtsEngine.TtsEventId&quot;></xref>作为<xref uid=&quot;langword_csharp_short&quot; name=&quot;short&quot; href=&quot;&quot;> </xref>，，该值指示事件类型<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象是生成。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode
  id: GetHashCode
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SpeechEventInfo.GetHashCode()
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "提供的哈希代码`SpeechEventInfo`对象。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "哈希代码<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  id: op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: op_Equality(SpeechEventInfo,SpeechEventInfo)
  nameWithType: SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "确定两个实例是否的`SpeechEventInfo`是否相等。"
  syntax:
    content: public static bool op_Equality (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);
    parameters:
    - id: event1
      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
      description: "<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>要比较的对象`event2`。"
    - id: event2
      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
      description: "<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>要比较的对象`event1`。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>event1</code> is the same as <code>event2</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  id: op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: op_Inequality(SpeechEventInfo,SpeechEventInfo)
  nameWithType: SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "确定两个实例是否的`SpeechEventInfo`是否不相等。"
  syntax:
    content: public static bool op_Inequality (System.Speech.Synthesis.TtsEngine.SpeechEventInfo event1, System.Speech.Synthesis.TtsEngine.SpeechEventInfo event2);
    parameters:
    - id: event1
      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
      description: "<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>要比较的对象`event2`。"
    - id: event2
      type: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
      description: "<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;> </xref>要比较的对象`event1`。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>event1</code> is different from <code>event2</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1
  id: Param1
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: Param1
  nameWithType: SpeechEventInfo.Param1
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "获取并设置<xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;></xref>值 (<code> param1 </code>构造函数中) 要传递给要生成一个事件的语音平台的当前实例<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>使用到请求。"
  remarks: "要求和 Param1 属性的含义<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一确定的值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>和<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>属性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>       详细了解如何使用 Param1，请参阅<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>的文档"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including Param1 are used to log the event generated through the `LogSpeechEvent` method.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n         LogSpeechEvent(spEvent.EventId,   \n                        spEvent.ParameterType,   \n                        spEvent.Param1,  \n                        spEvent.Param2);  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public int Param1 { get; }
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_integer&quot; name=&quot;integer&quot; href=&quot;&quot;></xref>事件指定的当前实例时要传递给语音平台<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>生成。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2
  id: Param2
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: Param2
  nameWithType: SpeechEventInfo.Param2
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "获取并设置<xref uid=&quot;langword_csharp_System.IntPtr&quot; name=&quot;System.IntPtr&quot; href=&quot;&quot;></xref>实例 (<code> param2 </code>构造函数中) 引用该对象将传递给要生成一个事件的语音平台的当前实例<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>使用到请求。"
  remarks: "上的要求`System.IntPtr`的 Param2 属性引用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一确定的值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>和<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A>属性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType%2A> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>       详细了解如何使用 Param2，请参阅<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>的文档"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including Param2 are used to log the event generated through the `LogSpeechEvent` method.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n         LogSpeechEvent(spEvent.EventId,   \n                        spEvent.ParameterType,   \n                        spEvent.Param1,  \n                        spEvent.Param2);  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public IntPtr Param2 { get; }
    return:
      type: System.IntPtr
      description: "返回<xref uid=&quot;langword_csharp_System.IntPtr&quot; name=&quot;System.IntPtr&quot; href=&quot;&quot;></xref>引用该对象的当前实例指定事件时要传递给语音平台<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>生成。"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType
  id: ParameterType
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  langs:
  - csharp
  name: ParameterType
  nameWithType: SpeechEventInfo.ParameterType
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis.TtsEngine
  summary: "返回指向对象的数据类型<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;></xref>返回<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*>参数对当前<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*>"
  remarks: "上的要求`System.IntPtr`引用的<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>属性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>唯一确定的值<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>和 ParameterType 属性<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>实例。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> </xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>       有关详细信息如何使用<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>，请参阅<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId%2A>文档</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2%2A>"
  example:
  - "The example below is part of a custom speech synthesis implementation inheriting from <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, and using the use of <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, <xref:System.Speech.Synthesis.TtsEngine.FragmentState>, and <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  \n  \n The implementation of <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  \n  \n1.  Receives an array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances and creates a new array of <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instances to be passed to the `Speak` method on an underlying synthesis engine.  \n  \n2.  If the <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> enumeration value by found from the <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.FragmentState> returned by the <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> property of each <xref:System.Speech.Synthesis.TtsEngine.TextFragment> instance is <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction>, the implementation  \n  \n    -   Translates Americanism to Britishisms in the text to be spoken.  \n  \n    -   If the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> property on the <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> interfaces provided to the implementation support the <xref:System.Speech.Synthesis.TtsEngine.TtsEventId> event type, a <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> instance is used to create an event to drive a synthesizer progress meter is created.  \n  \n         The parameters on <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, including ParameterType are used to log the event generated through the `LogSpeechEvent` method.  \n  \n3.  A speech rendering engine is then called with the modified <xref:System.Speech.Synthesis.TtsEngine.TextFragment> array.  \n  \n```  \nprivate const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  \nprivate readonly char[] spaces = new char[] { ' ', '\\t', '\\r', '\\n' };  \ninternal struct UsVsUk  \n{  \n  internal string UK;  \n  internal string US;  \n}  \n  \noverride public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  \n{  \n  TextFragment [] newFrags=new TextFragment[frags.Length];  \n  \n  for (int i=0;i<frags.Length;i++){  \n    newFrags[i].State=frags[i].State;  \n    //truncate  \n    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  \n                               frags[i].TextLength);  \n    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  \n    newFrags[i].TextOffset = 0;  \n    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  \n      //Us to UK conversion  \n      foreach (UsVsUk term in TransList) {  \n      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  \n      }  \n      //Generate progress meter events if supported  \n      if ((site.EventInterest & WordBoundaryFlag) != 0) {  \n      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  \n  \n      foreach (string s in subs) {  \n        int offset = newFrags[i].TextOffset;  \n        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   \n                (Int16)EventParameterType.Undefined,   \n                 s.Length, new IntPtr(offset));  \n         LogSpeechEvent(spEvent.EventId,   \n                        spEvent.ParameterType,   \n                        spEvent.Param1,  \n                        spEvent.Param2);  \n        offset += s.Length;  \n        if (s.Trim().Length > 0) {  \n          SpeechEventInfo[] events = new SpeechEventInfo[1];  \n          events[0] = spEvent;  \n          site.AddEvents(events, 1);  \n        }  \n      }  \n      }  \n    }  \n  }  \n  \n  _baseSynthesize.Speak(newFrags, wfx, site);  \n  \n}  \n```"
  syntax:
    content: public short ParameterType { get; }
    return:
      type: System.Int16
      description: "A <xref uid=&quot;langword_csharp_short&quot; name=&quot;short&quot; href=&quot;&quot;> </xref>指向成员的相对应的值<xref href=&quot;System.Speech.Synthesis.TtsEngine.EventParameterType&quot;></xref>枚举并指示该对象的数据类型的指向<xref uid=&quot;langword_csharp_IntPtr&quot; name=&quot;IntPtr&quot; href=&quot;&quot;></xref>返回<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*>参数，用作当前的构造函数的第二个自变量<xref href=&quot;System.Speech.Synthesis.TtsEngine.SpeechEventInfo&quot;></xref>对象。</xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*>"
  overload: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor(System.Int16,System.Int16,System.Int32,System.IntPtr)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: SpeechEventInfo(Int16,Int16,Int32,IntPtr)
  nameWithType: SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.SpeechEventInfo(Int16,Int16,Int32,IntPtr)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Object)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Equals(Object)
  nameWithType: SpeechEventInfo.Equals(Object)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Equals(SpeechEventInfo)
  nameWithType: SpeechEventInfo.Equals(SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals(SpeechEventInfo)
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  parent: System.Speech.Synthesis.TtsEngine
  isExternal: false
  name: SpeechEventInfo
  nameWithType: SpeechEventInfo
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: EventId
  nameWithType: SpeechEventInfo.EventId
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: SpeechEventInfo.GetHashCode()
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode()
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: op_Equality(SpeechEventInfo,SpeechEventInfo)
  nameWithType: SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality(SpeechEventInfo,SpeechEventInfo)
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(System.Speech.Synthesis.TtsEngine.SpeechEventInfo,System.Speech.Synthesis.TtsEngine.SpeechEventInfo)
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: op_Inequality(SpeechEventInfo,SpeechEventInfo)
  nameWithType: SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality(SpeechEventInfo,SpeechEventInfo)
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Param1
  nameWithType: SpeechEventInfo.Param1
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Param2
  nameWithType: SpeechEventInfo.Param2
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: ParameterType
  nameWithType: SpeechEventInfo.ParameterType
  fullName: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.#ctor*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: SpeechEventInfo
  nameWithType: SpeechEventInfo.SpeechEventInfo
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Equals*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Equals
  nameWithType: SpeechEventInfo.Equals
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.EventId*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: EventId
  nameWithType: SpeechEventInfo.EventId
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.GetHashCode*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: GetHashCode
  nameWithType: SpeechEventInfo.GetHashCode
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Equality*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: op_Equality
  nameWithType: SpeechEventInfo.op_Equality
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.op_Inequality*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: op_Inequality
  nameWithType: SpeechEventInfo.op_Inequality
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param1*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Param1
  nameWithType: SpeechEventInfo.Param1
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.Param2*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: Param2
  nameWithType: SpeechEventInfo.Param2
- uid: System.Speech.Synthesis.TtsEngine.SpeechEventInfo.ParameterType*
  parent: System.Speech.Synthesis.TtsEngine.SpeechEventInfo
  isExternal: false
  name: ParameterType
  nameWithType: SpeechEventInfo.ParameterType
