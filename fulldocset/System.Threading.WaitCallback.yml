### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitCallback
  id: WaitCallback
  langs:
  - csharp
  name: WaitCallback
  nameWithType: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  summary: "表示要由线程池线程执行的回调方法。"
  remarks: "WaitCallback 表示你想要执行的回调方法<xref:System.Threading.ThreadPool>线程。</xref:System.Threading.ThreadPool> 通过将你的回调方法传递给 WaitCallback 构造函数创建委托。 你的方法必须具有此处所示的签名。       任务排入队列以便执行通过将 WaitCallback 委托传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A?displayProperty=fullName> 在线程池线程变得可用时，将执行你的回调方法。      1> [!NOTE]&1;> Visual Basic 用户可以省略 WaitCallback 构造函数中，而只需使用`AddressOf`运算符时将回调方法传递给<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>.</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> Visual Basic 会自动调用正确的委托构造函数。       如果你想要将信息传递给你的回调方法，创建包含所需的信息的对象，并将其传递到<xref:System.Threading.ThreadPool.QueueUserWorkItem%2A>时你你任务排队以便执行。</xref:System.Threading.ThreadPool.QueueUserWorkItem%2A> 执行回调方法时，每次`state`参数包含此对象。       有关使用回调同步线程池线程的详细信息，请参阅[托管线程池](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  \n  \n The second example demonstrates how you can queue a task and pass information to it.  \n  \n **Example 1**  \n  \n This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%29?displayProperty=fullName> method overload to queue a task, which is represented by a WaitCallback that wraps the `ThreadProc` method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the `ThreadProc` method is limited to the object the method belongs to.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/cpp/t-system.threading.waitc_1.cpp)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_1.vb)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem0#1](~/add/codesnippet/csharp/t-system.threading.waitc_1.cs)]  \n  \n **Example 2**  \n  \n This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  \n  \n [!code-cpp[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/cpp/t-system.threading.waitc_2.cpp)]\n [!code-cs[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/csharp/t-system.threading.waitc_2.cs)]\n [!code-vb[System.Threading.ThreadPool QueueUserWorkItem1#1](~/add/codesnippet/visualbasic/t-system.threading.waitc_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitCallback(object state);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
