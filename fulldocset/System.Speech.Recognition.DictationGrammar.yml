### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.DictationGrammar
  id: DictationGrammar
  children:
  - System.Speech.Recognition.DictationGrammar.#ctor
  - System.Speech.Recognition.DictationGrammar.#ctor(System.String)
  - System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)
  langs:
  - csharp
  name: DictationGrammar
  nameWithType: DictationGrammar
  fullName: System.Speech.Recognition.DictationGrammar
  type: Class
  summary: "表示用于自定义文本听写语音识别语法。"
  remarks: "此类提供了一个可以处理成文本的口头的用户输入的预定义的语言模型的应用程序。 此类支持默认构造函数和自定义 DictationGrammar 对象。 有关选择听写语法的信息，请参阅<xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29>构造函数。</xref:System.Speech.Recognition.DictationGrammar.%23ctor%28System.String%29>       默认情况下，DictationGrammar 语言模型是可用的上下文。 它不会进行使用的特定单词或单词顺序来标识和解释音频输入。 若要将上下文添加到听写语法中，使用<xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A>方法。</xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A>      1> [!NOTE]&1;> DictationGrammar 对象不支持<xref:System.Speech.Recognition.Grammar.Priority%2A>属性。</xref:System.Speech.Recognition.Grammar.Priority%2A> DictationGrammar 引发<xref:System.NotSupportedException>如果<xref:System.Speech.Recognition.Grammar.Priority%2A>设置。</xref:System.Speech.Recognition.Grammar.Priority%2A> </xref:System.NotSupportedException>"
  example:
  - "The following example creates three dictation grammars, adds them to a new <xref:System.Speech.Recognition.SpeechRecognitionEngine> object, and returns the new object. The first grammar is the default dictation grammar. The second grammar is the spelling dictation grammar. The third grammar is the default dictation grammar that includes a context phrase. The <xref:System.Speech.Recognition.DictationGrammar.SetDictationContext%2A> method is used to associate the context phrase with the dictation grammar after it is loaded to the <xref:System.Speech.Recognition.SpeechRecognitionEngine> object.  \n  \n```c#  \n  \nprivate SpeechRecognitionEngine LoadDictationGrammars()  \n{  \n  \n  // Create a default dictation grammar.  \n  DictationGrammar defaultDictationGrammar = new DictationGrammar();  \n  defaultDictationGrammar.Name = \"default dictation\";  \n  defaultDictationGrammar.Enabled = true;  \n  \n  // Create the spelling dictation grammar.  \n  DictationGrammar spellingDictationGrammar =  \n    new DictationGrammar(\"grammar:dictation#spelling\");  \n  spellingDictationGrammar.Name = \"spelling dictation\";  \n  spellingDictationGrammar.Enabled = true;  \n  \n  // Create the question dictation grammar.  \n  DictationGrammar customDictationGrammar =  \n    new DictationGrammar(\"grammar:dictation\");  \n  customDictationGrammar.Name = \"question dictation\";  \n  customDictationGrammar.Enabled = true;  \n  \n  // Create a SpeechRecognitionEngine object and add the grammars to it.  \n  SpeechRecognitionEngine recoEngine = new SpeechRecognitionEngine();  \n  recoEngine.LoadGrammar(defaultDictationGrammar);  \n  recoEngine.LoadGrammar(spellingDictationGrammar);  \n  recoEngine.LoadGrammar(customDictationGrammar);  \n  \n  // Add a context to customDictationGrammar.  \n  customDictationGrammar.SetDictationContext(\"How do you\", null);  \n  \n  return recoEngine;  \n}  \n  \n```"
  syntax:
    content: 'public class DictationGrammar : System.Speech.Recognition.Grammar'
  inheritance:
  - System.Object
  - System.Speech.Recognition.Grammar
  implements: []
  inheritedMembers:
  - System.Speech.Recognition.Grammar.Enabled
  - System.Speech.Recognition.Grammar.IsStg
  - System.Speech.Recognition.Grammar.Loaded
  - System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])
  - System.Speech.Recognition.Grammar.Name
  - System.Speech.Recognition.Grammar.Priority
  - System.Speech.Recognition.Grammar.ResourceName
  - System.Speech.Recognition.Grammar.RuleName
  - System.Speech.Recognition.Grammar.SpeechRecognized
  - System.Speech.Recognition.Grammar.StgInit(System.Object[])
  - System.Speech.Recognition.Grammar.Weight
  platform:
  - net462
- uid: System.Speech.Recognition.DictationGrammar.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.DictationGrammar
  langs:
  - csharp
  name: DictationGrammar()
  nameWithType: DictationGrammar.DictationGrammar()
  fullName: System.Speech.Recognition.DictationGrammar.DictationGrammar()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.DictationGrammar&quot;></xref>由 Windows 桌面语音技术提供的默认听写语法的类。"
  remarks: "默认听写语法模拟标准听写实践，其中包括标点。 它不支持某个单词的拼写。"
  syntax:
    content: public DictationGrammar ();
    parameters: []
  overload: System.Speech.Recognition.DictationGrammar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.DictationGrammar.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.DictationGrammar
  langs:
  - csharp
  name: DictationGrammar(String)
  nameWithType: DictationGrammar.DictationGrammar(String)
  fullName: System.Speech.Recognition.DictationGrammar.DictationGrammar(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.DictationGrammar&quot;></xref>类特定听写语法。"
  remarks: "语音平台使用专用的 URI 语法来定义自定义听写语法。 值`grammar:dictation`指示默认听写语法。 值`grammar:dictation#spelling`指示拼写听写语法。"
  syntax:
    content: public DictationGrammar (string topic);
    parameters:
    - id: topic
      type: System.String
      description: "XML 符合通用资源标识符 (URI)，或者指定听写语法，`grammar:dictation`或`grammar:dictation#spelling`。"
  overload: System.Speech.Recognition.DictationGrammar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)
  id: SetDictationContext(System.String,System.String)
  parent: System.Speech.Recognition.DictationGrammar
  langs:
  - csharp
  name: SetDictationContext(String,String)
  nameWithType: DictationGrammar.SetDictationContext(String,String)
  fullName: System.Speech.Recognition.DictationGrammar.SetDictationContext(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将上下文添加到已加载，由听写语法<xref href=&quot;System.Speech.Recognition.SpeechRecognizer&quot;></xref>或<xref href=&quot;System.Speech.Recognition.SpeechRecognitionEngine&quot;></xref>对象。"
  remarks: "默认情况下，使用特定的词或 word 顺序来标识和解释音频的输入不作听写语法。 识别引擎上下文添加到听写语法中，使用`precedingText`和`subsequentText`以确定何时解释为听写的语音。      1> [!NOTE]&1;> 必须由加载听写语法<xref:System.Speech.Recognition.SpeechRecognizer>或<xref:System.Speech.Recognition.SpeechRecognitionEngine>对象，然后你可以使用 SetDictationContext 若要添加的上下文。</xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognizer>       下表描述了识别引擎如何使用两个参数来确定何时使用听写语法。      |`precedingText`|`subsequentText`|说明 |  |---------------------|----------------------|-----------------|  |not `null`|not `null`|识别引擎使用的词汇来封闭可能的候选短语。 |  |`null`|not `null`|识别引擎使用`subsequentText`完成听写。 |  |not `null`|`null`|识别引擎使用`precedingText`启动听写。 |  |`null`|`null`|识别引擎使用听写语法时不使用上下文。 |"
  syntax:
    content: public void SetDictationContext (string precedingText, string subsequentText);
    parameters:
    - id: precedingText
      type: System.String
      description: "指示听写上下文的开头的文本。"
    - id: subsequentText
      type: System.String
      description: "指示听写上下文的末尾的文本。"
  overload: System.Speech.Recognition.DictationGrammar.SetDictationContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Speech.Recognition.Grammar
  isExternal: false
  name: System.Speech.Recognition.Grammar
- uid: System.Speech.Recognition.DictationGrammar.#ctor
  parent: System.Speech.Recognition.DictationGrammar
  isExternal: false
  name: DictationGrammar()
  nameWithType: DictationGrammar.DictationGrammar()
  fullName: System.Speech.Recognition.DictationGrammar.DictationGrammar()
- uid: System.Speech.Recognition.DictationGrammar.#ctor(System.String)
  parent: System.Speech.Recognition.DictationGrammar
  isExternal: false
  name: DictationGrammar(String)
  nameWithType: DictationGrammar.DictationGrammar(String)
  fullName: System.Speech.Recognition.DictationGrammar.DictationGrammar(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.DictationGrammar.SetDictationContext(System.String,System.String)
  parent: System.Speech.Recognition.DictationGrammar
  isExternal: false
  name: SetDictationContext(String,String)
  nameWithType: DictationGrammar.SetDictationContext(String,String)
  fullName: System.Speech.Recognition.DictationGrammar.SetDictationContext(String,String)
- uid: System.Speech.Recognition.DictationGrammar.#ctor*
  parent: System.Speech.Recognition.DictationGrammar
  isExternal: false
  name: DictationGrammar
  nameWithType: DictationGrammar.DictationGrammar
- uid: System.Speech.Recognition.DictationGrammar.SetDictationContext*
  parent: System.Speech.Recognition.DictationGrammar
  isExternal: false
  name: SetDictationContext
  nameWithType: DictationGrammar.SetDictationContext
