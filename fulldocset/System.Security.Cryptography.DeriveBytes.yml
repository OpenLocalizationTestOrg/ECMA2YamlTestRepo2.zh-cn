### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DeriveBytes
  id: DeriveBytes
  children:
  - System.Security.Cryptography.DeriveBytes.#ctor
  - System.Security.Cryptography.DeriveBytes.Dispose
  - System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.DeriveBytes.Reset
  langs:
  - csharp
  name: DeriveBytes
  nameWithType: DeriveBytes
  fullName: System.Security.Cryptography.DeriveBytes
  type: Class
  summary: "表示从中派生的指定长度的字节序列的所有类都继承的抽象基类。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DeriveBytes : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.DeriveBytes.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  name: DeriveBytes()
  nameWithType: DeriveBytes.DeriveBytes()
  fullName: System.Security.Cryptography.DeriveBytes.DeriveBytes()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.DeriveBytes&quot;></xref>类。"
  syntax:
    content: protected DeriveBytes ();
    parameters: []
  overload: System.Security.Cryptography.DeriveBytes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DeriveBytes.Dispose
  id: Dispose
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  name: Dispose()
  nameWithType: DeriveBytes.Dispose()
  fullName: System.Security.Cryptography.DeriveBytes.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，释放所有资源的当前实例所使用的<xref href=&quot;System.Security.Cryptography.DeriveBytes&quot;></xref>类。"
  remarks: "调用`Dispose`在完成使用<xref:System.Security.Cryptography.DeriveBytes>.</xref:System.Security.Cryptography.DeriveBytes>时 `Dispose`方法使<xref:System.Security.Cryptography.DeriveBytes>中不可用状态。</xref:System.Security.Cryptography.DeriveBytes> 在调用`Dispose`，必须释放对所有引用<xref:System.Security.Cryptography.DeriveBytes>以便垃圾回收器才能回收的内存，<xref:System.Security.Cryptography.DeriveBytes>占用。</xref:System.Security.Cryptography.DeriveBytes> </xref:System.Security.Cryptography.DeriveBytes>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用`Dispose`在发布到<xref:System.Security.Cryptography.DeriveBytes>。</xref:System.Security.Cryptography.DeriveBytes>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Security.Cryptography.DeriveBytes>对象的`Finalize`方法。</xref:System.Security.Cryptography.DeriveBytes>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.DeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.DeriveBytes.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写时释放使用的非托管的资源<xref href=&quot;System.Security.Cryptography.DeriveBytes&quot;></xref>类，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和`Finalize`方法。 `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 `Finalize`调用`Dispose`与`disposing`设置为`false`。       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Security.Cryptography.DeriveBytes>引用。</xref:System.Security.Cryptography.DeriveBytes> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Security.Cryptography.DeriveBytes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  name: GetBytes(Int32)
  nameWithType: DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.DeriveBytes.GetBytes(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，返回伪随机密钥字节。"
  syntax:
    content: public abstract byte[] GetBytes (int cb);
    parameters:
    - id: cb
      type: System.Int32
      description: "若要生成的伪随机密钥字节数。"
    return:
      type: System.Byte[]
      description: "伪随机密钥字节填充字节数组。"
  overload: System.Security.Cryptography.DeriveBytes.GetBytes*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  name: Reset()
  nameWithType: DeriveBytes.Reset()
  fullName: System.Security.Cryptography.DeriveBytes.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，重置操作的状态。"
  syntax:
    content: public abstract void Reset ();
    parameters: []
  overload: System.Security.Cryptography.DeriveBytes.Reset*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.DeriveBytes.#ctor
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: DeriveBytes()
  nameWithType: DeriveBytes.DeriveBytes()
  fullName: System.Security.Cryptography.DeriveBytes.DeriveBytes()
- uid: System.Security.Cryptography.DeriveBytes.Dispose
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Dispose()
  nameWithType: DeriveBytes.Dispose()
  fullName: System.Security.Cryptography.DeriveBytes.Dispose()
- uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DeriveBytes.Dispose(Boolean)
  fullName: System.Security.Cryptography.DeriveBytes.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: GetBytes(Int32)
  nameWithType: DeriveBytes.GetBytes(Int32)
  fullName: System.Security.Cryptography.DeriveBytes.GetBytes(Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.DeriveBytes.Reset
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Reset()
  nameWithType: DeriveBytes.Reset()
  fullName: System.Security.Cryptography.DeriveBytes.Reset()
- uid: System.Security.Cryptography.DeriveBytes.#ctor*
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: DeriveBytes
  nameWithType: DeriveBytes.DeriveBytes
- uid: System.Security.Cryptography.DeriveBytes.Dispose*
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Dispose
  nameWithType: DeriveBytes.Dispose
- uid: System.Security.Cryptography.DeriveBytes.GetBytes*
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: GetBytes
  nameWithType: DeriveBytes.GetBytes
- uid: System.Security.Cryptography.DeriveBytes.Reset*
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Reset
  nameWithType: DeriveBytes.Reset
