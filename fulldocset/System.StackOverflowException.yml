### YamlMime:ManagedReference
items:
- uid: System.StackOverflowException
  id: StackOverflowException
  children:
  - System.StackOverflowException.#ctor
  - System.StackOverflowException.#ctor(System.String)
  - System.StackOverflowException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  name: StackOverflowException
  nameWithType: StackOverflowException
  fullName: System.StackOverflowException
  type: Class
  summary: "因为它包含嵌套的方法调用过多而导致执行堆栈溢出时引发的异常。 此类不能被继承。"
  remarks: "StackOverflowException 执行堆栈溢出发生错误时引发，通常发生非常深度或无限递归。       StackOverflowException 使用 HRESULT COR_E_STACKOVERFLOW，其值 0x800703E9。 <xref:System.Reflection.Emit.OpCodes.Localloc>中间语言 (IL) 指令将引发 StackOverflowException。</xref:System.Reflection.Emit.OpCodes.Localloc> StackOverflowException 对象的初始属性值的列表，请参阅<xref:System.StackOverflowException.%23ctor%2A>构造函数。</xref:System.StackOverflowException.%23ctor%2A>      ## .NET Framework 1.0 和 1.1 版中的版本注意事项，你无法捕获 StackOverflowException 对象 （例如，若要从此不受限制的递归）。 从.NET Framework 2.0 开始，你无法捕获具有的 StackOverflowException 对象`try` / `catch`块，并且相应的进程默认情况下将会终止。 因此，应编写代码来检测和防止堆栈溢出。 例如，如果你的应用程序依赖于递归，用于计数器或状态条件终止递归循环。 下面的示例使用计数器以确保递归数调用`Execute`方法不能超过最多由 MAX_RECURSIVE_CALLS 常量定义。       [!code-vb[System.StackOverflowException.Class#1](~/add/codesnippet/visualbasic/t-system.stackoverflowex_1.vb)][!code-cs[System.StackOverflowException.Class#1](~/add/codesnippet/csharp/t-system.stackoverflowex_1.cs) ]       >  [!NOTE]&1;> 应用<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>引发 StackOverflowException 的方法的特性没有任何影响。</xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>   仍然无法处理从用户代码的异常。       如果你的应用程序承载公共语言运行时 (CLR)，它可以指定 CLR 应卸载应用程序域，堆栈溢出异常时发生，并让相应的进程继续。 有关详细信息，请参阅[ICLRPolicyManager 接口](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StackOverflowException : SystemException
  inheritance:
  - System.Exception
  - System.SystemException
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor
  id: '#ctor'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException()
  nameWithType: StackOverflowException.StackOverflowException()
  fullName: System.StackOverflowException.StackOverflowException()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.StackOverflowException&quot;></xref>类，设置<xref:System.Exception.Message*>为系统提供的消息描述该错误，如&quot;请求的操作导致堆栈溢出。&quot;的新实例的属性</xref:System.Exception.Message*> 此消息将当前系统区域性考虑在内。"
  remarks: "下表显示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|`null`.|  |<xref:System.Exception.Message%2A>|本地化的错误消息字符串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException ();
    parameters: []
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException(String)
  nameWithType: StackOverflowException.StackOverflowException(String)
  fullName: System.StackOverflowException.StackOverflowException(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.StackOverflowException&quot;></xref>与指定的错误消息的类。"
  remarks: "下表显示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|空引用 (`Nothing`在 Visual Basic 中)。 |  |<xref:System.Exception.Message%2A>|错误消息字符串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException (string message);
    parameters:
    - id: message
      type: System.String
      description: "A<xref:System.String>描述该错误。</xref:System.String> 消息的内容但应为人所理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。"
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.StackOverflowException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.StackOverflowException
  langs:
  - csharp
  name: StackOverflowException(String,Exception)
  nameWithType: StackOverflowException.StackOverflowException(String,Exception)
  fullName: System.StackOverflowException.StackOverflowException(String,Exception)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.StackOverflowException&quot;></xref>使用指定的错误消息和对导致此异常的内部异常的引用的类。"
  remarks: "前一个异常的直接结果可以包含的引用中的前一个异常引发的异常，<xref:System.Exception.InnerException%2A>属性。</xref:System.Exception.InnerException%2A> <xref:System.Exception.InnerException%2A>属性返回相同的值传递到构造函数中，则为空引用 (`Nothing`在 Visual Basic 中) 如果<xref:System.Exception.InnerException%2A>属性不会提供给构造函数的内部异常值。</xref:System.Exception.InnerException%2A> </xref:System.Exception.InnerException%2A>       下表显示<xref:System.StackOverflowException>.</xref:System.StackOverflowException>实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Exception.InnerException%2A>|内部异常引用。 |  |<xref:System.Exception.Message%2A>|错误消息字符串。 |</xref:System.Exception.Message%2A> </xref:System.Exception.InnerException%2A>"
  syntax:
    content: public StackOverflowException (string message, Exception innerException);
    parameters:
    - id: message
      type: System.String
      description: "解释异常原因的错误消息。"
    - id: innerException
      type: System.Exception
      description: "导致当前异常的异常。 如果`innerException`参数不是 null 引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中) 中, 引发当前异常<xref uid=&quot;langword_csharp_catch&quot; name=&quot;catch&quot; href=&quot;&quot;></xref>处理内部异常的块。"
  overload: System.StackOverflowException.#ctor*
  exceptions: []
  platform:
  - net462
references:
- uid: System.SystemException
  isExternal: false
  name: System.SystemException
- uid: System.StackOverflowException.#ctor
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException()
  nameWithType: StackOverflowException.StackOverflowException()
  fullName: System.StackOverflowException.StackOverflowException()
- uid: System.StackOverflowException.#ctor(System.String)
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException(String)
  nameWithType: StackOverflowException.StackOverflowException(String)
  fullName: System.StackOverflowException.StackOverflowException(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.StackOverflowException.#ctor(System.String,System.Exception)
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException(String,Exception)
  nameWithType: StackOverflowException.StackOverflowException(String,Exception)
  fullName: System.StackOverflowException.StackOverflowException(String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.StackOverflowException.#ctor*
  parent: System.StackOverflowException
  isExternal: false
  name: StackOverflowException
  nameWithType: StackOverflowException.StackOverflowException
