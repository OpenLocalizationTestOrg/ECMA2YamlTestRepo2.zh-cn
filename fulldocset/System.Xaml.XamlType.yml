### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlType
  id: XamlType
  children:
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  - System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlType.AllowedContentTypes
  - System.Xaml.XamlType.BaseType
  - System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  - System.Xaml.XamlType.ConstructionRequiresArguments
  - System.Xaml.XamlType.ContentProperty
  - System.Xaml.XamlType.ContentWrappers
  - System.Xaml.XamlType.DeferringLoader
  - System.Xaml.XamlType.Equals(System.Object)
  - System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  - System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.GetAllAttachableMembers
  - System.Xaml.XamlType.GetAllMembers
  - System.Xaml.XamlType.GetAttachableMember(System.String)
  - System.Xaml.XamlType.GetHashCode
  - System.Xaml.XamlType.GetMember(System.String)
  - System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  - System.Xaml.XamlType.GetXamlNamespaces
  - System.Xaml.XamlType.Invoker
  - System.Xaml.XamlType.IsAmbient
  - System.Xaml.XamlType.IsArray
  - System.Xaml.XamlType.IsCollection
  - System.Xaml.XamlType.IsConstructible
  - System.Xaml.XamlType.IsDictionary
  - System.Xaml.XamlType.IsGeneric
  - System.Xaml.XamlType.IsMarkupExtension
  - System.Xaml.XamlType.IsNameScope
  - System.Xaml.XamlType.IsNameValid
  - System.Xaml.XamlType.IsNullable
  - System.Xaml.XamlType.IsPublic
  - System.Xaml.XamlType.IsUnknown
  - System.Xaml.XamlType.IsUsableDuringInitialization
  - System.Xaml.XamlType.IsWhitespaceSignificantCollection
  - System.Xaml.XamlType.IsXData
  - System.Xaml.XamlType.ItemType
  - System.Xaml.XamlType.KeyType
  - System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  - System.Xaml.XamlType.LookupAllAttachableMembers
  - System.Xaml.XamlType.LookupAllMembers
  - System.Xaml.XamlType.LookupAllowedContentTypes
  - System.Xaml.XamlType.LookupAttachableMember(System.String)
  - System.Xaml.XamlType.LookupBaseType
  - System.Xaml.XamlType.LookupCollectionKind
  - System.Xaml.XamlType.LookupConstructionRequiresArguments
  - System.Xaml.XamlType.LookupContentProperty
  - System.Xaml.XamlType.LookupContentWrappers
  - System.Xaml.XamlType.LookupCustomAttributeProvider
  - System.Xaml.XamlType.LookupDeferringLoader
  - System.Xaml.XamlType.LookupInvoker
  - System.Xaml.XamlType.LookupIsAmbient
  - System.Xaml.XamlType.LookupIsConstructible
  - System.Xaml.XamlType.LookupIsMarkupExtension
  - System.Xaml.XamlType.LookupIsNameScope
  - System.Xaml.XamlType.LookupIsNullable
  - System.Xaml.XamlType.LookupIsPublic
  - System.Xaml.XamlType.LookupIsUnknown
  - System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  - System.Xaml.XamlType.LookupIsXData
  - System.Xaml.XamlType.LookupItemType
  - System.Xaml.XamlType.LookupKeyType
  - System.Xaml.XamlType.LookupMarkupExtensionReturnType
  - System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  - System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  - System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  - System.Xaml.XamlType.LookupSetTypeConverterHandler
  - System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  - System.Xaml.XamlType.LookupTypeConverter
  - System.Xaml.XamlType.LookupUnderlyingType
  - System.Xaml.XamlType.LookupUsableDuringInitialization
  - System.Xaml.XamlType.LookupValueSerializer
  - System.Xaml.XamlType.MarkupExtensionReturnType
  - System.Xaml.XamlType.Name
  - System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  - System.Xaml.XamlType.PreferredXamlNamespace
  - System.Xaml.XamlType.SchemaContext
  - System.Xaml.XamlType.ToString
  - System.Xaml.XamlType.TrimSurroundingWhitespace
  - System.Xaml.XamlType.TypeArguments
  - System.Xaml.XamlType.TypeConverter
  - System.Xaml.XamlType.UnderlyingType
  - System.Xaml.XamlType.ValueSerializer
  langs:
  - csharp
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
  type: Class
  summary: "报告有关 XAML 类型作为整体的 XAML 系统在.NET Framework XAML 服务中实现的一部分的信息。"
  remarks: "XamlType 类中的许多 Api 提供有关 XAML 类型，它们报告的概念是类似于特定的 XAML 规范 [MS-XAML] 节的信息。       XamlType 是广泛使用.NET Framework XAML 服务 API 中有关 XAML 类型的报表信息。 XamlType 报告可能需要了解的有关 XAML 类型才能使用实例或从 XAML 节点流中或类似的 XAML 表示形式访问其成员的信息。 其 reporting 是类似于如何<xref:System.Type>CLR 类型系统中，以及反射类如<xref:System.Reflection.MemberInfo>，提供有关 CLR 类型和其用法的信息。</xref:System.Reflection.MemberInfo> </xref:System.Type>       若要扩展的 XAML 类型系统，可以从 XamlType 派生。 若要有效执行此操作，你可能还需要实现一种<xref:System.Xaml.Schema.XamlTypeInvoker>。</xref:System.Xaml.Schema.XamlTypeInvoker> <xref:System.Xaml.Schema.XamlTypeInvoker>启用通用的 XAML 类型系统，若要使用的类型系统支持你指定的调用行为的一部分。</xref:System.Xaml.Schema.XamlTypeInvoker> 特定的自定义<xref:System.Xaml.Schema.XamlTypeInvoker>提供一种方法，以减少在 CLR 类型系统中，所使用的默认 XamlType 行为的依赖关系。</xref:System.Xaml.Schema.XamlTypeInvoker>"
  syntax:
    content: 'public class XamlType : IEquatable<System.Xaml.XamlType>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlType>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>类基于基础的 CLR 类型信息。"
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "基础的 CLR <xref:System.Type>XAML 类型构造。</xref:System.Type>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 读取器或 XAML 编写器的 XAML 架构上下文。"
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>类基于类型的字符串名称。"
  remarks: "这是受保护的构造函数。 没有当前的公共派生的类存在用于构造此特定的路径。 为现有的使用者<xref:System.Xaml.XamlType>，必须使用其他构造函数签名 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>， <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>，或<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 初始化<xref:System.Xaml.XamlType>对象。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29> </xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29> </xref:System.Xaml.XamlType>"
  syntax:
    content: protected XamlType (string typeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: typeName
      type: System.String
      description: "要创建的类型名称。"
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "类型参数<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示泛型类型。 可以 （并且通常为） <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，指示所表示的类型不是泛型类型。"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 读取器和 XAML 编写器的 XAML 架构上下文。"
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>typeName</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  id: '#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>类根据基础类型信息和<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>实现。"
  syntax:
    content: public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);
    parameters:
    - id: underlyingType
      type: System.Type
      description: "要构造的 XAML 类型基础类型。"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 读取器的 XAML 架构上下文。"
    - id: invoker
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>处理运行时反射的实现调用针对<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>underlyingType</code> or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlType&quot;></xref>类基于 XAML 命名空间和类型的字符串名称。 此构造函数的又是专门供分析和已知支持的类型系统和 XAML 架构上下文中没有支持的类型用法的 XAML 节点录制。"
  remarks: "使用此构造函数仅针对&quot;未知&quot;的类型映射到基础类型系统的 XAML 类型是不可用。 此构造函数可能会产生结果其中<xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName>是`true`。</xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=fullName> 相反，默认反射器逻辑所报告的<xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>.</xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=fullName>基础类型 但是，此行为可以更改由于<xref:System.Xaml.XamlType.LookupIsUnknown%2A>重写。</xref:System.Xaml.XamlType.LookupIsUnknown%2A>"
  syntax:
    content: public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList<System.Xaml.XamlType> typeArguments, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: unknownTypeNamespace
      type: System.String
      description: "字符串形式的类型的 XAML 命名空间。"
    - id: unknownTypeName
      type: System.String
      description: "在提供的类型的名称`unknownTypeNamespace`XAML 命名空间。"
    - id: typeArguments
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "类型参数<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示泛型类型。 可以 （并且通常为） <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，指示所表示的类型不是泛型类型。"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "XAML 读取器或 XAML 编写器的 XAML 架构上下文。"
  overload: System.Xaml.XamlType.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One or more of <code>unknownTypeNamespace</code>, <code>unknownTypeName</code>, or <code>schemaContext</code> are <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlType.AllowedContentTypes
  id: AllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取的类型都能够用作只读集合<xref:System.Xaml.XamlType.ContentProperty*>值为<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "可分配的类型 （例如，分配给是允许的内容类型的基类型） 特定的内容类型不考虑多个类型 AllowedContentTypes 目的。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> AllowedContentTypes { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "可能的内容类型的只读集合。"
  overload: System.Xaml.XamlType.AllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.BaseType
  id: BaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.XamlType&quot;></xref>对于此 XAML 类型的即时基类型。 此值决定基于的基础类型<xref href=&quot;System.Xaml.XamlType&quot;></xref>和架构上下文。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupBaseType%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupBaseType%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupBaseType%2A>在此类型上。</xref:System.Xaml.XamlType.LookupBaseType%2A> 默认情况下，BaseType 返回内部常数，用于表示<xref:System.Object>如果<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`。</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlType.LookupBaseType%2A>是虚拟的并且因此，可以重写。</xref:System.Xaml.XamlType.LookupBaseType%2A> 重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。 为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public System.Xaml.XamlType BaseType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>对于此 XAML 类型的即时基类型。"
  overload: System.Xaml.XamlType.BaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  id: CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示此实例是否<xref href=&quot;System.Xaml.XamlType&quot;></xref>具有指定<xref href=&quot;System.Xaml.XamlType&quot;></xref>在其列表中可赋值的类型。"
  remarks: "尽管可分配的类型不具有的引用类型的所有功能，你可以对分配来使用它。 例如，可以使用分配以使属性的值的类型匹配。 在 XAML 中的分配类型的概念是 CLR 类型系统中的向上转换的概念类似。 例如下的 CLR 类型系统，每个类型具有<xref:System.Object>其可分配的类型列表中。</xref:System.Object>       如果两种状态之一<xref:System.Xaml.XamlType>使用实例比较具有<xref:System.Xaml.XamlType.IsUnknown%2A>等于`true`，此方法已返回特殊未知的模式`true`如果两个<xref:System.Xaml.XamlType>实例是否相等。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.IsUnknown%2A> </xref:System.Xaml.XamlType>       默认实现使用 CLR<xref:System.Type>从<xref:System.Xaml.XamlType.UnderlyingType%2A>此<xref:System.Xaml.XamlType>和输入<xref:System.Xaml.XamlType>，并调用<xref:System.Type.IsAssignableFrom%2A>.</xref:System.Type.IsAssignableFrom%2A> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Type> 如果你想分配类型的一种方式确定，重写此方法。       传递 null`xamlType`不会引发异常，并始终返回`false`。      1> [!IMPORTANT]&1;> CanAssignTo 是虚拟的并且因此，可以重写。 重写有可能 (恶意或其他) 若要更改的 XAML 类型可分配性，以便它不再按预期的方式其基础的 CLR 类型的类型转换行为一致。 为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);
    parameters:
    - id: xamlType
      type: System.Xaml.XamlType
      description: "要检查针对当前的类型<xref href=&quot;System.Xaml.XamlType&quot;> </xref> 。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> xamlType </code>处于可分配的类型列表中; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.CanAssignTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  id: ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>必须具有参数 (通过泛型约束<xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>，初始化文本或其他 XAML 技术) 以构造类型的有效实例。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>在此类型上。</xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A>"
  syntax:
    content: public bool ConstructionRequiresArguments { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果构造实例需要某些参数值，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.ConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentProperty
  id: ContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.XamlMember&quot;></xref>的内容的属性的信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当使用绑定或支持的 CLR 类型系统，可以通过应用指定的类型的 XAML 内容属性<xref:System.Windows.Markup.ContentPropertyAttribute>到类型定义。</xref:System.Windows.Markup.ContentPropertyAttribute>       此属性对齐到`[content property]`[MS-XAML] 规范中的信息项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupContentProperty%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentProperty%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupContentProperty%2A>在此类型上。</xref:System.Xaml.XamlType.LookupContentProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember ContentProperty { get; }
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>此内容的属性的信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。 可能是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在任何内容的属性。"
  overload: System.Xaml.XamlType.ContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ContentWrappers
  id: ContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取用于包装不严格的类型匹配项，如在强类型化的字符串时其内容的内容属性的类型<xref uid=&quot;langword_csharp_Collection&lt;T&gt;&quot; name=&quot;Collection&lt;T&gt;&quot; href=&quot;&quot;> </xref>。"
  remarks: "如果不没有为类型匹配放宽考虑任何包装，此属性是`null`。       在计算中值的类型<xref:System.Xaml.XamlType.CanAssignTo%2A>对于特定的内容类型，可以不考虑多个类型目的 ContentWrappers。</xref:System.Xaml.XamlType.CanAssignTo%2A>       <xref:System.Xaml>并且<xref:System.Xaml.XamlType>，则可以作为一种<xref:System.Windows.Markup.ContentWrapperAttribute>。</xref:System.Windows.Markup.ContentWrapperAttribute>类型上指定的 XAML 内容包装类型</xref:System.Xaml.XamlType></xref:System.Xaml>的 CLR 绑定中       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupContentWrappers%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupContentWrappers%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupContentWrappers%2A>在此类型上。</xref:System.Xaml.XamlType.LookupContentWrappers%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> ContentWrappers { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "可能的内容包装类型; 的只读集合否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。 请参阅备注。"
  overload: System.Xaml.XamlType.ContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;表示延迟加载此类型转换行为。"
  remarks: "在 WPF 中的 XAML 模板行为是延迟的加载行为的一个示例。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupDeferringLoader%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupDeferringLoader%2A>在此类型上。</xref:System.Xaml.XamlType.LookupDeferringLoader%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "&lt;Xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>表示此类型的延迟的加载行为的约束。"
  overload: System.Xaml.XamlType.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指示当前对象是否等于另一个对象。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与此对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前对象是否等于<code> obj </code>参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  id: Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指示当前对象是否等于同一类型的另一个对象。"
  syntax:
    content: public bool Equals (System.Xaml.XamlType other);
    parameters:
    - id: other
      type: System.Xaml.XamlType
      description: "要与此对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前对象是否等于<code> other </code>参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  id: GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回所化名为此 XAML 指令 XAML 成员<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，调用此方法可以调用<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAliasedProperty%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupAliasedProperty%2A>在此类型上。</xref:System.Xaml.XamlType.LookupAliasedProperty%2A>"
  syntax:
    content: public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "为其查找别名成员指令。"
    return:
      type: System.Xaml.XamlMember
      description: "使用别名成员中，如果找到了;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.GetAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  id: GetAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回包含此公开的所有可附加属性的集合<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "每个<xref:System.Xaml.XamlMember>返回的集合中应包含的值的支持概念，<xref:System.Xaml.XamlMember>是可附加成员。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember> 例如，成员应返回`true`为<xref:System.Xaml.XamlMember.IsAttachable%2A>，类型<xref:System.Xaml.XamlMember.TargetType%2A>，依次类推。</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.IsAttachable%2A>       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，调用此方法可以调用<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>在此类型上。</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "一个集合，包含零个或多<xref href=&quot;System.Xaml.XamlMember&quot;></xref>值。"
  overload: System.Xaml.XamlType.GetAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAllMembers
  id: GetAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回包含此公开的所有成员的集合<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "调用此方法可以调用<xref:System.Xaml.XamlType.LookupAllMembers%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAllMembers%2A>"
  syntax:
    content: public System.Collections.Generic.ICollection<System.Xaml.XamlMember> GetAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
      description: "一个集合，包含零个或多<xref href=&quot;System.Xaml.XamlMember&quot;></xref>值。"
  overload: System.Xaml.XamlType.GetAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  id: GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示特定名为此可附加成员<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "调用此方法可以调用<xref:System.Xaml.XamlType.LookupAttachableMember%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupAttachableMember%2A>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlType.LookupAttachableMember%2A>是虚拟的并且因此，可以重写。</xref:System.Xaml.XamlType.LookupAttachableMember%2A> 重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<xref:System.ComponentModel.TypeDescriptor>`Get*`有关基础 CLR 类型的信息。</xref:System.ComponentModel.TypeDescriptor> 对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public System.Xaml.XamlMember GetAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "若要获取，在可附加成员的名称`ownerTypeName.MemberName`窗体。"
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>对象的请求的可附加成员; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果该名称的任何可附加成员不存在。"
  overload: System.Xaml.XamlType.GetAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回此对象的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "整数哈希代码。"
  overload: System.Xaml.XamlType.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlMember&quot;></xref>为特定的命名成员从此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "值`name`应为非限定。 指明附加的成员的类型限定名称应提交到<xref:System.Xaml.XamlType.GetAttachableMember%2A>相反。</xref:System.Xaml.XamlType.GetAttachableMember%2A> 前缀的成员名称不应使用;前缀是态势到一种用法，XAML 类型系统无法知道这类用法的上下文，以及如何映射前缀。       调用此方法可以调用<xref:System.Xaml.XamlType.LookupMember%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMember%2A>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlType.LookupMember%2A>是虚拟的并且因此，可以重写。</xref:System.Xaml.XamlType.LookupMember%2A> 重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<xref:System.ComponentModel.TypeDescriptor>`Get*`有关基础 CLR 类型的信息。</xref:System.ComponentModel.TypeDescriptor> 对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public System.Xaml.XamlMember GetMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "要获取 （作为字符串） 的成员的名称。"
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>信息的成员，此类成员是否找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  id: GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "对于标记扩展类型，返回此特定的标记扩展用法支持位置参数的类型<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "此 API 才是相关，如果此<xref:System.Xaml.XamlType>表示标记扩展 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>是`true`)。</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       输入`parameterCount`不适用于请求特定的位置参数的类型。 它可用于指定 arity 的标记扩展用法。 通常，标记扩展用法有多个&quot;签名&quot;，并使用不同的参数 arity （计数） 的位置参数来区分。 但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。 有关详细信息，请参阅<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 对于特定 arity （计数），可以改变的参数位置和类型。 若要获取的位置的一种特定 arity 的标记扩展用法，请先调用 GetPositionalParameters 指定 arity 计数。 然后从返回的集合，该位置获取项。       调用此方法可以调用<xref:System.Xaml.XamlType.LookupPositionalParameters%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupPositionalParameters%2A>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> GetPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "你要获取其信息的特定语法或构造函数模式计数 (arity)。"
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "一份<xref href=&quot;System.Xaml.XamlType&quot;></xref>值，其中每个<xref href=&quot;System.Xaml.XamlType&quot;></xref>是语法中的此位置的类型。 提供为标记扩展的标记输入时，必须以相同的顺序指定的类型。"
  overload: System.Xaml.XamlType.GetPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回字符串中包括类型的 XAML 命名空间标识符的列表。"
  remarks: "典型 XAML 命名空间标识符是 URI 形式的字符串。       默认实现将检查以下内容，按顺序︰ 在构造中提供的 XAML 命名空间 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>签名仅); 和命名空间的架构上下文可用。</xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 如果这些是每个`null`，包含一个空字符串，则生成的新列表。 你可以重写此方法可以更改的查找方法。"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "字符串值，其中每个字符串是 XAML 命名空间的 URI 标识符列表。"
  overload: System.Xaml.XamlType.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Invoker
  id: Invoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>与此相关联的实现<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，调用调用程序可以调用<xref:System.Xaml.XamlType.LookupInvoker%2A>或该方法的特定重写。</xref:System.Xaml.XamlType.LookupInvoker%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupInvoker%2A>在此类型上。</xref:System.Xaml.XamlType.LookupInvoker%2A>       如果<xref:System.Xaml.XamlType.LookupInvoker%2A>重写返回`null`，或如果默认实现返回`null`由于缺乏<xref:System.Xaml.XamlType.UnderlyingType%2A>为此<xref:System.Xaml.XamlType>，然后调用程序返回<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Xaml.XamlType.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>与此相关联的实现<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示环境类型，按照 XAML 定义。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsAmbient%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsAmbient%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsAmbient%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsAmbient%2A>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示环境的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsArray
  id: IsArray
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的数组。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupCollectionKind%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupCollectionKind%2A>在此类型上。</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsArray { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的数组; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsArray*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsCollection
  id: IsCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的集合。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupCollectionKind%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupCollectionKind%2A>在此类型上。</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的集合; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsConstructible
  id: IsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示构造的类型，按照 XAML 定义。"
  remarks: "此属性对齐到`[is default constructible]`[MS-XAML] 规范中的信息项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsConstructible%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsConstructible%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsConstructible%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsConstructible%2A>"
  syntax:
    content: public bool IsConstructible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示构造的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsDictionary
  id: IsDictionary
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的字典，根据 XAML 定义的信息。"
  remarks: "此属性对齐到`[is dictionary]`[MS-XAML] 规范中的信息项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupCollectionKind%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupCollectionKind%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupCollectionKind%2A>在此类型上。</xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: public bool IsDictionary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的字典; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsDictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsGeneric
  id: IsGeneric
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示泛型类型。"
  remarks: "此属性是一个帮助器属性，检查<xref:System.Xaml.XamlType.TypeArguments%2A>.</xref:System.Xaml.XamlType.TypeArguments%2A>的 null 值 没有任何特定`Lookup`与 IsGeneric 相关方法。"
  syntax:
    content: public bool IsGeneric { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示泛型类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsGeneric*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsMarkupExtension
  id: IsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示标记扩展。"
  remarks: "在 XAML 规范术语中，此类型必须可赋给`x:MarkupExtension`为了返回`true`IsMarkupExtension 有关。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A>"
  syntax:
    content: public bool IsMarkupExtension { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示标记扩展; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameScope
  id: IsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XAML 名称范围，根据 XAML 定义的信息。"
  remarks: "XAML 名称范围强制实施的或多个属性用于名称的唯一性`x:Name`  /  `[name property]`。 如果 IsNameScope `true`，强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。 在遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围随后扩展到类型的内容。       此属性对齐到`[is name scope]`[MS-XAML] 规范中的信息项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsNameScope%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNameScope%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNameScope { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XAML 名称范围; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>通过使用一个有效初始化<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字符串作为其<xref:System.Xaml.XamlType.Name*>.</xref:System.Xaml.XamlType.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>通过使用一个有效初始化<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字符串; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsNullable
  id: IsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示可以为 null 的类型，按照 XAML 定义。"
  remarks: "此属性对齐到`[is nullable]`[MS-XAML] 规范中的信息项。       如果你未使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsNullable%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsNullable%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsNullable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示可以为 null 的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsPublic
  id: IsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>相关类型系统中表示的公共类型。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsPublic%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsPublic%2A> </xref:System.Xaml.XamlType>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlType.LookupIsPublic%2A>是虚拟的并且因此，可以重写。</xref:System.Xaml.XamlType.LookupIsPublic%2A> 重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统和访问信息一致。 为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示公共类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示在基础类型系统中无法解析的类型。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsUnknown%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsUnknown%2A> </xref:System.Xaml.XamlType>       涉及了加载路径<xref:System.Xaml.XamlObjectWriter>、<xref:System.Xaml.XamlType>具有`true`为 IsUnknown 无法写入到对象图。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriter> 在中的默认实现<xref:System.Xaml>、<xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName>调用会引发<xref:System.Xaml.XamlObjectWriterException>时相关<xref:System.Xaml.XamlType>报表`true`为 IsUnknown。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=fullName> </xref:System.Xaml> 您不应传递<xref:System.Xaml.XamlType>，其作为 IsUnknown`true`除非你已准备好处理的异常从<xref:System.Xaml.XamlObjectWriter>，或通过其他方式来调整<xref:System.Xaml.XamlObjectWriter>行为或 XAML 节点流，然后再写入对象图。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlType>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示无法解析的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  id: IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>自上而下生成 XAML 初始化期间。"
  remarks: "自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。 自上而下生成，当一个类型实例化时，附加到父级，并且然后设置其属性。 自上而下构造可避免调用多次的属性更改处理程序。 这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>在此类型上。</xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A>"
  syntax:
    content: public bool IsUsableDuringInitialization { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>自上而下的 XAML 初始化过程中; 否则为生成<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  id: IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示空格的有意义集合，根据 XML 定义。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool IsWhitespaceSignificantCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示空格有意义集合; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.IsXData
  id: IsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>，每个 XAML 定义。"
  remarks: "此属性对齐到`[is xdata]`[MS-XAML] 规范中的信息项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsXData%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsXData%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsXData%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsXData%2A>"
  syntax:
    content: public bool IsXData { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.IsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ItemType
  id: ItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，提供的类型信息<xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;></xref>此属性<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "此属性才是相关，如果此<xref:System.Xaml.XamlType>表示的集合 (<xref:System.Xaml.XamlType.IsCollection%2A>是`true`)。</xref:System.Xaml.XamlType.IsCollection%2A> </xref:System.Xaml.XamlType> `Items`属性是任何属性存储该类型的集合或数组中的项。       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupItemType%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupItemType%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupItemType%2A>在此类型上。</xref:System.Xaml.XamlType.LookupItemType%2A>"
  syntax:
    content: public System.Xaml.XamlType ItemType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>对象的集合中的项的类型否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示集合。"
  overload: System.Xaml.XamlType.ItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.KeyType
  id: KeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，提供的键的属性的类型信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>，如果<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的字典。"
  remarks: "此属性才是相关，如果此<xref:System.Xaml.XamlType>表示的字典 (<xref:System.Xaml.XamlType.IsDictionary%2A>是`true`)。</xref:System.Xaml.XamlType.IsDictionary%2A> </xref:System.Xaml.XamlType>       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupKeyType%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupKeyType%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupKeyType%2A>在此类型上。</xref:System.Xaml.XamlType.LookupKeyType%2A>"
  syntax:
    content: public System.Xaml.XamlType KeyType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>对于字典用法，否则为键的类型的对象<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示一个字典。"
  overload: System.Xaml.XamlType.KeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  id: LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回所化名为此 XAML 指令 XAML 成员<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当调用方<xref:System.Xaml.XamlType.GetAliasedProperty%2A>。</xref:System.Xaml.XamlType.GetAliasedProperty%2A>获取一个值，则可以调用此方法       默认实现可以返回结果为以下 XAML 指令︰ `Key`;`Name`;`Uid`; and `xml:lang`. 这些依赖于基础反射和仍可能会返回值`null`如果不找到任何别名属性。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或一种类型的架构信息，请重写此方法。"
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);
    parameters:
    - id: directive
      type: System.Xaml.XamlDirective
      description: "为其查找别名成员指令。"
    return:
      type: System.Xaml.XamlMember
      description: "使用别名成员中，如果找到了;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupAliasedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  id: LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回包含此公开的所有可附加属性的可枚举集<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当调用方<xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>。</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>获取一个值，则可以调用此方法       尽管<xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>返回泛型集合而言，这`Lookup`方法返回的通用的可枚举集合。</xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>       默认实现使用内部的 CLR 反射。 当<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，默认实现可以使用<xref:System.Xaml.XamlType.BaseType%2A>、 是否可用。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 此行为调用 LookupAllAttachableMembers 以递归方式来尝试找到有效的基类型，并返回`null`如果不存在任何有效的基类型。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。 为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。 如果类型是有效并且反射或其他技术都可用，但是类型不具有可附加成员，则应改为返回一个空<xref:System.Collections.Generic.IEnumerable%601>设置。</xref:System.Collections.Generic.IEnumerable%601>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllAttachableMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "包含零个或更多的可枚举集<xref href=&quot;System.Xaml.XamlMember&quot;></xref>值; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupAllAttachableMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllMembers
  id: LookupAllMembers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回包含此公开的所有成员的可枚举集<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当调用方<xref:System.Xaml.XamlType.GetAllMembers%2A>。</xref:System.Xaml.XamlType.GetAllMembers%2A>获取一个值，则可以调用此方法       尽管<xref:System.Xaml.XamlType.GetAllMembers%2A>返回泛型集合而言，这`Lookup`方法返回的通用的可枚举集合。</xref:System.Xaml.XamlType.GetAllMembers%2A>       默认实现使用内部的 CLR 反射。 用例其中<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，默认实现可以使用<xref:System.Xaml.XamlType.BaseType%2A>、 是否可用。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 此行为调用 LookupAllMembers 以递归方式来尝试找到有效的基类型，并返回`null`如果不存在任何有效的基类型。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。 为信息不能确定由于缺乏类型系统或反射支持的情况下，应保留 null 返回值。 如果类型为有效，反射或其他技术才会有效。如果类型没有成员，则应改为返回一个空<xref:System.Collections.Generic.IEnumerable%601>设置。</xref:System.Collections.Generic.IEnumerable%601>       为 LookupAllMembers 返回值和<xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A>应该是互相排斥。</xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 如果你有其中后备类型系统的属性可以支持标准实例用法，以及可附加的使用情况的情况下，该成员应报告为两个不同<xref:System.Xaml.XamlMember>值，其中一个的值出现在可附加的列表，在标准的成员列表中的另一个。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Collections.Generic.IEnumerable<System.Xaml.XamlMember> LookupAllMembers ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
      description: "包含零个或更多的可枚举集<xref href=&quot;System.Xaml.XamlMember&quot;></xref>值。"
  overload: System.Xaml.XamlType.LookupAllMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  id: LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的类型都可用作列表<xref:System.Xaml.XamlType.ContentProperty*>值为<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Xaml.XamlType.ContentProperty*>"
  remarks: "当调用方<xref:System.Xaml.XamlType.AllowedContentTypes%2A>。</xref:System.Xaml.XamlType.AllowedContentTypes%2A>获取一个值，则可以调用此方法       评估为<xref:System.Xaml.XamlType.CanAssignTo%2A>对于特定的内容类型，可以不考虑为了<xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</xref:System.Xaml.XamlType.AllowedContentTypes%2A>的多个类型</xref:System.Xaml.XamlType.CanAssignTo%2A>的类型       默认实现可以使用的其他属性<xref:System.Xaml.XamlType>(<xref:System.Xaml.XamlType.ContentWrappers%2A>， <xref:System.Xaml.XamlType.ContentProperty%2A>，或<xref:System.Xaml.XamlType.ItemType%2A>) 以获取结果。</xref:System.Xaml.XamlType.ItemType%2A> </xref:System.Xaml.XamlType.ContentProperty%2A> </xref:System.Xaml.XamlType.ContentWrappers%2A> </xref:System.Xaml.XamlType> `Lookup`重写也可以在此判断中调用上面的属性列表。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupAllowedContentTypes ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "可能的内容类型的列表。"
  overload: System.Xaml.XamlType.LookupAllowedContentTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  id: LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlMember&quot;></xref>特定名为可根据此附加<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当调用方<xref:System.Xaml.XamlType.GetAttachableMember%2A>。</xref:System.Xaml.XamlType.GetAttachableMember%2A>获取一个值，则可以调用此方法       默认实现使用内部的 CLR 反射。 当<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，默认实现可以使用<xref:System.Xaml.XamlType.BaseType%2A>、 是否可用。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 此行为调用 LookupAttachableMember 以递归方式来尝试找到有效的基类型，并返回`null`如果不存在任何有效的基类型。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。      1> [!IMPORTANT]&1;> LookupAttachableMember 是虚拟的并且因此，可以重写。 重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<xref:System.ComponentModel.TypeDescriptor>`Get*`有关基础 CLR 类型的信息。</xref:System.ComponentModel.TypeDescriptor> 对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);
    parameters:
    - id: name
      type: System.String
      description: "若要获取，在可附加成员的名称`ownerTypeName.MemberName`窗体。"
    return:
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>对象的请求的可附加成员; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果该名称的任何可附加成员不存在。"
  overload: System.Xaml.XamlType.LookupAttachableMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupBaseType
  id: LookupBaseType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>对于此 XAML 类型的即时基类型。 此值决定基于的基础类型<xref href=&quot;System.Xaml.XamlType&quot;></xref>和架构上下文。"
  remarks: "当调用方<xref:System.Xaml.XamlType.BaseType%2A>。</xref:System.Xaml.XamlType.BaseType%2A>获取一个值，则可以调用此方法       默认实现可能会返回一个内部常量，用于表示<xref:System.Object>如果<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`。</xref:System.Xaml.XamlType.UnderlyingType%2A> </xref:System.Object>       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。      1> [!IMPORTANT]&1;> LookupBaseType 是虚拟的并且因此，可以重写。 重写有可能 (恶意或其他) 若要更改有关 XAML 类型的报告的类型信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统信息一致。 为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupBaseType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>对于此 XAML 类型的即时基类型。"
  overload: System.Xaml.XamlType.LookupBaseType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCollectionKind
  id: LookupCollectionKind
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的值<xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;></xref>声明哪种特定集合的枚举类型这<xref href=&quot;System.Xaml.XamlType&quot;></xref>使用。"
  remarks: "调用此方法，一个内部私有方法 (没有公共`CollectionKind`或`GetCollectionKind`API 上是否存在<xref:System.Xaml.XamlType>)。</xref:System.Xaml.XamlType>       默认实现使用内部的 CLR 反射。 用例其中<xref:System.Xaml.XamlType.UnderlyingType%2A>是`null`，默认实现可以使用<xref:System.Xaml.XamlType.BaseType%2A>、 是否可用。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.UnderlyingType%2A> 此行为间接调用 LookupCollectionKind 以递归方式来尝试找到有效的基类型;它将返回<xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>如果不存在任何有效的基类型。</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> 一般情况下，默认实现将尝试查找`Add`通过反射的基础类型的方法。 如果找到，<xref:System.Reflection.MethodInfo>的`Add`方法是足够的信息来确定哪些<xref:System.Xaml.Schema.XamlCollectionKind>应返回值。</xref:System.Xaml.Schema.XamlCollectionKind> </xref:System.Reflection.MethodInfo> 否则，它将返回<xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlCollectionKind
      description: "值为<xref href=&quot;System.Xaml.Schema.XamlCollectionKind&quot;></xref>枚举。"
  overload: System.Xaml.XamlType.LookupCollectionKind*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  id: LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>必须具有参数 (通过泛型约束<xref uid=&quot;langword_csharp_x:TypeArguments&quot; name=&quot;x:TypeArguments&quot; href=&quot;&quot;> </xref>，初始化文本或其他 XAML 技术) 以构造类型的有效实例。"
  remarks: "当调用方<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>。</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>获取一个值，则可以调用此方法       默认实现返回`false`被认为是在 CLR 中的值类型的类型的类型系统。 对于以外的值类型，CLR 反射<xref:System.Reflection.ConstructorInfo>用于确定是否存在默认构造函数。</xref:System.Reflection.ConstructorInfo>       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。"
  syntax:
    content: protected virtual bool LookupConstructionRequiresArguments ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果构造实例需要某些参数值，则为否则为 false。"
  overload: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentProperty
  id: LookupContentProperty
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlMember&quot;></xref>的内容的属性的信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "当调用方<xref:System.Xaml.XamlType.ContentProperty%2A>。</xref:System.Xaml.XamlType.ContentProperty%2A>获取一个值，则可以调用此方法       默认实现可检查<xref:System.Windows.Markup.ContentPropertyAttribute>的类型定义。</xref:System.Windows.Markup.ContentPropertyAttribute> 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果这些检查未发现的内容类型，默认实现返回`null`。       如果你不依赖于默认内部 CLR 反射，并将元数据或其他技术来报告 XAML 类型系统信息或的一种类型的架构信息，请重写此方法。"
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupContentProperty ();
    parameters: []
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;></xref>此内容的属性的信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。 May be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupContentProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupContentWrappers
  id: LookupContentWrappers
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一份<xref href=&quot;System.Xaml.XamlType&quot;></xref>这些值表示的内容包装此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "内容包装是一个类，表示内容的集合类型时使用该集合中的类型不是连续类型系统。 预期的内容包装的集合项类型进行限制以外的某种方式<xref:System.Object>或非特定对象等效。</xref:System.Object> 但是，由设计或使用该类型的属性的目的而不是类型系统，只被实施此限制。 类型可以存在多个内容包装。       有关示例类，以及从 WPF XAML 实现的方案，请参阅<xref:System.Windows.Documents.InlineCollection>。</xref:System.Windows.Documents.InlineCollection>"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupContentWrappers ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "一份<xref href=&quot;System.Xaml.XamlType&quot;></xref>这些值表示的内容包装此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupContentWrappers*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，返回<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;></xref>实现。"
  remarks: "重写该方法以提供内部反射提供一种替代方式，若要获取 CLR 属性值。 在没有重写时，内部反射器使用典型的 CLR 反射逻辑。       默认实现返回`null`。"
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref>实现。"
  overload: System.Xaml.XamlType.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;对象，用于延迟加载的 XAML 声明对象。"
  remarks: "当调用方<xref:System.Xaml.XamlType.DeferringLoader%2A>。</xref:System.Xaml.XamlType.DeferringLoader%2A>获取一个值，则可以调用此方法 重写此方法，如果你想<xref:System.Xaml.XamlType.DeferringLoader%2A>返回不同的值比通过默认内部反射，并且还提供自定义<xref:System.Xaml.Schema.XamlTypeInvoker>信息。</xref:System.Xaml.Schema.XamlTypeInvoker> </xref:System.Xaml.XamlType.DeferringLoader%2A>       默认实现返回根据读取<xref:System.Windows.Markup.XamlDeferLoadAttribute>.</xref:System.Windows.Markup.XamlDeferLoadAttribute>对象 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果没有可用的值，此方法返回`null`。"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;具有<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>泛型约束。"
  overload: System.Xaml.XamlType.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;></xref>与此关联<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.Invoker%2A>.</xref:System.Xaml.XamlType.Invoker%2A>调用此方法       默认实现不要求<xref:System.Xaml.XamlType>通过使用构造函数传递一个初始<xref:System.Xaml.Schema.XamlTypeInvoker>.</xref:System.Xaml.Schema.XamlTypeInvoker>之一构造</xref:System.Xaml.XamlType> 但是，<xref:System.Xaml.XamlType.UnderlyingType%2A>值必须存在<xref:System.Xaml.XamlType>; 否则为默认实现返回`null`。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.UnderlyingType%2A>       如果从<xref:System.Xaml.Schema.XamlTypeInvoker>想要返回派生的类和</xref:System.Xaml.Schema.XamlTypeInvoker>还创建派生的类重写此方法 如果返回`null`，<xref:System.Xaml.XamlType.Invoker%2A>返回<xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName>向调用方。</xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlType.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlTypeInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlTypeInvoker&quot;> </xref>此信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示环境类型，按照 XAML 定义。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsAmbient%2A>.</xref:System.Xaml.XamlType.IsAmbient%2A>调用此方法       默认实现上使用 CLR 反射<xref:System.Xaml.XamlType.UnderlyingType%2A>可以检查基类型。</xref:System.Xaml.XamlType.UnderlyingType%2A> 此实现可检查<xref:System.Windows.Markup.AmbientAttribute>用于应用于在类级别的相关类型的定义，并返回`true`在这种情况下。</xref:System.Windows.Markup.AmbientAttribute> 所有其他情况下返回`false`。       重写此方法，如果你想<xref:System.Xaml.XamlType.IsAmbient%2A>返回不同的值比通过默认内部反射。</xref:System.Xaml.XamlType.IsAmbient%2A>"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示环境的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsConstructible
  id: LookupIsConstructible
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示构造的类型，按照 XAML 定义。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsConstructible%2A>.</xref:System.Xaml.XamlType.IsConstructible%2A>调用此方法       默认实现使用 CLR 反射<xref:System.Xaml.XamlType.UnderlyingType%2A>。</xref:System.Xaml.XamlType.UnderlyingType%2A> 类型必须是具体的、 非嵌套和已关闭。 默认实现将检查类型是否是值类型和返回的<xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> 对于空<xref:System.Xaml.XamlType.UnderlyingType%2A>，此方法返回`true`。</xref:System.Xaml.XamlType.UnderlyingType%2A>       重写此方法，如果你想<xref:System.Xaml.XamlType.IsConstructible%2A>返回不同的值比通过默认内部反射。</xref:System.Xaml.XamlType.IsConstructible%2A>"
  syntax:
    content: protected virtual bool LookupIsConstructible ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示构造的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsConstructible*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  id: LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示标记扩展。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</xref:System.Xaml.XamlType.IsMarkupExtension%2A>调用此方法       默认实现仅包含此调用︰`return CanAssignTo(XamlLanguage.MarkupExtension);`重写此方法，如果你想<xref:System.Xaml.XamlType.IsMarkupExtension%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsMarkupExtension%2A>       在 XAML 规范术语中，此类型必须可赋给`x:MarkupExtension`为了返回`true` <xref:System.Xaml.XamlType.IsMarkupExtension%2A>。</xref:System.Xaml.XamlType.IsMarkupExtension%2A>"
  syntax:
    content: protected virtual bool LookupIsMarkupExtension ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示标记扩展; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsMarkupExtension*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNameScope
  id: LookupIsNameScope
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XAML 名称范围，根据 XAML 定义的信息。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsNameScope%2A>.</xref:System.Xaml.XamlType.IsNameScope%2A>调用此方法       默认实现使<xref:System.Xaml.XamlType.CanAssignTo%2A>间接对类型<xref:System.Windows.Markup.INameScope>.</xref:System.Windows.Markup.INameScope>调用</xref:System.Xaml.XamlType.CanAssignTo%2A> <xref:System.Windows.Markup.INameScope>是 WindowsBase 程序集中定义一个接口。</xref:System.Windows.Markup.INameScope> 使用这一用于 XAML 名称范围标识方法的 WPF 和[!INCLUDE[TLA#tla_workflow](~/add/includes/tlasharptla-workflow-md.md)]的 XAML 实现。       重写此方法，如果你想<xref:System.Xaml.XamlType.IsNameScope%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsNameScope%2A>       XAML 名称范围强制实施的或多个适用于的属性名称的唯一性`x:Name`  /  `[name property]`。 如果<xref:System.Xaml.XamlType.IsNameScope%2A>是`true`，然后强制唯一性的某种机制都应存在，并且应从拥有 XAML 名称范围的此类型角度进行评估。</xref:System.Xaml.XamlType.IsNameScope%2A> 遇到另一个 XAML 名称范围所属类型之前，XAML 名称范围然后扩展到类型的内容。"
  syntax:
    content: protected virtual bool LookupIsNameScope ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XAML 名称范围; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsNameScope*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsNullable
  id: LookupIsNullable
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示可以为 null 的类型，按照 XAML 定义。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsNullable%2A>.</xref:System.Xaml.XamlType.IsNullable%2A>调用此方法       默认实现作出决定基于 CLR 核心库可以为 null 的概念， <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A>进行比照 对于空<xref:System.Xaml.XamlType.UnderlyingType%2A>，它将返回`true`。</xref:System.Xaml.XamlType.UnderlyingType%2A>       重写此方法，如果你想<xref:System.Xaml.XamlType.IsNullable%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsNullable%2A>"
  syntax:
    content: protected virtual bool LookupIsNullable ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示可以为 null 的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsPublic
  id: LookupIsPublic
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>相关类型系统中表示的公共类型。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsPublic%2A>.</xref:System.Xaml.XamlType.IsPublic%2A>调用此方法       默认实现使用针对非 null <xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A> CLR 反射 对于空<xref:System.Xaml.XamlType.UnderlyingType%2A>，它将返回`true`。</xref:System.Xaml.XamlType.UnderlyingType%2A>       重写此方法，如果你想<xref:System.Xaml.XamlType.IsPublic%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsPublic%2A>      1> [!IMPORTANT]&1;> LookupIsPublic 是虚拟的并且因此，可以重写。 重写有可能 (恶意或其他) 若要更改报告的访问有关 XAML 类型的信息，以便它不再按预期的方式其基础的 CLR 类型的类型系统或访问信息一致。 为了进行的赋值操作或访问任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual bool LookupIsPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示公共类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示在基础类型系统中无法解析的类型。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsUnknown%2A>.</xref:System.Xaml.XamlType.IsUnknown%2A>调用此方法       默认实现可以使用 CLR 反射。 对于空<xref:System.Xaml.XamlType.UnderlyingType%2A>，它将返回`true`。</xref:System.Xaml.XamlType.UnderlyingType%2A>       重写此方法，如果你想<xref:System.Xaml.XamlType.IsUnknown%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsUnknown%2A>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示不可解析的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  id: LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示空格的有意义集合，根据 XML 定义。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>调用此方法       默认实现返回基于读取<xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果值不是可用的它将返回`false`。       重写此方法，如果你想<xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>"
  syntax:
    content: protected virtual bool LookupIsWhitespaceSignificantCollection ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示空白有意义集合; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupIsXData
  id: LookupIsXData
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示 XML <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;> </xref>，每个 XAML 定义。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.IsXData%2A>.</xref:System.Xaml.XamlType.IsXData%2A>调用此方法       默认实现使<xref:System.Xaml.XamlType.CanAssignTo%2A>间接对类型<xref:System.Xml.Serialization.IXmlSerializable>.</xref:System.Xml.Serialization.IXmlSerializable>调用</xref:System.Xaml.XamlType.CanAssignTo%2A>       重写此方法，如果你想<xref:System.Xaml.XamlType.IsXData%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsXData%2A>"
  syntax:
    content: protected virtual bool LookupIsXData ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if this <xref href=&quot;System.Xaml.XamlType&quot;></xref> represents <xref uid=&quot;langword_csharp_XDATA&quot; name=&quot;XDATA&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlType.LookupIsXData*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupItemType
  id: LookupItemType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，提供的类型信息<xref uid=&quot;langword_csharp_Items&quot; name=&quot;Items&quot; href=&quot;&quot;></xref>此属性<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.ItemType%2A>.</xref:System.Xaml.XamlType.ItemType%2A>调用此方法       默认实现可以使用 CLR 反射概念，例如检查`Add`方法<xref:System.Reflection.MethodInfo>和使用<xref:System.Reflection.ParameterInfo>; 检查<xref:System.Xaml.XamlType.IsArray%2A>; 并检查<xref:System.Xaml.XamlType.BaseType%2A>和尝试的相同逻辑。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Xaml.XamlType.IsArray%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       重写此方法，如果你想<xref:System.Xaml.XamlType.ItemType%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.ItemType%2A> 情况<xref:System.Xaml.XamlType.LookupCollectionKind%2A>返回<xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>应返回`null`。</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupItemType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>对象的集合中的项的类型否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示集合。"
  overload: System.Xaml.XamlType.LookupItemType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupKeyType
  id: LookupKeyType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，提供的键的属性的类型信息<xref href=&quot;System.Xaml.XamlType&quot;> </xref>，如果<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示的字典。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.KeyType%2A>.</xref:System.Xaml.XamlType.KeyType%2A>调用此方法       默认实现可以使用 CLR 反射概念，例如检查`Add`方法<xref:System.Reflection.MethodInfo>和使用<xref:System.Reflection.ParameterInfo>; 并检查<xref:System.Xaml.XamlType.BaseType%2A>和尝试的相同逻辑。</xref:System.Xaml.XamlType.BaseType%2A> </xref:System.Reflection.ParameterInfo> </xref:System.Reflection.MethodInfo>       重写此方法，如果你想<xref:System.Xaml.XamlType.KeyType%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.KeyType%2A> 情况<xref:System.Xaml.XamlType.LookupCollectionKind%2A>不返回<xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName>应返回`null`。</xref:System.Xaml.Schema.XamlCollectionKind?displayProperty=fullName> </xref:System.Xaml.XamlType.LookupCollectionKind%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupKeyType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>字典用法键的类型的对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示一个字典，"
  overload: System.Xaml.XamlType.LookupKeyType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  id: LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，提供针对返回了类型信息<xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;></xref>此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>，如果它表示标记扩展。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>调用此方法       默认实现返回<xref:System.Xaml.XamlType>根据读取<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> </xref:System.Xaml.XamlType> 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果值不是可用的它将返回`null`。       重写此方法，如果你想<xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>对象的返回类型的标记扩展用法; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示标记扩展。"
  overload: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  id: LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlMember&quot;></xref>为特定的命名成员从此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.GetMember%2A>.</xref:System.Xaml.XamlType.GetMember%2A>调用此方法       默认实现返回<xref:System.Xaml.XamlType>基于内部 CLR 反射和评估针对架构上下文。</xref:System.Xaml.XamlType>       重写此方法，如果你想<xref:System.Xaml.XamlType.GetMember%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.GetMember%2A>      1> [!IMPORTANT]&1;> LookupMember 是虚拟的并且因此，可以重写。 重写有可能 (恶意或其他) 若要更改 XAML 类型的报告的成员，以便它们不再按与预期的方式对齐<xref:System.ComponentModel.TypeDescriptor>`Get*`有关基础 CLR 类型的信息。</xref:System.ComponentModel.TypeDescriptor> 对于成员报告的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);
    parameters:
    - id: name
      type: System.String
      description: "要获取 （作为字符串） 的成员的名称。"
    - id: skipReadOnlyCheck
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要返回的成员，即使该成员具有<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>值&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt;;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>不能返回&lt;xref:System.Xaml.XamlMember.IsReadOnly%2A?displayProperty=fullName&gt;成员。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Xaml.XamlMember
      description: "<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>信息的成员，如果成员已找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  id: LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "对于标记扩展类型，返回此特定的标记扩展用法支持位置参数的类型<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</xref:System.Xaml.XamlType.GetPositionalParameters%2A>调用此方法       默认实现使用基于查找构造函数和检查 arity 内部反射信息。 重写此方法，如果你想<xref:System.Xaml.XamlType.GetPositionalParameters%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.GetPositionalParameters%2A>       此 API 才是相关，如果此<xref:System.Xaml.XamlType>表示标记扩展 (<xref:System.Xaml.XamlType.IsMarkupExtension%2A>是`true`)。</xref:System.Xaml.XamlType.IsMarkupExtension%2A> </xref:System.Xaml.XamlType>       输入`parameterCount`不适用于请求特定的位置参数的类型。 它可用于指定 arity 的标记扩展用法。 通常，标记扩展用法有多个签名，并使用不同的参数 arity （计数） 的位置参数来区分。 但是，你可以配置架构上下文，以允许重复 arities 和使用差异的类型的位置参数。 有关详细信息，请参阅<xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A> 特定 arity count 的参数位置和类型而异。 若要获取的位置的一种特定 arity 的标记扩展用法，请先调用<xref:System.Xaml.XamlType.GetPositionalParameters%2A>arity 计数。</xref:System.Xaml.XamlType.GetPositionalParameters%2A> 然后从返回的集合，该位置获取项。"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlType> LookupPositionalParameters (int parameterCount);
    parameters:
    - id: parameterCount
      type: System.Int32
      description: "你要获取其信息的特定语法或构造函数模式计数 (arity)。"
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "一份<xref href=&quot;System.Xaml.XamlType&quot;></xref>值每个此类<xref href=&quot;System.Xaml.XamlType&quot;></xref>是语法中的此位置的类型。 提供为标记扩展的标记输入时，必须以相同的顺序指定这些类型。"
  overload: System.Xaml.XamlType.LookupPositionalParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  id: LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回要用于标记扩展的 set 操作的处理程序回调。"
  remarks: "默认实现返回基于读取<xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果没有可用的值，它将返回`null`。"
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs> LookupSetMarkupExtensionHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
      description: "要用于标记扩展的 set 操作处理程序回调。"
  overload: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  id: LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回要用于类型转换器设置情况的处理程序。"
  remarks: "默认实现返回基于读取<xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</xref:System.Windows.Markup.XamlSetTypeConverterAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果没有可用的值，它将返回`null`。"
  syntax:
    content: protected virtual EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs> LookupSetTypeConverterHandler ();
    parameters: []
    return:
      type: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
      description: "要用于类型转换器设置情况的处理程序。"
  overload: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  id: LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>应使用一种模式，修整周围的空白序列化。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>调用此方法       默认实现返回基于读取<xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果没有可用的值，它将返回`false`。"
  syntax:
    content: protected virtual bool LookupTrimSurroundingWhitespace ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>修整周围的空白的模式下序列化; 否则为应为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;具有<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>约束，用于表示此值的类型转换行为<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.TypeConverter%2A>.</xref:System.Xaml.XamlType.TypeConverter%2A>调用此方法       默认实现返回基于读取<xref:System.ComponentModel.TypeConverterAttribute>.</xref:System.ComponentModel.TypeConverterAttribute>的值 默认实现还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 它还包括了特殊逻辑，默认转换的枚举，常用的值类型和泛型。 如果没有可用的值，它将返回`null`。       重写此方法，如果你想<xref:System.Xaml.XamlType.TypeConverter%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.TypeConverter%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>表示此值的类型转换行为的约束<xref href=&quot;System.Xaml.XamlType&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUnderlyingType
  id: LookupUnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回 CLR<xref:System.Type>为这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Type>"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.UnderlyingType%2A>.</xref:System.Xaml.XamlType.UnderlyingType%2A>调用此方法       默认实现返回一个内部字段。 该字段通常已初始化在构造过程中，并且其值基于已调用的构造函数和你提供的信息。       重写此方法，如果你想<xref:System.Xaml.XamlType.UnderlyingType%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.UnderlyingType%2A>"
  syntax:
    content: protected virtual Type LookupUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: "CLR<xref:System.Type>为这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Type>"
  overload: System.Xaml.XamlType.LookupUnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  id: LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>自上而下生成 XAML 初始化期间。"
  remarks: "自上而下的是在创建对象图时对与 XAML 处理器行为相近的比喻。 生成时的上下的类型实例化，附加到父级，并设置其属性。 自上而下构造可避免调用多次的属性更改处理程序。 这种处理波及对象图因此，消除了多个处理程序调用并提供为启动一个性能优化选项的对象图。       可以通过调用<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>调用此方法       默认实现返回基于读取<xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</xref:System.Windows.Markup.UsableDuringInitializationAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 如果没有可用的值，它将返回`false`。       重写此方法，如果你想<xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>"
  syntax:
    content: protected virtual bool LookupUsableDuringInitialization ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>自上而下的 XAML 初始化过程中; 否则为生成<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.LookupUsableDuringInitialization*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;具有<xref:System.Windows.Markup.ValueSerializer>约束，用于表示此值的值序列化行为<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "可以通过调用<xref:System.Xaml.XamlType.ValueSerializer%2A>.</xref:System.Xaml.XamlType.ValueSerializer%2A>调用此方法       默认实现返回基于读取<xref:System.Windows.Markup.ValueSerializerAttribute>.</xref:System.Windows.Markup.ValueSerializerAttribute>的值 它还可以检查<xref:System.Xaml.XamlType.BaseType%2A>如果无特性包含在紧挨的基础类型的属性。</xref:System.Xaml.XamlType.BaseType%2A> 它还包括了特殊逻辑，默认序列化的枚举、 常用的值类型或泛型。 如果没有可用的值，它将返回`null`。       重写此方法，如果你想<xref:System.Xaml.XamlType.ValueSerializer%2A>若要使用不同的逻辑。</xref:System.Xaml.XamlType.ValueSerializer%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref:System.Windows.Markup.ValueSerializer>表示此值的值序列化行为的约束<xref href=&quot;System.Xaml.XamlType&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  id: MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，提供针对返回了类型信息<xref uid=&quot;langword_csharp_ProvideValue&quot; name=&quot;ProvideValue&quot; href=&quot;&quot;></xref>此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>，如果它表示标记扩展。"
  remarks: "此属性才是相关，如果此<xref:System.Xaml.XamlType>表示标记扩展 (`x:MarkupExtension`是可赋值的类型列表中)。</xref:System.Xaml.XamlType>       如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>在此类型上。</xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A>"
  syntax:
    content: public System.Xaml.XamlType MarkupExtensionReturnType { get; }
    return:
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;> </xref>对象的返回类型的标记扩展用法; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示标记扩展。"
  overload: System.Xaml.XamlType.MarkupExtensionReturnType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.Name
  id: Name
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取类型的字符串名称，这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示。"
  remarks: "此属性通常获取的架构构造的名称 (每个<xref:System.Xaml.XamlType.%23ctor%2A>签名)，或名称<xref:System.Type>，如果它通过使用 CLR 类型系统的相关构造函数构造。</xref:System.Type> </xref:System.Xaml.XamlType.%23ctor%2A>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "此 XAML 类型的字符串名称。"
  overload: System.Xaml.XamlType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "确定是否两个指定<xref href=&quot;System.Xaml.XamlType&quot;></xref>对象具有相同的值。"
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlType1 </code>的值相同<code> xamlType2 </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  id: op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "确定是否两个指定<xref href=&quot;System.Xaml.XamlType&quot;></xref>对象具有不同的值。"
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);
    parameters:
    - id: xamlType1
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlType2
      type: System.Xaml.XamlType
      description: "A <xref href=&quot;System.Xaml.XamlType&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlType1 </code>的值不同<code> xamlType2 </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取为此主的 XAML 命名空间的单个 XAML 命名空间<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "这种实现提供相同的值调用<xref:System.Xaml.XamlType.GetXamlNamespaces%2A>，然后从返回的可枚举集合中获取的第一个值字符串。</xref:System.Xaml.XamlType.GetXamlNamespaces%2A>"
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "为字符串，此 XAML 类型的主 XAML 命名空间标识符。"
  overload: System.Xaml.XamlType.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取活动<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>用于处理此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "<xref:System.Xaml.XamlSchemaContext>构造一种<xref:System.Xaml.XamlType>。</xref:System.Xaml.XamlType>时是必需的参数项</xref:System.Xaml.XamlSchemaContext>"
  syntax:
    content: public System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "活动<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>用于处理此<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ToString
  id: ToString
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的字符串表示形式这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "<xref:System.Xaml.XamlType><xref:System.Object.ToString%2A>返回<xref:System.Xaml.XamlType.Name%2A>的<xref:System.Xaml.XamlType>。</xref:System.Xaml.XamlType>属性</xref:System.Xaml.XamlType.Name%2A></xref:System.Object.ToString%2A>实现</xref:System.Xaml.XamlType>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字符串表示形式这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  id: TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlType&quot;></xref>已处理的修剪中其内容周围的空格的序列化的行为空白。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>在此类型上。</xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A>"
  syntax:
    content: public bool TrimSurroundingWhitespace { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示使用空格的类型在修剪; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlType.TrimSurroundingWhitespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeArguments
  id: TypeArguments
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取类型参数的情况下列表其中这<xref href=&quot;System.Xaml.XamlType&quot;></xref>表示泛型。"
  remarks: "有的某些方案<xref:System.Xaml.XamlType>其中调用 TypeArguments 参数返回列表的类型是仍处于打开状态。</xref:System.Xaml.XamlType> 在这种情况下，一个或多个返回<xref:System.Xaml.XamlType>值将具有占位符值<xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName>，如`T`，用于表示泛型是否仍处于打开状态。</xref:System.Xaml.XamlType.Name%2A?displayProperty=fullName> </xref:System.Xaml.XamlType> 如果你获取，则会发生这种情况下<xref:System.Xaml.XamlType>调用<xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>，而不是从 XAML 读取器实现。</xref:System.Xaml.XamlSchemaContext.GetXamlType%2A> </xref:System.Xaml.XamlType>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlType> TypeArguments { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlType}
      description: "类型自变量类型; 的列表否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果此<xref href=&quot;System.Xaml.XamlType&quot;></xref>不表示泛型。"
  overload: System.Xaml.XamlType.TypeArguments*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>约束表示类型转换行为，此值<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupTypeConverter%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupTypeConverter%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupTypeConverter%2A>在此类型上。</xref:System.Xaml.XamlType.LookupTypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>约束表示类型转换行为，此值<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。"
  overload: System.Xaml.XamlType.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.UnderlyingType
  id: UnderlyingType
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取 CLR<xref:System.Type>为这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Type>"
  syntax:
    content: public Type UnderlyingType { get; }
    return:
      type: System.Type
      description: "CLR<xref:System.Type>为这<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Type>"
  overload: System.Xaml.XamlType.UnderlyingType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlType.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlType
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref:System.Windows.Markup.ValueSerializer>表示此值的值序列化行为的约束<xref href=&quot;System.Xaml.XamlType&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  remarks: "如果不使用的默认内部 CLR 反射技术<xref:System.Xaml.XamlType>，此属性的调用会<xref:System.Xaml.XamlType.LookupValueSerializer%2A>上重写<xref:System.Xaml.XamlType>派生类。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlType.LookupValueSerializer%2A> </xref:System.Xaml.XamlType> 有关返回值和其他行为的详细信息，请参阅的文档<xref:System.Xaml.XamlType.LookupValueSerializer%2A>在此类型上。</xref:System.Xaml.XamlType.LookupValueSerializer%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref:System.Windows.Markup.ValueSerializer>表示此值的值序列化行为的约束<xref href=&quot;System.Xaml.XamlType&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlType.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,IList<XamlType>,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IList{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlType>
  nameWithType: IList<XamlType>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  nameWithType: XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
  fullName: System.Xaml.XamlType.XamlType(Type,XamlSchemaContext,XamlTypeInvoker)
- uid: System.Xaml.Schema.XamlTypeInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeInvoker
  nameWithType: XamlTypeInvoker
  fullName: System.Xaml.Schema.XamlTypeInvoker
- uid: System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  nameWithType: XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
  fullName: System.Xaml.XamlType.XamlType(String,String,IList<XamlType>,XamlSchemaContext)
- uid: System.Xaml.XamlType.AllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
  fullName: System.Xaml.XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
  fullName: System.Xaml.XamlType.BaseType
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo(XamlType)
  nameWithType: XamlType.CanAssignTo(XamlType)
  fullName: System.Xaml.XamlType.CanAssignTo(XamlType)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlType.ConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
  fullName: System.Xaml.XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
  fullName: System.Xaml.XamlType.ContentProperty
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlType.ContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
  fullName: System.Xaml.XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
  fullName: System.Xaml.XamlType.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Equals(System.Object)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlType.Equals(Object)
  fullName: System.Xaml.XamlType.Equals(Object)
- uid: System.Xaml.XamlType.Equals(System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals(XamlType)
  nameWithType: XamlType.Equals(XamlType)
  fullName: System.Xaml.XamlType.Equals(XamlType)
- uid: System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty(XamlDirective)
  nameWithType: XamlType.GetAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.GetAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlType.GetAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers()
  nameWithType: XamlType.GetAllAttachableMembers()
  fullName: System.Xaml.XamlType.GetAllAttachableMembers()
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlMember>
  nameWithType: ICollection<XamlMember>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.GetAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers()
  nameWithType: XamlType.GetAllMembers()
  fullName: System.Xaml.XamlType.GetAllMembers()
- uid: System.Xaml.XamlType.GetAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember(String)
  nameWithType: XamlType.GetAttachableMember(String)
  fullName: System.Xaml.XamlType.GetAttachableMember(String)
- uid: System.Xaml.XamlType.GetHashCode
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlType.GetHashCode()
  fullName: System.Xaml.XamlType.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlType.GetMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember(String)
  nameWithType: XamlType.GetMember(String)
  fullName: System.Xaml.XamlType.GetMember(String)
- uid: System.Xaml.XamlType.GetPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters(Int32)
  nameWithType: XamlType.GetPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.GetPositionalParameters(Int32)
- uid: System.Xaml.XamlType.GetXamlNamespaces
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlType.GetXamlNamespaces()
  fullName: System.Xaml.XamlType.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.Invoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
  fullName: System.Xaml.XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
  fullName: System.Xaml.XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
  fullName: System.Xaml.XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
  fullName: System.Xaml.XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
  fullName: System.Xaml.XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
  fullName: System.Xaml.XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
  fullName: System.Xaml.XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
  fullName: System.Xaml.XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
  fullName: System.Xaml.XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
  fullName: System.Xaml.XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
  fullName: System.Xaml.XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
  fullName: System.Xaml.XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
  fullName: System.Xaml.XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
  fullName: System.Xaml.XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
  fullName: System.Xaml.XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
  fullName: System.Xaml.XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
  fullName: System.Xaml.XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
  fullName: System.Xaml.XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty(XamlDirective)
  nameWithType: XamlType.LookupAliasedProperty(XamlDirective)
  fullName: System.Xaml.XamlType.LookupAliasedProperty(XamlDirective)
- uid: System.Xaml.XamlType.LookupAllAttachableMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers()
  nameWithType: XamlType.LookupAllAttachableMembers()
  fullName: System.Xaml.XamlType.LookupAllAttachableMembers()
- uid: System.Collections.Generic.IEnumerable{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<XamlMember>
  nameWithType: IEnumerable<XamlMember>
  fullName: System.Collections.Generic.IEnumerable<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupAllMembers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers()
  nameWithType: XamlType.LookupAllMembers()
  fullName: System.Xaml.XamlType.LookupAllMembers()
- uid: System.Xaml.XamlType.LookupAllowedContentTypes
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes()
  nameWithType: XamlType.LookupAllowedContentTypes()
  fullName: System.Xaml.XamlType.LookupAllowedContentTypes()
- uid: System.Xaml.XamlType.LookupAttachableMember(System.String)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember(String)
  nameWithType: XamlType.LookupAttachableMember(String)
  fullName: System.Xaml.XamlType.LookupAttachableMember(String)
- uid: System.Xaml.XamlType.LookupBaseType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType()
  nameWithType: XamlType.LookupBaseType()
  fullName: System.Xaml.XamlType.LookupBaseType()
- uid: System.Xaml.XamlType.LookupCollectionKind
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind()
  nameWithType: XamlType.LookupCollectionKind()
  fullName: System.Xaml.XamlType.LookupCollectionKind()
- uid: System.Xaml.Schema.XamlCollectionKind
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlCollectionKind
  nameWithType: XamlCollectionKind
  fullName: System.Xaml.Schema.XamlCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments()
  nameWithType: XamlType.LookupConstructionRequiresArguments()
  fullName: System.Xaml.XamlType.LookupConstructionRequiresArguments()
- uid: System.Xaml.XamlType.LookupContentProperty
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty()
  nameWithType: XamlType.LookupContentProperty()
  fullName: System.Xaml.XamlType.LookupContentProperty()
- uid: System.Xaml.XamlType.LookupContentWrappers
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers()
  nameWithType: XamlType.LookupContentWrappers()
  fullName: System.Xaml.XamlType.LookupContentWrappers()
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlType.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlType.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlType.LookupDeferringLoader()
  fullName: System.Xaml.XamlType.LookupDeferringLoader()
- uid: System.Xaml.XamlType.LookupInvoker
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlType.LookupInvoker()
  fullName: System.Xaml.XamlType.LookupInvoker()
- uid: System.Xaml.XamlType.LookupIsAmbient
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlType.LookupIsAmbient()
  fullName: System.Xaml.XamlType.LookupIsAmbient()
- uid: System.Xaml.XamlType.LookupIsConstructible
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible()
  nameWithType: XamlType.LookupIsConstructible()
  fullName: System.Xaml.XamlType.LookupIsConstructible()
- uid: System.Xaml.XamlType.LookupIsMarkupExtension
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension()
  nameWithType: XamlType.LookupIsMarkupExtension()
  fullName: System.Xaml.XamlType.LookupIsMarkupExtension()
- uid: System.Xaml.XamlType.LookupIsNameScope
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope()
  nameWithType: XamlType.LookupIsNameScope()
  fullName: System.Xaml.XamlType.LookupIsNameScope()
- uid: System.Xaml.XamlType.LookupIsNullable
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable()
  nameWithType: XamlType.LookupIsNullable()
  fullName: System.Xaml.XamlType.LookupIsNullable()
- uid: System.Xaml.XamlType.LookupIsPublic
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic()
  nameWithType: XamlType.LookupIsPublic()
  fullName: System.Xaml.XamlType.LookupIsPublic()
- uid: System.Xaml.XamlType.LookupIsUnknown
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlType.LookupIsUnknown()
  fullName: System.Xaml.XamlType.LookupIsUnknown()
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection()
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection()
  fullName: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection()
- uid: System.Xaml.XamlType.LookupIsXData
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData()
  nameWithType: XamlType.LookupIsXData()
  fullName: System.Xaml.XamlType.LookupIsXData()
- uid: System.Xaml.XamlType.LookupItemType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType()
  nameWithType: XamlType.LookupItemType()
  fullName: System.Xaml.XamlType.LookupItemType()
- uid: System.Xaml.XamlType.LookupKeyType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType()
  nameWithType: XamlType.LookupKeyType()
  fullName: System.Xaml.XamlType.LookupKeyType()
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType()
  nameWithType: XamlType.LookupMarkupExtensionReturnType()
  fullName: System.Xaml.XamlType.LookupMarkupExtensionReturnType()
- uid: System.Xaml.XamlType.LookupMember(System.String,System.Boolean)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember(String,Boolean)
  nameWithType: XamlType.LookupMember(String,Boolean)
  fullName: System.Xaml.XamlType.LookupMember(String,Boolean)
- uid: System.Xaml.XamlType.LookupPositionalParameters(System.Int32)
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters(Int32)
  nameWithType: XamlType.LookupPositionalParameters(Int32)
  fullName: System.Xaml.XamlType.LookupPositionalParameters(Int32)
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler()
  nameWithType: XamlType.LookupSetMarkupExtensionHandler()
  fullName: System.Xaml.XamlType.LookupSetMarkupExtensionHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetMarkupExtensionEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetMarkupExtensionEventArgs>
  nameWithType: EventHandler<XamlSetMarkupExtensionEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetMarkupExtensionEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetMarkupExtensionEventArgs
    name: XamlSetMarkupExtensionEventArgs
    nameWithType: XamlSetMarkupExtensionEventArgs
    fullName: XamlSetMarkupExtensionEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler()
  nameWithType: XamlType.LookupSetTypeConverterHandler()
  fullName: System.Xaml.XamlType.LookupSetTypeConverterHandler()
- uid: System.EventHandler{System.Windows.Markup.XamlSetTypeConverterEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<XamlSetTypeConverterEventArgs>
  nameWithType: EventHandler<XamlSetTypeConverterEventArgs>
  fullName: System.EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Markup.XamlSetTypeConverterEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.XamlSetTypeConverterEventArgs
    name: XamlSetTypeConverterEventArgs
    nameWithType: XamlSetTypeConverterEventArgs
    fullName: XamlSetTypeConverterEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace()
  nameWithType: XamlType.LookupTrimSurroundingWhitespace()
  fullName: System.Xaml.XamlType.LookupTrimSurroundingWhitespace()
- uid: System.Xaml.XamlType.LookupTypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlType.LookupTypeConverter()
  fullName: System.Xaml.XamlType.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.LookupUnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType()
  nameWithType: XamlType.LookupUnderlyingType()
  fullName: System.Xaml.XamlType.LookupUnderlyingType()
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization()
  nameWithType: XamlType.LookupUsableDuringInitialization()
  fullName: System.Xaml.XamlType.LookupUsableDuringInitialization()
- uid: System.Xaml.XamlType.LookupValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlType.LookupValueSerializer()
  fullName: System.Xaml.XamlType.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlType.MarkupExtensionReturnType
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
  fullName: System.Xaml.XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
  fullName: System.Xaml.XamlType.Name
- uid: System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality(XamlType,XamlType)
  nameWithType: XamlType.op_Equality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Equality(XamlType,XamlType)
- uid: System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality(XamlType,XamlType)
  nameWithType: XamlType.op_Inequality(XamlType,XamlType)
  fullName: System.Xaml.XamlType.op_Inequality(XamlType,XamlType)
- uid: System.Xaml.XamlType.PreferredXamlNamespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
  fullName: System.Xaml.XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
  fullName: System.Xaml.XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString()
  nameWithType: XamlType.ToString()
  fullName: System.Xaml.XamlType.ToString()
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
  fullName: System.Xaml.XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
  fullName: System.Xaml.XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
  fullName: System.Xaml.XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
  fullName: System.Xaml.XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
  fullName: System.Xaml.XamlType.ValueSerializer
- uid: System.Xaml.XamlType.#ctor*
  parent: System.Xaml.XamlType
  isExternal: false
  name: XamlType
  nameWithType: XamlType.XamlType
- uid: System.Xaml.XamlType.AllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: AllowedContentTypes
  nameWithType: XamlType.AllowedContentTypes
- uid: System.Xaml.XamlType.BaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: BaseType
  nameWithType: XamlType.BaseType
- uid: System.Xaml.XamlType.CanAssignTo*
  parent: System.Xaml.XamlType
  isExternal: false
  name: CanAssignTo
  nameWithType: XamlType.CanAssignTo
- uid: System.Xaml.XamlType.ConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ConstructionRequiresArguments
  nameWithType: XamlType.ConstructionRequiresArguments
- uid: System.Xaml.XamlType.ContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentProperty
  nameWithType: XamlType.ContentProperty
- uid: System.Xaml.XamlType.ContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ContentWrappers
  nameWithType: XamlType.ContentWrappers
- uid: System.Xaml.XamlType.DeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlType.DeferringLoader
- uid: System.Xaml.XamlType.Equals*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Equals
  nameWithType: XamlType.Equals
- uid: System.Xaml.XamlType.GetAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAliasedProperty
  nameWithType: XamlType.GetAliasedProperty
- uid: System.Xaml.XamlType.GetAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllAttachableMembers
  nameWithType: XamlType.GetAllAttachableMembers
- uid: System.Xaml.XamlType.GetAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAllMembers
  nameWithType: XamlType.GetAllMembers
- uid: System.Xaml.XamlType.GetAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetAttachableMember
  nameWithType: XamlType.GetAttachableMember
- uid: System.Xaml.XamlType.GetHashCode*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetHashCode
  nameWithType: XamlType.GetHashCode
- uid: System.Xaml.XamlType.GetMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetMember
  nameWithType: XamlType.GetMember
- uid: System.Xaml.XamlType.GetPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetPositionalParameters
  nameWithType: XamlType.GetPositionalParameters
- uid: System.Xaml.XamlType.GetXamlNamespaces*
  parent: System.Xaml.XamlType
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlType.GetXamlNamespaces
- uid: System.Xaml.XamlType.Invoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Invoker
  nameWithType: XamlType.Invoker
- uid: System.Xaml.XamlType.IsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsAmbient
  nameWithType: XamlType.IsAmbient
- uid: System.Xaml.XamlType.IsArray*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsArray
  nameWithType: XamlType.IsArray
- uid: System.Xaml.XamlType.IsCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsCollection
  nameWithType: XamlType.IsCollection
- uid: System.Xaml.XamlType.IsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsConstructible
  nameWithType: XamlType.IsConstructible
- uid: System.Xaml.XamlType.IsDictionary*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsDictionary
  nameWithType: XamlType.IsDictionary
- uid: System.Xaml.XamlType.IsGeneric*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsGeneric
  nameWithType: XamlType.IsGeneric
- uid: System.Xaml.XamlType.IsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsMarkupExtension
  nameWithType: XamlType.IsMarkupExtension
- uid: System.Xaml.XamlType.IsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameScope
  nameWithType: XamlType.IsNameScope
- uid: System.Xaml.XamlType.IsNameValid*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNameValid
  nameWithType: XamlType.IsNameValid
- uid: System.Xaml.XamlType.IsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsNullable
  nameWithType: XamlType.IsNullable
- uid: System.Xaml.XamlType.IsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsPublic
  nameWithType: XamlType.IsPublic
- uid: System.Xaml.XamlType.IsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUnknown
  nameWithType: XamlType.IsUnknown
- uid: System.Xaml.XamlType.IsUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsUsableDuringInitialization
  nameWithType: XamlType.IsUsableDuringInitialization
- uid: System.Xaml.XamlType.IsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsWhitespaceSignificantCollection
  nameWithType: XamlType.IsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.IsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: IsXData
  nameWithType: XamlType.IsXData
- uid: System.Xaml.XamlType.ItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ItemType
  nameWithType: XamlType.ItemType
- uid: System.Xaml.XamlType.KeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: KeyType
  nameWithType: XamlType.KeyType
- uid: System.Xaml.XamlType.LookupAliasedProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAliasedProperty
  nameWithType: XamlType.LookupAliasedProperty
- uid: System.Xaml.XamlType.LookupAllAttachableMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllAttachableMembers
  nameWithType: XamlType.LookupAllAttachableMembers
- uid: System.Xaml.XamlType.LookupAllMembers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllMembers
  nameWithType: XamlType.LookupAllMembers
- uid: System.Xaml.XamlType.LookupAllowedContentTypes*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAllowedContentTypes
  nameWithType: XamlType.LookupAllowedContentTypes
- uid: System.Xaml.XamlType.LookupAttachableMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupAttachableMember
  nameWithType: XamlType.LookupAttachableMember
- uid: System.Xaml.XamlType.LookupBaseType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupBaseType
  nameWithType: XamlType.LookupBaseType
- uid: System.Xaml.XamlType.LookupCollectionKind*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCollectionKind
  nameWithType: XamlType.LookupCollectionKind
- uid: System.Xaml.XamlType.LookupConstructionRequiresArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupConstructionRequiresArguments
  nameWithType: XamlType.LookupConstructionRequiresArguments
- uid: System.Xaml.XamlType.LookupContentProperty*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentProperty
  nameWithType: XamlType.LookupContentProperty
- uid: System.Xaml.XamlType.LookupContentWrappers*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupContentWrappers
  nameWithType: XamlType.LookupContentWrappers
- uid: System.Xaml.XamlType.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlType.LookupCustomAttributeProvider
- uid: System.Xaml.XamlType.LookupDeferringLoader*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlType.LookupDeferringLoader
- uid: System.Xaml.XamlType.LookupInvoker*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlType.LookupInvoker
- uid: System.Xaml.XamlType.LookupIsAmbient*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlType.LookupIsAmbient
- uid: System.Xaml.XamlType.LookupIsConstructible*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsConstructible
  nameWithType: XamlType.LookupIsConstructible
- uid: System.Xaml.XamlType.LookupIsMarkupExtension*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsMarkupExtension
  nameWithType: XamlType.LookupIsMarkupExtension
- uid: System.Xaml.XamlType.LookupIsNameScope*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNameScope
  nameWithType: XamlType.LookupIsNameScope
- uid: System.Xaml.XamlType.LookupIsNullable*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsNullable
  nameWithType: XamlType.LookupIsNullable
- uid: System.Xaml.XamlType.LookupIsPublic*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsPublic
  nameWithType: XamlType.LookupIsPublic
- uid: System.Xaml.XamlType.LookupIsUnknown*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlType.LookupIsUnknown
- uid: System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsWhitespaceSignificantCollection
  nameWithType: XamlType.LookupIsWhitespaceSignificantCollection
- uid: System.Xaml.XamlType.LookupIsXData*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupIsXData
  nameWithType: XamlType.LookupIsXData
- uid: System.Xaml.XamlType.LookupItemType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupItemType
  nameWithType: XamlType.LookupItemType
- uid: System.Xaml.XamlType.LookupKeyType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupKeyType
  nameWithType: XamlType.LookupKeyType
- uid: System.Xaml.XamlType.LookupMarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMarkupExtensionReturnType
  nameWithType: XamlType.LookupMarkupExtensionReturnType
- uid: System.Xaml.XamlType.LookupMember*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupMember
  nameWithType: XamlType.LookupMember
- uid: System.Xaml.XamlType.LookupPositionalParameters*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupPositionalParameters
  nameWithType: XamlType.LookupPositionalParameters
- uid: System.Xaml.XamlType.LookupSetMarkupExtensionHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetMarkupExtensionHandler
  nameWithType: XamlType.LookupSetMarkupExtensionHandler
- uid: System.Xaml.XamlType.LookupSetTypeConverterHandler*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupSetTypeConverterHandler
  nameWithType: XamlType.LookupSetTypeConverterHandler
- uid: System.Xaml.XamlType.LookupTrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTrimSurroundingWhitespace
  nameWithType: XamlType.LookupTrimSurroundingWhitespace
- uid: System.Xaml.XamlType.LookupTypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlType.LookupTypeConverter
- uid: System.Xaml.XamlType.LookupUnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUnderlyingType
  nameWithType: XamlType.LookupUnderlyingType
- uid: System.Xaml.XamlType.LookupUsableDuringInitialization*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupUsableDuringInitialization
  nameWithType: XamlType.LookupUsableDuringInitialization
- uid: System.Xaml.XamlType.LookupValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlType.LookupValueSerializer
- uid: System.Xaml.XamlType.MarkupExtensionReturnType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: MarkupExtensionReturnType
  nameWithType: XamlType.MarkupExtensionReturnType
- uid: System.Xaml.XamlType.Name*
  parent: System.Xaml.XamlType
  isExternal: false
  name: Name
  nameWithType: XamlType.Name
- uid: System.Xaml.XamlType.op_Equality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Equality
  nameWithType: XamlType.op_Equality
- uid: System.Xaml.XamlType.op_Inequality*
  parent: System.Xaml.XamlType
  isExternal: false
  name: op_Inequality
  nameWithType: XamlType.op_Inequality
- uid: System.Xaml.XamlType.PreferredXamlNamespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlType.PreferredXamlNamespace
- uid: System.Xaml.XamlType.SchemaContext*
  parent: System.Xaml.XamlType
  isExternal: false
  name: SchemaContext
  nameWithType: XamlType.SchemaContext
- uid: System.Xaml.XamlType.ToString*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ToString
  nameWithType: XamlType.ToString
- uid: System.Xaml.XamlType.TrimSurroundingWhitespace*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TrimSurroundingWhitespace
  nameWithType: XamlType.TrimSurroundingWhitespace
- uid: System.Xaml.XamlType.TypeArguments*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeArguments
  nameWithType: XamlType.TypeArguments
- uid: System.Xaml.XamlType.TypeConverter*
  parent: System.Xaml.XamlType
  isExternal: false
  name: TypeConverter
  nameWithType: XamlType.TypeConverter
- uid: System.Xaml.XamlType.UnderlyingType*
  parent: System.Xaml.XamlType
  isExternal: false
  name: UnderlyingType
  nameWithType: XamlType.UnderlyingType
- uid: System.Xaml.XamlType.ValueSerializer*
  parent: System.Xaml.XamlType
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlType.ValueSerializer
