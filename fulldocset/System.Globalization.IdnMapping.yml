### YamlMime:ManagedReference
items:
- uid: System.Globalization.IdnMapping
  id: IdnMapping
  children:
  - System.Globalization.IdnMapping.#ctor
  - System.Globalization.IdnMapping.AllowUnassigned
  - System.Globalization.IdnMapping.Equals(System.Object)
  - System.Globalization.IdnMapping.GetAscii(System.String)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.GetHashCode
  - System.Globalization.IdnMapping.GetUnicode(System.String)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  - System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  - System.Globalization.IdnMapping.UseStd3AsciiRules
  langs:
  - csharp
  name: IdnMapping
  nameWithType: IdnMapping
  fullName: System.Globalization.IdnMapping
  type: Class
  summary: "支持 Internet 域名使用非 ASCII 字符。 此类不能被继承。"
  remarks: "Internet 域名包含称为域名标签，由标签分隔符分隔的一个或多个部分。 例如，域名称&quot;www.proseware.com&quot;组成标签、&quot;www&quot;、&quot;proseware&quot;和&quot;com&quot;，用句点分隔。 标准域名包含 US ASCII （或基本拉丁文） 字符范围，从 U +&0021; 到 U +&007;E 内的指定字符。 为了便于在不使用 US ASCII 字符集，国际化域名在应用程序 (IDNA) 的区域性的 Internet 使用标准已采用 2003 来支持包含 US-ASCII 字符范围外的 Unicode 字符。 但是，名称服务器和域名解析继续依赖于 US-ASCII 字符范围内的字符。       IDNA 机制使用 Punycode 映射国际化的域名包含对支持的域名系统的 US-ASCII 字符范围 US-ASCII 字符范围外的 Unicode 字符。 IDNA 机制用于将转换仅域名称，不在 Internet 上传输的数据。      1> [!IMPORTANT] 1> 中[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]，IdnMapping 类支持不同版本的 IDNA 标准，具体取决于正在使用的操作系统: >>-当在上运行[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，它支持通过概述 IDNA 标准的 2008年版[RFC 5891︰ 国际化域名在应用程序 (IDNA): 协议](http://go.microsoft.com/fwlink/?LinkId=231875)。   1>-当在早期版本的 Windows 操作系统上运行，它支持通过所述的标准 2003年版本[RFC 3490︰ 国际化域名在应用程序 (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110)。   >> 请参阅[Unicode 标准的技术 #46: IDNA 兼容性处理](http://go.microsoft.com/fwlink/?LinkId=232459)方式的差异对于这些标准处理某一组字符。       <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName>方法标准化域名，将转换为包含可显示 Unicode 的表示形式的规范化的名称 US ASCII 码位范围 (U +&0020; 到 U +&007;E)，个字符，并且将添加前的 ASCII 兼容编码 (ACE) 前缀 (&quot;xn-&quot;) 为每个标签。</xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName> <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName>方法还原转换由域名标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。</xref:System.Globalization.IdnMapping.GetAscii%2A> </xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName>       如果要转换的字符串包含标签分隔符字符字句 (U +&3002;)，全角句号 (U + FF0E) 和形字句 (U + FF61)<xref:System.Globalization.IdnMapping.GetAscii%2A>方法将其转换为标签分隔符句号 (时间段，U +&002;E)。</xref:System.Globalization.IdnMapping.GetAscii%2A> <xref:System.Globalization.IdnMapping.GetUnicode%2A>方法，但是，不会还原原始标签分隔符字符。</xref:System.Globalization.IdnMapping.GetUnicode%2A>"
  example:
  - "The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to convert an array of internationalized domain names to Punycode. The <xref:System.Globalization.IdnMapping.GetUnicode%2A> method then converts the Punycode domain name back to the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.i_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/t-system.globalization.i_1.cs)]"
  syntax:
    content: public sealed class IdnMapping
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.#ctor
  id: '#ctor'
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: IdnMapping()
  nameWithType: IdnMapping.IdnMapping()
  fullName: System.Globalization.IdnMapping.IdnMapping()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新实例<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>类。"
  remarks: "<xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName>属性初始化为`false`。</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName> </xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName> 一小部分的 ASCII 字符，而不是 A-Z、 0-9、 连字符 （-） 字符 (U + 002D)，和的句点 （.） 字符允许在域的名称，但未分配的 Unicode 码位不是。"
  syntax:
    content: public IdnMapping ();
    parameters: []
  overload: System.Globalization.IdnMapping.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.AllowUnassigned
  id: AllowUnassigned
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
  fullName: System.Globalization.IdnMapping.AllowUnassigned
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取或设置一个值，该值指示是否由当前的成员所执行操作中使用，未分配的 Unicode 码位<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>对象。"
  remarks: "已注册的域名不能包含未分配的码位。 因此，AllowUnassigned 属性的默认值是`false`。 IDNA 规范对匹配字符串的查询中仅允许未分配的代码点 (即，在域的名称查找)。 有关使用域名中的未分配的代码点的详细信息，请参阅[RFC 3454，&quot;准备 Internationalized 字符串 (stringprep) 的&quot;](http://go.microsoft.com/fwlink/?LinkId=231873)和[RFC 5891、&quot;国际化域名名称在应用程序 (IDNA):: 协议&quot;](http://go.microsoft.com/fwlink/?LinkId=231875)。      1> [!IMPORTANT]&1;> 如果 theAllowUnassigned 属性为`false`，与属性关联的行为取决于基础操作系统。 上[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]、<xref:System.Globalization.IdnMapping>类符合基于 Unicode 6.0 标准的 IDNA 2008。</xref:System.Globalization.IdnMapping> 在以前版本的 Windows，<xref:System.Globalization.IdnMapping>类是否基于 IDNA 2003，基于 Unicode 3。*x*.</xref:System.Globalization.IdnMapping> 已在 IDNA 2003 未分配某些代码点已经分配字符，IDNA 2008 支持。 例如，U + 0221 Unicode 4.0 中引入。 上[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，编码为&quot;xn-6la&quot;。 在以前版本的 Windows，则会引发<xref:System.ArgumentException>异常。</xref:System.ArgumentException>"
  syntax:
    content: public bool AllowUnassigned { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在操作; 使用未分配的代码点否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.IdnMapping.AllowUnassigned*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: IdnMapping.Equals(Object)
  fullName: System.Globalization.IdnMapping.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指示是否指定的对象和当前<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>对象是否相等。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与当前对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的对象<code> obj </code>参数派生自<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>及其<> *1> 和<> *1> 属性是相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.IdnMapping.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String)
  id: GetAscii(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String)
  nameWithType: IdnMapping.GetAscii(String)
  fullName: System.Globalization.IdnMapping.GetAscii(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "域名标签的为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串的 Unicode 字符组成的字符串进行编码。 根据标准 IDNA 情况下，字符串进行格式设置。"
  remarks: "`unicode`参数指定有效的 Unicode 字符组成的一个或多个标签的字符串。 标签分隔符分隔的标签。 `unicode`参数不能以开头标签分隔符，但它可以包括和 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U +&002;E)、 表意完全停止 (U +&3002;)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称&quot;www.adatum.com&quot;组成标签、&quot;www&quot;、&quot;adatum&quot;和&quot;com&quot;，用句点分隔。       标签不能包含任何以下字符:-从 U +&0001; 年 U +&001;F 和 U +&007;F Unicode 控制字符。      -如果分配 Unicode 字符的值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性是`false`。</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>      -非标准字符中 US-ASCII 字符范围，如空间 (U +&0020;)，感叹号标记 (U +&0021;)，如果低行 (U +&005;F) 字符的值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性是`true`。</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>      -禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454︰ 准备的国际化字符串 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和应用程序的国际化域名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。       <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U +&002;E)。</xref:System.Globalization.IdnMapping.GetAscii%2A>       如果`unicode`不包含字符之外 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。"
  example:
  - "The following example uses the GetAscii method to convert an array of internationalized domain names to Punycode, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_0_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_0_1.cs)]"
  syntax:
    content: public string GetAscii (string unicode);
    parameters:
    - id: unicode
      type: System.String
      description: "要转换的字符串，其中包括一个或多个标签分隔符分隔的域名标签。"
    return:
      type: System.String
      description: "指定的字符串的等效项<code> unicode </code>参数，包含可显示 Unicode 字符在 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 并 IDNA 标准格式。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  id: GetAscii(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "将编码域名标签包含 US-ASCII 字符范围外的 Unicode 字符子的字符串。 子字符串转换为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串，并根据 IDNA 标准格式。"
  remarks: "`unicode`和`index`参数定义的有效 Unicode 字符组成的一个或多个标签的子字符串。 标签分隔符分隔的标签。 子字符串的第一个字符不能以开头标签分隔符，但它可以包括并 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U +&002;E)、 表意完全停止 (U +&3002;)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称&quot;www.adatum.com&quot;组成标签、&quot;www&quot;、&quot;adatum&quot;和&quot;com&quot;，用句点分隔。       标签不能包含任何以下字符:-从 U +&0001; 年 U +&001;F 和 U +&007;F Unicode 控制字符。      -未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>      -非标准字符中 US-ASCII 字符范围，如空间 (U +&0020;)，感叹号标记 (U +&0021;)，和低行 (U +&005;F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>      -禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454︰ 准备的国际化字符串 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和应用程序的国际化域名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。       <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U +&002;E)。</xref:System.Globalization.IdnMapping.GetAscii%2A>       如果`unicode`不包含字符之外 US-ASCII 字符范围和 US-ASCII 字符范围内的任何字符禁止的该方法返回`unicode`不变。"
  example:
  - "The following example removes the local part and the @ character from an email address, and passes the resulting domain name to the GetAscii method to create a Punycode domain name, which is an encoded equivalent that consists of characters in the US-ASCII character range. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-cs[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/csharp/m-system.globalization.i_3_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/add/codesnippet/visualbasic/m-system.globalization.i_3_1.vb)]"
  syntax:
    content: public string GetAscii (string unicode, int index);
    parameters:
    - id: unicode
      type: System.String
      description: "要转换的字符串，其中包括一个或多个标签分隔符分隔的域名标签。"
    - id: index
      type: System.Int32
      description: "从零开始的偏移量`unicode`，它指定要转换的子字符串的开头。 转换操作将继续到末尾`unicode`字符串。"
    return:
      type: System.String
      description: "指定的子字符串的等效项<code> unicode </code>和<code> index </code>参数包含可显示 Unicode 字符在 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 和根据 IDNA 标准格式。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。       -<code>index</code>大于的长度<code>unicode</code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  id: GetAscii(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetAscii(String,Int32,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "将编码的指定的域名标签包含 US-ASCII 字符范围外的 Unicode 字符的子字符串中的字符数。 子字符串转换为 US-ASCII 字符范围中的可显示 Unicode 字符的字符串，并根据 IDNA 标准格式。"
  remarks: "`Unicode`， `index`，和`count`参数定义的有效 Unicode 字符组成的一个或多个标签的子字符串。 标签分隔符分隔的标签。 子字符串的第一个字符不能以开头标签分隔符，但它可以包括并 （可选） 以分隔符结尾。 标签分隔符是句号 (时间段，U +&002;E)、 表意完全停止 (U +&3002;)，全角句号 (U + FF0E) 和形字句 (U + FF61)。 例如，域名称&quot;www.adatum.com&quot;组成标签、&quot;www&quot;、&quot;adatum&quot;和&quot;com&quot;，用句点分隔。       标签不能包含任何以下字符:-从 U +&0001; 年 U +&001;F 和 U +&007;F Unicode 控制字符。      -未分配的 Unicode 字符，具体取决于值<xref:System.Globalization.IdnMapping.AllowUnassigned%2A>属性。</xref:System.Globalization.IdnMapping.AllowUnassigned%2A>      -非标准字符中 US-ASCII 字符范围，如空间 (U +&0020;)，感叹号标记 (U +&0021;)，和低行 (U +&005;F) 字符，具体取决于值<xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>属性。</xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A>      -禁止的 IDNA 标准的特定版本的字符。 有关禁用的字符的详细信息，请参阅[RFC 3454︰ 准备的国际化字符串 (&quot;stringprep&quot;)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 和[RFC 5982: Unicode 码位和应用程序的国际化域名](http://go.microsoft.com/fwlink/?LinkId=231877)IDNA 2008。       <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符都转换为句号 (时间段，U +&002;E)。</xref:System.Globalization.IdnMapping.GetAscii%2A> 如果子字符串不包含字符 US-ASCII 字符范围外的并且不禁止 US-ASCII 字符范围内的任何字符，该方法返回未更改的子字符串。"
  example:
  - "The following example uses the GetAscii method to convert an internationalized domain name to a domain name that complies with the IDNA standard. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the standardized domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[IdnMapping.GetX#1](~/add/codesnippet/visualbasic/9eb31a8b-c677-4c73-81bb-_1.vb)]\n [!code-cs[IdnMapping.GetX#1](~/add/codesnippet/csharp/9eb31a8b-c677-4c73-81bb-_1.cs)]"
  syntax:
    content: public string GetAscii (string unicode, int index, int count);
    parameters:
    - id: unicode
      type: System.String
      description: "要转换的字符串，其中包括一个或多个标签分隔符分隔的域名标签。"
    - id: index
      type: System.Int32
      description: "从零开始的偏移量`unicode`，它指定子字符串的开头。"
    - id: count
      type: System.Int32
      description: "要从指定位置开始的子字符串将转换的字符数`index`中`unicode`字符串。"
    return:
      type: System.String
      description: "指定的子字符串的等效项<code> unicode </code>， <code> index </code>，和<code> count </code>参数包含可显示 Unicode 字符在 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 和根据 IDNA 标准格式。"
  overload: System.Globalization.IdnMapping.GetAscii*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unicode</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小于零。       -<code>index</code>大于的长度<code>unicode</code>。       -<code>index</code>大于的长度<code>unicode</code>减<code>count</code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>unicode</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetHashCode
  id: GetHashCode
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: IdnMapping.GetHashCode()
  fullName: System.Globalization.IdnMapping.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回此哈希代码<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>对象。"
  remarks: "如果你的应用程序需要实现的有意义的哈希代码算法，重写 GetHashCode 方法。"
  example:
  - "The following example assumes that a single string can contain multiple email addresses separated by spaces. It removes the local part and the @ character from each email address, and passes the resulting domain name to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> or <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> method to create a Punycode domain name. The <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> method then converts the Punycode domain name back into the original domain name.  \n  \n [!code-cs[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/csharp/m-system.globalization.i_2_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/add/codesnippet/visualbasic/m-system.globalization.i_2_1.vb)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "四个 32 位有符号常量之一派生自的属性<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>对象。  返回的值没有特殊含义，并且不适合在哈希代码算法中使用。"
  overload: System.Globalization.IdnMapping.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String)
  id: GetUnicode(System.String)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String)
  nameWithType: IdnMapping.GetUnicode(String)
  fullName: System.Globalization.IdnMapping.GetUnicode(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "对一个或多个编码的域名标签，根据 IDNA 标准，为 Unicode 字符的字符串的字符串进行解码。"
  remarks: "有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>方法。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  example:
  - "The following example uses the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method to convert an array of internationalized domain names to Punycode. The GetUnicode method then converts the Punycode domain name back into the original domain name, but replaces the original label separators with the standard label separator.  \n  \n [!code-vb[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/visualbasic/m-system.globalization.i_1_1.vb)]\n [!code-cs[System.Globalization.IdnMapping.Class#1](~/add/codesnippet/csharp/m-system.globalization.i_1_1.cs)]"
  syntax:
    content: public string GetUnicode (string ascii);
    parameters:
    - id: ascii
      type: System.String
      description: "要解码的字符串，其中包括根据 IDNA 标准编码 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 中的一个或多个标签。"
    return:
      type: System.String
      description: "指定的 IDNA 子字符串的 Unicode 等效项<code> ascii </code>参数。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  id: GetUnicode(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "对一个或多个编码的域名标签，根据 IDNA 标准，为 Unicode 字符的字符串的子字符串进行解码。"
  remarks: "有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>方法。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  syntax:
    content: public string GetUnicode (string ascii, int index);
    parameters:
    - id: ascii
      type: System.String
      description: "要解码的字符串，其中包括根据 IDNA 标准编码 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 中的一个或多个标签。"
    - id: index
      type: System.Int32
      description: "从零开始的偏移量`ascii`，它指定要解码的子字符串的开头。 在解码操作一直到末尾`ascii`字符串。"
    return:
      type: System.String
      description: "指定的 IDNA 子字符串的 Unicode 等效项<code> ascii </code>和<code> index </code>参数。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。       -<code>index</code>大于的长度<code>ascii</code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  id: GetUnicode(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: GetUnicode(String,Int32,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "对包含一个或多个编码的域名标签，根据 IDNA 标准，为 Unicode 字符的字符串的指定长度的子字符串进行解码。"
  remarks: "有关域名、 标签和标签分隔符的详细信息，请参阅备注<xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>方法。</xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName>"
  syntax:
    content: public string GetUnicode (string ascii, int index, int count);
    parameters:
    - id: ascii
      type: System.String
      description: "要解码的字符串，其中包括根据 IDNA 标准编码 US-ASCII 字符范围 (U +&0020; 到 U +&007;E) 中的一个或多个标签。"
    - id: index
      type: System.Int32
      description: "从零开始的偏移量`ascii`，它指定子字符串的开头。"
    - id: count
      type: System.Int32
      description: "要从指定位置开始的子字符串将转换的字符数`index`中`ascii`字符串。"
    return:
      type: System.String
      description: "指定的 IDNA 子字符串的 Unicode 等效项<code> ascii </code>， <code> index </code>，和<code> count </code>参数。"
  overload: System.Globalization.IdnMapping.GetUnicode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>ascii</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小于零。       -<code>index</code>大于的长度<code>ascii</code>。       -<code>index</code>大于的长度<code>ascii</code>减<code>count</code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ascii</code>无效基于<xref:System.Globalization.IdnMapping.AllowUnassigned*>和<xref:System.Globalization.IdnMapping.UseStd3AsciiRules*>属性和 IDNA 标准。"
  platform:
  - net462
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules
  id: UseStd3AsciiRules
  parent: System.Globalization.IdnMapping
  langs:
  - csharp
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取或设置一个值，该值指示是否在由当前的成员执行的操作中使用标准或宽松命名约定<xref href=&quot;System.Globalization.IdnMapping&quot;></xref>对象。"
  remarks: "遵循标准的命名规则的域名包含 US-ASCII 字符范围内的字符的特定子集。 字符都是字母 A 到 Z、 0 到 9 的数字、 连字符 （-） 字符 (U + 002D) 和的句点 （.） 字符。 字符的大小写并不重要。 宽松的命名约定允许使用更广泛的 ASCII 字符，包括空格字符 (U +&0020;)、 感叹号字符 (U +&0021;)，和底线字符 (U +&005;F)。 如果 UseStd3AsciiRules `true`，只有标准字符可以出现在返回的标签<xref:System.Globalization.IdnMapping.GetAscii%2A>方法。</xref:System.Globalization.IdnMapping.GetAscii%2A>       默认情况下，UseStd3AsciiRules 属性的值是`false`，并且在标签中允许扩展的 ASCII 字符的子集。      1> [!NOTE]&1;><xref:System.Globalization.IdnMapping>类禁止使用不可字符 U +&0000; 到 U +&001;F，和 U +&007;F 在域名标签而不考虑 UseStd3AsciiRules 属性的设置。</xref:System.Globalization.IdnMapping> 此禁止减少了例如名称欺骗安全攻击的风险。"
  example:
  - "The following example generates URLs that contain characters in the ASCII range from U+0000 to U+007F and passes them to the <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> method of two <xref:System.Globalization.IdnMapping> objects. One object has its UseStd3AsciiRules property set to `true`, and the other object has it set to `false`. The output displays the characters that are invalid when the UseStd3AsciiRules property is `true` but valid when it is `false`.  \n  \n [!code-cs[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/csharp/p-system.globalization.i_1.cs)]\n [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/add/codesnippet/visualbasic/p-system.globalization.i_1.vb)]"
  syntax:
    content: public bool UseStd3AsciiRules { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果操作; 在使用了标准命名约定否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.IdnMapping.UseStd3AsciiRules*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Globalization.IdnMapping.#ctor
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: IdnMapping()
  nameWithType: IdnMapping.IdnMapping()
  fullName: System.Globalization.IdnMapping.IdnMapping()
- uid: System.Globalization.IdnMapping.AllowUnassigned
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
  fullName: System.Globalization.IdnMapping.AllowUnassigned
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.IdnMapping.Equals(System.Object)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: Equals(Object)
  nameWithType: IdnMapping.Equals(Object)
  fullName: System.Globalization.IdnMapping.Equals(Object)
- uid: System.Globalization.IdnMapping.GetAscii(System.String)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String)
  nameWithType: IdnMapping.GetAscii(String)
  fullName: System.Globalization.IdnMapping.GetAscii(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii(String,Int32,Int32)
  nameWithType: IdnMapping.GetAscii(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetAscii(String,Int32,Int32)
- uid: System.Globalization.IdnMapping.GetHashCode
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetHashCode()
  nameWithType: IdnMapping.GetHashCode()
  fullName: System.Globalization.IdnMapping.GetHashCode()
- uid: System.Globalization.IdnMapping.GetUnicode(System.String)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String)
  nameWithType: IdnMapping.GetUnicode(String)
  fullName: System.Globalization.IdnMapping.GetUnicode(String)
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32)
- uid: System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode(String,Int32,Int32)
  nameWithType: IdnMapping.GetUnicode(String,Int32,Int32)
  fullName: System.Globalization.IdnMapping.GetUnicode(String,Int32,Int32)
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
  fullName: System.Globalization.IdnMapping.UseStd3AsciiRules
- uid: System.Globalization.IdnMapping.#ctor*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: IdnMapping
  nameWithType: IdnMapping.IdnMapping
- uid: System.Globalization.IdnMapping.AllowUnassigned*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: AllowUnassigned
  nameWithType: IdnMapping.AllowUnassigned
- uid: System.Globalization.IdnMapping.Equals*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: Equals
  nameWithType: IdnMapping.Equals
- uid: System.Globalization.IdnMapping.GetAscii*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetAscii
  nameWithType: IdnMapping.GetAscii
- uid: System.Globalization.IdnMapping.GetHashCode*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetHashCode
  nameWithType: IdnMapping.GetHashCode
- uid: System.Globalization.IdnMapping.GetUnicode*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: GetUnicode
  nameWithType: IdnMapping.GetUnicode
- uid: System.Globalization.IdnMapping.UseStd3AsciiRules*
  parent: System.Globalization.IdnMapping
  isExternal: false
  name: UseStd3AsciiRules
  nameWithType: IdnMapping.UseStd3AsciiRules
