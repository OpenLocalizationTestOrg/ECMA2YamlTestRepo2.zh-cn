### YamlMime:ManagedReference
items:
- uid: System.Configuration.RegexStringValidator
  id: RegexStringValidator
  children:
  - System.Configuration.RegexStringValidator.#ctor(System.String)
  - System.Configuration.RegexStringValidator.CanValidate(System.Type)
  - System.Configuration.RegexStringValidator.Validate(System.Object)
  langs:
  - csharp
  name: RegexStringValidator
  nameWithType: RegexStringValidator
  fullName: System.Configuration.RegexStringValidator
  type: Class
  summary: "对根据提供的正则表达式的规则对字符串进行验证。"
  remarks: "RegexStringValidator 对象包含验证基于正则表达式的字符串对象所需的规则。 规则是创建 RegexStringValidator 类的实例时建立的。       <xref:System.Configuration.RegexStringValidator.CanValidate%2A>方法确定正在验证的对象类型是否与预期的类型匹配。</xref:System.Configuration.RegexStringValidator.CanValidate%2A> 正在验证该对象被传递的参数<xref:System.Configuration.RegexStringValidator.Validate%2A>方法。</xref:System.Configuration.RegexStringValidator.Validate%2A>"
  example:
  - "The following code example demonstrates how to use the RegexStringValidator type.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#1](~/add/codesnippet/visualbasic/t-system.configuration.r_0_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#1](~/add/codesnippet/csharp/t-system.configuration.r_0_1.cs)]"
  syntax:
    content: 'public class RegexStringValidator : System.Configuration.ConfigurationValidatorBase'
  inheritance:
  - System.Object
  - System.Configuration.ConfigurationValidatorBase
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: RegexStringValidator(String)
  nameWithType: RegexStringValidator.RegexStringValidator(String)
  fullName: System.Configuration.RegexStringValidator.RegexStringValidator(String)
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "初始化的新实例<xref href=&quot;System.Configuration.RegexStringValidator&quot;></xref>类。"
  syntax:
    content: public RegexStringValidator (string regex);
    parameters:
    - id: regex
      type: System.String
      description: "一个字符串，指定正则表达式。"
  overload: System.Configuration.RegexStringValidator.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>regex</code>为 null 或空字符串 (&quot;&quot;)。"
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.CanValidate(System.Type)
  id: CanValidate(System.Type)
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: CanValidate(Type)
  nameWithType: RegexStringValidator.CanValidate(Type)
  fullName: System.Configuration.RegexStringValidator.CanValidate(Type)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "确定是否可以验证的对象类型。"
  remarks: "如果验证失败，将引发异常。"
  example:
  - "The following example demonstrates how to use the CanValidate method. This code example is part of a larger example that is provided for the <xref:System.Configuration.RegexStringValidator> class.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#3](~/add/codesnippet/visualbasic/m-system.configuration.r_2_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#3](~/add/codesnippet/csharp/m-system.configuration.r_2_1.cs)]"
  syntax:
    content: public override bool CanValidate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "对象的类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> type </code>参数匹配的字符串; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.RegexStringValidator.CanValidate*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.RegexStringValidator.Validate(System.Object)
  id: Validate(System.Object)
  parent: System.Configuration.RegexStringValidator
  langs:
  - csharp
  name: Validate(Object)
  nameWithType: RegexStringValidator.Validate(Object)
  fullName: System.Configuration.RegexStringValidator.Validate(Object)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration
  summary: "确定对象的值是否有效。"
  remarks: "A<xref:System.Configuration.RegexStringValidator>对象包含验证基于正则表达式的字符串对象所需的规则。</xref:System.Configuration.RegexStringValidator> 实例时，规则建立<xref:System.Configuration.RegexStringValidator>创建类。</xref:System.Configuration.RegexStringValidator> 要验证的字符串对象作为验证方法的一个参数传递。"
  example:
  - "The following code example demonstrates how to use the Validate method. This code example is part of a larger example provided for the <xref:System.Configuration.RegexStringValidator> class.  \n  \n [!code-vb[System.Configuration.RegexStringValidator#4](~/add/codesnippet/visualbasic/m-system.configuration.r_1_1.vb)]\n [!code-cs[System.Configuration.RegexStringValidator#4](~/add/codesnippet/csharp/m-system.configuration.r_1_1.cs)]"
  syntax:
    content: public override void Validate (object value);
    parameters:
    - id: value
      type: System.Object
      description: "对象的值。"
  overload: System.Configuration.RegexStringValidator.Validate*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>value</code>不符合的参数<xref:System.Text.RegularExpressions.Regex>类。"
  platform:
  - net462
references:
- uid: System.Configuration.ConfigurationValidatorBase
  isExternal: false
  name: System.Configuration.ConfigurationValidatorBase
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.RegexStringValidator.#ctor(System.String)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: RegexStringValidator(String)
  nameWithType: RegexStringValidator.RegexStringValidator(String)
  fullName: System.Configuration.RegexStringValidator.RegexStringValidator(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.RegexStringValidator.CanValidate(System.Type)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: CanValidate(Type)
  nameWithType: RegexStringValidator.CanValidate(Type)
  fullName: System.Configuration.RegexStringValidator.CanValidate(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Configuration.RegexStringValidator.Validate(System.Object)
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: Validate(Object)
  nameWithType: RegexStringValidator.Validate(Object)
  fullName: System.Configuration.RegexStringValidator.Validate(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Configuration.RegexStringValidator.#ctor*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: RegexStringValidator
  nameWithType: RegexStringValidator.RegexStringValidator
- uid: System.Configuration.RegexStringValidator.CanValidate*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: CanValidate
  nameWithType: RegexStringValidator.CanValidate
- uid: System.Configuration.RegexStringValidator.Validate*
  parent: System.Configuration.RegexStringValidator
  isExternal: false
  name: Validate
  nameWithType: RegexStringValidator.Validate
